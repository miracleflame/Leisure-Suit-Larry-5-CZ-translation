(script 660)

(string
    string_30b0 "rm660"
    string_30b6 "sEntersRoom"
    string_30c2 "sWalkIn"
    string_30ca "sReverseReminds"
    string_30da "sUsesSynth"
    string_30e5 "sReturnFromSynth"
    string_30f6 "A Tip from AL"
    string_3104 "sSession"
    string_310d "sMonitorRecording"
    string_311f "sAutoKeys"
    string_3129 "sEndSession"
    string_3135 "sEnterBooth"
    string_3141 "sStopMusic"
    string_314c "sDrunkReverse"
    string_315a "sTalkScript"
    string_3166 "sDoSex"
    string_316d "the door"
    string_3176 "This door leads to the control booth--and Reverse Biaz."
    string_31ae "door"
    string_31b3 "Reverse Biaz"
    string_31c0 "Reverse Biaz is the man the F.B.I. linked to backwards subliminal message recording at this studio. But he does looks cute."
    string_323c "reverseBiaz"
    string_3248 "giveTape"
    string_3251 "the control room mixer"
    string_3268 "panelExtender"
    string_3276 "the tape reel"
    string_3284 "reelOne"
    string_328c "reelTwo"
    string_3294 "reelThree"
    string_329e "reelFour"
    string_32a7 "the VU meter"
    string_32b4 "This meter measures dynamic levels in decibels, each of which is about 1/10th of a bel."
    string_330c "vuMeter"
    string_3314 "the key"
    string_331c "synthKey"
    string_3325 "keyboard"
    string_332e "your synthesizer"
    string_333f "This is the synthesizer Reverse Biaz wants you to play."
    string_3377 "synth"
    string_337d "the music stands"
    string_338e "You see a bunch of music stands. Or is it a flock of music stands? Or is it a bevy of music stands? You always forget."
    string_3405 "musicStands"
    string_3411 "the control room"
    string_3422 "From his control room, Reverse can see the entire studio. He can speak to you through the soundproof glass via a talkback loudspeaker."
    string_34a9 "recordingBooth"
    string_34b8 "the overhead mike"
    string_34ca "You wonder how many evil recordings were done with this microphone."
    string_350e "overhangingMike"
    string_351e "the drum set"
    string_352b "As in most studios, the drum set is behind glass to enhance the separation of his sound from the other musicians."
    string_359d "drums"
    string_35a3 "the music"
    string_35ad "music"
    string_35b3 "the synthesizer control panel"
    string_35d1 "des Rever Records spared no expense programming this synthesizer for this session."
    string_3624 "synthPanel"
    string_362f "controlPanel"
    string_363c "the studio control panel"
    string_3655 "This panel contains many digital reverb and special effects units, power amplifiers, patch bays and a copy of last month's Playboy."
    string_36d9 "controlPanel2"
    string_36e7 "rewind"
    string_36ee "musicStop"
    string_36f8 "glassesClink"
    string_3705 "zing"
    string_370a "reverseBust"
    string_3716 "reverseEyes"
    string_3722 "reverseMouth"
    string_372f ""
)

(said
)

(local
    local0 = $0000
    local1 = $0001
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0000
    local6 = $0000
    local7 = $0000
    local8 = $0000
    local9 = $0000
    local10 = $0000
    local11 = $0002
    local12 = $0004
    local13 = $0005
    local14 = $0007
    local15 = $0009
    local16 = $000b
    local17 = $000c
    local18 = $000e
    local19 = $0010
    local20 = $0011
    local21 = $0013
    local22 = $0015
    local23 = $0017
    local24 = $0018
    local25 = $001a
    local26 = $001c
    local27 = $001d
)

// 0332
(instance publicrm660 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $294
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $280
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 6b            pushi 6b // $6b init
  0010:76               push0 
  0011:38 020a          pushi 20a // $20a normalize
  0014:78               push1 
  0015:38 023a          pushi 23a // $23a sel_570
  0018:81 00              lag  
  001a:4a 0a             send a 

  001c:76               push0 
  001d:45 03 00         callb procedure_0003 0 //  

  0020:89 0c              lsg  
  0022:3c                 dup 
  0023:63 20             pToa south 
  0025:1a                 eq? 
  0026:30 0035            bnt code_005e 
  0029:38 011c          pushi 11c // $11c posn
  002c:7a               push2 
  002d:38 0124          pushi 124 // $124 checkDetail
  0030:38 00fa          pushi fa // $fa outOfTouch
  0033:81 00              lag  
  0035:4a 08             send 8 

  0037:78               push1 
  0038:39 13            pushi 13 // $13 brTop
  003a:45 06 02         callb procedure_0006 2 //  

  003d:30 000f            bnt code_004f 
  0040:38 008e          pushi 8e // $8e setScript
  0043:78               push1 
  0044:72 051a          lofsa $051a // sWalkIn
  0047:36                push 
  0048:81 02              lag  
  004a:4a 06             send 6 

  004c:32 0020            jmp code_006f 

        code_004f
  004f:38 008e          pushi 8e // $8e setScript
  0052:78               push1 
  0053:72 048e          lofsa $048e // sEntersRoom
  0056:36                push 
  0057:81 02              lag  
  0059:4a 06             send 6 

  005b:32 0011            jmp code_006f 

        code_005e
  005e:38 011c          pushi 11c // $11c posn
  0061:7a               push2 
  0062:38 00a0          pushi a0 // $a0 mute
  0065:3c                 dup 
  0066:38 0146          pushi 146 // $146 edgeHit
  0069:78               push1 
  006a:76               push0 
  006b:81 00              lag  
  006d:4a 0e             send e 


        code_006f
  006f:3a                toss 
  0070:39 03            pushi 3 // $3 y
  0072:38 0081          pushi 81 // $81 handleEvent
  0075:38 029e          pushi 29e // $29e sel_670
  0078:78               push1 
  0079:46 03be 0000 06  calle 3be procedure_0000 6 //  

  007f:39 08            pushi 8 // $8 underBits
  0081:38 0080          pushi 80 // $80 indexOf
  0084:38 029e          pushi 29e // $29e sel_670
  0087:38 02a0          pushi 2a0 // $2a0 sel_672
  008a:38 02a1          pushi 2a1 // $2a1 sel_673
  008d:38 02a9          pushi 2a9 // $2a9 sel_681
  0090:38 02aa          pushi 2aa // $2aa sel_682
  0093:38 02ab          pushi 2ab // $2ab sel_683
  0096:38 0688          pushi 688 // $688 sel_1672
  0099:46 03be 0000 10  calle 3be procedure_0000 10 //  

  009f:39 07            pushi 7 // $7 cel
  00a1:38 0084          pushi 84 // $84 cycles
  00a4:38 0294          pushi 294 // $294 sel_660
  00a7:38 0295          pushi 295 // $295 sel_661
  00aa:38 0296          pushi 296 // $296 sel_662
  00ad:38 0297          pushi 297 // $297 sel_663
  00b0:38 0298          pushi 298 // $298 sel_664
  00b3:38 0299          pushi 299 // $299 sel_665
  00b6:46 03be 0000 0e  calle 3be procedure_0000 e //  

  00bc:39 6b            pushi 6b // $6b init
  00be:76               push0 
  00bf:57 72 04         super LLRoom 4 

  00c2:39 6b            pushi 6b // $6b init
  00c4:76               push0 
  00c5:72 1eea          lofsa $1eea // door
  00c8:4a 04             send 4 

  00ca:39 6b            pushi 6b // $6b init
  00cc:76               push0 
  00cd:72 206e          lofsa $206e // reverseBiaz
  00d0:4a 04             send 4 

  00d2:39 6b            pushi 6b // $6b init
  00d4:76               push0 
  00d5:38 0119          pushi 119 // $119 approachVerbs
  00d8:78               push1 
  00d9:39 03            pushi 3 // $3 y
  00db:72 2b16          lofsa $2b16 // synth
  00de:4a 0a             send a 

  00e0:39 6b            pushi 6b // $6b init
  00e2:76               push0 
  00e3:72 2b56          lofsa $2b56 // musicStands
  00e6:4a 04             send 4 

  00e8:39 6b            pushi 6b // $6b init
  00ea:76               push0 
  00eb:72 2b92          lofsa $2b92 // recordingBooth
  00ee:4a 04             send 4 

  00f0:39 6b            pushi 6b // $6b init
  00f2:76               push0 
  00f3:72 2bce          lofsa $2bce // overhangingMike
  00f6:4a 04             send 4 

  00f8:39 6b            pushi 6b // $6b init
  00fa:76               push0 
  00fb:72 2c0a          lofsa $2c0a // drums
  00fe:4a 04             send 4 

  0100:38 0176          pushi 176 // $176 addObstacle
  0103:39 04            pushi 4 // $4 x
  0105:39 22            pushi 22 // $22 type
  0107:78               push1 
  0108:7a               push2 
  0109:39 6b            pushi 6b // $6b init
  010b:39 42            pushi 42 // $42 setPri
  010d:76               push0 
  010e:76               push0 
  010f:38 013f          pushi 13f // $13f inputLineAddr
  0112:76               push0 
  0113:38 013f          pushi 13f // $13f inputLineAddr
  0116:38 00bd          pushi bd // $bd maskView
  0119:38 012d          pushi 12d // $12d observeControl
  011c:38 00bd          pushi bd // $bd maskView
  011f:38 012d          pushi 12d // $12d observeControl
  0122:38 00bb          pushi bb // $bb setCursor
  0125:38 013a          pushi 13a // $13a input
  0128:38 00bb          pushi bb // $bb setCursor
  012b:38 013a          pushi 13a // $13a input
  012e:38 00aa          pushi aa // $aa setSize
  0131:38 0124          pushi 124 // $124 checkDetail
  0134:38 009b          pushi 9b // $9b owner
  0137:38 012d          pushi 12d // $12d observeControl
  013a:38 0090          pushi 90 // $90 localize
  013d:38 0122          pushi 122 // $122 addToPic
  0140:38 008f          pushi 8f // $8f port
  0143:38 010d          pushi 10d // $10d noun
  0146:38 0090          pushi 90 // $90 localize
  0149:38 00f4          pushi f4 // $f4 nearestDist
  014c:38 008a          pushi 8a // $8a script
  014f:38 00ed          pushi ed // $ed canBeHere
  0152:38 0089          pushi 89 // $89 register
  0155:38 00e3          pushi e3 // $e3 onTarget
  0158:39 75            pushi 75 // $75 firstTrue
  015a:38 00e9          pushi e9 // $e9 finalY
  015d:39 68            pushi 68 // $68 restart
  015f:38 00f8          pushi f8 // $f8 targetY
  0162:39 68            pushi 68 // $68 restart
  0164:38 00fa          pushi fa // $fa outOfTouch
  0167:39 63            pushi 63 // $63 perform
  0169:38 00e6          pushi e6 // $e6 distanceTo
  016c:39 5d            pushi 5d // $5d handle
  016e:38 00c4          pushi c4 // $c4 onMe
  0171:39 6c            pushi 6c // $6c dispose
  0173:38 0084          pushi 84 // $84 cycles
  0176:39 5d            pushi 5d // $5d handle
  0178:39 7b            pushi 7b // $7b last
  017a:39 53            pushi 53 // $53 draw
  017c:39 51            pushi 51 // $51 button
  017e:39 53            pushi 53 // $53 draw
  0180:39 03            pushi 3 // $3 y
  0182:38 009a          pushi 9a // $9a prevSignal
  0185:39 03            pushi 3 // $3 y
  0187:38 00b0          pushi b0 // $b0 cycle
  018a:39 1e            pushi 1e // $1e mode
  018c:38 00b0          pushi b0 // $b0 cycle
  018f:39 34            pushi 34 // $34 b-xAxis
  0191:38 00a6          pushi a6 // $a6 playBed
  0194:39 56            pushi 56 // $56 parseLang
  0196:38 00af          pushi af // $af checkState
  0199:38 00be          pushi be // $be maskLoop
  019c:38 00bb          pushi bb // $bb setCursor
  019f:38 00cd          pushi cd // $cd oldMouseY
  01a2:38 00bb          pushi bb // $bb setCursor
  01a5:38 00f7          pushi f7 // $f7 targetX
  01a8:38 00ac          pushi ac // $ac moveTo
  01ab:38 0112          pushi 112 // $112 approachY
  01ae:38 00bb          pushi bb // $bb setCursor
  01b1:38 0112          pushi 112 // $112 approachY
  01b4:38 00bd          pushi bd // $bd maskView
  01b7:76               push0 
  01b8:38 00bd          pushi bd // $bd maskView
  01bb:39 72            pushi 72 // $72 yourself
  01bd:76               push0 
  01be:39 6a            pushi 6a // $6a new
  01c0:76               push0 
  01c1:51 23            class Polygon 
  01c3:4a 04             send 4 

  01c5:4a 92             send 92 

  01c7:36                push 
  01c8:39 22            pushi 22 // $22 type
  01ca:78               push1 
  01cb:7a               push2 
  01cc:39 6b            pushi 6b // $6b init
  01ce:39 10            pushi 10 // $10 lsRight
  01d0:39 4d            pushi 4d // $4d value
  01d2:39 6b            pushi 6b // $6b init
  01d4:39 67            pushi 67 // $67 quitGame
  01d6:39 6a            pushi 6a // $6a new
  01d8:39 70            pushi 70 // $70 isMemberOf
  01da:3c                 dup 
  01db:38 009a          pushi 9a // $9a prevSignal
  01de:39 70            pushi 70 // $70 isMemberOf
  01e0:38 009a          pushi 9a // $9a prevSignal
  01e3:39 77            pushi 77 // $77 contains
  01e5:39 72            pushi 72 // $72 yourself
  01e7:39 7a            pushi 7a // $7a release
  01e9:39 71            pushi 71 // $71 respondsTo
  01eb:38 008a          pushi 8a // $8a script
  01ee:39 41            pushi 41 // $41 replay
  01f0:38 008b          pushi 8b // $8b caller
  01f3:39 72            pushi 72 // $72 yourself
  01f5:76               push0 
  01f6:39 6a            pushi 6a // $6a new
  01f8:76               push0 
  01f9:51 23            class Polygon 
  01fb:4a 04             send 4 

  01fd:4a 2e             send 2e 

  01ff:36                push 
  0200:39 22            pushi 22 // $22 type
  0202:78               push1 
  0203:7a               push2 
  0204:39 6b            pushi 6b // $6b init
  0206:39 16            pushi 16 // $16 brRight
  0208:38 009a          pushi 9a // $9a prevSignal
  020b:38 008c          pushi 8c // $8c changeState
  020e:38 00a7          pushi a7 // $a7 enable
  0211:38 0083          pushi 83 // $83 timer
  0214:38 00df          pushi df // $df endCel
  0217:38 0082          pushi 82 // $82 start
  021a:38 00e9          pushi e9 // $e9 finalY
  021d:38 008e          pushi 8e // $8e setScript
  0220:38 0126          pushi 126 // $126 blocks
  0223:38 00a5          pushi a5 // $a5 clean
  0226:38 010c          pushi 10c // $10c doVerb
  0229:38 00b1          pushi b1 // $b1 advance
  022c:38 00da          pushi da // $da motionCue
  022f:38 009e          pushi 9e // $9e hold
  0232:38 00ce          pushi ce // $ce curIcon
  0235:38 00a1          pushi a1 // $a1 setVol
  0238:38 00bf          pushi bf // $bf maskCel
  023b:38 009f          pushi 9f // $9f fade
  023e:38 00b4          pushi b4 // $b4 busy
  0241:38 00a4          pushi a4 // $a4 check
  0244:38 00a5          pushi a5 // $a5 clean
  0247:38 009c          pushi 9c // $9c stop
  024a:39 72            pushi 72 // $72 yourself
  024c:76               push0 
  024d:39 6a            pushi 6a // $6a new
  024f:76               push0 
  0250:51 23            class Polygon 
  0252:4a 04             send 4 

  0254:4a 3a             send 3a 

  0256:36                push 
  0257:39 22            pushi 22 // $22 type
  0259:78               push1 
  025a:7a               push2 
  025b:39 6b            pushi 6b // $6b init
  025d:39 08            pushi 8 // $8 underBits
  025f:38 009f          pushi 9f // $9f fade
  0262:39 74            pushi 74 // $74 eachElementDo
  0264:38 00c4          pushi c4 // $c4 onMe
  0267:39 74            pushi 74 // $74 eachElementDo
  0269:38 00bc          pushi bc // $bc helpStr
  026c:38 0082          pushi 82 // $82 start
  026f:38 0095          pushi 95 // $95 set
  0272:38 0082          pushi 82 // $82 start
  0275:39 72            pushi 72 // $72 yourself
  0277:76               push0 
  0278:39 6a            pushi 6a // $6a new
  027a:76               push0 
  027b:51 23            class Polygon 
  027d:4a 04             send 4 

  027f:4a 1e             send 1e 

  0281:36                push 
  0282:81 02              lag  
  0284:4a 0c             send c 

  0286:48                 ret 
    )

    (method (dispose) // method_0300
  0300:39 78            pushi 78 // $78 isEmpty
  0302:76               push0 
  0303:72 2830          lofsa $2830 // keyboard
  0306:4a 04             send 4 

  0308:18                 not 
  0309:30 0008            bnt code_0314 
  030c:39 6c            pushi 6c // $6c dispose
  030e:76               push0 
  030f:72 2830          lofsa $2830 // keyboard
  0312:4a 04             send 4 


        code_0314
  0314:38 009f          pushi 9f // $9f fade
  0317:39 04            pushi 4 // $4 x
  0319:76               push0 
  031a:39 0f            pushi f // $f lsBottom
  031c:39 0c            pushi c // $c nsRight
  031e:78               push1 
  031f:81 67              lag  
  0321:4a 0c             send c 

  0323:39 6c            pushi 6c // $6c dispose
  0325:76               push0 
  0326:59 01            &rest 1 
  0328:57 72 04         super LLRoom 4 

  032b:48                 ret 
    )

    (method (doVerb) // method_0287
  0287:8f 01              lsp param1 
  0289:3c                 dup 
  028a:35 02              ldi 2 
  028c:1a                 eq? 
  028d:30 002f            bnt code_02bf 
  0290:67 24             pTos curPic 
  0292:34 029e            ldi 29e 
  0295:1a                 eq? 
  0296:30 001b            bnt code_02b4 
  0299:83 02              lal local2 
  029b:30 000b            bnt code_02a9 
  029e:7a               push2 
  029f:38 0294          pushi 294 // $294 sel_660
  02a2:76               push0 
  02a3:45 0e 04         callb procedure_000e 4 //  

  02a6:32 0055            jmp code_02fe 

        code_02a9
  02a9:7a               push2 
  02aa:38 0294          pushi 294 // $294 sel_660
  02ad:78               push1 
  02ae:45 0e 04         callb procedure_000e 4 //  

  02b1:32 004a            jmp code_02fe 

        code_02b4
  02b4:7a               push2 
  02b5:38 0294          pushi 294 // $294 sel_660
  02b8:7a               push2 
  02b9:45 0e 04         callb procedure_000e 4 //  

  02bc:32 003f            jmp code_02fe 

        code_02bf
  02bf:3c                 dup 
  02c0:35 03              ldi 3 
  02c2:1a                 eq? 
  02c3:30 002b            bnt code_02f1 
  02c6:67 24             pTos curPic 
  02c8:34 029e            ldi 29e 
  02cb:1a                 eq? 
  02cc:30 0012            bnt code_02e1 
  02cf:83 02              lal local2 
  02d1:18                 not 
  02d2:30 000c            bnt code_02e1 
  02d5:7a               push2 
  02d6:38 0294          pushi 294 // $294 sel_660
  02d9:39 03            pushi 3 // $3 y
  02db:45 0e 04         callb procedure_000e 4 //  

  02de:32 001d            jmp code_02fe 

        code_02e1
  02e1:38 010c          pushi 10c // $10c doVerb
  02e4:7a               push2 
  02e5:8f 01              lsp param1 
  02e7:8f 02              lsp param2 
  02e9:59 03            &rest 3 
  02eb:57 72 08         super LLRoom 8 

  02ee:32 000d            jmp code_02fe 

        code_02f1
  02f1:38 010c          pushi 10c // $10c doVerb
  02f4:7a               push2 
  02f5:8f 01              lsp param1 
  02f7:8f 02              lsp param2 
  02f9:59 03            &rest 3 
  02fb:57 72 08         super LLRoom 8 


        code_02fe
  02fe:3a                toss 
  02ff:48                 ret 
    )

)

// 0488
(instance sEntersRoom of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_037a
  037a:87 01              lap param1 
  037c:65 0a             aTop state 
  037e:36                push 
  037f:3c                 dup 
  0380:35 00              ldi 0 
  0382:1a                 eq? 
  0383:30 0011            bnt code_0397 
  0386:76               push0 
  0387:45 02 00         callb procedure_0002 0 //  

  038a:78               push1 
  038b:39 13            pushi 13 // $13 brTop
  038d:45 07 02         callb procedure_0007 2 //  

  0390:35 01              ldi 1 
  0392:65 10             aTop cycles 
  0394:32 00e9            jmp code_0480 

        code_0397
  0397:3c                 dup 
  0398:35 01              ldi 1 
  039a:1a                 eq? 
  039b:30 0016            bnt code_03b4 
  039e:38 011b          pushi 11b // $11b setMotion
  03a1:39 04            pushi 4 // $4 x
  03a3:51 1e            class MoveTo 
  03a5:36                push 
  03a6:38 0124          pushi 124 // $124 checkDetail
  03a9:38 00b6          pushi b6 // $b6 center
  03ac:7c            pushSelf 
  03ad:81 00              lag  
  03af:4a 0c             send c 

  03b1:32 00cc            jmp code_0480 

        code_03b4
  03b4:3c                 dup 
  03b5:35 02              ldi 2 
  03b7:1a                 eq? 
  03b8:30 0007            bnt code_03c2 
  03bb:35 02              ldi 2 
  03bd:65 12             aTop seconds 
  03bf:32 00be            jmp code_0480 

        code_03c2
  03c2:3c                 dup 
  03c3:35 03              ldi 3 
  03c5:1a                 eq? 
  03c6:30 0019            bnt code_03e2 
  03c9:7a               push2 
  03ca:38 0294          pushi 294 // $294 sel_660
  03cd:39 04            pushi 4 // $4 x
  03cf:45 0e 04         callb procedure_000e 4 //  

  03d2:7a               push2 
  03d3:38 0294          pushi 294 // $294 sel_660
  03d6:39 05            pushi 5 // $5 view
  03d8:45 0e 04         callb procedure_000e 4 //  

  03db:35 02              ldi 2 
  03dd:65 12             aTop seconds 
  03df:32 009e            jmp code_0480 

        code_03e2
  03e2:3c                 dup 
  03e3:35 04              ldi 4 
  03e5:1a                 eq? 
  03e6:30 0017            bnt code_0400 
  03e9:39 06            pushi 6 // $6 loop
  03eb:72 2f0a          lofsa $2f0a // Reverse Biaz
  03ee:36                push 
  03ef:38 0294          pushi 294 // $294 sel_660
  03f2:39 06            pushi 6 // $6 loop
  03f4:39 6c            pushi 6c // $6c dispose
  03f6:38 008b          pushi 8b // $8b caller
  03f9:7c            pushSelf 
  03fa:45 12 0c         callb procedure_0012 c //  

  03fd:32 0080            jmp code_0480 

        code_0400
  0400:3c                 dup 
  0401:35 05              ldi 5 
  0403:1a                 eq? 
  0404:30 000b            bnt code_0412 
  0407:76               push0 
  0408:45 03 00         callb procedure_0003 0 //  

  040b:35 03              ldi 3 
  040d:65 12             aTop seconds 
  040f:32 006e            jmp code_0480 

        code_0412
  0412:3c                 dup 
  0413:35 06              ldi 6 
  0415:1a                 eq? 
  0416:30 001b            bnt code_0434 
  0419:76               push0 
  041a:45 02 00         callb procedure_0002 0 //  

  041d:39 06            pushi 6 // $6 loop
  041f:72 2f0a          lofsa $2f0a // Reverse Biaz
  0422:36                push 
  0423:38 0294          pushi 294 // $294 sel_660
  0426:39 07            pushi 7 // $7 cel
  0428:39 6c            pushi 6c // $6c dispose
  042a:38 008b          pushi 8b // $8b caller
  042d:7c            pushSelf 
  042e:45 12 0c         callb procedure_0012 c //  

  0431:32 004c            jmp code_0480 

        code_0434
  0434:3c                 dup 
  0435:35 07              ldi 7 
  0437:1a                 eq? 
  0438:30 0023            bnt code_045e 
  043b:76               push0 
  043c:45 03 00         callb procedure_0003 0 //  

  043f:38 00a2          pushi a2 // $a2 setLoop
  0442:78               push1 
  0443:39 ff            pushi ff // $ff syncNum
  0445:81 00              lag  
  0447:4a 06             send 6 

  0449:38 0120          pushi 120 // $120 setCel
  044c:78               push1 
  044d:76               push0 
  044e:38 0096          pushi 96 // $96 setCycle
  0451:7a               push2 
  0452:51 1a            class End 
  0454:36                push 
  0455:7c            pushSelf 
  0456:72 206e          lofsa $206e // reverseBiaz
  0459:4a 0e             send e 

  045b:32 0022            jmp code_0480 

        code_045e
  045e:3c                 dup 
  045f:35 08              ldi 8 
  0461:1a                 eq? 
  0462:30 001b            bnt code_0480 
  0465:38 0120          pushi 120 // $120 setCel
  0468:78               push1 
  0469:76               push0 
  046a:72 206e          lofsa $206e // reverseBiaz
  046d:4a 06             send 6 

  046f:38 008e          pushi 8e // $8e setScript
  0472:78               push1 
  0473:72 059a          lofsa $059a // sReverseReminds
  0476:36                push 
  0477:81 00              lag  
  0479:4a 06             send 6 

  047b:39 6c            pushi 6c // $6c dispose
  047d:76               push0 
  047e:54 04             self 4 


        code_0480
  0480:3a                toss 
  0481:48                 ret 
    )

)

// 0514
(instance sWalkIn of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_04bc
  04bc:87 01              lap param1 
  04be:65 0a             aTop state 
  04c0:36                push 
  04c1:3c                 dup 
  04c2:35 00              ldi 0 
  04c4:1a                 eq? 
  04c5:30 000b            bnt code_04d3 
  04c8:76               push0 
  04c9:45 02 00         callb procedure_0002 0 //  

  04cc:35 01              ldi 1 
  04ce:65 10             aTop cycles 
  04d0:32 0039            jmp code_050c 

        code_04d3
  04d3:3c                 dup 
  04d4:35 01              ldi 1 
  04d6:1a                 eq? 
  04d7:30 0016            bnt code_04f0 
  04da:38 011b          pushi 11b // $11b setMotion
  04dd:39 04            pushi 4 // $4 x
  04df:51 1e            class MoveTo 
  04e1:36                push 
  04e2:38 0124          pushi 124 // $124 checkDetail
  04e5:38 00b6          pushi b6 // $b6 center
  04e8:7c            pushSelf 
  04e9:81 00              lag  
  04eb:4a 0c             send c 

  04ed:32 001c            jmp code_050c 

        code_04f0
  04f0:3c                 dup 
  04f1:35 02              ldi 2 
  04f3:1a                 eq? 
  04f4:30 0015            bnt code_050c 
  04f7:76               push0 
  04f8:45 03 00         callb procedure_0003 0 //  

  04fb:38 008e          pushi 8e // $8e setScript
  04fe:78               push1 
  04ff:72 059a          lofsa $059a // sReverseReminds
  0502:36                push 
  0503:81 00              lag  
  0505:4a 06             send 6 

  0507:39 6c            pushi 6c // $6c dispose
  0509:76               push0 
  050a:54 04             self 4 


        code_050c
  050c:3a                toss 
  050d:48                 ret 
    )

)

// 0594
(instance sReverseReminds of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0548
  0548:87 01              lap param1 
  054a:65 0a             aTop state 
  054c:36                push 
  054d:3c                 dup 
  054e:35 00              ldi 0 
  0550:1a                 eq? 
  0551:30 0007            bnt code_055b 
  0554:35 1e              ldi 1e 
  0556:65 12             aTop seconds 
  0558:32 0031            jmp code_058c 

        code_055b
  055b:3c                 dup 
  055c:35 01              ldi 1 
  055e:1a                 eq? 
  055f:30 001e            bnt code_0580 
  0562:67 0a             pTos state 
  0564:35 02              ldi 2 
  0566:04                 sub 
  0567:65 0a             aTop state 
  0569:39 06            pushi 6 // $6 loop
  056b:72 2f0a          lofsa $2f0a // Reverse Biaz
  056e:36                push 
  056f:38 0294          pushi 294 // $294 sel_660
  0572:39 08            pushi 8 // $8 underBits
  0574:39 6c            pushi 6c // $6c dispose
  0576:38 008b          pushi 8b // $8b caller
  0579:7c            pushSelf 
  057a:45 12 0c         callb procedure_0012 c //  

  057d:32 000c            jmp code_058c 

        code_0580
  0580:3c                 dup 
  0581:35 02              ldi 2 
  0583:1a                 eq? 
  0584:30 0005            bnt code_058c 
  0587:39 6c            pushi 6c // $6c dispose
  0589:76               push0 
  058a:54 04             self 4 


        code_058c
  058c:3a                toss 
  058d:48                 ret 
    )

)

// 06dc
(instance sUsesSynth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_05c8
  05c8:87 01              lap param1 
  05ca:65 0a             aTop state 
  05cc:36                push 
  05cd:3c                 dup 
  05ce:35 00              ldi 0 
  05d0:1a                 eq? 
  05d1:30 0015            bnt code_05e9 
  05d4:76               push0 
  05d5:45 02 00         callb procedure_0002 0 //  

  05d8:38 00e4          pushi e4 // $e4 setHeading
  05db:78               push1 
  05dc:39 5a            pushi 5a // $5a points
  05de:81 00              lag  
  05e0:4a 06             send 6 

  05e2:35 02              ldi 2 
  05e4:65 12             aTop seconds 
  05e6:32 00eb            jmp code_06d4 

        code_05e9
  05e9:3c                 dup 
  05ea:35 01              ldi 1 
  05ec:1a                 eq? 
  05ed:30 00cc            bnt code_06bc 
  05f0:39 74            pushi 74 // $74 eachElementDo
  05f2:78               push1 
  05f3:39 69            pushi 69 // $69 hide
  05f5:81 05              lag  
  05f7:4a 06             send 6 

  05f9:38 018c          pushi 18c // $18c drawPic
  05fc:78               push1 
  05fd:38 029e          pushi 29e // $29e sel_670
  0600:81 02              lag  
  0602:4a 06             send 6 

  0604:38 00c9          pushi c9 // $c9 disable
  0607:78               push1 
  0608:76               push0 
  0609:81 45              lag  
  060b:4a 06             send 6 

  060d:39 05            pushi 5 // $5 view
  060f:78               push1 
  0610:38 02a0          pushi 2a0 // $2a0 sel_672
  0613:38 00a2          pushi a2 // $a2 setLoop
  0616:78               push1 
  0617:76               push0 
  0618:38 0120          pushi 120 // $120 setCel
  061b:78               push1 
  061c:76               push0 
  061d:39 04            pushi 4 // $4 x
  061f:78               push1 
  0620:38 00cb          pushi cb // $cb height
  0623:39 03            pushi 3 // $3 y
  0625:78               push1 
  0626:39 48            pushi 48 // $48 syntaxFail
  0628:39 42            pushi 42 // $42 setPri
  062a:78               push1 
  062b:7a               push2 
  062c:38 00c2          pushi c2 // $c2 show
  062f:76               push0 
  0630:72 206e          lofsa $206e // reverseBiaz
  0633:4a 28             send 28 

  0635:39 6b            pushi 6b // $6b init
  0637:76               push0 
  0638:72 21fa          lofsa $21fa // reelOne
  063b:4a 04             send 4 

  063d:39 6b            pushi 6b // $6b init
  063f:76               push0 
  0640:72 2276          lofsa $2276 // reelTwo
  0643:4a 04             send 4 

  0645:39 6b            pushi 6b // $6b init
  0647:76               push0 
  0648:72 22f2          lofsa $22f2 // reelThree
  064b:4a 04             send 4 

  064d:39 6b            pushi 6b // $6b init
  064f:76               push0 
  0650:72 236e          lofsa $236e // reelFour
  0653:4a 04             send 4 

  0655:39 6b            pushi 6b // $6b init
  0657:76               push0 
  0658:72 23d8          lofsa $23d8 // vuMeter
  065b:4a 04             send 4 

  065d:39 6b            pushi 6b // $6b init
  065f:76               push0 
  0660:72 2830          lofsa $2830 // keyboard
  0663:4a 04             send 4 

  0665:39 6b            pushi 6b // $6b init
  0667:76               push0 
  0668:72 2ca4          lofsa $2ca4 // music
  066b:4a 04             send 4 

  066d:39 6b            pushi 6b // $6b init
  066f:76               push0 
  0670:72 2d1e          lofsa $2d1e // synthPanel
  0673:4a 04             send 4 

  0675:39 6b            pushi 6b // $6b init
  0677:76               push0 
  0678:72 214e          lofsa $214e // panelExtender
  067b:4a 04             send 4 

  067d:39 6b            pushi 6b // $6b init
  067f:76               push0 
  0680:72 2d9a          lofsa $2d9a // controlPanel
  0683:4a 04             send 4 

  0685:39 6b            pushi 6b // $6b init
  0687:76               push0 
  0688:72 2dda          lofsa $2dda // controlPanel2
  068b:4a 04             send 4 

  068d:39 6c            pushi 6c // $6c dispose
  068f:76               push0 
  0690:72 2b16          lofsa $2b16 // synth
  0693:4a 04             send 4 

  0695:39 6c            pushi 6c // $6c dispose
  0697:76               push0 
  0698:72 2b56          lofsa $2b56 // musicStands
  069b:4a 04             send 4 

  069d:39 6c            pushi 6c // $6c dispose
  069f:76               push0 
  06a0:72 2b92          lofsa $2b92 // recordingBooth
  06a3:4a 04             send 4 

  06a5:39 6c            pushi 6c // $6c dispose
  06a7:76               push0 
  06a8:72 2bce          lofsa $2bce // overhangingMike
  06ab:4a 04             send 4 

  06ad:39 6c            pushi 6c // $6c dispose
  06af:76               push0 
  06b0:72 2c0a          lofsa $2c0a // drums
  06b3:4a 04             send 4 

  06b5:35 02              ldi 2 
  06b7:65 10             aTop cycles 
  06b9:32 0018            jmp code_06d4 

        code_06bc
  06bc:3c                 dup 
  06bd:35 02              ldi 2 
  06bf:1a                 eq? 
  06c0:30 0011            bnt code_06d4 
  06c3:38 008e          pushi 8e // $8e setScript
  06c6:78               push1 
  06c7:72 0c9a          lofsa $0c9a // sSession
  06ca:36                push 
  06cb:81 00              lag  
  06cd:4a 06             send 6 

  06cf:39 6c            pushi 6c // $6c dispose
  06d1:76               push0 
  06d2:54 04             self 4 


        code_06d4
  06d4:3a                toss 
  06d5:48                 ret 
    )

)

// 07b4
(instance sReturnFromSynth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0710
  0710:87 01              lap param1 
  0712:65 0a             aTop state 
  0714:36                push 
  0715:3c                 dup 
  0716:35 00              ldi 0 
  0718:1a                 eq? 
  0719:30 0090            bnt code_07ac 
  071c:38 018c          pushi 18c // $18c drawPic
  071f:78               push1 
  0720:38 0183          pushi 183 // $183 picture
  0723:76               push0 
  0724:81 02              lag  
  0726:4a 04             send 4 

  0728:36                push 
  0729:81 02              lag  
  072b:4a 06             send 6 

  072d:39 74            pushi 74 // $74 eachElementDo
  072f:78               push1 
  0730:38 00c2          pushi c2 // $c2 show
  0733:81 05              lag  
  0735:4a 06             send 6 

  0737:39 69            pushi 69 // $69 hide
  0739:76               push0 
  073a:72 206e          lofsa $206e // reverseBiaz
  073d:4a 04             send 4 

  073f:39 69            pushi 69 // $69 hide
  0741:76               push0 
  0742:72 23d8          lofsa $23d8 // vuMeter
  0745:4a 04             send 4 

  0747:39 69            pushi 69 // $69 hide
  0749:76               push0 
  074a:72 21fa          lofsa $21fa // reelOne
  074d:4a 04             send 4 

  074f:39 69            pushi 69 // $69 hide
  0751:76               push0 
  0752:72 2276          lofsa $2276 // reelTwo
  0755:4a 04             send 4 

  0757:39 69            pushi 69 // $69 hide
  0759:76               push0 
  075a:72 22f2          lofsa $22f2 // reelThree
  075d:4a 04             send 4 

  075f:39 69            pushi 69 // $69 hide
  0761:76               push0 
  0762:72 236e          lofsa $236e // reelFour
  0765:4a 04             send 4 

  0767:39 6c            pushi 6c // $6c dispose
  0769:76               push0 
  076a:72 2830          lofsa $2830 // keyboard
  076d:4a 04             send 4 

  076f:39 6c            pushi 6c // $6c dispose
  0771:76               push0 
  0772:72 2ca4          lofsa $2ca4 // music
  0775:4a 04             send 4 

  0777:39 6c            pushi 6c // $6c dispose
  0779:76               push0 
  077a:72 2d1e          lofsa $2d1e // synthPanel
  077d:4a 04             send 4 

  077f:39 69            pushi 69 // $69 hide
  0781:76               push0 
  0782:72 214e          lofsa $214e // panelExtender
  0785:4a 04             send 4 

  0787:38 00c2          pushi c2 // $c2 show
  078a:76               push0 
  078b:72 1eea          lofsa $1eea // door
  078e:4a 04             send 4 

  0790:38 020a          pushi 20a // $20a normalize
  0793:78               push1 
  0794:38 023a          pushi 23a // $23a sel_570
  0797:81 00              lag  
  0799:4a 06             send 6 

  079b:38 008e          pushi 8e // $8e setScript
  079e:78               push1 
  079f:72 1340          lofsa $1340 // sEnterBooth
  07a2:36                push 
  07a3:81 02              lag  
  07a5:4a 06             send 6 

  07a7:39 6c            pushi 6c // $6c dispose
  07a9:76               push0 
  07aa:54 04             self 4 


        code_07ac
  07ac:3a                toss 
  07ad:48                 ret 
    )

)

// 0c94
(instance sSession of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_07e8
  07e8:3f 14             link 14 // (var $14)
  07ea:87 01              lap param1 
  07ec:65 0a             aTop state 
  07ee:36                push 
  07ef:3c                 dup 
  07f0:35 00              ldi 0 
  07f2:1a                 eq? 
  07f3:30 0016            bnt code_080c 
  07f6:76               push0 
  07f7:45 02 00         callb procedure_0002 0 //  

  07fa:7a               push2 
  07fb:38 03e8          pushi 3e8 // $3e8 sel_1000
  07fe:72 206e          lofsa $206e // reverseBiaz
  0801:36                push 
  0802:45 0d 04         callb procedure_000d 4 //  

  0805:35 02              ldi 2 
  0807:65 12             aTop seconds 
  0809:32 047f            jmp code_0c8b 

        code_080c
  080c:3c                 dup 
  080d:35 01              ldi 1 
  080f:1a                 eq? 
  0810:30 00a1            bnt code_08b4 
  0813:8b 00              lsl local0 
  0815:3c                 dup 
  0816:35 00              ldi 0 
  0818:1a                 eq? 
  0819:30 0017            bnt code_0833 
  081c:39 06            pushi 6 // $6 loop
  081e:72 2f0a          lofsa $2f0a // Reverse Biaz
  0821:36                push 
  0822:38 0294          pushi 294 // $294 sel_660
  0825:39 09            pushi 9 // $9 nsTop
  0827:39 6c            pushi 6c // $6c dispose
  0829:38 008b          pushi 8b // $8b caller
  082c:7c            pushSelf 
  082d:45 12 0c         callb procedure_0012 c //  

  0830:32 007d            jmp code_08b0 

        code_0833
  0833:3c                 dup 
  0834:35 01              ldi 1 
  0836:1a                 eq? 
  0837:30 003d            bnt code_0877 
  083a:83 09              lal local9 
  083c:30 001b            bnt code_085a 
  083f:35 00              ldi 0 
  0841:a3 09              sal local9 
  0843:39 06            pushi 6 // $6 loop
  0845:72 2f0a          lofsa $2f0a // Reverse Biaz
  0848:36                push 
  0849:38 0294          pushi 294 // $294 sel_660
  084c:39 0a            pushi a // $a nsLeft
  084e:39 6c            pushi 6c // $6c dispose
  0850:38 008b          pushi 8b // $8b caller
  0853:7c            pushSelf 
  0854:45 12 0c         callb procedure_0012 c //  

  0857:32 0056            jmp code_08b0 

        code_085a
  085a:e3 00              -al local0 
  085c:35 00              ldi 0 
  085e:a3 09              sal local9 
  0860:39 06            pushi 6 // $6 loop
  0862:72 2f0a          lofsa $2f0a // Reverse Biaz
  0865:36                push 
  0866:38 0294          pushi 294 // $294 sel_660
  0869:39 0b            pushi b // $b nsBottom
  086b:39 6c            pushi 6c // $6c dispose
  086d:38 008b          pushi 8b // $8b caller
  0870:7c            pushSelf 
  0871:45 12 0c         callb procedure_0012 c //  

  0874:32 0039            jmp code_08b0 

        code_0877
  0877:8b 09              lsl local9 
  0879:35 0a              ldi a 
  087b:22                 lt? 
  087c:30 001d            bnt code_089c 
  087f:e3 00              -al local0 
  0881:35 00              ldi 0 
  0883:a3 09              sal local9 
  0885:39 06            pushi 6 // $6 loop
  0887:72 2f0a          lofsa $2f0a // Reverse Biaz
  088a:36                push 
  088b:38 0294          pushi 294 // $294 sel_660
  088e:39 0c            pushi c // $c nsRight
  0890:39 6c            pushi 6c // $6c dispose
  0892:38 008b          pushi 8b // $8b caller
  0895:7c            pushSelf 
  0896:45 12 0c         callb procedure_0012 c //  

  0899:32 0014            jmp code_08b0 

        code_089c
  089c:39 06            pushi 6 // $6 loop
  089e:72 2f0a          lofsa $2f0a // Reverse Biaz
  08a1:36                push 
  08a2:38 0294          pushi 294 // $294 sel_660
  08a5:39 0d            pushi d // $d lsTop
  08a7:39 6c            pushi 6c // $6c dispose
  08a9:38 008b          pushi 8b // $8b caller
  08ac:7c            pushSelf 
  08ad:45 12 0c         callb procedure_0012 c //  


        code_08b0
  08b0:3a                toss 
  08b1:32 03d7            jmp code_0c8b 

        code_08b4
  08b4:3c                 dup 
  08b5:35 02              ldi 2 
  08b7:1a                 eq? 
  08b8:30 0090            bnt code_094b 
  08bb:8b 01              lsl local1 
  08bd:35 01              ldi 1 
  08bf:1a                 eq? 
  08c0:30 0023            bnt code_08e6 
  08c3:76               push0 
  08c4:43 27 00         callk HaveMouse 0 

  08c7:18                 not 
  08c8:30 001b            bnt code_08e6 
  08cb:39 09            pushi 9 // $9 nsTop
  08cd:38 0294          pushi 294 // $294 sel_660
  08d0:39 0e            pushi e // $e lsLeft
  08d2:39 43            pushi 43 // $43 at
  08d4:39 ff            pushi ff // $ff syncNum
  08d6:39 0f            pushi f // $f lsBottom
  08d8:39 46            pushi 46 // $46 width
  08da:38 0118          pushi 118 // $118 isNotHidden
  08dd:39 50            pushi 50 // $50 title
  08df:72 30f6          lofsa $30f6 // A Tip from AL
  08e2:36                push 
  08e3:45 0e 12         callb procedure_000e 12 //  


        code_08e6
  08e6:8b 01              lsl local1 
  08e8:35 01              ldi 1 
  08ea:1e                 gt? 
  08eb:30 0054            bnt code_0942 
  08ee:39 2a            pushi 2a // $2a play
  08f0:78               push1 
  08f1:7c            pushSelf 
  08f2:72 2e16          lofsa $2e16 // rewind
  08f5:4a 06             send 6 

  08f7:38 00db          pushi db // $db cycleSpeed
  08fa:78               push1 
  08fb:39 05            pushi 5 // $5 view
  08fd:38 0096          pushi 96 // $96 setCycle
  0900:78               push1 
  0901:51 1f            class Rev 
  0903:36                push 
  0904:72 21fa          lofsa $21fa // reelOne
  0907:4a 0c             send c 

  0909:38 00db          pushi db // $db cycleSpeed
  090c:78               push1 
  090d:39 05            pushi 5 // $5 view
  090f:38 0096          pushi 96 // $96 setCycle
  0912:78               push1 
  0913:51 17            class Fwd 
  0915:36                push 
  0916:72 2276          lofsa $2276 // reelTwo
  0919:4a 0c             send c 

  091b:38 00db          pushi db // $db cycleSpeed
  091e:78               push1 
  091f:39 05            pushi 5 // $5 view
  0921:38 0096          pushi 96 // $96 setCycle
  0924:78               push1 
  0925:51 1f            class Rev 
  0927:36                push 
  0928:72 22f2          lofsa $22f2 // reelThree
  092b:4a 0c             send c 

  092d:38 00db          pushi db // $db cycleSpeed
  0930:78               push1 
  0931:39 05            pushi 5 // $5 view
  0933:38 0096          pushi 96 // $96 setCycle
  0936:78               push1 
  0937:51 17            class Fwd 
  0939:36                push 
  093a:72 236e          lofsa $236e // reelFour
  093d:4a 0c             send c 

  093f:32 0349            jmp code_0c8b 

        code_0942
  0942:38 008d          pushi 8d // $8d cue
  0945:76               push0 
  0946:54 04             self 4 

  0948:32 0340            jmp code_0c8b 

        code_094b
  094b:3c                 dup 
  094c:35 03              ldi 3 
  094e:1a                 eq? 
  094f:30 0049            bnt code_099b 
  0952:8b 01              lsl local1 
  0954:35 01              ldi 1 
  0956:1e                 gt? 
  0957:30 0038            bnt code_0992 
  095a:39 2a            pushi 2a // $2a play
  095c:78               push1 
  095d:7c            pushSelf 
  095e:72 2e4c          lofsa $2e4c // musicStop
  0961:4a 06             send 6 

  0963:38 00db          pushi db // $db cycleSpeed
  0966:78               push1 
  0967:39 0a            pushi a // $a nsLeft
  0969:72 21fa          lofsa $21fa // reelOne
  096c:4a 06             send 6 

  096e:38 00db          pushi db // $db cycleSpeed
  0971:78               push1 
  0972:39 0a            pushi a // $a nsLeft
  0974:72 2276          lofsa $2276 // reelTwo
  0977:4a 06             send 6 

  0979:38 00db          pushi db // $db cycleSpeed
  097c:78               push1 
  097d:39 0a            pushi a // $a nsLeft
  097f:72 22f2          lofsa $22f2 // reelThree
  0982:4a 06             send 6 

  0984:38 00db          pushi db // $db cycleSpeed
  0987:78               push1 
  0988:39 0a            pushi a // $a nsLeft
  098a:72 236e          lofsa $236e // reelFour
  098d:4a 06             send 6 

  098f:32 02f9            jmp code_0c8b 

        code_0992
  0992:38 008d          pushi 8d // $8d cue
  0995:76               push0 
  0996:54 04             self 4 

  0998:32 02f0            jmp code_0c8b 

        code_099b
  099b:3c                 dup 
  099c:35 04              ldi 4 
  099e:1a                 eq? 
  099f:30 0040            bnt code_09e2 
  09a2:8b 01              lsl local1 
  09a4:35 01              ldi 1 
  09a6:1e                 gt? 
  09a7:30 002f            bnt code_09d9 
  09aa:38 0096          pushi 96 // $96 setCycle
  09ad:78               push1 
  09ae:76               push0 
  09af:72 21fa          lofsa $21fa // reelOne
  09b2:4a 06             send 6 

  09b4:38 0096          pushi 96 // $96 setCycle
  09b7:78               push1 
  09b8:76               push0 
  09b9:72 2276          lofsa $2276 // reelTwo
  09bc:4a 06             send 6 

  09be:38 0096          pushi 96 // $96 setCycle
  09c1:78               push1 
  09c2:76               push0 
  09c3:72 22f2          lofsa $22f2 // reelThree
  09c6:4a 06             send 6 

  09c8:38 0096          pushi 96 // $96 setCycle
  09cb:78               push1 
  09cc:76               push0 
  09cd:72 236e          lofsa $236e // reelFour
  09d0:4a 06             send 6 

  09d2:35 02              ldi 2 
  09d4:65 12             aTop seconds 
  09d6:32 02b2            jmp code_0c8b 

        code_09d9
  09d9:38 008d          pushi 8d // $8d cue
  09dc:76               push0 
  09dd:54 04             self 4 

  09df:32 02a9            jmp code_0c8b 

        code_09e2
  09e2:3c                 dup 
  09e3:35 05              ldi 5 
  09e5:1a                 eq? 
  09e6:30 0026            bnt code_0a0f 
  09e9:39 04            pushi 4 // $4 x
  09eb:5b 04 00           lea 4 0 
  09ee:36                push 
  09ef:38 0294          pushi 294 // $294 sel_660
  09f2:39 0f            pushi f // $f lsBottom
  09f4:8b 01              lsl local1 
  09f6:43 48 08         callk Format 8 

  09f9:39 05            pushi 5 // $5 view
  09fb:72 2f0a          lofsa $2f0a // Reverse Biaz
  09fe:36                push 
  09ff:5b 04 00           lea 4 0 
  0a02:36                push 
  0a03:39 6c            pushi 6c // $6c dispose
  0a05:38 008b          pushi 8b // $8b caller
  0a08:7c            pushSelf 
  0a09:45 12 0a         callb procedure_0012 a //  

  0a0c:32 027c            jmp code_0c8b 

        code_0a0f
  0a0f:3c                 dup 
  0a10:35 06              ldi 6 
  0a12:1a                 eq? 
  0a13:30 001a            bnt code_0a30 
  0a16:38 00a2          pushi a2 // $a2 setLoop
  0a19:78               push1 
  0a1a:7a               push2 
  0a1b:38 0120          pushi 120 // $120 setCel
  0a1e:78               push1 
  0a1f:76               push0 
  0a20:38 0096          pushi 96 // $96 setCycle
  0a23:7a               push2 
  0a24:51 1a            class End 
  0a26:36                push 
  0a27:7c            pushSelf 
  0a28:72 206e          lofsa $206e // reverseBiaz
  0a2b:4a 14             send 14 

  0a2d:32 025b            jmp code_0c8b 

        code_0a30
  0a30:3c                 dup 
  0a31:35 07              ldi 7 
  0a33:1a                 eq? 
  0a34:30 0010            bnt code_0a47 
  0a37:38 0096          pushi 96 // $96 setCycle
  0a3a:7a               push2 
  0a3b:51 1b            class Beg 
  0a3d:36                push 
  0a3e:7c            pushSelf 
  0a3f:72 206e          lofsa $206e // reverseBiaz
  0a42:4a 08             send 8 

  0a44:32 0244            jmp code_0c8b 

        code_0a47
  0a47:3c                 dup 
  0a48:35 08              ldi 8 
  0a4a:1a                 eq? 
  0a4b:30 0015            bnt code_0a63 
  0a4e:38 00a2          pushi a2 // $a2 setLoop
  0a51:78               push1 
  0a52:76               push0 
  0a53:38 0096          pushi 96 // $96 setCycle
  0a56:7a               push2 
  0a57:51 1a            class End 
  0a59:36                push 
  0a5a:7c            pushSelf 
  0a5b:72 206e          lofsa $206e // reverseBiaz
  0a5e:4a 0e             send e 

  0a60:32 0228            jmp code_0c8b 

        code_0a63
  0a63:3c                 dup 
  0a64:35 09              ldi 9 
  0a66:1a                 eq? 
  0a67:30 0010            bnt code_0a7a 
  0a6a:38 0096          pushi 96 // $96 setCycle
  0a6d:7a               push2 
  0a6e:51 1b            class Beg 
  0a70:36                push 
  0a71:7c            pushSelf 
  0a72:72 206e          lofsa $206e // reverseBiaz
  0a75:4a 08             send 8 

  0a77:32 0211            jmp code_0c8b 

        code_0a7a
  0a7a:3c                 dup 
  0a7b:35 0a              ldi a 
  0a7d:1a                 eq? 
  0a7e:30 001a            bnt code_0a9b 
  0a81:38 00a2          pushi a2 // $a2 setLoop
  0a84:78               push1 
  0a85:78               push1 
  0a86:38 0120          pushi 120 // $120 setCel
  0a89:78               push1 
  0a8a:76               push0 
  0a8b:38 0096          pushi 96 // $96 setCycle
  0a8e:7a               push2 
  0a8f:51 1a            class End 
  0a91:36                push 
  0a92:7c            pushSelf 
  0a93:72 206e          lofsa $206e // reverseBiaz
  0a96:4a 14             send 14 

  0a98:32 01f0            jmp code_0c8b 

        code_0a9b
  0a9b:3c                 dup 
  0a9c:35 0b              ldi b 
  0a9e:1a                 eq? 
  0a9f:30 0010            bnt code_0ab2 
  0aa2:38 0096          pushi 96 // $96 setCycle
  0aa5:7a               push2 
  0aa6:51 1b            class Beg 
  0aa8:36                push 
  0aa9:7c            pushSelf 
  0aaa:72 206e          lofsa $206e // reverseBiaz
  0aad:4a 08             send 8 

  0aaf:32 01d9            jmp code_0c8b 

        code_0ab2
  0ab2:3c                 dup 
  0ab3:35 0c              ldi c 
  0ab5:1a                 eq? 
  0ab6:30 0016            bnt code_0acf 
  0ab9:38 00a2          pushi a2 // $a2 setLoop
  0abc:78               push1 
  0abd:76               push0 
  0abe:38 0120          pushi 120 // $120 setCel
  0ac1:78               push1 
  0ac2:76               push0 
  0ac3:72 206e          lofsa $206e // reverseBiaz
  0ac6:4a 0c             send c 

  0ac8:35 01              ldi 1 
  0aca:65 10             aTop cycles 
  0acc:32 01bc            jmp code_0c8b 

        code_0acf
  0acf:3c                 dup 
  0ad0:35 0d              ldi d 
  0ad2:1a                 eq? 
  0ad3:30 013d            bnt code_0c13 
  0ad6:38 00db          pushi db // $db cycleSpeed
  0ad9:78               push1 
  0ada:39 11            pushi 11 // $11 signal
  0adc:38 0096          pushi 96 // $96 setCycle
  0adf:78               push1 
  0ae0:51 17            class Fwd 
  0ae2:36                push 
  0ae3:72 21fa          lofsa $21fa // reelOne
  0ae6:4a 0c             send c 

  0ae8:38 00db          pushi db // $db cycleSpeed
  0aeb:78               push1 
  0aec:39 0f            pushi f // $f lsBottom
  0aee:38 0096          pushi 96 // $96 setCycle
  0af1:78               push1 
  0af2:51 1f            class Rev 
  0af4:36                push 
  0af5:72 2276          lofsa $2276 // reelTwo
  0af8:4a 0c             send c 

  0afa:38 00db          pushi db // $db cycleSpeed
  0afd:78               push1 
  0afe:39 11            pushi 11 // $11 signal
  0b00:38 0096          pushi 96 // $96 setCycle
  0b03:78               push1 
  0b04:51 17            class Fwd 
  0b06:36                push 
  0b07:72 22f2          lofsa $22f2 // reelThree
  0b0a:4a 0c             send c 

  0b0c:38 00db          pushi db // $db cycleSpeed
  0b0f:78               push1 
  0b10:39 0f            pushi f // $f lsBottom
  0b12:38 0096          pushi 96 // $96 setCycle
  0b15:78               push1 
  0b16:51 1f            class Rev 
  0b18:36                push 
  0b19:72 236e          lofsa $236e // reelFour
  0b1c:4a 0c             send c 

  0b1e:39 05            pushi 5 // $5 view
  0b20:78               push1 
  0b21:38 029e          pushi 29e // $29e sel_670
  0b24:38 00a2          pushi a2 // $a2 setLoop
  0b27:78               push1 
  0b28:78               push1 
  0b29:38 0120          pushi 120 // $120 setCel
  0b2c:78               push1 
  0b2d:76               push0 
  0b2e:38 0096          pushi 96 // $96 setCycle
  0b31:78               push1 
  0b32:51 17            class Fwd 
  0b34:36                push 
  0b35:72 23d8          lofsa $23d8 // vuMeter
  0b38:4a 18             send 18 

  0b3a:8b 00              lsl local0 
  0b3c:35 01              ldi 1 
  0b3e:24                 le? 
  0b3f:30 0047            bnt code_0b89 
  0b42:39 7d            pushi 7d // $7d addToFront
  0b44:78               push1 
  0b45:72 2830          lofsa $2830 // keyboard
  0b48:36                push 
  0b49:81 49              lag  
  0b4b:4a 06             send 6 

  0b4d:39 7d            pushi 7d // $7d addToFront
  0b4f:78               push1 
  0b50:72 2830          lofsa $2830 // keyboard
  0b53:36                push 
  0b54:81 48              lag  
  0b56:4a 06             send 6 

  0b58:7a               push2 
  0b59:39 05            pushi 5 // $5 view
  0b5b:78               push1 
  0b5c:43 2d 04         callk DoSound 4 

  0b5f:39 2b            pushi 2b // $2b number
  0b61:78               push1 
  0b62:38 0294          pushi 294 // $294 sel_660
  0b65:39 66            pushi 66 // $66 flags
  0b67:78               push1 
  0b68:78               push1 
  0b69:38 00a2          pushi a2 // $a2 setLoop
  0b6c:78               push1 
  0b6d:78               push1 
  0b6e:39 2a            pushi 2a // $2a play
  0b70:76               push0 
  0b71:38 00a3          pushi a3 // $a3 send
  0b74:39 03            pushi 3 // $3 y
  0b76:39 09            pushi 9 // $9 nsTop
  0b78:39 4e            pushi 4e // $4e save
  0b7a:78               push1 
  0b7b:81 66              lag  
  0b7d:4a 20             send 20 

  0b7f:7a               push2 
  0b80:39 05            pushi 5 // $5 view
  0b82:76               push0 
  0b83:43 2d 04         callk DoSound 4 

  0b86:32 003c            jmp code_0bc5 

        code_0b89
  0b89:7a               push2 
  0b8a:39 05            pushi 5 // $5 view
  0b8c:78               push1 
  0b8d:43 2d 04         callk DoSound 4 

  0b90:39 2b            pushi 2b // $2b number
  0b92:78               push1 
  0b93:38 0294          pushi 294 // $294 sel_660
  0b96:39 66            pushi 66 // $66 flags
  0b98:78               push1 
  0b99:78               push1 
  0b9a:38 00a2          pushi a2 // $a2 setLoop
  0b9d:78               push1 
  0b9e:78               push1 
  0b9f:39 2a            pushi 2a // $2a play
  0ba1:78               push1 
  0ba2:72 0f16          lofsa $0f16 // sAutoKeys
  0ba5:36                push 
  0ba6:38 00a3          pushi a3 // $a3 send
  0ba9:39 03            pushi 3 // $3 y
  0bab:39 08            pushi 8 // $8 underBits
  0bad:39 4e            pushi 4e // $4e save
  0baf:78               push1 
  0bb0:38 00a3          pushi a3 // $a3 send
  0bb3:39 03            pushi 3 // $3 y
  0bb5:39 09            pushi 9 // $9 nsTop
  0bb7:39 4e            pushi 4e // $4e save
  0bb9:76               push0 
  0bba:81 66              lag  
  0bbc:4a 2c             send 2c 

  0bbe:7a               push2 
  0bbf:39 05            pushi 5 // $5 view
  0bc1:76               push0 
  0bc2:43 2d 04         callk DoSound 4 


        code_0bc5
  0bc5:38 008e          pushi 8e // $8e setScript
  0bc8:78               push1 
  0bc9:72 0dd8          lofsa $0dd8 // sMonitorRecording
  0bcc:36                push 
  0bcd:72 206e          lofsa $206e // reverseBiaz
  0bd0:4a 06             send 6 

  0bd2:76               push0 
  0bd3:45 03 00         callb procedure_0003 0 //  

  0bd6:38 011a          pushi 11a // $11a canControl
  0bd9:78               push1 
  0bda:76               push0 
  0bdb:51 31            class User 
  0bdd:4a 06             send 6 

  0bdf:38 00c9          pushi c9 // $c9 disable
  0be2:39 05            pushi 5 // $5 view
  0be4:76               push0 
  0be5:39 03            pushi 3 // $3 y
  0be7:39 04            pushi 4 // $4 x
  0be9:39 06            pushi 6 // $6 loop
  0beb:39 07            pushi 7 // $7 cel
  0bed:81 45              lag  
  0bef:4a 0e             send e 

  0bf1:8b 00              lsl local0 
  0bf3:35 01              ldi 1 
  0bf5:1e                 gt? 
  0bf6:30 0011            bnt code_0c0a 
  0bf9:38 008e          pushi 8e // $8e setScript
  0bfc:78               push1 
  0bfd:72 0f16          lofsa $0f16 // sAutoKeys
  0c00:36                push 
  0c01:81 02              lag  
  0c03:4a 06             send 6 

  0c05:39 6c            pushi 6c // $6c dispose
  0c07:76               push0 
  0c08:54 04             self 4 


        code_0c0a
  0c0a:38 008d          pushi 8d // $8d cue
  0c0d:76               push0 
  0c0e:54 04             self 4 

  0c10:32 0078            jmp code_0c8b 

        code_0c13
  0c13:3c                 dup 
  0c14:35 0e              ldi e 
  0c16:1a                 eq? 
  0c17:30 000c            bnt code_0c26 
  0c1a:39 03            pushi 3 // $3 y
  0c1c:39 32            pushi 32 // $32 b-i2
  0c1e:7a               push2 
  0c1f:7c            pushSelf 
  0c20:45 11 06         callb procedure_0011 6 //  

  0c23:32 0065            jmp code_0c8b 

        code_0c26
  0c26:3c                 dup 
  0c27:35 0f              ldi f 
  0c29:1a                 eq? 
  0c2a:30 0033            bnt code_0c60 
  0c2d:76               push0 
  0c2e:45 02 00         callb procedure_0002 0 //  

  0c31:83 07              lal local7 
  0c33:30 0005            bnt code_0c3b 
  0c36:39 7a            pushi 7a // $7a release
  0c38:76               push0 
  0c39:4a 04             send 4 


        code_0c3b
  0c3b:35 00              ldi 0 
  0c3d:a3 07              sal local7 
  0c3f:35 00              ldi 0 
  0c41:a3 08              sal local8 
  0c43:39 54            pushi 54 // $54 delete
  0c45:78               push1 
  0c46:72 2830          lofsa $2830 // keyboard
  0c49:36                push 
  0c4a:81 49              lag  
  0c4c:4a 06             send 6 

  0c4e:39 54            pushi 54 // $54 delete
  0c50:78               push1 
  0c51:72 2830          lofsa $2830 // keyboard
  0c54:36                push 
  0c55:81 48              lag  
  0c57:4a 06             send 6 

  0c59:35 03              ldi 3 
  0c5b:65 12             aTop seconds 
  0c5d:32 002b            jmp code_0c8b 

        code_0c60
  0c60:3c                 dup 
  0c61:35 10              ldi 10 
  0c63:1a                 eq? 
  0c64:30 0018            bnt code_0c7f 
  0c67:76               push0 
  0c68:45 03 00         callb procedure_0003 0 //  

  0c6b:38 00c9          pushi c9 // $c9 disable
  0c6e:78               push1 
  0c6f:76               push0 
  0c70:81 45              lag  
  0c72:4a 06             send 6 

  0c74:39 6c            pushi 6c // $6c dispose
  0c76:76               push0 
  0c77:72 0dd8          lofsa $0dd8 // sMonitorRecording
  0c7a:4a 04             send 4 

  0c7c:32 000c            jmp code_0c8b 

        code_0c7f
  0c7f:3c                 dup 
  0c80:35 11              ldi 11 
  0c82:1a                 eq? 
  0c83:30 0005            bnt code_0c8b 
  0c86:39 6c            pushi 6c // $6c dispose
  0c88:76               push0 
  0c89:54 04             self 4 


        code_0c8b
  0c8b:3a                toss 
  0c8c:48                 ret 
  0c8d:00                bnot 
    )

)

// 0dd2
(instance sMonitorRecording of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (dispose) // method_0cc8
  0cc8:38 0096          pushi 96 // $96 setCycle
  0ccb:78               push1 
  0ccc:76               push0 
  0ccd:72 21fa          lofsa $21fa // reelOne
  0cd0:4a 06             send 6 

  0cd2:38 0096          pushi 96 // $96 setCycle
  0cd5:78               push1 
  0cd6:76               push0 
  0cd7:72 2276          lofsa $2276 // reelTwo
  0cda:4a 06             send 6 

  0cdc:38 0096          pushi 96 // $96 setCycle
  0cdf:78               push1 
  0ce0:76               push0 
  0ce1:72 22f2          lofsa $22f2 // reelThree
  0ce4:4a 06             send 6 

  0ce6:38 0096          pushi 96 // $96 setCycle
  0ce9:78               push1 
  0cea:76               push0 
  0ceb:72 236e          lofsa $236e // reelFour
  0cee:4a 06             send 6 

  0cf0:38 0096          pushi 96 // $96 setCycle
  0cf3:78               push1 
  0cf4:76               push0 
  0cf5:38 00a2          pushi a2 // $a2 setLoop
  0cf8:78               push1 
  0cf9:76               push0 
  0cfa:72 23d8          lofsa $23d8 // vuMeter
  0cfd:4a 0c             send c 

  0cff:38 009c          pushi 9c // $9c stop
  0d02:76               push0 
  0d03:81 66              lag  
  0d05:4a 04             send 4 

  0d07:38 00a2          pushi a2 // $a2 setLoop
  0d0a:78               push1 
  0d0b:76               push0 
  0d0c:38 0096          pushi 96 // $96 setCycle
  0d0f:7a               push2 
  0d10:51 1b            class Beg 
  0d12:36                push 
  0d13:7c            pushSelf 
  0d14:72 206e          lofsa $206e // reverseBiaz
  0d17:4a 0e             send e 

  0d19:8b 00              lsl local0 
  0d1b:35 01              ldi 1 
  0d1d:1e                 gt? 
  0d1e:30 000f            bnt code_0d30 
  0d21:38 008e          pushi 8e // $8e setScript
  0d24:78               push1 
  0d25:72 0fc8          lofsa $0fc8 // sEndSession
  0d28:36                push 
  0d29:81 02              lag  
  0d2b:4a 06             send 6 

  0d2d:32 0010            jmp code_0d40 

        code_0d30
  0d30:c3 00              +al local0 
  0d32:c3 01              +al local1 
  0d34:38 008e          pushi 8e // $8e setScript
  0d37:78               push1 
  0d38:72 0c9a          lofsa $0c9a // sSession
  0d3b:36                push 
  0d3c:81 00              lag  
  0d3e:4a 06             send 6 


        code_0d40
  0d40:39 6c            pushi 6c // $6c dispose
  0d42:76               push0 
  0d43:57 06 04         super Script 4 

  0d46:48                 ret 
    )

    (method (changeState) // method_0d47
  0d47:87 01              lap param1 
  0d49:65 0a             aTop state 
  0d4b:36                push 
  0d4c:3c                 dup 
  0d4d:35 00              ldi 0 
  0d4f:1a                 eq? 
  0d50:30 000d            bnt code_0d60 
  0d53:7a               push2 
  0d54:39 03            pushi 3 // $3 y
  0d56:39 06            pushi 6 // $6 loop
  0d58:43 3c 04         callk Random 4 

  0d5b:65 12             aTop seconds 
  0d5d:32 0069            jmp code_0dc9 

        code_0d60
  0d60:3c                 dup 
  0d61:35 01              ldi 1 
  0d63:1a                 eq? 
  0d64:30 003d            bnt code_0da4 
  0d67:7a               push2 
  0d68:76               push0 
  0d69:78               push1 
  0d6a:43 3c 04         callk Random 4 

  0d6d:30 001a            bnt code_0d8a 
  0d70:38 00a2          pushi a2 // $a2 setLoop
  0d73:78               push1 
  0d74:76               push0 
  0d75:38 0120          pushi 120 // $120 setCel
  0d78:78               push1 
  0d79:76               push0 
  0d7a:38 0096          pushi 96 // $96 setCycle
  0d7d:7a               push2 
  0d7e:51 1a            class End 
  0d80:36                push 
  0d81:7c            pushSelf 
  0d82:72 206e          lofsa $206e // reverseBiaz
  0d85:4a 14             send 14 

  0d87:32 003f            jmp code_0dc9 

        code_0d8a
  0d8a:38 00a2          pushi a2 // $a2 setLoop
  0d8d:78               push1 
  0d8e:78               push1 
  0d8f:38 0120          pushi 120 // $120 setCel
  0d92:78               push1 
  0d93:76               push0 
  0d94:38 0096          pushi 96 // $96 setCycle
  0d97:7a               push2 
  0d98:51 1a            class End 
  0d9a:36                push 
  0d9b:7c            pushSelf 
  0d9c:72 206e          lofsa $206e // reverseBiaz
  0d9f:4a 14             send 14 

  0da1:32 0025            jmp code_0dc9 

        code_0da4
  0da4:3c                 dup 
  0da5:35 02              ldi 2 
  0da7:1a                 eq? 
  0da8:30 0010            bnt code_0dbb 
  0dab:38 0096          pushi 96 // $96 setCycle
  0dae:7a               push2 
  0daf:51 1b            class Beg 
  0db1:36                push 
  0db2:7c            pushSelf 
  0db3:72 206e          lofsa $206e // reverseBiaz
  0db6:4a 08             send 8 

  0db8:32 000e            jmp code_0dc9 

        code_0dbb
  0dbb:3c                 dup 
  0dbc:35 03              ldi 3 
  0dbe:1a                 eq? 
  0dbf:30 0007            bnt code_0dc9 
  0dc2:38 008c          pushi 8c // $8c changeState
  0dc5:78               push1 
  0dc6:76               push0 
  0dc7:54 06             self 6 


        code_0dc9
  0dc9:3a                toss 
  0dca:48                 ret 
  0dcb:00                bnot 
    )

)

// 0f10
(instance sAutoKeys of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0e0a
  0e0a:3f 02             link 2 // (var $2)
  0e0c:87 01              lap param1 
  0e0e:65 0a             aTop state 
  0e10:36                push 
  0e11:3c                 dup 
  0e12:35 00              ldi 0 
  0e14:1a                 eq? 
  0e15:30 0030            bnt code_0e48 
  0e18:38 0144          pushi 144 // $144 canInput
  0e1b:78               push1 
  0e1c:76               push0 
  0e1d:51 31            class User 
  0e1f:4a 06             send 6 

  0e21:38 00c9          pushi c9 // $c9 disable
  0e24:39 06            pushi 6 // $6 loop
  0e26:76               push0 
  0e27:78               push1 
  0e28:39 03            pushi 3 // $3 y
  0e2a:39 04            pushi 4 // $4 x
  0e2c:39 06            pushi 6 // $6 loop
  0e2e:39 07            pushi 7 // $7 cel
  0e30:81 45              lag  
  0e32:4a 10             send 10 

  0e34:38 00ce          pushi ce // $ce curIcon
  0e37:78               push1 
  0e38:39 43            pushi 43 // $43 at
  0e3a:78               push1 
  0e3b:7a               push2 
  0e3c:81 45              lag  
  0e3e:4a 06             send 6 

  0e40:36                push 
  0e41:81 45              lag  
  0e43:4a 06             send 6 

  0e45:32 00bf            jmp code_0f07 

        code_0e48
  0e48:3c                 dup 
  0e49:35 01              ldi 1 
  0e4b:1a                 eq? 
  0e4c:30 00a4            bnt code_0ef3 
  0e4f:38 009a          pushi 9a // $9a prevSignal
  0e52:76               push0 
  0e53:81 66              lag  
  0e55:4a 04             send 4 

  0e57:a5 01              sat temp1 
  0e59:36                push 
  0e5a:35 ff              ldi ff 
  0e5c:1a                 eq? 
  0e5d:30 000e            bnt code_0e6e 
  0e60:39 7a            pushi 7a // $7a release
  0e62:76               push0 
  0e63:63 1a             pToa register 
  0e65:4a 04             send 4 

  0e67:35 01              ldi 1 
  0e69:65 10             aTop cycles 
  0e6b:32 0099            jmp code_0f07 

        code_0e6e
  0e6e:39 1e            pushi 1e // $1e mode
  0e70:8d 01              lst temp1 
  0e72:35 3c              ldi 3c 
  0e74:04                 sub 
  0e75:04                 sub 
  0e76:a5 00              sat temp0 
  0e78:63 1a             pToa register 
  0e7a:30 0005            bnt code_0e82 
  0e7d:39 7a            pushi 7a // $7a release
  0e7f:76               push0 
  0e80:4a 04             send 4 


        code_0e82
  0e82:39 43            pushi 43 // $43 at
  0e84:78               push1 
  0e85:8d 00              lst temp0 
  0e87:72 2830          lofsa $2830 // keyboard
  0e8a:4a 06             send 6 

  0e8c:65 1a             aTop register 
  0e8e:38 00bb          pushi bb // $bb setCursor
  0e91:39 04            pushi 4 // $4 x
  0e93:89 13              lsg  
  0e95:78               push1 
  0e96:38 021f          pushi 21f // $21f white
  0e99:76               push0 
  0e9a:63 1a             pToa register 
  0e9c:4a 04             send 4 

  0e9e:30 000e            bnt code_0eaf 
  0ea1:39 04            pushi 4 // $4 x
  0ea3:76               push0 
  0ea4:63 1a             pToa register 
  0ea6:4a 04             send 4 

  0ea8:36                push 
  0ea9:35 05              ldi 5 
  0eab:02                 add 
  0eac:32 0007            jmp code_0eb6 

        code_0eaf
  0eaf:39 04            pushi 4 // $4 x
  0eb1:76               push0 
  0eb2:63 1a             pToa register 
  0eb4:4a 04             send 4 


        code_0eb6
  0eb6:36                push 
  0eb7:38 021f          pushi 21f // $21f white
  0eba:76               push0 
  0ebb:63 1a             pToa register 
  0ebd:4a 04             send 4 

  0ebf:30 000e            bnt code_0ed0 
  0ec2:39 03            pushi 3 // $3 y
  0ec4:76               push0 
  0ec5:63 1a             pToa register 
  0ec7:4a 04             send 4 

  0ec9:36                push 
  0eca:35 0a              ldi a 
  0ecc:04                 sub 
  0ecd:32 000b            jmp code_0edb 

        code_0ed0
  0ed0:39 03            pushi 3 // $3 y
  0ed2:76               push0 
  0ed3:63 1a             pToa register 
  0ed5:4a 04             send 4 

  0ed7:36                push 
  0ed8:35 0c              ldi c 
  0eda:04                 sub 

        code_0edb
  0edb:36                push 
  0edc:81 01              lag  
  0ede:4a 0c             send c 

  0ee0:38 0220          pushi 220 // $220 depress
  0ee3:78               push1 
  0ee4:76               push0 
  0ee5:63 1a             pToa register 
  0ee7:4a 06             send 6 

  0ee9:38 008c          pushi 8c // $8c changeState
  0eec:78               push1 
  0eed:76               push0 
  0eee:54 06             self 6 

  0ef0:32 0014            jmp code_0f07 

        code_0ef3
  0ef3:3c                 dup 
  0ef4:35 02              ldi 2 
  0ef6:1a                 eq? 
  0ef7:30 000d            bnt code_0f07 
  0efa:39 6c            pushi 6c // $6c dispose
  0efc:76               push0 
  0efd:72 0dd8          lofsa $0dd8 // sMonitorRecording
  0f00:4a 04             send 4 

  0f02:39 6c            pushi 6c // $6c dispose
  0f04:76               push0 
  0f05:54 04             self 4 


        code_0f07
  0f07:3a                toss 
  0f08:48                 ret 
  0f09:00                bnot 
    )

)

// 0fc2
(instance sEndSession of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0f44
  0f44:87 01              lap param1 
  0f46:65 0a             aTop state 
  0f48:36                push 
  0f49:3c                 dup 
  0f4a:35 00              ldi 0 
  0f4c:1a                 eq? 
  0f4d:30 000c            bnt code_0f5c 
  0f50:78               push1 
  0f51:76               push0 
  0f52:45 0d 02         callb procedure_000d 2 //  

  0f55:35 03              ldi 3 
  0f57:65 12             aTop seconds 
  0f59:32 005e            jmp code_0fba 

        code_0f5c
  0f5c:3c                 dup 
  0f5d:35 01              ldi 1 
  0f5f:1a                 eq? 
  0f60:30 003f            bnt code_0fa2 
  0f63:35 01              ldi 1 
  0f65:a3 02              sal local2 
  0f67:83 03              lal local3 
  0f69:30 0017            bnt code_0f83 
  0f6c:39 06            pushi 6 // $6 loop
  0f6e:72 2f0a          lofsa $2f0a // Reverse Biaz
  0f71:36                push 
  0f72:38 0294          pushi 294 // $294 sel_660
  0f75:39 10            pushi 10 // $10 lsRight
  0f77:39 6c            pushi 6c // $6c dispose
  0f79:38 008b          pushi 8b // $8b caller
  0f7c:7c            pushSelf 
  0f7d:45 12 0c         callb procedure_0012 c //  

  0f80:32 0037            jmp code_0fba 

        code_0f83
  0f83:7a               push2 
  0f84:39 08            pushi 8 // $8 underBits
  0f86:39 7e            pushi 7e // $7e addToEnd
  0f88:45 0a 04         callb procedure_000a 4 //  

  0f8b:39 06            pushi 6 // $6 loop
  0f8d:72 2f0a          lofsa $2f0a // Reverse Biaz
  0f90:36                push 
  0f91:38 0294          pushi 294 // $294 sel_660
  0f94:39 11            pushi 11 // $11 signal
  0f96:39 6c            pushi 6c // $6c dispose
  0f98:38 008b          pushi 8b // $8b caller
  0f9b:7c            pushSelf 
  0f9c:45 12 0c         callb procedure_0012 c //  

  0f9f:32 0018            jmp code_0fba 

        code_0fa2
  0fa2:3c                 dup 
  0fa3:35 02              ldi 2 
  0fa5:1a                 eq? 
  0fa6:30 0011            bnt code_0fba 
  0fa9:38 008e          pushi 8e // $8e setScript
  0fac:78               push1 
  0fad:72 07ba          lofsa $07ba // sReturnFromSynth
  0fb0:36                push 
  0fb1:81 02              lag  
  0fb3:4a 06             send 6 

  0fb5:39 6c            pushi 6c // $6c dispose
  0fb7:76               push0 
  0fb8:54 04             self 4 


        code_0fba
  0fba:3a                toss 
  0fbb:48                 ret 
    )

)

// 133a
(instance sEnterBooth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0ff6
  0ff6:87 01              lap param1 
  0ff8:65 0a             aTop state 
  0ffa:36                push 
  0ffb:3c                 dup 
  0ffc:35 00              ldi 0 
  0ffe:1a                 eq? 
  0fff:30 0030            bnt code_1032 
  1002:76               push0 
  1003:45 02 00         callb procedure_0002 0 //  

  1006:38 011a          pushi 11a // $11a canControl
  1009:78               push1 
  100a:76               push0 
  100b:51 31            class User 
  100d:4a 06             send 6 

  100f:38 0144          pushi 144 // $144 canInput
  1012:78               push1 
  1013:76               push0 
  1014:51 31            class User 
  1016:4a 06             send 6 

  1018:39 42            pushi 42 // $42 setPri
  101a:78               push1 
  101b:39 04            pushi 4 // $4 x
  101d:38 011b          pushi 11b // $11b setMotion
  1020:39 04            pushi 4 // $4 x
  1022:51 24            class PolyPath 
  1024:36                push 
  1025:38 00e5          pushi e5 // $e5 distance
  1028:39 65            pushi 65 // $65 topString
  102a:7c            pushSelf 
  102b:81 00              lag  
  102d:4a 12             send 12 

  102f:32 02ff            jmp code_1331 

        code_1032
  1032:3c                 dup 
  1033:35 01              ldi 1 
  1035:1a                 eq? 
  1036:30 0031            bnt code_106a 
  1039:39 2b            pushi 2b // $2b number
  103b:78               push1 
  103c:39 28            pushi 28 // $28 message
  103e:38 00a1          pushi a1 // $a1 setVol
  1041:78               push1 
  1042:39 7f            pushi 7f // $7f addAfter
  1044:38 00a2          pushi a2 // $a2 setLoop
  1047:78               push1 
  1048:78               push1 
  1049:39 2a            pushi 2a // $2a play
  104b:76               push0 
  104c:81 66              lag  
  104e:4a 16             send 16 

  1050:38 0121          pushi 121 // $121 ignoreActors
  1053:78               push1 
  1054:78               push1 
  1055:39 42            pushi 42 // $42 setPri
  1057:78               push1 
  1058:39 03            pushi 3 // $3 y
  105a:38 0096          pushi 96 // $96 setCycle
  105d:7a               push2 
  105e:51 1a            class End 
  1060:36                push 
  1061:7c            pushSelf 
  1062:72 1eea          lofsa $1eea // door
  1065:4a 14             send 14 

  1067:32 02c7            jmp code_1331 

        code_106a
  106a:3c                 dup 
  106b:35 02              ldi 2 
  106d:1a                 eq? 
  106e:30 0015            bnt code_1086 
  1071:38 011b          pushi 11b // $11b setMotion
  1074:39 04            pushi 4 // $4 x
  1076:51 1e            class MoveTo 
  1078:36                push 
  1079:38 0117          pushi 117 // $117 facingMe
  107c:39 4a            pushi 4a // $4a pragmaFail
  107e:7c            pushSelf 
  107f:81 00              lag  
  1081:4a 0c             send c 

  1083:32 02ab            jmp code_1331 

        code_1086
  1086:3c                 dup 
  1087:35 03              ldi 3 
  1089:1a                 eq? 
  108a:30 009d            bnt code_112a 
  108d:39 6c            pushi 6c // $6c dispose
  108f:76               push0 
  1090:72 1eea          lofsa $1eea // door
  1093:4a 04             send 4 

  1095:38 018c          pushi 18c // $18c drawPic
  1098:78               push1 
  1099:38 029e          pushi 29e // $29e sel_670
  109c:81 02              lag  
  109e:4a 06             send 6 

  10a0:38 00c2          pushi c2 // $c2 show
  10a3:76               push0 
  10a4:72 206e          lofsa $206e // reverseBiaz
  10a7:4a 04             send 4 

  10a9:39 05            pushi 5 // $5 view
  10ab:78               push1 
  10ac:38 02a9          pushi 2a9 // $2a9 sel_681
  10af:38 00a2          pushi a2 // $a2 setLoop
  10b2:78               push1 
  10b3:78               push1 
  10b4:38 0120          pushi 120 // $120 setCel
  10b7:78               push1 
  10b8:76               push0 
  10b9:39 04            pushi 4 // $4 x
  10bb:78               push1 
  10bc:38 00f1          pushi f1 // $f1 escaping
  10bf:39 03            pushi 3 // $3 y
  10c1:78               push1 
  10c2:39 47            pushi 47 // $47 wordFail
  10c4:38 00c2          pushi c2 // $c2 show
  10c7:76               push0 
  10c8:81 00              lag  
  10ca:4a 22             send 22 

  10cc:38 00c2          pushi c2 // $c2 show
  10cf:76               push0 
  10d0:72 21fa          lofsa $21fa // reelOne
  10d3:4a 04             send 4 

  10d5:38 00c2          pushi c2 // $c2 show
  10d8:76               push0 
  10d9:72 2276          lofsa $2276 // reelTwo
  10dc:4a 04             send 4 

  10de:38 00c2          pushi c2 // $c2 show
  10e1:76               push0 
  10e2:72 22f2          lofsa $22f2 // reelThree
  10e5:4a 04             send 4 

  10e7:38 00c2          pushi c2 // $c2 show
  10ea:76               push0 
  10eb:72 236e          lofsa $236e // reelFour
  10ee:4a 04             send 4 

  10f0:38 00c2          pushi c2 // $c2 show
  10f3:76               push0 
  10f4:72 23d8          lofsa $23d8 // vuMeter
  10f7:4a 04             send 4 

  10f9:39 6b            pushi 6b // $6b init
  10fb:76               push0 
  10fc:72 2830          lofsa $2830 // keyboard
  10ff:4a 04             send 4 

  1101:39 6b            pushi 6b // $6b init
  1103:76               push0 
  1104:72 2ca4          lofsa $2ca4 // music
  1107:4a 04             send 4 

  1109:39 6b            pushi 6b // $6b init
  110b:76               push0 
  110c:72 2d1e          lofsa $2d1e // synthPanel
  110f:4a 04             send 4 

  1111:38 00c2          pushi c2 // $c2 show
  1114:76               push0 
  1115:72 214e          lofsa $214e // panelExtender
  1118:4a 04             send 4 

  111a:38 00c9          pushi c9 // $c9 disable
  111d:78               push1 
  111e:76               push0 
  111f:81 45              lag  
  1121:4a 06             send 6 

  1123:35 03              ldi 3 
  1125:65 12             aTop seconds 
  1127:32 0207            jmp code_1331 

        code_112a
  112a:3c                 dup 
  112b:35 04              ldi 4 
  112d:1a                 eq? 
  112e:30 0017            bnt code_1148 
  1131:39 06            pushi 6 // $6 loop
  1133:72 2f0a          lofsa $2f0a // Reverse Biaz
  1136:36                push 
  1137:38 0294          pushi 294 // $294 sel_660
  113a:39 12            pushi 12 // $12 illegalBits
  113c:39 6c            pushi 6c // $6c dispose
  113e:38 008b          pushi 8b // $8b caller
  1141:7c            pushSelf 
  1142:45 12 0c         callb procedure_0012 c //  

  1145:32 01e9            jmp code_1331 

        code_1148
  1148:3c                 dup 
  1149:35 05              ldi 5 
  114b:1a                 eq? 
  114c:30 0010            bnt code_115f 
  114f:38 0096          pushi 96 // $96 setCycle
  1152:7a               push2 
  1153:51 1a            class End 
  1155:36                push 
  1156:7c            pushSelf 
  1157:72 206e          lofsa $206e // reverseBiaz
  115a:4a 08             send 8 

  115c:32 01d2            jmp code_1331 

        code_115f
  115f:3c                 dup 
  1160:35 06              ldi 6 
  1162:1a                 eq? 
  1163:30 0010            bnt code_1176 
  1166:38 0096          pushi 96 // $96 setCycle
  1169:7a               push2 
  116a:51 1b            class Beg 
  116c:36                push 
  116d:7c            pushSelf 
  116e:72 206e          lofsa $206e // reverseBiaz
  1171:4a 08             send 8 

  1173:32 01bb            jmp code_1331 

        code_1176
  1176:3c                 dup 
  1177:35 07              ldi 7 
  1179:1a                 eq? 
  117a:30 001a            bnt code_1197 
  117d:38 00a2          pushi a2 // $a2 setLoop
  1180:78               push1 
  1181:78               push1 
  1182:38 0120          pushi 120 // $120 setCel
  1185:78               push1 
  1186:76               push0 
  1187:38 0096          pushi 96 // $96 setCycle
  118a:7a               push2 
  118b:51 1a            class End 
  118d:36                push 
  118e:7c            pushSelf 
  118f:72 206e          lofsa $206e // reverseBiaz
  1192:4a 14             send 14 

  1194:32 019a            jmp code_1331 

        code_1197
  1197:3c                 dup 
  1198:35 08              ldi 8 
  119a:1a                 eq? 
  119b:30 0010            bnt code_11ae 
  119e:38 0096          pushi 96 // $96 setCycle
  11a1:7a               push2 
  11a2:51 1b            class Beg 
  11a4:36                push 
  11a5:7c            pushSelf 
  11a6:72 206e          lofsa $206e // reverseBiaz
  11a9:4a 08             send 8 

  11ab:32 0183            jmp code_1331 

        code_11ae
  11ae:3c                 dup 
  11af:35 09              ldi 9 
  11b1:1a                 eq? 
  11b2:30 0011            bnt code_11c6 
  11b5:38 00a2          pushi a2 // $a2 setLoop
  11b8:78               push1 
  11b9:76               push0 
  11ba:72 206e          lofsa $206e // reverseBiaz
  11bd:4a 06             send 6 

  11bf:35 01              ldi 1 
  11c1:65 10             aTop cycles 
  11c3:32 016b            jmp code_1331 

        code_11c6
  11c6:3c                 dup 
  11c7:35 0a              ldi a 
  11c9:1a                 eq? 
  11ca:30 0027            bnt code_11f4 
  11cd:39 05            pushi 5 // $5 view
  11cf:78               push1 
  11d0:38 02a9          pushi 2a9 // $2a9 sel_681
  11d3:38 00a2          pushi a2 // $a2 setLoop
  11d6:78               push1 
  11d7:76               push0 
  11d8:38 0120          pushi 120 // $120 setCel
  11db:78               push1 
  11dc:76               push0 
  11dd:39 04            pushi 4 // $4 x
  11df:78               push1 
  11e0:38 00cb          pushi cb // $cb height
  11e3:39 03            pushi 3 // $3 y
  11e5:78               push1 
  11e6:39 47            pushi 47 // $47 wordFail
  11e8:72 206e          lofsa $206e // reverseBiaz
  11eb:4a 1e             send 1e 

  11ed:35 01              ldi 1 
  11ef:65 10             aTop cycles 
  11f1:32 013d            jmp code_1331 

        code_11f4
  11f4:3c                 dup 
  11f5:35 0b              ldi b 
  11f7:1a                 eq? 
  11f8:30 0021            bnt code_121c 
  11fb:38 0096          pushi 96 // $96 setCycle
  11fe:78               push1 
  11ff:51 17            class Fwd 
  1201:36                push 
  1202:72 21fa          lofsa $21fa // reelOne
  1205:4a 06             send 6 

  1207:38 0096          pushi 96 // $96 setCycle
  120a:78               push1 
  120b:51 1f            class Rev 
  120d:36                push 
  120e:72 2276          lofsa $2276 // reelTwo
  1211:4a 06             send 6 

  1213:38 008d          pushi 8d // $8d cue
  1216:76               push0 
  1217:54 04             self 4 

  1219:32 0115            jmp code_1331 

        code_121c
  121c:3c                 dup 
  121d:35 0c              ldi c 
  121f:1a                 eq? 
  1220:30 0048            bnt code_126b 
  1223:7a               push2 
  1224:39 05            pushi 5 // $5 view
  1226:78               push1 
  1227:43 2d 04         callk DoSound 4 

  122a:39 2b            pushi 2b // $2b number
  122c:78               push1 
  122d:38 0294          pushi 294 // $294 sel_660
  1230:39 66            pushi 66 // $66 flags
  1232:78               push1 
  1233:78               push1 
  1234:38 00a2          pushi a2 // $a2 setLoop
  1237:78               push1 
  1238:78               push1 
  1239:39 2a            pushi 2a // $2a play
  123b:78               push1 
  123c:72 13d2          lofsa $13d2 // sStopMusic
  123f:36                push 
  1240:38 00a3          pushi a3 // $a3 send
  1243:39 03            pushi 3 // $3 y
  1245:39 08            pushi 8 // $8 underBits
  1247:39 4e            pushi 4e // $4e save
  1249:78               push1 
  124a:81 66              lag  
  124c:4a 22             send 22 

  124e:7a               push2 
  124f:39 05            pushi 5 // $5 view
  1251:76               push0 
  1252:43 2d 04         callk DoSound 4 

  1255:38 008e          pushi 8e // $8e setScript
  1258:78               push1 
  1259:72 13d2          lofsa $13d2 // sStopMusic
  125c:36                push 
  125d:72 206e          lofsa $206e // reverseBiaz
  1260:4a 06             send 6 

  1262:38 008d          pushi 8d // $8d cue
  1265:76               push0 
  1266:54 04             self 4 

  1268:32 00c6            jmp code_1331 

        code_126b
  126b:3c                 dup 
  126c:35 0d              ldi d 
  126e:1a                 eq? 
  126f:30 0007            bnt code_1279 
  1272:35 0a              ldi a 
  1274:65 12             aTop seconds 
  1276:32 00b8            jmp code_1331 

        code_1279
  1279:3c                 dup 
  127a:35 0e              ldi e 
  127c:1a                 eq? 
  127d:30 004c            bnt code_12cc 
  1280:38 009f          pushi 9f // $9f fade
  1283:39 04            pushi 4 // $4 x
  1285:39 50            pushi 50 // $50 title
  1287:39 0f            pushi f // $f lsBottom
  1289:39 0c            pushi c // $c nsRight
  128b:76               push0 
  128c:81 66              lag  
  128e:4a 0c             send c 

  1290:39 04            pushi 4 // $4 x
  1292:72 2f0a          lofsa $2f0a // Reverse Biaz
  1295:36                push 
  1296:38 0294          pushi 294 // $294 sel_660
  1299:39 13            pushi 13 // $13 brTop
  129b:39 6c            pushi 6c // $6c dispose
  129d:45 12 08         callb procedure_0012 8 //  

  12a0:76               push0 
  12a1:45 03 00         callb procedure_0003 0 //  

  12a4:38 011a          pushi 11a // $11a canControl
  12a7:78               push1 
  12a8:76               push0 
  12a9:51 31            class User 
  12ab:4a 06             send 6 

  12ad:38 0144          pushi 144 // $144 canInput
  12b0:78               push1 
  12b1:78               push1 
  12b2:51 31            class User 
  12b4:4a 06             send 6 

  12b6:38 00c9          pushi c9 // $c9 disable
  12b9:78               push1 
  12ba:76               push0 
  12bb:81 45              lag  
  12bd:4a 06             send 6 

  12bf:39 03            pushi 3 // $3 y
  12c1:38 012c          pushi 12c // $12c ignoreHorizon
  12c4:76               push0 
  12c5:7c            pushSelf 
  12c6:45 11 06         callb procedure_0011 6 //  

  12c9:32 0065            jmp code_1331 

        code_12cc
  12cc:3c                 dup 
  12cd:35 0f              ldi f 
  12cf:1a                 eq? 
  12d0:30 002e            bnt code_1301 
  12d3:76               push0 
  12d4:45 02 00         callb procedure_0002 0 //  

  12d7:39 04            pushi 4 // $4 x
  12d9:72 2f0a          lofsa $2f0a // Reverse Biaz
  12dc:36                push 
  12dd:38 0294          pushi 294 // $294 sel_660
  12e0:39 14            pushi 14 // $14 brLeft
  12e2:39 6c            pushi 6c // $6c dispose
  12e4:45 12 08         callb procedure_0012 8 //  

  12e7:39 6c            pushi 6c // $6c dispose
  12e9:76               push0 
  12ea:72 2830          lofsa $2830 // keyboard
  12ed:4a 04             send 4 

  12ef:38 018c          pushi 18c // $18c drawPic
  12f2:7a               push2 
  12f3:78               push1 
  12f4:39 06            pushi 6 // $6 loop
  12f6:81 02              lag  
  12f8:4a 08             send 8 

  12fa:35 78              ldi 78 
  12fc:65 16             aTop ticks 
  12fe:32 0030            jmp code_1331 

        code_1301
  1301:3c                 dup 
  1302:35 10              ldi 10 
  1304:1a                 eq? 
  1305:30 0010            bnt code_1318 
  1308:7a               push2 
  1309:38 0294          pushi 294 // $294 sel_660
  130c:39 15            pushi 15 // $15 brBottom
  130e:45 0e 04         callb procedure_000e 4 //  

  1311:35 78              ldi 78 
  1313:65 16             aTop ticks 
  1315:32 0019            jmp code_1331 

        code_1318
  1318:3c                 dup 
  1319:35 11              ldi 11 
  131b:1a                 eq? 
  131c:30 0012            bnt code_1331 
  131f:38 0179          pushi 179 // $179 newRoom
  1322:7a               push2 
  1323:38 00c8          pushi c8 // $c8 dispatchEvent
  1326:39 07            pushi 7 // $7 cel
  1328:81 02              lag  
  132a:4a 08             send 8 

  132c:39 6c            pushi 6c // $6c dispose
  132e:76               push0 
  132f:54 04             self 4 


        code_1331
  1331:3a                toss 
  1332:48                 ret 
  1333:00                bnot 
    )

)

// 13cc
(instance sStopMusic of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_136e
  136e:87 01              lap param1 
  1370:65 0a             aTop state 
  1372:36                push 
  1373:3c                 dup 
  1374:35 00              ldi 0 
  1376:1a                 eq? 
  1377:30 0003            bnt code_137d 
  137a:32 0047            jmp code_13c4 

        code_137d
  137d:3c                 dup 
  137e:35 01              ldi 1 
  1380:1a                 eq? 
  1381:30 0034            bnt code_13b8 
  1384:38 009a          pushi 9a // $9a prevSignal
  1387:76               push0 
  1388:81 66              lag  
  138a:4a 04             send 4 

  138c:36                push 
  138d:35 ff              ldi ff 
  138f:1a                 eq? 
  1390:30 001b            bnt code_13ae 
  1393:38 0096          pushi 96 // $96 setCycle
  1396:78               push1 
  1397:76               push0 
  1398:72 21fa          lofsa $21fa // reelOne
  139b:4a 06             send 6 

  139d:38 0096          pushi 96 // $96 setCycle
  13a0:78               push1 
  13a1:76               push0 
  13a2:72 2276          lofsa $2276 // reelTwo
  13a5:4a 06             send 6 

  13a7:35 01              ldi 1 
  13a9:65 10             aTop cycles 
  13ab:32 0016            jmp code_13c4 

        code_13ae
  13ae:38 008c          pushi 8c // $8c changeState
  13b1:78               push1 
  13b2:76               push0 
  13b3:54 06             self 6 

  13b5:32 000c            jmp code_13c4 

        code_13b8
  13b8:3c                 dup 
  13b9:35 02              ldi 2 
  13bb:1a                 eq? 
  13bc:30 0005            bnt code_13c4 
  13bf:39 6c            pushi 6c // $6c dispose
  13c1:76               push0 
  13c2:54 04             self 4 


        code_13c4
  13c4:3a                toss 
  13c5:48                 ret 
    )

)

// 1870
(instance sDrunkReverse of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1400
  1400:87 01              lap param1 
  1402:65 0a             aTop state 
  1404:36                push 
  1405:3c                 dup 
  1406:35 00              ldi 0 
  1408:1a                 eq? 
  1409:30 001d            bnt code_1429 
  140c:76               push0 
  140d:45 02 00         callb procedure_0002 0 //  

  1410:39 6c            pushi 6c // $6c dispose
  1412:76               push0 
  1413:39 54            pushi 54 // $54 delete
  1415:76               push0 
  1416:81 aa              lag  
  1418:4a 08             send 8 

  141a:39 6c            pushi 6c // $6c dispose
  141c:76               push0 
  141d:72 1340          lofsa $1340 // sEnterBooth
  1420:4a 04             send 4 

  1422:35 7b              ldi 7b 
  1424:65 16             aTop ticks 
  1426:32 043f            jmp code_1868 

        code_1429
  1429:3c                 dup 
  142a:35 01              ldi 1 
  142c:1a                 eq? 
  142d:30 0013            bnt code_1443 
  1430:39 03            pushi 3 // $3 y
  1432:89 00              lsg  
  1434:38 0294          pushi 294 // $294 sel_660
  1437:39 16            pushi 16 // $16 brRight
  1439:45 12 06         callb procedure_0012 6 //  

  143c:35 3c              ldi 3c 
  143e:65 16             aTop ticks 
  1440:32 0425            jmp code_1868 

        code_1443
  1443:3c                 dup 
  1444:35 02              ldi 2 
  1446:1a                 eq? 
  1447:30 0017            bnt code_1461 
  144a:39 06            pushi 6 // $6 loop
  144c:72 2f0a          lofsa $2f0a // Reverse Biaz
  144f:36                push 
  1450:38 0294          pushi 294 // $294 sel_660
  1453:39 17            pushi 17 // $17 name
  1455:39 6c            pushi 6c // $6c dispose
  1457:38 008b          pushi 8b // $8b caller
  145a:7c            pushSelf 
  145b:45 12 0c         callb procedure_0012 c //  

  145e:32 0407            jmp code_1868 

        code_1461
  1461:3c                 dup 
  1462:35 03              ldi 3 
  1464:1a                 eq? 
  1465:30 0007            bnt code_146f 
  1468:35 3c              ldi 3c 
  146a:65 16             aTop ticks 
  146c:32 03f9            jmp code_1868 

        code_146f
  146f:3c                 dup 
  1470:35 04              ldi 4 
  1472:1a                 eq? 
  1473:30 0017            bnt code_148d 
  1476:39 06            pushi 6 // $6 loop
  1478:72 2f0a          lofsa $2f0a // Reverse Biaz
  147b:36                push 
  147c:38 0294          pushi 294 // $294 sel_660
  147f:39 18            pushi 18 // $18 key
  1481:39 6c            pushi 6c // $6c dispose
  1483:38 008b          pushi 8b // $8b caller
  1486:7c            pushSelf 
  1487:45 12 0c         callb procedure_0012 c //  

  148a:32 03db            jmp code_1868 

        code_148d
  148d:3c                 dup 
  148e:35 05              ldi 5 
  1490:1a                 eq? 
  1491:30 0007            bnt code_149b 
  1494:35 3c              ldi 3c 
  1496:65 16             aTop ticks 
  1498:32 03cd            jmp code_1868 

        code_149b
  149b:3c                 dup 
  149c:35 06              ldi 6 
  149e:1a                 eq? 
  149f:30 003b            bnt code_14dd 
  14a2:39 69            pushi 69 // $69 hide
  14a4:76               push0 
  14a5:81 00              lag  
  14a7:4a 04             send 4 

  14a9:39 05            pushi 5 // $5 view
  14ab:78               push1 
  14ac:38 02ab          pushi 2ab // $2ab sel_683
  14af:38 00a2          pushi a2 // $a2 setLoop
  14b2:78               push1 
  14b3:76               push0 
  14b4:38 0120          pushi 120 // $120 setCel
  14b7:78               push1 
  14b8:76               push0 
  14b9:39 04            pushi 4 // $4 x
  14bb:78               push1 
  14bc:38 00e7          pushi e7 // $e7 dynamic
  14bf:39 03            pushi 3 // $3 y
  14c1:78               push1 
  14c2:39 47            pushi 47 // $47 wordFail
  14c4:38 00db          pushi db // $db cycleSpeed
  14c7:78               push1 
  14c8:39 0d            pushi d // $d lsTop
  14ca:38 0096          pushi 96 // $96 setCycle
  14cd:39 04            pushi 4 // $4 x
  14cf:51 19            class CT 
  14d1:36                push 
  14d2:78               push1 
  14d3:78               push1 
  14d4:7c            pushSelf 
  14d5:72 206e          lofsa $206e // reverseBiaz
  14d8:4a 30             send 30 

  14da:32 038b            jmp code_1868 

        code_14dd
  14dd:3c                 dup 
  14de:35 07              ldi 7 
  14e0:1a                 eq? 
  14e1:30 0007            bnt code_14eb 
  14e4:35 3c              ldi 3c 
  14e6:65 16             aTop ticks 
  14e8:32 037d            jmp code_1868 

        code_14eb
  14eb:3c                 dup 
  14ec:35 08              ldi 8 
  14ee:1a                 eq? 
  14ef:30 0014            bnt code_1506 
  14f2:38 0096          pushi 96 // $96 setCycle
  14f5:39 04            pushi 4 // $4 x
  14f7:51 19            class CT 
  14f9:36                push 
  14fa:39 03            pushi 3 // $3 y
  14fc:78               push1 
  14fd:7c            pushSelf 
  14fe:72 206e          lofsa $206e // reverseBiaz
  1501:4a 0c             send c 

  1503:32 0362            jmp code_1868 

        code_1506
  1506:3c                 dup 
  1507:35 09              ldi 9 
  1509:1a                 eq? 
  150a:30 0007            bnt code_1514 
  150d:35 3c              ldi 3c 
  150f:65 16             aTop ticks 
  1511:32 0354            jmp code_1868 

        code_1514
  1514:3c                 dup 
  1515:35 0a              ldi a 
  1517:1a                 eq? 
  1518:30 0010            bnt code_152b 
  151b:38 0096          pushi 96 // $96 setCycle
  151e:7a               push2 
  151f:51 1a            class End 
  1521:36                push 
  1522:7c            pushSelf 
  1523:72 206e          lofsa $206e // reverseBiaz
  1526:4a 08             send 8 

  1528:32 033d            jmp code_1868 

        code_152b
  152b:3c                 dup 
  152c:35 0b              ldi b 
  152e:1a                 eq? 
  152f:30 000f            bnt code_1541 
  1532:39 2a            pushi 2a // $2a play
  1534:76               push0 
  1535:72 2e82          lofsa $2e82 // glassesClink
  1538:4a 04             send 4 

  153a:35 7b              ldi 7b 
  153c:65 16             aTop ticks 
  153e:32 0327            jmp code_1868 

        code_1541
  1541:3c                 dup 
  1542:35 0c              ldi c 
  1544:1a                 eq? 
  1545:30 001a            bnt code_1562 
  1548:38 00a2          pushi a2 // $a2 setLoop
  154b:78               push1 
  154c:78               push1 
  154d:38 0120          pushi 120 // $120 setCel
  1550:78               push1 
  1551:76               push0 
  1552:38 0096          pushi 96 // $96 setCycle
  1555:7a               push2 
  1556:51 1a            class End 
  1558:36                push 
  1559:7c            pushSelf 
  155a:72 206e          lofsa $206e // reverseBiaz
  155d:4a 14             send 14 

  155f:32 0306            jmp code_1868 

        code_1562
  1562:3c                 dup 
  1563:35 0d              ldi d 
  1565:1a                 eq? 
  1566:30 0007            bnt code_1570 
  1569:35 7b              ldi 7b 
  156b:65 16             aTop ticks 
  156d:32 02f8            jmp code_1868 

        code_1570
  1570:3c                 dup 
  1571:35 0e              ldi e 
  1573:1a                 eq? 
  1574:30 0017            bnt code_158e 
  1577:39 06            pushi 6 // $6 loop
  1579:72 2f0a          lofsa $2f0a // Reverse Biaz
  157c:36                push 
  157d:38 0294          pushi 294 // $294 sel_660
  1580:39 19            pushi 19 // $19 time
  1582:39 6c            pushi 6c // $6c dispose
  1584:38 008b          pushi 8b // $8b caller
  1587:7c            pushSelf 
  1588:45 12 0c         callb procedure_0012 c //  

  158b:32 02da            jmp code_1868 

        code_158e
  158e:3c                 dup 
  158f:35 0f              ldi f 
  1591:1a                 eq? 
  1592:30 0007            bnt code_159c 
  1595:35 3c              ldi 3c 
  1597:65 16             aTop ticks 
  1599:32 02cc            jmp code_1868 

        code_159c
  159c:3c                 dup 
  159d:35 10              ldi 10 
  159f:1a                 eq? 
  15a0:30 0013            bnt code_15b6 
  15a3:39 03            pushi 3 // $3 y
  15a5:89 00              lsg  
  15a7:38 0294          pushi 294 // $294 sel_660
  15aa:39 1a            pushi 1a // $1a text
  15ac:45 12 06         callb procedure_0012 6 //  

  15af:35 7b              ldi 7b 
  15b1:65 16             aTop ticks 
  15b3:32 02b2            jmp code_1868 

        code_15b6
  15b6:3c                 dup 
  15b7:35 11              ldi 11 
  15b9:1a                 eq? 
  15ba:30 002a            bnt code_15e7 
  15bd:39 03            pushi 3 // $3 y
  15bf:89 00              lsg  
  15c1:38 0294          pushi 294 // $294 sel_660
  15c4:39 1b            pushi 1b // $1b elements
  15c6:45 12 06         callb procedure_0012 6 //  

  15c9:38 00a2          pushi a2 // $a2 setLoop
  15cc:78               push1 
  15cd:76               push0 
  15ce:38 0120          pushi 120 // $120 setCel
  15d1:78               push1 
  15d2:7a               push2 
  15d3:38 0096          pushi 96 // $96 setCycle
  15d6:39 04            pushi 4 // $4 x
  15d8:51 19            class CT 
  15da:36                push 
  15db:39 03            pushi 3 // $3 y
  15dd:78               push1 
  15de:7c            pushSelf 
  15df:72 206e          lofsa $206e // reverseBiaz
  15e2:4a 18             send 18 

  15e4:32 0281            jmp code_1868 

        code_15e7
  15e7:3c                 dup 
  15e8:35 12              ldi 12 
  15ea:1a                 eq? 
  15eb:30 0007            bnt code_15f5 
  15ee:35 3c              ldi 3c 
  15f0:65 16             aTop ticks 
  15f2:32 0273            jmp code_1868 

        code_15f5
  15f5:3c                 dup 
  15f6:35 13              ldi 13 
  15f8:1a                 eq? 
  15f9:30 001a            bnt code_1616 
  15fc:38 00a2          pushi a2 // $a2 setLoop
  15ff:78               push1 
  1600:78               push1 
  1601:38 0120          pushi 120 // $120 setCel
  1604:78               push1 
  1605:76               push0 
  1606:38 0096          pushi 96 // $96 setCycle
  1609:7a               push2 
  160a:51 1a            class End 
  160c:36                push 
  160d:7c            pushSelf 
  160e:72 206e          lofsa $206e // reverseBiaz
  1611:4a 14             send 14 

  1613:32 0252            jmp code_1868 

        code_1616
  1616:3c                 dup 
  1617:35 14              ldi 14 
  1619:1a                 eq? 
  161a:30 0007            bnt code_1624 
  161d:35 3c              ldi 3c 
  161f:65 16             aTop ticks 
  1621:32 0244            jmp code_1868 

        code_1624
  1624:3c                 dup 
  1625:35 15              ldi 15 
  1627:1a                 eq? 
  1628:30 005f            bnt code_168a 
  162b:8b 05              lsl local5 
  162d:3c                 dup 
  162e:35 00              ldi 0 
  1630:1a                 eq? 
  1631:30 000f            bnt code_1643 
  1634:39 03            pushi 3 // $3 y
  1636:89 00              lsg  
  1638:38 0294          pushi 294 // $294 sel_660
  163b:39 1c            pushi 1c // $1c color
  163d:45 12 06         callb procedure_0012 6 //  

  1640:32 003f            jmp code_1682 

        code_1643
  1643:3c                 dup 
  1644:35 01              ldi 1 
  1646:1a                 eq? 
  1647:30 000f            bnt code_1659 
  164a:39 03            pushi 3 // $3 y
  164c:89 00              lsg  
  164e:38 0294          pushi 294 // $294 sel_660
  1651:39 1d            pushi 1d // $1d back
  1653:45 12 06         callb procedure_0012 6 //  

  1656:32 0029            jmp code_1682 

        code_1659
  1659:3c                 dup 
  165a:35 02              ldi 2 
  165c:1a                 eq? 
  165d:30 000f            bnt code_166f 
  1660:39 03            pushi 3 // $3 y
  1662:89 00              lsg  
  1664:38 0294          pushi 294 // $294 sel_660
  1667:39 1e            pushi 1e // $1e mode
  1669:45 12 06         callb procedure_0012 6 //  

  166c:32 0013            jmp code_1682 

        code_166f
  166f:3c                 dup 
  1670:35 03              ldi 3 
  1672:1a                 eq? 
  1673:30 000c            bnt code_1682 
  1676:39 03            pushi 3 // $3 y
  1678:89 00              lsg  
  167a:38 0294          pushi 294 // $294 sel_660
  167d:39 1f            pushi 1f // $1f style
  167f:45 12 06         callb procedure_0012 6 //  


        code_1682
  1682:3a                toss 
  1683:35 5a              ldi 5a 
  1685:65 16             aTop ticks 
  1687:32 01de            jmp code_1868 

        code_168a
  168a:3c                 dup 
  168b:35 16              ldi 16 
  168d:1a                 eq? 
  168e:30 001e            bnt code_16af 
  1691:38 00a2          pushi a2 // $a2 setLoop
  1694:78               push1 
  1695:76               push0 
  1696:38 0120          pushi 120 // $120 setCel
  1699:78               push1 
  169a:7a               push2 
  169b:38 0096          pushi 96 // $96 setCycle
  169e:39 04            pushi 4 // $4 x
  16a0:51 19            class CT 
  16a2:36                push 
  16a3:39 03            pushi 3 // $3 y
  16a5:78               push1 
  16a6:7c            pushSelf 
  16a7:72 206e          lofsa $206e // reverseBiaz
  16aa:4a 18             send 18 

  16ac:32 01b9            jmp code_1868 

        code_16af
  16af:3c                 dup 
  16b0:35 17              ldi 17 
  16b2:1a                 eq? 
  16b3:30 0007            bnt code_16bd 
  16b6:35 3c              ldi 3c 
  16b8:65 16             aTop ticks 
  16ba:32 01ab            jmp code_1868 

        code_16bd
  16bd:3c                 dup 
  16be:35 18              ldi 18 
  16c0:1a                 eq? 
  16c1:30 001a            bnt code_16de 
  16c4:38 00a2          pushi a2 // $a2 setLoop
  16c7:78               push1 
  16c8:78               push1 
  16c9:38 0120          pushi 120 // $120 setCel
  16cc:78               push1 
  16cd:76               push0 
  16ce:38 0096          pushi 96 // $96 setCycle
  16d1:7a               push2 
  16d2:51 1a            class End 
  16d4:36                push 
  16d5:7c            pushSelf 
  16d6:72 206e          lofsa $206e // reverseBiaz
  16d9:4a 14             send 14 

  16db:32 018a            jmp code_1868 

        code_16de
  16de:3c                 dup 
  16df:35 19              ldi 19 
  16e1:1a                 eq? 
  16e2:30 0007            bnt code_16ec 
  16e5:35 3c              ldi 3c 
  16e7:65 16             aTop ticks 
  16e9:32 017c            jmp code_1868 

        code_16ec
  16ec:3c                 dup 
  16ed:35 1a              ldi 1a 
  16ef:1a                 eq? 
  16f0:30 007b            bnt code_176e 
  16f3:8b 05              lsl local5 
  16f5:3c                 dup 
  16f6:35 00              ldi 0 
  16f8:1a                 eq? 
  16f9:30 0017            bnt code_1713 
  16fc:39 06            pushi 6 // $6 loop
  16fe:72 2f0a          lofsa $2f0a // Reverse Biaz
  1701:36                push 
  1702:38 0294          pushi 294 // $294 sel_660
  1705:39 20            pushi 20 // $20 state
  1707:39 6c            pushi 6c // $6c dispose
  1709:38 008b          pushi 8b // $8b caller
  170c:7c            pushSelf 
  170d:45 12 0c         callb procedure_0012 c //  

  1710:32 0057            jmp code_176a 

        code_1713
  1713:3c                 dup 
  1714:35 01              ldi 1 
  1716:1a                 eq? 
  1717:30 0017            bnt code_1731 
  171a:39 06            pushi 6 // $6 loop
  171c:72 2f0a          lofsa $2f0a // Reverse Biaz
  171f:36                push 
  1720:38 0294          pushi 294 // $294 sel_660
  1723:39 21            pushi 21 // $21 font
  1725:39 6c            pushi 6c // $6c dispose
  1727:38 008b          pushi 8b // $8b caller
  172a:7c            pushSelf 
  172b:45 12 0c         callb procedure_0012 c //  

  172e:32 0039            jmp code_176a 

        code_1731
  1731:3c                 dup 
  1732:35 02              ldi 2 
  1734:1a                 eq? 
  1735:30 0017            bnt code_174f 
  1738:39 06            pushi 6 // $6 loop
  173a:72 2f0a          lofsa $2f0a // Reverse Biaz
  173d:36                push 
  173e:38 0294          pushi 294 // $294 sel_660
  1741:39 22            pushi 22 // $22 type
  1743:39 6c            pushi 6c // $6c dispose
  1745:38 008b          pushi 8b // $8b caller
  1748:7c            pushSelf 
  1749:45 12 0c         callb procedure_0012 c //  

  174c:32 001b            jmp code_176a 

        code_174f
  174f:3c                 dup 
  1750:35 03              ldi 3 
  1752:1a                 eq? 
  1753:30 0014            bnt code_176a 
  1756:39 06            pushi 6 // $6 loop
  1758:72 2f0a          lofsa $2f0a // Reverse Biaz
  175b:36                push 
  175c:38 0294          pushi 294 // $294 sel_660
  175f:39 23            pushi 23 // $23 window
  1761:39 6c            pushi 6c // $6c dispose
  1763:38 008b          pushi 8b // $8b caller
  1766:7c            pushSelf 
  1767:45 12 0c         callb procedure_0012 c //  


        code_176a
  176a:3a                toss 
  176b:32 00fa            jmp code_1868 

        code_176e
  176e:3c                 dup 
  176f:35 1b              ldi 1b 
  1771:1a                 eq? 
  1772:30 0017            bnt code_178c 
  1775:35 5a              ldi 5a 
  1777:65 16             aTop ticks 
  1779:c3 05              +al local5 
  177b:36                push 
  177c:35 04              ldi 4 
  177e:22                 lt? 
  177f:30 00e6            bnt code_1868 
  1782:67 0a             pTos state 
  1784:35 07              ldi 7 
  1786:04                 sub 
  1787:65 0a             aTop state 
  1789:32 00dc            jmp code_1868 

        code_178c
  178c:3c                 dup 
  178d:35 1c              ldi 1c 
  178f:1a                 eq? 
  1790:30 003b            bnt code_17ce 
  1793:38 00c2          pushi c2 // $c2 show
  1796:76               push0 
  1797:81 00              lag  
  1799:4a 04             send 4 

  179b:39 2a            pushi 2a // $2a play
  179d:76               push0 
  179e:72 2eb8          lofsa $2eb8 // zing
  17a1:4a 04             send 4 

  17a3:39 05            pushi 5 // $5 view
  17a5:78               push1 
  17a6:38 02ab          pushi 2ab // $2ab sel_683
  17a9:38 00a2          pushi a2 // $a2 setLoop
  17ac:78               push1 
  17ad:7a               push2 
  17ae:38 0120          pushi 120 // $120 setCel
  17b1:78               push1 
  17b2:76               push0 
  17b3:39 04            pushi 4 // $4 x
  17b5:78               push1 
  17b6:38 00f1          pushi f1 // $f1 escaping
  17b9:39 03            pushi 3 // $3 y
  17bb:78               push1 
  17bc:39 47            pushi 47 // $47 wordFail
  17be:38 0096          pushi 96 // $96 setCycle
  17c1:7a               push2 
  17c2:51 1a            class End 
  17c4:36                push 
  17c5:7c            pushSelf 
  17c6:72 206e          lofsa $206e // reverseBiaz
  17c9:4a 26             send 26 

  17cb:32 009a            jmp code_1868 

        code_17ce
  17ce:3c                 dup 
  17cf:35 1d              ldi 1d 
  17d1:1a                 eq? 
  17d2:30 0007            bnt code_17dc 
  17d5:35 03              ldi 3 
  17d7:65 12             aTop seconds 
  17d9:32 008c            jmp code_1868 

        code_17dc
  17dc:3c                 dup 
  17dd:35 1e              ldi 1e 
  17df:1a                 eq? 
  17e0:30 0022            bnt code_1805 
  17e3:39 6b            pushi 6b // $6b init
  17e5:76               push0 
  17e6:72 20e0          lofsa $20e0 // giveTape
  17e9:4a 04             send 4 

  17eb:7a               push2 
  17ec:39 28            pushi 28 // $28 message
  17ee:38 0082          pushi 82 // $82 start
  17f1:45 0a 04         callb procedure_000a 4 //  

  17f4:38 0147          pushi 147 // $147 get
  17f7:78               push1 
  17f8:39 06            pushi 6 // $6 loop
  17fa:81 00              lag  
  17fc:4a 06             send 6 

  17fe:35 03              ldi 3 
  1800:65 12             aTop seconds 
  1802:32 0063            jmp code_1868 

        code_1805
  1805:3c                 dup 
  1806:35 1f              ldi 1f 
  1808:1a                 eq? 
  1809:30 001f            bnt code_182b 
  180c:7a               push2 
  180d:39 12            pushi 12 // $12 illegalBits
  180f:39 7f            pushi 7f // $7f addAfter
  1811:45 0a 04         callb procedure_000a 4 //  

  1814:39 06            pushi 6 // $6 loop
  1816:72 2f0a          lofsa $2f0a // Reverse Biaz
  1819:36                push 
  181a:38 0294          pushi 294 // $294 sel_660
  181d:39 24            pushi 24 // $24 cursor
  181f:39 6c            pushi 6c // $6c dispose
  1821:38 008b          pushi 8b // $8b caller
  1824:7c            pushSelf 
  1825:45 12 0c         callb procedure_0012 c //  

  1828:32 003d            jmp code_1868 

        code_182b
  182b:3c                 dup 
  182c:35 20              ldi 20 
  182e:1a                 eq? 
  182f:30 0007            bnt code_1839 
  1832:35 03              ldi 3 
  1834:65 12             aTop seconds 
  1836:32 002f            jmp code_1868 

        code_1839
  1839:3c                 dup 
  183a:35 21              ldi 21 
  183c:1a                 eq? 
  183d:30 0010            bnt code_1850 
  1840:7a               push2 
  1841:38 0294          pushi 294 // $294 sel_660
  1844:39 25            pushi 25 // $25 max
  1846:45 0e 04         callb procedure_000e 4 //  

  1849:35 03              ldi 3 
  184b:65 10             aTop cycles 
  184d:32 0018            jmp code_1868 

        code_1850
  1850:3c                 dup 
  1851:35 22              ldi 22 
  1853:1a                 eq? 
  1854:30 0011            bnt code_1868 
  1857:78               push1 
  1858:39 14            pushi 14 // $14 brLeft
  185a:45 07 02         callb procedure_0007 2 //  

  185d:38 0179          pushi 179 // $179 newRoom
  1860:78               push1 
  1861:38 02b2          pushi 2b2 // $2b2 sel_690
  1864:81 02              lag  
  1866:4a 06             send 6 


        code_1868
  1868:3a                toss 
  1869:48                 ret 
    )

)

// 1a62
(instance sTalkScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_18a4
  18a4:87 01              lap param1 
  18a6:65 0a             aTop state 
  18a8:36                push 
  18a9:3c                 dup 
  18aa:35 00              ldi 0 
  18ac:1a                 eq? 
  18ad:30 00b7            bnt code_1967 
  18b0:76               push0 
  18b1:45 02 00         callb procedure_0002 0 //  

  18b4:8b 04              lsl local4 
  18b6:3c                 dup 
  18b7:35 00              ldi 0 
  18b9:1a                 eq? 
  18ba:30 000f            bnt code_18cc 
  18bd:39 03            pushi 3 // $3 y
  18bf:89 00              lsg  
  18c1:38 0294          pushi 294 // $294 sel_660
  18c4:39 26            pushi 26 // $26 mark
  18c6:45 12 06         callb procedure_0012 6 //  

  18c9:32 0093            jmp code_195f 

        code_18cc
  18cc:3c                 dup 
  18cd:35 01              ldi 1 
  18cf:1a                 eq? 
  18d0:30 000f            bnt code_18e2 
  18d3:39 03            pushi 3 // $3 y
  18d5:89 00              lsg  
  18d7:38 0294          pushi 294 // $294 sel_660
  18da:39 27            pushi 27 // $27 who
  18dc:45 12 06         callb procedure_0012 6 //  

  18df:32 007d            jmp code_195f 

        code_18e2
  18e2:3c                 dup 
  18e3:35 02              ldi 2 
  18e5:1a                 eq? 
  18e6:30 000f            bnt code_18f8 
  18e9:39 03            pushi 3 // $3 y
  18eb:89 00              lsg  
  18ed:38 0294          pushi 294 // $294 sel_660
  18f0:39 28            pushi 28 // $28 message
  18f2:45 12 06         callb procedure_0012 6 //  

  18f5:32 0067            jmp code_195f 

        code_18f8
  18f8:3c                 dup 
  18f9:35 03              ldi 3 
  18fb:1a                 eq? 
  18fc:30 000f            bnt code_190e 
  18ff:39 03            pushi 3 // $3 y
  1901:89 00              lsg  
  1903:38 0294          pushi 294 // $294 sel_660
  1906:39 29            pushi 29 // $29 edit
  1908:45 12 06         callb procedure_0012 6 //  

  190b:32 0051            jmp code_195f 

        code_190e
  190e:3c                 dup 
  190f:35 04              ldi 4 
  1911:1a                 eq? 
  1912:30 000f            bnt code_1924 
  1915:39 03            pushi 3 // $3 y
  1917:89 00              lsg  
  1919:38 0294          pushi 294 // $294 sel_660
  191c:39 2a            pushi 2a // $2a play
  191e:45 12 06         callb procedure_0012 6 //  

  1921:32 003b            jmp code_195f 

        code_1924
  1924:3c                 dup 
  1925:35 05              ldi 5 
  1927:1a                 eq? 
  1928:30 000f            bnt code_193a 
  192b:39 03            pushi 3 // $3 y
  192d:89 00              lsg  
  192f:38 0294          pushi 294 // $294 sel_660
  1932:39 2b            pushi 2b // $2b number
  1934:45 12 06         callb procedure_0012 6 //  

  1937:32 0025            jmp code_195f 

        code_193a
  193a:3c                 dup 
  193b:35 06              ldi 6 
  193d:1a                 eq? 
  193e:30 001e            bnt code_195f 
  1941:39 6c            pushi 6c // $6c dispose
  1943:76               push0 
  1944:39 54            pushi 54 // $54 delete
  1946:76               push0 
  1947:81 aa              lag  
  1949:4a 08             send 8 

  194b:39 6c            pushi 6c // $6c dispose
  194d:76               push0 
  194e:72 1340          lofsa $1340 // sEnterBooth
  1951:4a 04             send 4 

  1953:39 03            pushi 3 // $3 y
  1955:89 00              lsg  
  1957:38 0294          pushi 294 // $294 sel_660
  195a:39 2c            pushi 2c // $2c nodePtr
  195c:45 12 06         callb procedure_0012 6 //  


        code_195f
  195f:3a                toss 
  1960:35 3c              ldi 3c 
  1962:65 16             aTop ticks 
  1964:32 00f3            jmp code_1a5a 

        code_1967
  1967:3c                 dup 
  1968:35 01              ldi 1 
  196a:1a                 eq? 
  196b:30 00c5            bnt code_1a33 
  196e:8b 04              lsl local4 
  1970:3c                 dup 
  1971:35 00              ldi 0 
  1973:1a                 eq? 
  1974:30 0017            bnt code_198e 
  1977:39 06            pushi 6 // $6 loop
  1979:72 2f0a          lofsa $2f0a // Reverse Biaz
  197c:36                push 
  197d:38 0294          pushi 294 // $294 sel_660
  1980:39 2d            pushi 2d // $2d client
  1982:39 6c            pushi 6c // $6c dispose
  1984:38 008b          pushi 8b // $8b caller
  1987:7c            pushSelf 
  1988:45 12 0c         callb procedure_0012 c //  

  198b:32 00a1            jmp code_1a2f 

        code_198e
  198e:3c                 dup 
  198f:35 01              ldi 1 
  1991:1a                 eq? 
  1992:30 0017            bnt code_19ac 
  1995:39 06            pushi 6 // $6 loop
  1997:72 2f0a          lofsa $2f0a // Reverse Biaz
  199a:36                push 
  199b:38 0294          pushi 294 // $294 sel_660
  199e:39 2e            pushi 2e // $2e dx
  19a0:39 6c            pushi 6c // $6c dispose
  19a2:38 008b          pushi 8b // $8b caller
  19a5:7c            pushSelf 
  19a6:45 12 0c         callb procedure_0012 c //  

  19a9:32 0083            jmp code_1a2f 

        code_19ac
  19ac:3c                 dup 
  19ad:35 02              ldi 2 
  19af:1a                 eq? 
  19b0:30 0017            bnt code_19ca 
  19b3:39 06            pushi 6 // $6 loop
  19b5:72 2f0a          lofsa $2f0a // Reverse Biaz
  19b8:36                push 
  19b9:38 0294          pushi 294 // $294 sel_660
  19bc:39 2f            pushi 2f // $2f dy
  19be:39 6c            pushi 6c // $6c dispose
  19c0:38 008b          pushi 8b // $8b caller
  19c3:7c            pushSelf 
  19c4:45 12 0c         callb procedure_0012 c //  

  19c7:32 0065            jmp code_1a2f 

        code_19ca
  19ca:3c                 dup 
  19cb:35 03              ldi 3 
  19cd:1a                 eq? 
  19ce:30 0017            bnt code_19e8 
  19d1:39 06            pushi 6 // $6 loop
  19d3:72 2f0a          lofsa $2f0a // Reverse Biaz
  19d6:36                push 
  19d7:38 0294          pushi 294 // $294 sel_660
  19da:39 30            pushi 30 // $30 b-moveCnt
  19dc:39 6c            pushi 6c // $6c dispose
  19de:38 008b          pushi 8b // $8b caller
  19e1:7c            pushSelf 
  19e2:45 12 0c         callb procedure_0012 c //  

  19e5:32 0047            jmp code_1a2f 

        code_19e8
  19e8:3c                 dup 
  19e9:35 04              ldi 4 
  19eb:1a                 eq? 
  19ec:30 0007            bnt code_19f6 
  19ef:35 02              ldi 2 
  19f1:65 10             aTop cycles 
  19f3:32 0039            jmp code_1a2f 

        code_19f6
  19f6:3c                 dup 
  19f7:35 05              ldi 5 
  19f9:1a                 eq? 
  19fa:30 0017            bnt code_1a14 
  19fd:39 06            pushi 6 // $6 loop
  19ff:72 2f0a          lofsa $2f0a // Reverse Biaz
  1a02:36                push 
  1a03:38 0294          pushi 294 // $294 sel_660
  1a06:39 31            pushi 31 // $31 b-i1
  1a08:39 6c            pushi 6c // $6c dispose
  1a0a:38 008b          pushi 8b // $8b caller
  1a0d:7c            pushSelf 
  1a0e:45 12 0c         callb procedure_0012 c //  

  1a11:32 001b            jmp code_1a2f 

        code_1a14
  1a14:3c                 dup 
  1a15:35 06              ldi 6 
  1a17:1a                 eq? 
  1a18:30 0014            bnt code_1a2f 
  1a1b:39 06            pushi 6 // $6 loop
  1a1d:72 2f0a          lofsa $2f0a // Reverse Biaz
  1a20:36                push 
  1a21:38 0294          pushi 294 // $294 sel_660
  1a24:39 32            pushi 32 // $32 b-i2
  1a26:39 6c            pushi 6c // $6c dispose
  1a28:38 008b          pushi 8b // $8b caller
  1a2b:7c            pushSelf 
  1a2c:45 12 0c         callb procedure_0012 c //  


        code_1a2f
  1a2f:3a                toss 
  1a30:32 0027            jmp code_1a5a 

        code_1a33
  1a33:3c                 dup 
  1a34:35 02              ldi 2 
  1a36:1a                 eq? 
  1a37:30 0020            bnt code_1a5a 
  1a3a:c3 04              +al local4 
  1a3c:76               push0 
  1a3d:45 10 00         callb procedure_0010 0 //  

  1a40:8b 04              lsl local4 
  1a42:35 06              ldi 6 
  1a44:1e                 gt? 
  1a45:30 000d            bnt code_1a55 
  1a48:38 008e          pushi 8e // $8e setScript
  1a4b:78               push1 
  1a4c:72 1e8c          lofsa $1e8c // sDoSex
  1a4f:36                push 
  1a50:54 06             self 6 

  1a52:32 0005            jmp code_1a5a 

        code_1a55
  1a55:39 6c            pushi 6c // $6c dispose
  1a57:76               push0 
  1a58:54 04             self 4 


        code_1a5a
  1a5a:3a                toss 
  1a5b:48                 ret 
    )

)

// 1e86
(instance sDoSex of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1a96
  1a96:87 01              lap param1 
  1a98:65 0a             aTop state 
  1a9a:36                push 
  1a9b:3c                 dup 
  1a9c:35 00              ldi 0 
  1a9e:1a                 eq? 
  1a9f:30 0023            bnt code_1ac5 
  1aa2:76               push0 
  1aa3:45 02 00         callb procedure_0002 0 //  

  1aa6:7a               push2 
  1aa7:38 0294          pushi 294 // $294 sel_660
  1aaa:39 33            pushi 33 // $33 b-di
  1aac:45 0e 04         callb procedure_000e 4 //  

  1aaf:38 009f          pushi 9f // $9f fade
  1ab2:39 04            pushi 4 // $4 x
  1ab4:76               push0 
  1ab5:39 0f            pushi f // $f lsBottom
  1ab7:39 0c            pushi c // $c nsRight
  1ab9:78               push1 
  1aba:81 66              lag  
  1abc:4a 0c             send c 

  1abe:35 3c              ldi 3c 
  1ac0:65 16             aTop ticks 
  1ac2:32 03b9            jmp code_1e7e 

        code_1ac5
  1ac5:3c                 dup 
  1ac6:35 01              ldi 1 
  1ac8:1a                 eq? 
  1ac9:30 004f            bnt code_1b1b 
  1acc:39 2b            pushi 2b // $2b number
  1ace:78               push1 
  1acf:38 0297          pushi 297 // $297 sel_663
  1ad2:38 00a2          pushi a2 // $a2 setLoop
  1ad5:78               push1 
  1ad6:39 ff            pushi ff // $ff syncNum
  1ad8:39 66            pushi 66 // $66 flags
  1ada:78               push1 
  1adb:78               push1 
  1adc:39 2a            pushi 2a // $2a play
  1ade:76               push0 
  1adf:81 67              lag  
  1ae1:4a 16             send 16 

  1ae3:39 69            pushi 69 // $69 hide
  1ae5:76               push0 
  1ae6:81 00              lag  
  1ae8:4a 04             send 4 

  1aea:39 05            pushi 5 // $5 view
  1aec:78               push1 
  1aed:38 02aa          pushi 2aa // $2aa sel_682
  1af0:38 00a2          pushi a2 // $a2 setLoop
  1af3:78               push1 
  1af4:76               push0 
  1af5:38 0120          pushi 120 // $120 setCel
  1af8:78               push1 
  1af9:76               push0 
  1afa:39 04            pushi 4 // $4 x
  1afc:78               push1 
  1afd:38 00de          pushi de // $de isStopped
  1b00:39 03            pushi 3 // $3 y
  1b02:78               push1 
  1b03:39 47            pushi 47 // $47 wordFail
  1b05:38 00db          pushi db // $db cycleSpeed
  1b08:78               push1 
  1b09:39 0a            pushi a // $a nsLeft
  1b0b:38 0096          pushi 96 // $96 setCycle
  1b0e:7a               push2 
  1b0f:51 1a            class End 
  1b11:36                push 
  1b12:7c            pushSelf 
  1b13:72 206e          lofsa $206e // reverseBiaz
  1b16:4a 2c             send 2c 

  1b18:32 0363            jmp code_1e7e 

        code_1b1b
  1b1b:3c                 dup 
  1b1c:35 02              ldi 2 
  1b1e:1a                 eq? 
  1b1f:30 0008            bnt code_1b2a 
  1b22:34 00b4            ldi b4 
  1b25:65 16             aTop ticks 
  1b27:32 0354            jmp code_1e7e 

        code_1b2a
  1b2a:3c                 dup 
  1b2b:35 03              ldi 3 
  1b2d:1a                 eq? 
  1b2e:30 001a            bnt code_1b4b 
  1b31:38 00a2          pushi a2 // $a2 setLoop
  1b34:78               push1 
  1b35:78               push1 
  1b36:38 0120          pushi 120 // $120 setCel
  1b39:78               push1 
  1b3a:76               push0 
  1b3b:38 0096          pushi 96 // $96 setCycle
  1b3e:7a               push2 
  1b3f:51 1a            class End 
  1b41:36                push 
  1b42:7c            pushSelf 
  1b43:72 206e          lofsa $206e // reverseBiaz
  1b46:4a 14             send 14 

  1b48:32 0333            jmp code_1e7e 

        code_1b4b
  1b4b:3c                 dup 
  1b4c:35 04              ldi 4 
  1b4e:1a                 eq? 
  1b4f:30 0008            bnt code_1b5a 
  1b52:34 00f0            ldi f0 
  1b55:65 16             aTop ticks 
  1b57:32 0324            jmp code_1e7e 

        code_1b5a
  1b5a:3c                 dup 
  1b5b:35 05              ldi 5 
  1b5d:1a                 eq? 
  1b5e:30 002b            bnt code_1b8c 
  1b61:38 00a2          pushi a2 // $a2 setLoop
  1b64:78               push1 
  1b65:7a               push2 
  1b66:38 0120          pushi 120 // $120 setCel
  1b69:78               push1 
  1b6a:76               push0 
  1b6b:39 04            pushi 4 // $4 x
  1b6d:78               push1 
  1b6e:38 00eb          pushi eb // $eb incClientPos
  1b71:39 03            pushi 3 // $3 y
  1b73:78               push1 
  1b74:39 47            pushi 47 // $47 wordFail
  1b76:38 00db          pushi db // $db cycleSpeed
  1b79:78               push1 
  1b7a:39 0a            pushi a // $a nsLeft
  1b7c:38 0096          pushi 96 // $96 setCycle
  1b7f:7a               push2 
  1b80:51 1a            class End 
  1b82:36                push 
  1b83:7c            pushSelf 
  1b84:72 206e          lofsa $206e // reverseBiaz
  1b87:4a 26             send 26 

  1b89:32 02f2            jmp code_1e7e 

        code_1b8c
  1b8c:3c                 dup 
  1b8d:35 06              ldi 6 
  1b8f:1a                 eq? 
  1b90:30 0007            bnt code_1b9a 
  1b93:35 78              ldi 78 
  1b95:65 16             aTop ticks 
  1b97:32 02e4            jmp code_1e7e 

        code_1b9a
  1b9a:3c                 dup 
  1b9b:35 07              ldi 7 
  1b9d:1a                 eq? 
  1b9e:30 002c            bnt code_1bcd 
  1ba1:38 00a2          pushi a2 // $a2 setLoop
  1ba4:78               push1 
  1ba5:39 03            pushi 3 // $3 y
  1ba7:38 0120          pushi 120 // $120 setCel
  1baa:78               push1 
  1bab:76               push0 
  1bac:39 04            pushi 4 // $4 x
  1bae:78               push1 
  1baf:38 0107          pushi 107 // $107 waitApogeeY
  1bb2:39 03            pushi 3 // $3 y
  1bb4:78               push1 
  1bb5:39 47            pushi 47 // $47 wordFail
  1bb7:38 00db          pushi db // $db cycleSpeed
  1bba:78               push1 
  1bbb:39 0a            pushi a // $a nsLeft
  1bbd:38 0096          pushi 96 // $96 setCycle
  1bc0:7a               push2 
  1bc1:51 1a            class End 
  1bc3:36                push 
  1bc4:7c            pushSelf 
  1bc5:72 206e          lofsa $206e // reverseBiaz
  1bc8:4a 26             send 26 

  1bca:32 02b1            jmp code_1e7e 

        code_1bcd
  1bcd:3c                 dup 
  1bce:35 08              ldi 8 
  1bd0:1a                 eq? 
  1bd1:30 0007            bnt code_1bdb 
  1bd4:35 78              ldi 78 
  1bd6:65 16             aTop ticks 
  1bd8:32 02a3            jmp code_1e7e 

        code_1bdb
  1bdb:3c                 dup 
  1bdc:35 09              ldi 9 
  1bde:1a                 eq? 
  1bdf:30 002f            bnt code_1c11 
  1be2:38 00a2          pushi a2 // $a2 setLoop
  1be5:78               push1 
  1be6:7a               push2 
  1be7:38 0120          pushi 120 // $120 setCel
  1bea:78               push1 
  1beb:76               push0 
  1bec:39 04            pushi 4 // $4 x
  1bee:78               push1 
  1bef:38 00eb          pushi eb // $eb incClientPos
  1bf2:39 03            pushi 3 // $3 y
  1bf4:78               push1 
  1bf5:39 47            pushi 47 // $47 wordFail
  1bf7:38 00db          pushi db // $db cycleSpeed
  1bfa:78               push1 
  1bfb:39 0a            pushi a // $a nsLeft
  1bfd:38 0096          pushi 96 // $96 setCycle
  1c00:39 04            pushi 4 // $4 x
  1c02:51 19            class CT 
  1c04:36                push 
  1c05:39 05            pushi 5 // $5 view
  1c07:78               push1 
  1c08:7c            pushSelf 
  1c09:72 206e          lofsa $206e // reverseBiaz
  1c0c:4a 2a             send 2a 

  1c0e:32 026d            jmp code_1e7e 

        code_1c11
  1c11:3c                 dup 
  1c12:35 0a              ldi a 
  1c14:1a                 eq? 
  1c15:30 003c            bnt code_1c54 
  1c18:38 0096          pushi 96 // $96 setCycle
  1c1b:78               push1 
  1c1c:51 17            class Fwd 
  1c1e:36                push 
  1c1f:72 22f2          lofsa $22f2 // reelThree
  1c22:4a 06             send 6 

  1c24:38 0096          pushi 96 // $96 setCycle
  1c27:78               push1 
  1c28:51 1f            class Rev 
  1c2a:36                push 
  1c2b:72 236e          lofsa $236e // reelFour
  1c2e:4a 06             send 6 

  1c30:39 05            pushi 5 // $5 view
  1c32:78               push1 
  1c33:38 029e          pushi 29e // $29e sel_670
  1c36:38 00a2          pushi a2 // $a2 setLoop
  1c39:78               push1 
  1c3a:78               push1 
  1c3b:38 0120          pushi 120 // $120 setCel
  1c3e:78               push1 
  1c3f:76               push0 
  1c40:38 0096          pushi 96 // $96 setCycle
  1c43:78               push1 
  1c44:51 17            class Fwd 
  1c46:36                push 
  1c47:72 23d8          lofsa $23d8 // vuMeter
  1c4a:4a 18             send 18 

  1c4c:34 00b4            ldi b4 
  1c4f:65 16             aTop ticks 
  1c51:32 022a            jmp code_1e7e 

        code_1c54
  1c54:3c                 dup 
  1c55:35 0b              ldi b 
  1c57:1a                 eq? 
  1c58:30 0026            bnt code_1c81 
  1c5b:38 00a2          pushi a2 // $a2 setLoop
  1c5e:78               push1 
  1c5f:7a               push2 
  1c60:39 04            pushi 4 // $4 x
  1c62:78               push1 
  1c63:38 00eb          pushi eb // $eb incClientPos
  1c66:39 03            pushi 3 // $3 y
  1c68:78               push1 
  1c69:39 47            pushi 47 // $47 wordFail
  1c6b:38 00db          pushi db // $db cycleSpeed
  1c6e:78               push1 
  1c6f:39 0a            pushi a // $a nsLeft
  1c71:38 0096          pushi 96 // $96 setCycle
  1c74:7a               push2 
  1c75:51 1a            class End 
  1c77:36                push 
  1c78:7c            pushSelf 
  1c79:72 206e          lofsa $206e // reverseBiaz
  1c7c:4a 20             send 20 

  1c7e:32 01fd            jmp code_1e7e 

        code_1c81
  1c81:3c                 dup 
  1c82:35 0c              ldi c 
  1c84:1a                 eq? 
  1c85:30 0007            bnt code_1c8f 
  1c88:35 78              ldi 78 
  1c8a:65 16             aTop ticks 
  1c8c:32 01ef            jmp code_1e7e 

        code_1c8f
  1c8f:3c                 dup 
  1c90:35 0d              ldi d 
  1c92:1a                 eq? 
  1c93:30 0026            bnt code_1cbc 
  1c96:38 00a2          pushi a2 // $a2 setLoop
  1c99:78               push1 
  1c9a:39 04            pushi 4 // $4 x
  1c9c:38 0120          pushi 120 // $120 setCel
  1c9f:78               push1 
  1ca0:76               push0 
  1ca1:39 04            pushi 4 // $4 x
  1ca3:78               push1 
  1ca4:38 00ff          pushi ff // $ff syncNum
  1ca7:39 03            pushi 3 // $3 y
  1ca9:78               push1 
  1caa:39 49            pushi 49 // $49 semanticFail
  1cac:38 0096          pushi 96 // $96 setCycle
  1caf:7a               push2 
  1cb0:51 1a            class End 
  1cb2:36                push 
  1cb3:7c            pushSelf 
  1cb4:72 206e          lofsa $206e // reverseBiaz
  1cb7:4a 20             send 20 

  1cb9:32 01c2            jmp code_1e7e 

        code_1cbc
  1cbc:3c                 dup 
  1cbd:35 0e              ldi e 
  1cbf:1a                 eq? 
  1cc0:30 0026            bnt code_1ce9 
  1cc3:38 00a2          pushi a2 // $a2 setLoop
  1cc6:78               push1 
  1cc7:39 05            pushi 5 // $5 view
  1cc9:38 0120          pushi 120 // $120 setCel
  1ccc:78               push1 
  1ccd:76               push0 
  1cce:39 04            pushi 4 // $4 x
  1cd0:78               push1 
  1cd1:38 00d5          pushi d5 // $d5 has
  1cd4:39 03            pushi 3 // $3 y
  1cd6:78               push1 
  1cd7:39 48            pushi 48 // $48 syntaxFail
  1cd9:38 0096          pushi 96 // $96 setCycle
  1cdc:7a               push2 
  1cdd:51 1a            class End 
  1cdf:36                push 
  1ce0:7c            pushSelf 
  1ce1:72 206e          lofsa $206e // reverseBiaz
  1ce4:4a 20             send 20 

  1ce6:32 0195            jmp code_1e7e 

        code_1ce9
  1ce9:3c                 dup 
  1cea:35 0f              ldi f 
  1cec:1a                 eq? 
  1ced:30 0007            bnt code_1cf7 
  1cf0:35 78              ldi 78 
  1cf2:65 16             aTop ticks 
  1cf4:32 0187            jmp code_1e7e 

        code_1cf7
  1cf7:3c                 dup 
  1cf8:35 10              ldi 10 
  1cfa:1a                 eq? 
  1cfb:30 002b            bnt code_1d29 
  1cfe:38 00a2          pushi a2 // $a2 setLoop
  1d01:78               push1 
  1d02:7a               push2 
  1d03:38 0120          pushi 120 // $120 setCel
  1d06:78               push1 
  1d07:76               push0 
  1d08:39 04            pushi 4 // $4 x
  1d0a:78               push1 
  1d0b:38 00eb          pushi eb // $eb incClientPos
  1d0e:39 03            pushi 3 // $3 y
  1d10:78               push1 
  1d11:39 47            pushi 47 // $47 wordFail
  1d13:38 00db          pushi db // $db cycleSpeed
  1d16:78               push1 
  1d17:39 0a            pushi a // $a nsLeft
  1d19:38 0096          pushi 96 // $96 setCycle
  1d1c:7a               push2 
  1d1d:51 1a            class End 
  1d1f:36                push 
  1d20:7c            pushSelf 
  1d21:72 206e          lofsa $206e // reverseBiaz
  1d24:4a 26             send 26 

  1d26:32 0155            jmp code_1e7e 

        code_1d29
  1d29:3c                 dup 
  1d2a:35 11              ldi 11 
  1d2c:1a                 eq? 
  1d2d:30 0007            bnt code_1d37 
  1d30:35 78              ldi 78 
  1d32:65 16             aTop ticks 
  1d34:32 0147            jmp code_1e7e 

        code_1d37
  1d37:3c                 dup 
  1d38:35 12              ldi 12 
  1d3a:1a                 eq? 
  1d3b:30 0026            bnt code_1d64 
  1d3e:38 00a2          pushi a2 // $a2 setLoop
  1d41:78               push1 
  1d42:39 06            pushi 6 // $6 loop
  1d44:38 0120          pushi 120 // $120 setCel
  1d47:78               push1 
  1d48:76               push0 
  1d49:39 04            pushi 4 // $4 x
  1d4b:78               push1 
  1d4c:38 00e6          pushi e6 // $e6 distanceTo
  1d4f:39 03            pushi 3 // $3 y
  1d51:78               push1 
  1d52:39 48            pushi 48 // $48 syntaxFail
  1d54:38 0096          pushi 96 // $96 setCycle
  1d57:7a               push2 
  1d58:51 1a            class End 
  1d5a:36                push 
  1d5b:7c            pushSelf 
  1d5c:72 206e          lofsa $206e // reverseBiaz
  1d5f:4a 20             send 20 

  1d61:32 011a            jmp code_1e7e 

        code_1d64
  1d64:3c                 dup 
  1d65:35 13              ldi 13 
  1d67:1a                 eq? 
  1d68:30 0026            bnt code_1d91 
  1d6b:38 00a2          pushi a2 // $a2 setLoop
  1d6e:78               push1 
  1d6f:39 05            pushi 5 // $5 view
  1d71:38 0120          pushi 120 // $120 setCel
  1d74:78               push1 
  1d75:76               push0 
  1d76:39 04            pushi 4 // $4 x
  1d78:78               push1 
  1d79:38 00d5          pushi d5 // $d5 has
  1d7c:39 03            pushi 3 // $3 y
  1d7e:78               push1 
  1d7f:39 48            pushi 48 // $48 syntaxFail
  1d81:38 0096          pushi 96 // $96 setCycle
  1d84:7a               push2 
  1d85:51 1a            class End 
  1d87:36                push 
  1d88:7c            pushSelf 
  1d89:72 206e          lofsa $206e // reverseBiaz
  1d8c:4a 20             send 20 

  1d8e:32 00ed            jmp code_1e7e 

        code_1d91
  1d91:3c                 dup 
  1d92:35 14              ldi 14 
  1d94:1a                 eq? 
  1d95:30 0008            bnt code_1da0 
  1d98:34 00f0            ldi f0 
  1d9b:65 16             aTop ticks 
  1d9d:32 00de            jmp code_1e7e 

        code_1da0
  1da0:3c                 dup 
  1da1:35 15              ldi 15 
  1da3:1a                 eq? 
  1da4:30 0026            bnt code_1dcd 
  1da7:38 00a2          pushi a2 // $a2 setLoop
  1daa:78               push1 
  1dab:39 07            pushi 7 // $7 cel
  1dad:38 0120          pushi 120 // $120 setCel
  1db0:78               push1 
  1db1:76               push0 
  1db2:39 04            pushi 4 // $4 x
  1db4:78               push1 
  1db5:38 00d5          pushi d5 // $d5 has
  1db8:39 03            pushi 3 // $3 y
  1dba:78               push1 
  1dbb:39 49            pushi 49 // $49 semanticFail
  1dbd:38 0096          pushi 96 // $96 setCycle
  1dc0:7a               push2 
  1dc1:51 1a            class End 
  1dc3:36                push 
  1dc4:7c            pushSelf 
  1dc5:72 206e          lofsa $206e // reverseBiaz
  1dc8:4a 20             send 20 

  1dca:32 00b1            jmp code_1e7e 

        code_1dcd
  1dcd:3c                 dup 
  1dce:35 16              ldi 16 
  1dd0:1a                 eq? 
  1dd1:30 0008            bnt code_1ddc 
  1dd4:34 00b4            ldi b4 
  1dd7:65 16             aTop ticks 
  1dd9:32 00a2            jmp code_1e7e 

        code_1ddc
  1ddc:3c                 dup 
  1ddd:35 17              ldi 17 
  1ddf:1a                 eq? 
  1de0:30 0034            bnt code_1e17 
  1de3:83 06              lal local6 
  1de5:30 000c            bnt code_1df4 
  1de8:7a               push2 
  1de9:39 0a            pushi a // $a nsLeft
  1deb:38 0080          pushi 80 // $80 indexOf
  1dee:45 0a 04         callb procedure_000a 4 //  

  1df1:32 0009            jmp code_1dfd 

        code_1df4
  1df4:7a               push2 
  1df5:39 10            pushi 10 // $10 lsRight
  1df7:38 0081          pushi 81 // $81 handleEvent
  1dfa:45 0a 04         callb procedure_000a 4 //  


        code_1dfd
  1dfd:39 6c            pushi 6c // $6c dispose
  1dff:76               push0 
  1e00:72 2830          lofsa $2830 // keyboard
  1e03:4a 04             send 4 

  1e05:38 018c          pushi 18c // $18c drawPic
  1e08:7a               push2 
  1e09:78               push1 
  1e0a:39 06            pushi 6 // $6 loop
  1e0c:81 02              lag  
  1e0e:4a 08             send 8 

  1e10:35 78              ldi 78 
  1e12:65 16             aTop ticks 
  1e14:32 0067            jmp code_1e7e 

        code_1e17
  1e17:3c                 dup 
  1e18:35 18              ldi 18 
  1e1a:1a                 eq? 
  1e1b:30 0025            bnt code_1e43 
  1e1e:7a               push2 
  1e1f:38 0294          pushi 294 // $294 sel_660
  1e22:39 34            pushi 34 // $34 b-xAxis
  1e24:45 0e 04         callb procedure_000e 4 //  

  1e27:7a               push2 
  1e28:39 28            pushi 28 // $28 message
  1e2a:38 0082          pushi 82 // $82 start
  1e2d:45 0a 04         callb procedure_000a 4 //  

  1e30:38 0147          pushi 147 // $147 get
  1e33:78               push1 
  1e34:39 06            pushi 6 // $6 loop
  1e36:81 00              lag  
  1e38:4a 06             send 6 

  1e3a:38 008d          pushi 8d // $8d cue
  1e3d:76               push0 
  1e3e:54 04             self 4 

  1e40:32 003b            jmp code_1e7e 

        code_1e43
  1e43:3c                 dup 
  1e44:35 19              ldi 19 
  1e46:1a                 eq? 
  1e47:30 0007            bnt code_1e51 
  1e4a:35 78              ldi 78 
  1e4c:65 16             aTop ticks 
  1e4e:32 002d            jmp code_1e7e 

        code_1e51
  1e51:3c                 dup 
  1e52:35 1a              ldi 1a 
  1e54:1a                 eq? 
  1e55:30 0026            bnt code_1e7e 
  1e58:7a               push2 
  1e59:38 0294          pushi 294 // $294 sel_660
  1e5c:39 35            pushi 35 // $35 b-incr
  1e5e:45 0e 04         callb procedure_000e 4 //  

  1e61:7a               push2 
  1e62:38 0294          pushi 294 // $294 sel_660
  1e65:39 36            pushi 36 // $36 xStep
  1e67:45 0e 04         callb procedure_000e 4 //  

  1e6a:7a               push2 
  1e6b:38 0294          pushi 294 // $294 sel_660
  1e6e:39 37            pushi 37 // $37 yStep
  1e70:45 0e 04         callb procedure_000e 4 //  

  1e73:38 0179          pushi 179 // $179 newRoom
  1e76:78               push1 
  1e77:38 02b2          pushi 2b2 // $2b2 sel_690
  1e7a:81 02              lag  
  1e7c:4a 06             send 6 


        code_1e7e
  1e7e:3a                toss 
  1e7f:48                 ret 
    )

)

// 1ee4
(instance door of Prop
    (properties
        x $f9
        y $60
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $316d
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $3176
        yStep $2
        view $294
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $4001
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $a
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1eba
  1eba:8f 01              lsp param1 
  1ebc:3c                 dup 
  1ebd:35 03              ldi 3 
  1ebf:1a                 eq? 
  1ec0:30 000c            bnt code_1ecf 
  1ec3:7a               push2 
  1ec4:38 0294          pushi 294 // $294 sel_660
  1ec7:39 38            pushi 38 // $38 moveSpeed
  1ec9:45 0e 04         callb procedure_000e 4 //  

  1ecc:32 000d            jmp code_1edc 

        code_1ecf
  1ecf:38 010c          pushi 10c // $10c doVerb
  1ed2:7a               push2 
  1ed3:8f 01              lsp param1 
  1ed5:8f 02              lsp param2 
  1ed7:59 03            &rest 3 
  1ed9:57 2f 08         super Prop 8 


        code_1edc
  1edc:3a                toss 
  1edd:48                 ret 
    )

)

// 2068
(instance reverseBiaz of Prop
    (properties
        x $11e
        y $40
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $31b3
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $31c0
        yStep $2
        view $296
        loop $0
        cel $0
        priority $5
        underBits $0
        signal $4011
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $a
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doit) // method_202f
  202f:63 50             pToa cycler 
  2031:30 000d            bnt code_2041 
  2034:78               push1 
  2035:36                push 
  2036:43 06 02         callk IsObject 2 

  2039:18                 not 
  203a:30 0004            bnt code_2041 
  203d:35 00              ldi 0 
  203f:65 50             aTop cycler 

        code_2041
  2041:39 3c            pushi 3c // $3c doit
  2043:76               push0 
  2044:57 2f 04         super Prop 4 

  2047:48                 ret 
    )

    (method (doVerb) // method_1f4c
  1f4c:8f 01              lsp param1 
  1f4e:3c                 dup 
  1f4f:35 03              ldi 3 
  1f51:1a                 eq? 
  1f52:30 0024            bnt code_1f79 
  1f55:83 02              lal local2 
  1f57:30 0013            bnt code_1f6d 
  1f5a:39 04            pushi 4 // $4 x
  1f5c:72 2f0a          lofsa $2f0a // Reverse Biaz
  1f5f:36                push 
  1f60:38 0294          pushi 294 // $294 sel_660
  1f63:39 39            pushi 39 // $39 cantBeHere
  1f65:39 6c            pushi 6c // $6c dispose
  1f67:45 12 08         callb procedure_0012 8 //  

  1f6a:32 00c0            jmp code_202d 

        code_1f6d
  1f6d:7a               push2 
  1f6e:38 0294          pushi 294 // $294 sel_660
  1f71:39 3a            pushi 3a // $3a heading
  1f73:45 0e 04         callb procedure_000e 4 //  

  1f76:32 00b4            jmp code_202d 

        code_1f79
  1f79:3c                 dup 
  1f7a:35 05              ldi 5 
  1f7c:1a                 eq? 
  1f7d:30 0027            bnt code_1fa7 
  1f80:83 02              lal local2 
  1f82:30 000f            bnt code_1f94 
  1f85:38 008e          pushi 8e // $8e setScript
  1f88:78               push1 
  1f89:72 1a68          lofsa $1a68 // sTalkScript
  1f8c:36                push 
  1f8d:81 02              lag  
  1f8f:4a 06             send 6 

  1f91:32 0099            jmp code_202d 

        code_1f94
  1f94:39 04            pushi 4 // $4 x
  1f96:72 2f0a          lofsa $2f0a // Reverse Biaz
  1f99:36                push 
  1f9a:38 0294          pushi 294 // $294 sel_660
  1f9d:39 3b            pushi 3b // $3b mover
  1f9f:39 6c            pushi 6c // $6c dispose
  1fa1:45 12 08         callb procedure_0012 8 //  

  1fa4:32 0086            jmp code_202d 

        code_1fa7
  1fa7:3c                 dup 
  1fa8:35 04              ldi 4 
  1faa:1a                 eq? 
  1fab:30 0047            bnt code_1ff5 
  1fae:8f 02              lsp param2 
  1fb0:3c                 dup 
  1fb1:35 04              ldi 4 
  1fb3:1a                 eq? 
  1fb4:30 002a            bnt code_1fe1 
  1fb7:83 02              lal local2 
  1fb9:30 0019            bnt code_1fd5 
  1fbc:38 0148          pushi 148 // $148 put
  1fbf:78               push1 
  1fc0:39 04            pushi 4 // $4 x
  1fc2:81 00              lag  
  1fc4:4a 06             send 6 

  1fc6:38 008e          pushi 8e // $8e setScript
  1fc9:78               push1 
  1fca:72 1876          lofsa $1876 // sDrunkReverse
  1fcd:36                push 
  1fce:81 02              lag  
  1fd0:4a 06             send 6 

  1fd2:32 001c            jmp code_1ff1 

        code_1fd5
  1fd5:7a               push2 
  1fd6:38 0294          pushi 294 // $294 sel_660
  1fd9:39 3c            pushi 3c // $3c doit
  1fdb:45 0e 04         callb procedure_000e 4 //  

  1fde:32 0010            jmp code_1ff1 

        code_1fe1
  1fe1:39 04            pushi 4 // $4 x
  1fe3:72 2f0a          lofsa $2f0a // Reverse Biaz
  1fe6:36                push 
  1fe7:38 0294          pushi 294 // $294 sel_660
  1fea:39 3d            pushi 3d // $3d isBlocked
  1fec:39 6c            pushi 6c // $6c dispose
  1fee:45 12 08         callb procedure_0012 8 //  


        code_1ff1
  1ff1:3a                toss 
  1ff2:32 0038            jmp code_202d 

        code_1ff5
  1ff5:3c                 dup 
  1ff6:35 0a              ldi a 
  1ff8:1a                 eq? 
  1ff9:30 0024            bnt code_2020 
  1ffc:83 02              lal local2 
  1ffe:30 0013            bnt code_2014 
  2001:35 01              ldi 1 
  2003:a3 06              sal local6 
  2005:38 008e          pushi 8e // $8e setScript
  2008:78               push1 
  2009:72 1e8c          lofsa $1e8c // sDoSex
  200c:36                push 
  200d:81 02              lag  
  200f:4a 06             send 6 

  2011:32 0019            jmp code_202d 

        code_2014
  2014:7a               push2 
  2015:38 0294          pushi 294 // $294 sel_660
  2018:39 3e            pushi 3e // $3e looper
  201a:45 0e 04         callb procedure_000e 4 //  

  201d:32 000d            jmp code_202d 

        code_2020
  2020:38 010c          pushi 10c // $10c doVerb
  2023:7a               push2 
  2024:8f 01              lsp param1 
  2026:8f 02              lsp param2 
  2028:59 03            &rest 3 
  202a:57 2f 08         super Prop 8 


        code_202d
  202d:3a                toss 
  202e:48                 ret 
    )

    (method (cue) // method_2048
  2048:35 02              ldi 2 
  204a:a3 00              sal local0 
  204c:35 01              ldi 1 
  204e:a3 03              sal local3 
  2050:39 6c            pushi 6c // $6c dispose
  2052:76               push0 
  2053:72 0c9a          lofsa $0c9a // sSession
  2056:4a 04             send 4 

  2058:39 6c            pushi 6c // $6c dispose
  205a:76               push0 
  205b:72 0dd8          lofsa $0dd8 // sMonitorRecording
  205e:4a 04             send 4 

  2060:48                 ret 
  2061:00                bnot 
    )

)

// 20da
(instance giveTape of View
    (properties
        x $f1
        y $49
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $2ab
        loop $3
        cel $0
        priority $4
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
)

// 2148
(instance panelExtender of View
    (properties
        x $b7
        y $53
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3251
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $29e
        loop $6
        cel $0
        priority $3
        underBits $0
        signal $11
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_2134
  2134:38 010c          pushi 10c // $10c doVerb
  2137:7a               push2 
  2138:8f 01              lsp param1 
  213a:8f 02              lsp param2 
  213c:72 2d9a          lofsa $2d9a // controlPanel
  213f:4a 08             send 8 

  2141:48                 ret 
    )

)

// 21f4
(instance reelOne of Prop
    (properties
        x $d6
        y $1a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3276
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $29e
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $f
        script $0
        cycler $0
        timer $0
        detailLevel $2
    )
    (method (doVerb) // method_21a6
  21a6:8f 01              lsp param1 
  21a8:3c                 dup 
  21a9:35 02              ldi 2 
  21ab:1a                 eq? 
  21ac:30 000c            bnt code_21bb 
  21af:7a               push2 
  21b0:38 0294          pushi 294 // $294 sel_660
  21b3:39 3f            pushi 3f // $3f priority
  21b5:45 0e 04         callb procedure_000e 4 //  

  21b8:32 0031            jmp code_21ec 

        code_21bb
  21bb:3c                 dup 
  21bc:35 03              ldi 3 
  21be:1a                 eq? 
  21bf:30 001d            bnt code_21df 
  21c2:83 02              lal local2 
  21c4:30 000c            bnt code_21d3 
  21c7:7a               push2 
  21c8:38 0294          pushi 294 // $294 sel_660
  21cb:39 40            pushi 40 // $40 modifiers
  21cd:45 0e 04         callb procedure_000e 4 //  

  21d0:32 0019            jmp code_21ec 

        code_21d3
  21d3:7a               push2 
  21d4:38 0294          pushi 294 // $294 sel_660
  21d7:39 41            pushi 41 // $41 replay
  21d9:45 0e 04         callb procedure_000e 4 //  

  21dc:32 000d            jmp code_21ec 

        code_21df
  21df:38 010c          pushi 10c // $10c doVerb
  21e2:7a               push2 
  21e3:8f 01              lsp param1 
  21e5:8f 02              lsp param2 
  21e7:59 03            &rest 3 
  21e9:57 2f 08         super Prop 8 


        code_21ec
  21ec:3a                toss 
  21ed:48                 ret 
    )

)

// 2270
(instance reelTwo of Prop
    (properties
        x $ec
        y $1a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3276
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $29e
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $14
        script $0
        cycler $0
        timer $0
        detailLevel $2
    )
    (method (doVerb) // method_225c
  225c:38 010c          pushi 10c // $10c doVerb
  225f:7a               push2 
  2260:8f 01              lsp param1 
  2262:8f 02              lsp param2 
  2264:72 21fa          lofsa $21fa // reelOne
  2267:4a 08             send 8 

  2269:48                 ret 
    )

)

// 22ec
(instance reelThree of Prop
    (properties
        x $105
        y $1b
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3276
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $29e
        loop $4
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $f
        script $0
        cycler $0
        timer $0
        detailLevel $3
    )
    (method (doVerb) // method_22d8
  22d8:38 010c          pushi 10c // $10c doVerb
  22db:7a               push2 
  22dc:8f 01              lsp param1 
  22de:8f 02              lsp param2 
  22e0:72 21fa          lofsa $21fa // reelOne
  22e3:4a 08             send 8 

  22e5:48                 ret 
    )

)

// 2368
(instance reelFour of Prop
    (properties
        x $11b
        y $1b
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3276
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $29e
        loop $5
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $14
        script $0
        cycler $0
        timer $0
        detailLevel $3
    )
    (method (doVerb) // method_2354
  2354:38 010c          pushi 10c // $10c doVerb
  2357:7a               push2 
  2358:8f 01              lsp param1 
  235a:8f 02              lsp param2 
  235c:72 21fa          lofsa $21fa // reelOne
  235f:4a 08             send 8 

  2361:48                 ret 
    )

)

// 23d2
(instance vuMeter of Prop
    (properties
        x $a9
        y $1d
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $32a7
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $32b4
        yStep $2
        view $29e
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $a
        script $0
        cycler $0
        timer $0
        detailLevel $4
    )
)

// 251c
(class synthKey of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3314
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $2a1
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $1
        frequency $0
        white $0
    )
    (method (doit) // method_247e
  247e:3f 02             link 2 // (var $2)
  2480:39 3c            pushi 3c // $3c doit
  2482:76               push0 
  2483:57 2f 04         super Prop 4 

  2486:38 0141          pushi 141 // $141 curEvent
  2489:76               push0 
  248a:51 31            class User 
  248c:4a 04             send 4 

  248e:a5 00              sat temp0 
  2490:8b 07              lsl local7 
  2492:5c              selfID 
  2493:1a                 eq? 
  2494:30 0022            bnt code_24b9 
  2497:7c            pushSelf 
  2498:78               push1 
  2499:8d 00              lst temp0 
  249b:40 058e 02        call proc_2a2d 2 

  249f:a5 01              sat temp1 
  24a1:1c                 ne? 
  24a2:30 0014            bnt code_24b9 
  24a5:39 7a            pushi 7a // $7a release
  24a7:76               push0 
  24a8:54 04             self 4 

  24aa:85 01              lat temp1 
  24ac:a3 07              sal local7 
  24ae:85 01              lat temp1 
  24b0:30 0006            bnt code_24b9 
  24b3:38 0220          pushi 220 // $220 depress
  24b6:76               push0 
  24b7:4a 04             send 4 


        code_24b9
  24b9:48                 ret 
    )

    (method (doVerb) // method_24ba
  24ba:8f 01              lsp param1 
  24bc:3c                 dup 
  24bd:35 02              ldi 2 
  24bf:1a                 eq? 
  24c0:30 0015            bnt code_24d8 
  24c3:7a               push2 
  24c4:38 0294          pushi 294 // $294 sel_660
  24c7:39 42            pushi 42 // $42 setPri
  24c9:45 0e 04         callb procedure_000e 4 //  

  24cc:7a               push2 
  24cd:38 0294          pushi 294 // $294 sel_660
  24d0:39 43            pushi 43 // $43 at
  24d2:45 0e 04         callb procedure_000e 4 //  

  24d5:32 0035            jmp code_250d 

        code_24d8
  24d8:3c                 dup 
  24d9:35 03              ldi 3 
  24db:1a                 eq? 
  24dc:30 0021            bnt code_2500 
  24df:83 02              lal local2 
  24e1:30 000c            bnt code_24f0 
  24e4:7a               push2 
  24e5:38 0294          pushi 294 // $294 sel_660
  24e8:39 44            pushi 44 // $44 next
  24ea:45 0e 04         callb procedure_000e 4 //  

  24ed:32 001d            jmp code_250d 

        code_24f0
  24f0:38 010c          pushi 10c // $10c doVerb
  24f3:7a               push2 
  24f4:8f 01              lsp param1 
  24f6:8f 02              lsp param2 
  24f8:59 03            &rest 3 
  24fa:57 2f 08         super Prop 8 

  24fd:32 000d            jmp code_250d 

        code_2500
  2500:38 010c          pushi 10c // $10c doVerb
  2503:7a               push2 
  2504:8f 01              lsp param1 
  2506:8f 02              lsp param2 
  2508:59 03            &rest 3 
  250a:57 2f 08         super Prop 8 


        code_250d
  250d:3a                toss 
  250e:48                 ret 
    )

    (method (cue) // method_250f
  250f:39 7a            pushi 7a // $7a release
  2511:76               push0 
  2512:54 04             self 4 

  2514:48                 ret 
  2515:00                bnot 
    )

    (method (depress) // method_2436
  2436:83 08              lal local8 
  2438:30 0009            bnt code_2444 
  243b:39 7a            pushi 7a // $7a release
  243d:76               push0 
  243e:4a 04             send 4 

  2440:35 00              ldi 0 
  2442:a3 08              sal local8 

        code_2444
  2444:38 0120          pushi 120 // $120 setCel
  2447:78               push1 
  2448:78               push1 
  2449:54 06             self 6 

  244b:87 01              lap param1 
  244d:30 0014            bnt code_2464 
  2450:c3 09              +al local9 
  2452:38 00a3          pushi a3 // $a3 send
  2455:39 04            pushi 4 // $4 x
  2457:39 08            pushi 8 // $8 underBits
  2459:38 0090          pushi 90 // $90 localize
  245c:67 56             pTos frequency 
  245e:39 64            pushi 64 // $64 moveDone
  2460:81 66              lag  
  2462:4a 0c             send c 


        code_2464
  2464:48                 ret 
    )

    (method (release) // method_2465
  2465:38 0120          pushi 120 // $120 setCel
  2468:78               push1 
  2469:76               push0 
  246a:54 06             self 6 

  246c:38 00a3          pushi a3 // $a3 send
  246f:39 04            pushi 4 // $4 x
  2471:39 08            pushi 8 // $8 underBits
  2473:38 0080          pushi 80 // $80 indexOf
  2476:67 56             pTos frequency 
  2478:76               push0 
  2479:81 66              lag  
  247b:4a 0c             send c 

  247d:48                 ret 
    )

)

// 282a
(instance keyboard of EventHandler
    (properties
        elements $0
        size $0
    )
    (method (init) // method_25f2
  25f2:3f 0a             link a // (var $a)
  25f4:39 6b            pushi 6b // $6b init
  25f6:76               push0 
  25f7:59 01            &rest 1 
  25f9:57 05 04         super EventHandler 4 

  25fc:35 00              ldi 0 
  25fe:a5 04              sat temp4 

        code_2600
  2600:8d 04              lst temp4 
  2602:35 1f              ldi 1f 
  2604:22                 lt? 
  2605:30 0129            bnt code_2731 
  2608:85 04              lat temp4 
  260a:a5 00              sat temp0 
  260c:36                push 
  260d:35 0c              ldi c 
  260f:08                 div 
  2610:a5 01              sat temp1 
  2612:8d 00              lst temp0 
  2614:36                push 
  2615:35 0c              ldi c 
  2617:06                 mul 
  2618:04                 sub 
  2619:a5 00              sat temp0 
  261b:36                push 
  261c:35 02              ldi 2 
  261e:0a                 mod 
  261f:a5 03              sat temp3 
  2621:8d 00              lst temp0 
  2623:35 05              ldi 5 
  2625:22                 lt? 
  2626:30 0002            bnt code_262b 
  2629:e5 03              -at temp3 

        code_262b
  262b:39 6a            pushi 6a // $6a new
  262d:76               push0 
  262e:51 7b            class synthKey 
  2630:4a 04             send 4 

  2632:a5 02              sat temp2 
  2634:39 05            pushi 5 // $5 view
  2636:76               push0 
  2637:4a 04             send 4 

  2639:a5 07              sat temp7 
  263b:85 03              lat temp3 
  263d:30 0057            bnt code_2697 
  2640:8d 00              lst temp0 
  2642:3c                 dup 
  2643:35 00              ldi 0 
  2645:1a                 eq? 
  2646:30 0005            bnt code_264e 
  2649:35 01              ldi 1 
  264b:32 0045            jmp code_2693 

        code_264e
  264e:3c                 dup 
  264f:35 02              ldi 2 
  2651:1a                 eq? 
  2652:30 0005            bnt code_265a 
  2655:35 02              ldi 2 
  2657:32 0039            jmp code_2693 

        code_265a
  265a:3c                 dup 
  265b:35 04              ldi 4 
  265d:1a                 eq? 
  265e:30 0005            bnt code_2666 
  2661:35 03              ldi 3 
  2663:32 002d            jmp code_2693 

        code_2666
  2666:3c                 dup 
  2667:35 05              ldi 5 
  2669:1a                 eq? 
  266a:30 0005            bnt code_2672 
  266d:35 01              ldi 1 
  266f:32 0021            jmp code_2693 

        code_2672
  2672:3c                 dup 
  2673:35 07              ldi 7 
  2675:1a                 eq? 
  2676:30 0005            bnt code_267e 
  2679:35 02              ldi 2 
  267b:32 0015            jmp code_2693 

        code_267e
  267e:3c                 dup 
  267f:35 09              ldi 9 
  2681:1a                 eq? 
  2682:30 0005            bnt code_268a 
  2685:35 02              ldi 2 
  2687:32 0009            jmp code_2693 

        code_268a
  268a:3c                 dup 
  268b:35 0b              ldi b 
  268d:1a                 eq? 
  268e:30 0002            bnt code_2693 
  2691:35 03              ldi 3 

        code_2693
  2693:3a                toss 
  2694:32 0002            jmp code_2699 

        code_2697
  2697:35 00              ldi 0 

        code_2699
  2699:a5 08              sat temp8 
  269b:85 03              lat temp3 
  269d:30 0026            bnt code_26c6 
  26a0:8d 00              lst temp0 
  26a2:35 04              ldi 4 
  26a4:1e                 gt? 
  26a5:30 0002            bnt code_26aa 
  26a8:c5 00              +at temp0 

        code_26aa
  26aa:8d 00              lst temp0 
  26ac:35 02              ldi 2 
  26ae:08                 div 
  26af:36                push 
  26b0:35 12              ldi 12 
  26b2:06                 mul 
  26b3:a5 05              sat temp5 
  26b5:36                push 
  26b6:8d 01              lst temp1 
  26b8:35 7e              ldi 7e 
  26ba:06                 mul 
  26bb:02                 add 
  26bc:a5 05              sat temp5 
  26be:34 00bd            ldi bd 
  26c1:a5 06              sat temp6 
  26c3:32 001d            jmp code_26e3 

        code_26c6
  26c6:8d 00              lst temp0 
  26c8:35 02              ldi 2 
  26ca:08                 div 
  26cb:36                push 
  26cc:35 12              ldi 12 
  26ce:06                 mul 
  26cf:a5 05              sat temp5 
  26d1:36                push 
  26d2:35 12              ldi 12 
  26d4:02                 add 
  26d5:36                push 
  26d6:8d 01              lst temp1 
  26d8:35 7e              ldi 7e 
  26da:06                 mul 
  26db:02                 add 
  26dc:a5 05              sat temp5 
  26de:34 00b4            ldi b4 
  26e1:a5 06              sat temp6 

        code_26e3
  26e3:8d 04              lst temp4 
  26e5:35 3c              ldi 3c 
  26e7:02                 add 
  26e8:a5 09              sat temp9 
  26ea:38 00a2          pushi a2 // $a2 setLoop
  26ed:78               push1 
  26ee:8d 08              lst temp8 
  26f0:39 04            pushi 4 // $4 x
  26f2:78               push1 
  26f3:8d 05              lst temp5 
  26f5:39 03            pushi 3 // $3 y
  26f7:78               push1 
  26f8:8d 06              lst temp6 
  26fa:38 0221          pushi 221 // $221 frequency
  26fd:78               push1 
  26fe:36                push 
  26ff:38 021f          pushi 21f // $21f white
  2702:78               push1 
  2703:8d 03              lst temp3 
  2705:38 0121          pushi 121 // $121 ignoreActors
  2708:76               push0 
  2709:39 42            pushi 42 // $42 setPri
  270b:78               push1 
  270c:85 03              lat temp3 
  270e:30 0005            bnt code_2716 
  2711:35 ff              ldi ff 
  2713:32 0002            jmp code_2718 

        code_2716
  2716:35 0f              ldi f 

        code_2718
  2718:36                push 
  2719:38 011d          pushi 11d // $11d stopUpd
  271c:78               push1 
  271d:78               push1 
  271e:39 6b            pushi 6b // $6b init
  2720:76               push0 
  2721:85 02              lat temp2 
  2723:4a 32             send 32 

  2725:39 7d            pushi 7d // $7d addToFront
  2727:78               push1 
  2728:8d 02              lst temp2 
  272a:54 06             self 6 

  272c:c5 04              +at temp4 
  272e:32 fecf            jmp code_2600 

        code_2731
  2731:48                 ret 
    )

    (method (dispose) // method_2732
  2732:39 54            pushi 54 // $54 delete
  2734:78               push1 
  2735:7c            pushSelf 
  2736:81 49              lag  
  2738:4a 06             send 6 

  273a:39 54            pushi 54 // $54 delete
  273c:78               push1 
  273d:7c            pushSelf 
  273e:81 48              lag  
  2740:4a 06             send 6 

  2742:39 6c            pushi 6c // $6c dispose
  2744:76               push0 
  2745:57 05 04         super EventHandler 4 

  2748:48                 ret 
    )

    (method (handleEvent) // method_2749
  2749:3f 02             link 2 // (var $2)
  274b:83 07              lal local7 
  274d:30 0024            bnt code_2774 
  2750:39 22            pushi 22 // $22 type
  2752:76               push0 
  2753:87 01              lap param1 
  2755:4a 04             send 4 

  2757:36                push 
  2758:35 02              ldi 2 
  275a:1a                 eq? 
  275b:30 000b            bnt code_2769 
  275e:39 7a            pushi 7a // $7a release
  2760:76               push0 
  2761:83 07              lal local7 
  2763:4a 04             send 4 

  2765:35 00              ldi 0 
  2767:a3 07              sal local7 

        code_2769
  2769:39 4c            pushi 4c // $4c claimed
  276b:78               push1 
  276c:78               push1 
  276d:87 01              lap param1 
  276f:4a 06             send 6 

  2771:32 00ae            jmp code_2822 

        code_2774
  2774:39 22            pushi 22 // $22 type
  2776:76               push0 
  2777:87 01              lap param1 
  2779:4a 04             send 4 

  277b:36                push 
  277c:35 01              ldi 1 
  277e:1a                 eq? 
  277f:30 0046            bnt code_27c8 
  2782:78               push1 
  2783:8f 01              lsp param1 
  2785:40 02a4 02        call proc_2a2d 2 

  2789:a5 01              sat temp1 
  278b:30 002c            bnt code_27ba 
  278e:39 24            pushi 24 // $24 cursor
  2790:76               push0 
  2791:38 00ce          pushi ce // $ce curIcon
  2794:76               push0 
  2795:81 45              lag  
  2797:4a 04             send 4 

  2799:4a 04             send 4 

  279b:36                push 
  279c:35 01              ldi 1 
  279e:1c                 ne? 
  279f:30 0018            bnt code_27ba 
  27a2:38 0220          pushi 220 // $220 depress
  27a5:78               push1 
  27a6:78               push1 
  27a7:85 01              lat temp1 
  27a9:4a 06             send 6 

  27ab:85 01              lat temp1 
  27ad:a3 07              sal local7 
  27af:39 4c            pushi 4c // $4c claimed
  27b1:78               push1 
  27b2:78               push1 
  27b3:87 01              lap param1 
  27b5:4a 06             send 6 

  27b7:32 0068            jmp code_2822 

        code_27ba
  27ba:38 0081          pushi 81 // $81 handleEvent
  27bd:78               push1 
  27be:8f 01              lsp param1 
  27c0:59 02            &rest 2 
  27c2:57 05 06         super EventHandler 6 

  27c5:32 005a            jmp code_2822 

        code_27c8
  27c8:39 22            pushi 22 // $22 type
  27ca:76               push0 
  27cb:87 01              lap param1 
  27cd:4a 04             send 4 

  27cf:36                push 
  27d0:35 04              ldi 4 
  27d2:1a                 eq? 
  27d3:30 004c            bnt code_2822 
  27d6:78               push1 
  27d7:8f 01              lsp param1 
  27d9:40 0073 02        call proc_2850 2 

  27dd:a5 01              sat temp1 
  27df:36                push 
  27e0:39 43            pushi 43 // $43 at
  27e2:78               push1 
  27e3:39 ff            pushi ff // $ff syncNum
  27e5:72 2830          lofsa $2830 // keyboard
  27e8:4a 06             send 6 

  27ea:1c                 ne? 
  27eb:30 0021            bnt code_280f 
  27ee:38 0220          pushi 220 // $220 depress
  27f1:78               push1 
  27f2:78               push1 
  27f3:85 01              lat temp1 
  27f5:4a 06             send 6 

  27f7:85 01              lat temp1 
  27f9:a3 08              sal local8 
  27fb:38 0096          pushi 96 // $96 setCycle
  27fe:7a               push2 
  27ff:8d 01              lst temp1 
  2801:39 05            pushi 5 // $5 view
  2803:39 6a            pushi 6a // $6a new
  2805:76               push0 
  2806:51 08            class Timer 
  2808:4a 04             send 4 

  280a:4a 08             send 8 

  280c:32 000b            jmp code_281a 

        code_280f
  280f:38 0081          pushi 81 // $81 handleEvent
  2812:78               push1 
  2813:8f 01              lsp param1 
  2815:59 02            &rest 2 
  2817:57 05 06         super EventHandler 6 


        code_281a
  281a:39 4c            pushi 4c // $4c claimed
  281c:78               push1 
  281d:78               push1 
  281e:87 01              lap param1 
  2820:4a 06             send 6 


        code_2822
  2822:48                 ret 
  2823:00                bnot 
    )

)

// 2b10
(instance synth of Feature
    (properties
        x $57
        y $66
        z $0
        heading $0
        noun $0
        nsTop $58
        nsLeft $4d
        nsBottom $73
        nsRight $64
        description $332e
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $43
        approachY $83
        approachDist $0
        _approachVerbs $6789
        lookStr $333f
    )
    (method (doVerb) // method_2ae5
  2ae5:8f 01              lsp param1 
  2ae7:35 03              ldi 3 
  2ae9:1a                 eq? 
  2aea:30 000f            bnt code_2afc 
  2aed:38 008e          pushi 8e // $8e setScript
  2af0:78               push1 
  2af1:72 06e2          lofsa $06e2 // sUsesSynth
  2af4:36                push 
  2af5:81 00              lag  
  2af7:4a 06             send 6 

  2af9:32 000d            jmp code_2b09 

        code_2afc
  2afc:38 010c          pushi 10c // $10c doVerb
  2aff:7a               push2 
  2b00:8f 01              lsp param1 
  2b02:8f 02              lsp param2 
  2b04:59 03            &rest 3 
  2b06:57 2c 08         super Feature 8 


        code_2b09
  2b09:48                 ret 
    )

)

// 2b50
(instance musicStands of Feature
    (properties
        x $37
        y $a7
        z $0
        heading $0
        noun $0
        nsTop $93
        nsLeft $1f
        nsBottom $bb
        nsRight $50
        description $337d
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $338e
    )
)

// 2b8c
(instance recordingBooth of Feature
    (properties
        x $118
        y $34
        z $0
        heading $0
        noun $0
        nsTop $16
        nsLeft $100
        nsBottom $53
        nsRight $130
        description $3411
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $3422
    )
)

// 2bc8
(instance overhangingMike of Feature
    (properties
        x $64
        y $3f
        z $0
        heading $0
        noun $0
        nsTop $38
        nsLeft $5e
        nsBottom $46
        nsRight $6b
        description $34b8
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $34ca
    )
)

// 2c04
(instance drums of Feature
    (properties
        x $b2
        y $49
        z $0
        heading $0
        noun $0
        nsTop $33
        nsLeft $87
        nsBottom $60
        nsRight $de
        description $351e
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $352b
    )
)

// 2c9e
(instance music of Feature
    (properties
        x $60
        y $3b
        z $0
        heading $0
        noun $0
        nsTop $11
        nsLeft $30
        nsBottom $66
        nsRight $90
        description $35a3
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_2c3e
  2c3e:8f 01              lsp param1 
  2c40:3c                 dup 
  2c41:35 02              ldi 2 
  2c43:1a                 eq? 
  2c44:30 001d            bnt code_2c64 
  2c47:83 02              lal local2 
  2c49:30 000c            bnt code_2c58 
  2c4c:7a               push2 
  2c4d:38 0294          pushi 294 // $294 sel_660
  2c50:39 45            pushi 45 // $45 done
  2c52:45 0e 04         callb procedure_000e 4 //  

  2c55:32 003d            jmp code_2c95 

        code_2c58
  2c58:7a               push2 
  2c59:38 0294          pushi 294 // $294 sel_660
  2c5c:39 46            pushi 46 // $46 width
  2c5e:45 0e 04         callb procedure_000e 4 //  

  2c61:32 0031            jmp code_2c95 

        code_2c64
  2c64:3c                 dup 
  2c65:35 03              ldi 3 
  2c67:1a                 eq? 
  2c68:30 001d            bnt code_2c88 
  2c6b:83 02              lal local2 
  2c6d:30 000c            bnt code_2c7c 
  2c70:7a               push2 
  2c71:38 0294          pushi 294 // $294 sel_660
  2c74:39 47            pushi 47 // $47 wordFail
  2c76:45 0e 04         callb procedure_000e 4 //  

  2c79:32 0019            jmp code_2c95 

        code_2c7c
  2c7c:7a               push2 
  2c7d:38 0294          pushi 294 // $294 sel_660
  2c80:39 48            pushi 48 // $48 syntaxFail
  2c82:45 0e 04         callb procedure_000e 4 //  

  2c85:32 000d            jmp code_2c95 

        code_2c88
  2c88:38 010c          pushi 10c // $10c doVerb
  2c8b:7a               push2 
  2c8c:8f 01              lsp param1 
  2c8e:8f 02              lsp param2 
  2c90:59 03            &rest 3 
  2c92:57 2c 08         super Feature 8 


        code_2c95
  2c95:3a                toss 
  2c96:48                 ret 
  2c97:00                bnot 
    )

)

// 2d18
(instance synthPanel of Feature
    (properties
        x $9f
        y $82
        z $0
        heading $0
        noun $0
        nsTop $6f
        nsLeft $0
        nsBottom $95
        nsRight $13f
        description $35b3
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $35d1
    )
    (method (doVerb) // method_2cdc
  2cdc:8f 01              lsp param1 
  2cde:3c                 dup 
  2cdf:35 03              ldi 3 
  2ce1:1a                 eq? 
  2ce2:30 001d            bnt code_2d02 
  2ce5:83 02              lal local2 
  2ce7:30 000c            bnt code_2cf6 
  2cea:7a               push2 
  2ceb:38 0294          pushi 294 // $294 sel_660
  2cee:39 49            pushi 49 // $49 semanticFail
  2cf0:45 0e 04         callb procedure_000e 4 //  

  2cf3:32 0019            jmp code_2d0f 

        code_2cf6
  2cf6:7a               push2 
  2cf7:38 0294          pushi 294 // $294 sel_660
  2cfa:39 4a            pushi 4a // $4a pragmaFail
  2cfc:45 0e 04         callb procedure_000e 4 //  

  2cff:32 000d            jmp code_2d0f 

        code_2d02
  2d02:38 010c          pushi 10c // $10c doVerb
  2d05:7a               push2 
  2d06:8f 01              lsp param1 
  2d08:8f 02              lsp param2 
  2d0a:59 03            &rest 3 
  2d0c:57 2c 08         super Feature 8 


        code_2d0f
  2d0f:3a                toss 
  2d10:48                 ret 
  2d11:00                bnot 
    )

)

// 2d94
(instance controlPanel of Feature
    (properties
        x $ee
        y $4c
        z $0
        heading $0
        noun $0
        nsTop $49
        nsLeft $c2
        nsBottom $50
        nsRight $11b
        description $3251
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_2d56
  2d56:8f 01              lsp param1 
  2d58:3c                 dup 
  2d59:35 02              ldi 2 
  2d5b:1a                 eq? 
  2d5c:30 000c            bnt code_2d6b 
  2d5f:7a               push2 
  2d60:38 0294          pushi 294 // $294 sel_660
  2d63:39 4b            pushi 4b // $4b said
  2d65:45 0e 04         callb procedure_000e 4 //  

  2d68:32 0020            jmp code_2d8b 

        code_2d6b
  2d6b:3c                 dup 
  2d6c:35 03              ldi 3 
  2d6e:1a                 eq? 
  2d6f:30 000c            bnt code_2d7e 
  2d72:7a               push2 
  2d73:38 0294          pushi 294 // $294 sel_660
  2d76:39 4c            pushi 4c // $4c claimed
  2d78:45 0e 04         callb procedure_000e 4 //  

  2d7b:32 000d            jmp code_2d8b 

        code_2d7e
  2d7e:38 010c          pushi 10c // $10c doVerb
  2d81:7a               push2 
  2d82:8f 01              lsp param1 
  2d84:8f 02              lsp param2 
  2d86:59 03            &rest 3 
  2d88:57 2c 08         super Feature 8 


        code_2d8b
  2d8b:3a                toss 
  2d8c:48                 ret 
  2d8d:00                bnot 
    )

)

// 2dd4
(instance controlPanel2 of Feature
    (properties
        x $e8
        y $3a
        z $0
        heading $0
        noun $0
        nsTop $32
        nsLeft $a8
        nsBottom $43
        nsRight $128
        description $363c
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $3655
    )
)

// 2e10
(instance rewind of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $295
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2e46
(instance musicStop of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $296
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2e7c
(instance glassesClink of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $298
        vol $7f
        priority $f
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2eb2
(instance zing of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $299
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2f04
(instance Reverse Biaz of Talker
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $f
        nsLeft $1e
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        bust $0
        eyes $0
        mouth $0
        ticks $0
        disposeWhenDone $1
        caller $0
        viewInPrint $1
        useFrame $0
        talkWidth $13e
    )
    (method (init) // method_2ee6
  2ee6:72 2f86          lofsa $2f86 // reverseBust
  2ee9:65 56             aTop bust 
  2eeb:72 2fec          lofsa $2fec // reverseEyes
  2eee:65 58             aTop eyes 
  2ef0:72 3052          lofsa $3052 // reverseMouth
  2ef3:65 5a             aTop mouth 
  2ef5:39 6b            pushi 6b // $6b init
  2ef7:76               push0 
  2ef8:59 01            &rest 1 
  2efa:57 6f 04         super Talker 4 

  2efd:48                 ret 
    )

)

// 2f80
(instance reverseBust of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 2fe6
(instance reverseEyes of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $1f
        nsLeft $16
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $46
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 304c
(instance reverseMouth of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $24
        nsLeft $f
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $5
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)



(procedure proc_2850
  2850:39 43            pushi 43 // $43 at
  2852:78               push1 
  2853:39 28            pushi 28 // $28 message
  2855:76               push0 
  2856:87 01              lap param1 
  2858:4a 04             send 4 

  285a:36                push 
  285b:3c                 dup 
  285c:35 61              ldi 61 
  285e:1a                 eq? 
  285f:30 0005            bnt code_2867 
  2862:35 1e              ldi 1e 
  2864:32 01be            jmp code_2a25 

        code_2867
  2867:3c                 dup 
  2868:35 77              ldi 77 
  286a:1a                 eq? 
  286b:30 0005            bnt code_2873 
  286e:35 1d              ldi 1d 
  2870:32 01b2            jmp code_2a25 

        code_2873
  2873:3c                 dup 
  2874:35 73              ldi 73 
  2876:1a                 eq? 
  2877:30 0005            bnt code_287f 
  287a:35 1c              ldi 1c 
  287c:32 01a6            jmp code_2a25 

        code_287f
  287f:3c                 dup 
  2880:35 65              ldi 65 
  2882:1a                 eq? 
  2883:30 0005            bnt code_288b 
  2886:35 1b              ldi 1b 
  2888:32 019a            jmp code_2a25 

        code_288b
  288b:3c                 dup 
  288c:35 64              ldi 64 
  288e:1a                 eq? 
  288f:30 0005            bnt code_2897 
  2892:35 1a              ldi 1a 
  2894:32 018e            jmp code_2a25 

        code_2897
  2897:3c                 dup 
  2898:35 66              ldi 66 
  289a:1a                 eq? 
  289b:30 0005            bnt code_28a3 
  289e:35 19              ldi 19 
  28a0:32 0182            jmp code_2a25 

        code_28a3
  28a3:3c                 dup 
  28a4:35 74              ldi 74 
  28a6:1a                 eq? 
  28a7:30 0005            bnt code_28af 
  28aa:35 18              ldi 18 
  28ac:32 0176            jmp code_2a25 

        code_28af
  28af:3c                 dup 
  28b0:35 67              ldi 67 
  28b2:1a                 eq? 
  28b3:30 0005            bnt code_28bb 
  28b6:35 17              ldi 17 
  28b8:32 016a            jmp code_2a25 

        code_28bb
  28bb:3c                 dup 
  28bc:35 79              ldi 79 
  28be:1a                 eq? 
  28bf:30 0005            bnt code_28c7 
  28c2:35 16              ldi 16 
  28c4:32 015e            jmp code_2a25 

        code_28c7
  28c7:3c                 dup 
  28c8:35 68              ldi 68 
  28ca:1a                 eq? 
  28cb:30 0005            bnt code_28d3 
  28ce:35 15              ldi 15 
  28d0:32 0152            jmp code_2a25 

        code_28d3
  28d3:3c                 dup 
  28d4:35 75              ldi 75 
  28d6:1a                 eq? 
  28d7:30 0005            bnt code_28df 
  28da:35 14              ldi 14 
  28dc:32 0146            jmp code_2a25 

        code_28df
  28df:3c                 dup 
  28e0:35 6a              ldi 6a 
  28e2:1a                 eq? 
  28e3:30 0005            bnt code_28eb 
  28e6:35 13              ldi 13 
  28e8:32 013a            jmp code_2a25 

        code_28eb
  28eb:3c                 dup 
  28ec:35 6b              ldi 6b 
  28ee:1a                 eq? 
  28ef:30 0005            bnt code_28f7 
  28f2:35 12              ldi 12 
  28f4:32 012e            jmp code_2a25 

        code_28f7
  28f7:3c                 dup 
  28f8:35 6f              ldi 6f 
  28fa:1a                 eq? 
  28fb:30 0005            bnt code_2903 
  28fe:35 11              ldi 11 
  2900:32 0122            jmp code_2a25 

        code_2903
  2903:3c                 dup 
  2904:35 6c              ldi 6c 
  2906:1a                 eq? 
  2907:30 0005            bnt code_290f 
  290a:35 10              ldi 10 
  290c:32 0116            jmp code_2a25 

        code_290f
  290f:3c                 dup 
  2910:35 70              ldi 70 
  2912:1a                 eq? 
  2913:30 0005            bnt code_291b 
  2916:35 0f              ldi f 
  2918:32 010a            jmp code_2a25 

        code_291b
  291b:3c                 dup 
  291c:35 3b              ldi 3b 
  291e:1a                 eq? 
  291f:30 0005            bnt code_2927 
  2922:35 0e              ldi e 
  2924:32 00fe            jmp code_2a25 

        code_2927
  2927:3c                 dup 
  2928:35 27              ldi 27 
  292a:1a                 eq? 
  292b:30 0005            bnt code_2933 
  292e:35 0d              ldi d 
  2930:32 00f2            jmp code_2a25 

        code_2933
  2933:3c                 dup 
  2934:35 5d              ldi 5d 
  2936:1a                 eq? 
  2937:30 0005            bnt code_293f 
  293a:35 0c              ldi c 
  293c:32 00e6            jmp code_2a25 

        code_293f
  293f:3c                 dup 
  2940:35 41              ldi 41 
  2942:1a                 eq? 
  2943:30 0005            bnt code_294b 
  2946:35 12              ldi 12 
  2948:32 00da            jmp code_2a25 

        code_294b
  294b:3c                 dup 
  294c:35 57              ldi 57 
  294e:1a                 eq? 
  294f:30 0005            bnt code_2957 
  2952:35 11              ldi 11 
  2954:32 00ce            jmp code_2a25 

        code_2957
  2957:3c                 dup 
  2958:35 53              ldi 53 
  295a:1a                 eq? 
  295b:30 0005            bnt code_2963 
  295e:35 10              ldi 10 
  2960:32 00c2            jmp code_2a25 

        code_2963
  2963:3c                 dup 
  2964:35 45              ldi 45 
  2966:1a                 eq? 
  2967:30 0005            bnt code_296f 
  296a:35 0f              ldi f 
  296c:32 00b6            jmp code_2a25 

        code_296f
  296f:3c                 dup 
  2970:35 44              ldi 44 
  2972:1a                 eq? 
  2973:30 0005            bnt code_297b 
  2976:35 0e              ldi e 
  2978:32 00aa            jmp code_2a25 

        code_297b
  297b:3c                 dup 
  297c:35 46              ldi 46 
  297e:1a                 eq? 
  297f:30 0005            bnt code_2987 
  2982:35 0d              ldi d 
  2984:32 009e            jmp code_2a25 

        code_2987
  2987:3c                 dup 
  2988:35 54              ldi 54 
  298a:1a                 eq? 
  298b:30 0005            bnt code_2993 
  298e:35 0c              ldi c 
  2990:32 0092            jmp code_2a25 

        code_2993
  2993:3c                 dup 
  2994:35 47              ldi 47 
  2996:1a                 eq? 
  2997:30 0005            bnt code_299f 
  299a:35 0b              ldi b 
  299c:32 0086            jmp code_2a25 

        code_299f
  299f:3c                 dup 
  29a0:35 59              ldi 59 
  29a2:1a                 eq? 
  29a3:30 0005            bnt code_29ab 
  29a6:35 0a              ldi a 
  29a8:32 007a            jmp code_2a25 

        code_29ab
  29ab:3c                 dup 
  29ac:35 48              ldi 48 
  29ae:1a                 eq? 
  29af:30 0005            bnt code_29b7 
  29b2:35 09              ldi 9 
  29b4:32 006e            jmp code_2a25 

        code_29b7
  29b7:3c                 dup 
  29b8:35 55              ldi 55 
  29ba:1a                 eq? 
  29bb:30 0005            bnt code_29c3 
  29be:35 08              ldi 8 
  29c0:32 0062            jmp code_2a25 

        code_29c3
  29c3:3c                 dup 
  29c4:35 4a              ldi 4a 
  29c6:1a                 eq? 
  29c7:30 0005            bnt code_29cf 
  29ca:35 07              ldi 7 
  29cc:32 0056            jmp code_2a25 

        code_29cf
  29cf:3c                 dup 
  29d0:35 4b              ldi 4b 
  29d2:1a                 eq? 
  29d3:30 0005            bnt code_29db 
  29d6:35 06              ldi 6 
  29d8:32 004a            jmp code_2a25 

        code_29db
  29db:3c                 dup 
  29dc:35 4f              ldi 4f 
  29de:1a                 eq? 
  29df:30 0005            bnt code_29e7 
  29e2:35 05              ldi 5 
  29e4:32 003e            jmp code_2a25 

        code_29e7
  29e7:3c                 dup 
  29e8:35 4c              ldi 4c 
  29ea:1a                 eq? 
  29eb:30 0005            bnt code_29f3 
  29ee:35 04              ldi 4 
  29f0:32 0032            jmp code_2a25 

        code_29f3
  29f3:3c                 dup 
  29f4:35 50              ldi 50 
  29f6:1a                 eq? 
  29f7:30 0005            bnt code_29ff 
  29fa:35 03              ldi 3 
  29fc:32 0026            jmp code_2a25 

        code_29ff
  29ff:3c                 dup 
  2a00:35 3a              ldi 3a 
  2a02:1a                 eq? 
  2a03:30 0005            bnt code_2a0b 
  2a06:35 02              ldi 2 
  2a08:32 001a            jmp code_2a25 

        code_2a0b
  2a0b:3c                 dup 
  2a0c:35 22              ldi 22 
  2a0e:1a                 eq? 
  2a0f:30 0005            bnt code_2a17 
  2a12:35 01              ldi 1 
  2a14:32 000e            jmp code_2a25 

        code_2a17
  2a17:3c                 dup 
  2a18:35 7d              ldi 7d 
  2a1a:1a                 eq? 
  2a1b:30 0005            bnt code_2a23 
  2a1e:35 00              ldi 0 
  2a20:32 0002            jmp code_2a25 

        code_2a23
  2a23:35 ff              ldi ff 

        code_2a25
  2a25:3a                toss 
  2a26:36                push 
  2a27:72 2830          lofsa $2830 // keyboard
  2a2a:4a 06             send 6 

  2a2c:48                 ret 
)

(procedure proc_2a2d
  2a2d:3f 02             link 2 // (var $2)
  2a2f:39 1e            pushi 1e // $1e mode
  2a31:39 04            pushi 4 // $4 x
  2a33:76               push0 
  2a34:87 01              lap param1 
  2a36:4a 04             send 4 

  2a38:36                push 
  2a39:35 12              ldi 12 
  2a3b:08                 div 
  2a3c:93 0a             lali local10 
  2a3e:04                 sub 
  2a3f:a5 00              sat temp0 
  2a41:39 03            pushi 3 // $3 y
  2a43:76               push0 
  2a44:87 01              lap param1 
  2a46:4a 04             send 4 

  2a48:36                push 
  2a49:34 00b4            ldi b4 
  2a4c:1e                 gt? 
  2a4d:30 000e            bnt code_2a5e 
  2a50:39 43            pushi 43 // $43 at
  2a52:78               push1 
  2a53:8d 00              lst temp0 
  2a55:72 2830          lofsa $2830 // keyboard
  2a58:4a 06             send 6 

  2a5a:48                 ret 
  2a5b:32 0086            jmp code_2ae4 

        code_2a5e
  2a5e:8d 00              lst temp0 
  2a60:35 1e              ldi 1e 
  2a62:22                 lt? 
  2a63:30 002d            bnt code_2a93 
  2a66:38 021f          pushi 21f // $21f white
  2a69:76               push0 
  2a6a:39 43            pushi 43 // $43 at
  2a6c:78               push1 
  2a6d:8d 00              lst temp0 
  2a6f:35 01              ldi 1 
  2a71:02                 add 
  2a72:36                push 
  2a73:72 2830          lofsa $2830 // keyboard
  2a76:4a 06             send 6 

  2a78:a5 01              sat temp1 
  2a7a:4a 04             send 4 

  2a7c:18                 not 
  2a7d:30 0013            bnt code_2a93 
  2a80:38 00c4          pushi c4 // $c4 onMe
  2a83:78               push1 
  2a84:8f 01              lsp param1 
  2a86:85 01              lat temp1 
  2a88:4a 06             send 6 

  2a8a:30 0006            bnt code_2a93 
  2a8d:85 01              lat temp1 
  2a8f:48                 ret 
  2a90:32 0051            jmp code_2ae4 

        code_2a93
  2a93:85 00              lat temp0 
  2a95:30 002c            bnt code_2ac4 
  2a98:38 021f          pushi 21f // $21f white
  2a9b:76               push0 
  2a9c:39 43            pushi 43 // $43 at
  2a9e:78               push1 
  2a9f:36                push 
  2aa0:35 01              ldi 1 
  2aa2:04                 sub 
  2aa3:36                push 
  2aa4:72 2830          lofsa $2830 // keyboard
  2aa7:4a 06             send 6 

  2aa9:a5 01              sat temp1 
  2aab:4a 04             send 4 

  2aad:18                 not 
  2aae:30 0013            bnt code_2ac4 
  2ab1:38 00c4          pushi c4 // $c4 onMe
  2ab4:78               push1 
  2ab5:8f 01              lsp param1 
  2ab7:85 01              lat temp1 
  2ab9:4a 06             send 6 

  2abb:30 0006            bnt code_2ac4 
  2abe:85 01              lat temp1 
  2ac0:48                 ret 
  2ac1:32 0020            jmp code_2ae4 

        code_2ac4
  2ac4:39 03            pushi 3 // $3 y
  2ac6:76               push0 
  2ac7:87 01              lap param1 
  2ac9:4a 04             send 4 

  2acb:36                push 
  2acc:34 00a4            ldi a4 
  2acf:1e                 gt? 
  2ad0:30 000e            bnt code_2ae1 
  2ad3:39 43            pushi 43 // $43 at
  2ad5:78               push1 
  2ad6:8d 00              lst temp0 
  2ad8:72 2830          lofsa $2830 // keyboard
  2adb:4a 06             send 6 

  2add:48                 ret 
  2ade:32 0003            jmp code_2ae4 

        code_2ae1
  2ae1:35 00              ldi 0 
  2ae3:48                 ret 

        code_2ae4
  2ae4:48                 ret 
)

