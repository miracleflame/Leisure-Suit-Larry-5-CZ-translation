(script 480)

(string
    string_0a86 "rm480"
    string_0a8c "Larry"
    string_0a92 "The Vice President"
    string_0aa5 "Art Team Manager\n\nCheryl Loyd"
    string_0ac3 "Animators\n\n"
    string_0acf "\n\nCheryl Loyd\nBarry T. Smith\nRoger Hardy Jr.\nDana M. Dean\nKarin Young\nMarc Hudgins\nEric Kasner"
    string_0b2e "\n\nRichard Powell\nPhyllis Cucchiara\nTerry Falls\nMichael Hutchison\nDesie Hartman\nWillis Wong"
    string_0b89 "Background Artists\n\nJane Cardinal\nMaurice Morgan\nAndy Hoyos\nCheryl Loyd\nJay Friedmann\nJennifer Shontz\nGloria Garland"
    string_0bfe "Programmers\n\nBrian K. Hughes\nCarlos Escobar\nSteve Conrad\nJohn Hartin\nOliver Brelsford\nAl Lowe"
    string_0c5c "Music Director\n\nMark Seibert"
    string_0c79 "Sierra's Creative Interpreter\nDevelopment System\n\n"
    string_0cac "\n\n\nJeff Stephenson\nRobert E. Heitman\nDan Foy\nLarry Scott\nJohn Rettig\nJ. Mark Hood\nChris Smith\nTerry McHenry"
    string_0d18 "\n\n\nEric Hart\nChad Bye\nMark Wilden\nKen Koch\nJohn Crane\nSteve Coallier\nRandy Moss"
    string_0d68 "Additional Music\n\nChris Braymen"
    string_0d88 "Additional Written Material\n\nJosh Mandel"
    string_0db1 "Quality Assurance Team Leader\n\nRobin Bradley"
    string_0dde "Coffee Grinder\n\nC. Escobar"
    string_0df9 "AL says"
    string_0e01 "Congratulations! You Win!!"
    string_0e1c "Aren't you glad you bought a DAC?"
    string_0e3e "Airport PA #1"
    string_0e4c "Airport PA #2"
    string_0e5a "Airport PA #3"
    string_0e68 "Airport PA #4"
    string_0e76 "  Atmosphere  "
    string_0e85 "    Screams    "
    string_0e95 "      Yeow      "
    string_0ea6 "     Coffee     "
    string_0eb7 "Folding Chair"
    string_0ec5 " Wolf Whistle "
    string_0ed4 "   Knocking   "
    string_0ee3 "   Glass #1   "
    string_0ef2 "   Glass #2   "
    string_0f01 "       Ah       "
    string_0f12 "       Oh       "
    string_0f23 "       AH!       "
    string_0f35 "      OH!      "
    string_0f45 "     Oooh!     "
    string_0f55 " Crowd Gasp "
    string_0f62 " Slob Eating "
    string_0f70 "     Flush     "
    string_0f80 "     Belch     "
    string_0f90 "     Barf     "
    string_0f9f "Do Not Touch"
    string_0fac "< Done >"
    string_0fb5 "Thanks for buying \"Larry 5!\""
    string_0fd2 "Remember Al Lowe's Slogan:"
    string_0fed "Better Babes Through\nTechnology!"
    string_100e "sCartoon"
    string_1017 "copter"
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0111
    local3 = $0112
    local4 = $0113
    local5 = $0129
    local6 = $01d3
    local7 = $0183
    local8 = $0093
    local9 = $00a1
    local10 = $0123
    local11 = $035d
    local12 = $038f
    local13 = $0092
    local14 = $037c
    local15 = $02f0
    local16 = $02f1
    local17 = $02f2
    local18 = $02f3
    local19 = $02f4
    local20 = $02ef
    local21 = $020e
    local22 = $0353
    local23 = $01e2
    local24 = $01e3
    local25 = $01e4
    local26 = $0000
    local27 = $0000
    local28 = $0000
    local29 = $0000
    local30 = $0000
)

// 00b2
(instance publicrm480 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $1e0
        style $7
        horizon $0
        controls $0
        north $0
        east $0
        south $0
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:7a               push2 
  000f:38 0081          pushi 81 // $81 handleEvent
  0012:78               push1 
  0013:46 03be 0000 04  calle 3be procedure_0000 4 //  

  0019:7a               push2 
  001a:38 0087          pushi 87 // $87 ticks
  001d:89 ae              lsg  
  001f:46 03be 0000 04  calle 3be procedure_0000 4 //  

  0025:7a               push2 
  0026:38 0084          pushi 84 // $84 cycles
  0029:39 64            pushi 64 // $64 moveDone
  002b:46 03be 0000 04  calle 3be procedure_0000 4 //  

  0031:39 6b            pushi 6b // $6b init
  0033:76               push0 
  0034:38 0096          pushi 96 // $96 setCycle
  0037:78               push1 
  0038:51 17            class Fwd 
  003a:36                push 
  003b:72 096e          lofsa $096e // copter
  003e:4a 0a             send a 

  0040:39 6b            pushi 6b // $6b init
  0042:76               push0 
  0043:57 72 04         super LLRoom 4 

  0046:78               push1 
  0047:39 2f            pushi 2f // $2f dy
  0049:45 06 02         callb procedure_0006 2 //  

  004c:30 001d            bnt code_006c 
  004f:39 2b            pushi 2b // $2b number
  0051:78               push1 
  0052:38 01ce          pushi 1ce // $1ce getDistToLine
  0055:39 66            pushi 66 // $66 flags
  0057:78               push1 
  0058:78               push1 
  0059:38 00a2          pushi a2 // $a2 setLoop
  005c:78               push1 
  005d:39 ff            pushi ff // $ff syncNum
  005f:38 00a1          pushi a1 // $a1 setVol
  0062:78               push1 
  0063:39 7f            pushi 7f // $7f addAfter
  0065:39 2a            pushi 2a // $2a play
  0067:76               push0 
  0068:81 66              lag  
  006a:4a 1c             send 1c 


        code_006c
  006c:39 2b            pushi 2b // $2b number
  006e:78               push1 
  006f:38 01d4          pushi 1d4 // $1d4 writeFile
  0072:39 66            pushi 66 // $66 flags
  0074:78               push1 
  0075:78               push1 
  0076:38 00a2          pushi a2 // $a2 setLoop
  0079:78               push1 
  007a:39 ff            pushi ff // $ff syncNum
  007c:38 00a1          pushi a1 // $a1 setVol
  007f:78               push1 
  0080:39 7f            pushi 7f // $7f addAfter
  0082:39 2a            pushi 2a // $2a play
  0084:76               push0 
  0085:81 67              lag  
  0087:4a 1c             send 1c 

  0089:38 008e          pushi 8e // $8e setScript
  008c:78               push1 
  008d:72 0938          lofsa $0938 // sCartoon
  0090:36                push 
  0091:54 06             self 6 

  0093:48                 ret 
    )

    (method (dispose) // method_0094
  0094:39 6c            pushi 6c // $6c dispose
  0096:76               push0 
  0097:59 01            &rest 1 
  0099:57 72 04         super LLRoom 4 

  009c:38 009f          pushi 9f // $9f fade
  009f:39 04            pushi 4 // $4 x
  00a1:76               push0 
  00a2:39 0f            pushi f // $f lsBottom
  00a4:39 0c            pushi c // $c nsRight
  00a6:78               push1 
  00a7:81 66              lag  
  00a9:4a 0c             send c 

  00ab:48                 ret 
    )

)

// 0932
(instance sCartoon of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_00f6
  00f6:87 01              lap param1 
  00f8:65 0a             aTop state 
  00fa:36                push 
  00fb:3c                 dup 
  00fc:35 00              ldi 0 
  00fe:1a                 eq? 
  00ff:30 000b            bnt code_010d 
  0102:76               push0 
  0103:45 02 00         callb procedure_0002 0 //  

  0106:35 03              ldi 3 
  0108:65 12             aTop seconds 
  010a:32 081c            jmp code_0929 

        code_010d
  010d:3c                 dup 
  010e:35 01              ldi 1 
  0110:1a                 eq? 
  0111:30 0017            bnt code_012b 
  0114:39 08            pushi 8 // $8 underBits
  0116:89 00              lsg  
  0118:38 01e0          pushi 1e0 // $1e0 addPt
  011b:76               push0 
  011c:39 6c            pushi 6c // $6c dispose
  011e:7c            pushSelf 
  011f:39 43            pushi 43 // $43 at
  0121:39 ff            pushi ff // $ff syncNum
  0123:39 14            pushi 14 // $14 brLeft
  0125:45 12 10         callb procedure_0012 10 //  

  0128:32 07fe            jmp code_0929 

        code_012b
  012b:3c                 dup 
  012c:35 02              ldi 2 
  012e:1a                 eq? 
  012f:30 001b            bnt code_014d 
  0132:39 09            pushi 9 // $9 nsTop
  0134:38 01e0          pushi 1e0 // $1e0 addPt
  0137:78               push1 
  0138:39 50            pushi 50 // $50 title
  013a:72 0a8c          lofsa $0a8c // Larry
  013d:36                push 
  013e:39 6c            pushi 6c // $6c dispose
  0140:7c            pushSelf 
  0141:39 43            pushi 43 // $43 at
  0143:39 ff            pushi ff // $ff syncNum
  0145:39 14            pushi 14 // $14 brLeft
  0147:45 0e 12         callb procedure_000e 12 //  

  014a:32 07dc            jmp code_0929 

        code_014d
  014d:3c                 dup 
  014e:35 03              ldi 3 
  0150:1a                 eq? 
  0151:30 0017            bnt code_016b 
  0154:39 08            pushi 8 // $8 underBits
  0156:89 00              lsg  
  0158:38 01e0          pushi 1e0 // $1e0 addPt
  015b:7a               push2 
  015c:39 6c            pushi 6c // $6c dispose
  015e:7c            pushSelf 
  015f:39 43            pushi 43 // $43 at
  0161:39 ff            pushi ff // $ff syncNum
  0163:39 14            pushi 14 // $14 brLeft
  0165:45 12 10         callb procedure_0012 10 //  

  0168:32 07be            jmp code_0929 

        code_016b
  016b:3c                 dup 
  016c:35 04              ldi 4 
  016e:1a                 eq? 
  016f:30 001c            bnt code_018e 
  0172:39 09            pushi 9 // $9 nsTop
  0174:38 01e0          pushi 1e0 // $1e0 addPt
  0177:39 03            pushi 3 // $3 y
  0179:39 50            pushi 50 // $50 title
  017b:72 0a92          lofsa $0a92 // The Vice President
  017e:36                push 
  017f:39 6c            pushi 6c // $6c dispose
  0181:7c            pushSelf 
  0182:39 43            pushi 43 // $43 at
  0184:39 ff            pushi ff // $ff syncNum
  0186:39 14            pushi 14 // $14 brLeft
  0188:45 0e 12         callb procedure_000e 12 //  

  018b:32 079b            jmp code_0929 

        code_018e
  018e:3c                 dup 
  018f:35 05              ldi 5 
  0191:1a                 eq? 
  0192:30 001c            bnt code_01b1 
  0195:39 09            pushi 9 // $9 nsTop
  0197:38 01e0          pushi 1e0 // $1e0 addPt
  019a:39 04            pushi 4 // $4 x
  019c:39 50            pushi 50 // $50 title
  019e:72 0a8c          lofsa $0a8c // Larry
  01a1:36                push 
  01a2:39 6c            pushi 6c // $6c dispose
  01a4:7c            pushSelf 
  01a5:39 43            pushi 43 // $43 at
  01a7:39 ff            pushi ff // $ff syncNum
  01a9:39 14            pushi 14 // $14 brLeft
  01ab:45 0e 12         callb procedure_000e 12 //  

  01ae:32 0778            jmp code_0929 

        code_01b1
  01b1:3c                 dup 
  01b2:35 06              ldi 6 
  01b4:1a                 eq? 
  01b5:30 0018            bnt code_01d0 
  01b8:39 08            pushi 8 // $8 underBits
  01ba:89 00              lsg  
  01bc:38 01e0          pushi 1e0 // $1e0 addPt
  01bf:39 05            pushi 5 // $5 view
  01c1:39 6c            pushi 6c // $6c dispose
  01c3:7c            pushSelf 
  01c4:39 43            pushi 43 // $43 at
  01c6:39 ff            pushi ff // $ff syncNum
  01c8:39 14            pushi 14 // $14 brLeft
  01ca:45 12 10         callb procedure_0012 10 //  

  01cd:32 0759            jmp code_0929 

        code_01d0
  01d0:3c                 dup 
  01d1:35 07              ldi 7 
  01d3:1a                 eq? 
  01d4:30 0015            bnt code_01ec 
  01d7:38 00a2          pushi a2 // $a2 setLoop
  01da:78               push1 
  01db:76               push0 
  01dc:38 0096          pushi 96 // $96 setCycle
  01df:7a               push2 
  01e0:51 1a            class End 
  01e2:36                push 
  01e3:7c            pushSelf 
  01e4:72 096e          lofsa $096e // copter
  01e7:4a 0e             send e 

  01e9:32 073d            jmp code_0929 

        code_01ec
  01ec:3c                 dup 
  01ed:35 08              ldi 8 
  01ef:1a                 eq? 
  01f0:30 0039            bnt code_022c 
  01f3:38 00db          pushi db // $db cycleSpeed
  01f6:78               push1 
  01f7:39 08            pushi 8 // $8 underBits
  01f9:38 00a2          pushi a2 // $a2 setLoop
  01fc:78               push1 
  01fd:78               push1 
  01fe:38 0120          pushi 120 // $120 setCel
  0201:78               push1 
  0202:76               push0 
  0203:38 00db          pushi db // $db cycleSpeed
  0206:78               push1 
  0207:39 08            pushi 8 // $8 underBits
  0209:39 38            pushi 38 // $38 moveSpeed
  020b:78               push1 
  020c:39 08            pushi 8 // $8 underBits
  020e:38 0096          pushi 96 // $96 setCycle
  0211:7a               push2 
  0212:51 1a            class End 
  0214:36                push 
  0215:7c            pushSelf 
  0216:38 011b          pushi 11b // $11b setMotion
  0219:39 03            pushi 3 // $3 y
  021b:51 1e            class MoveTo 
  021d:36                push 
  021e:38 00a5          pushi a5 // $a5 clean
  0221:38 0080          pushi 80 // $80 indexOf
  0224:72 096e          lofsa $096e // copter
  0227:4a 30             send 30 

  0229:32 06fd            jmp code_0929 

        code_022c
  022c:3c                 dup 
  022d:35 09              ldi 9 
  022f:1a                 eq? 
  0230:30 004f            bnt code_0282 
  0233:39 04            pushi 4 // $4 x
  0235:78               push1 
  0236:38 011d          pushi 11d // $11d stopUpd
  0239:39 03            pushi 3 // $3 y
  023b:78               push1 
  023c:39 4f            pushi 4f // $4f restore
  023e:39 36            pushi 36 // $36 xStep
  0240:78               push1 
  0241:39 07            pushi 7 // $7 cel
  0243:39 37            pushi 37 // $37 yStep
  0245:78               push1 
  0246:39 07            pushi 7 // $7 cel
  0248:38 00a2          pushi a2 // $a2 setLoop
  024b:78               push1 
  024c:7a               push2 
  024d:38 0120          pushi 120 // $120 setCel
  0250:78               push1 
  0251:76               push0 
  0252:38 00db          pushi db // $db cycleSpeed
  0255:78               push1 
  0256:39 06            pushi 6 // $6 loop
  0258:39 38            pushi 38 // $38 moveSpeed
  025a:78               push1 
  025b:39 06            pushi 6 // $6 loop
  025d:38 0096          pushi 96 // $96 setCycle
  0260:78               push1 
  0261:51 17            class Fwd 
  0263:36                push 
  0264:38 011b          pushi 11b // $11b setMotion
  0267:39 04            pushi 4 // $4 x
  0269:51 1e            class MoveTo 
  026b:36                push 
  026c:38 015e          pushi 15e // $15e shadowWid
  026f:39 3d            pushi 3d // $3d isBlocked
  0271:7c            pushSelf 
  0272:72 096e          lofsa $096e // copter
  0275:4a 42             send 42 

  0277:38 009f          pushi 9f // $9f fade
  027a:76               push0 
  027b:81 67              lag  
  027d:4a 04             send 4 

  027f:32 06a7            jmp code_0929 

        code_0282
  0282:3c                 dup 
  0283:35 0a              ldi a 
  0285:1a                 eq? 
  0286:30 0007            bnt code_0290 
  0289:35 78              ldi 78 
  028b:65 16             aTop ticks 
  028d:32 0699            jmp code_0929 

        code_0290
  0290:3c                 dup 
  0291:35 0b              ldi b 
  0293:1a                 eq? 
  0294:30 0013            bnt code_02aa 
  0297:38 009f          pushi 9f // $9f fade
  029a:39 05            pushi 5 // $5 view
  029c:76               push0 
  029d:39 0f            pushi f // $f lsBottom
  029f:39 0c            pushi c // $c nsRight
  02a1:78               push1 
  02a2:7c            pushSelf 
  02a3:81 66              lag  
  02a5:4a 0e             send e 

  02a7:32 067f            jmp code_0929 

        code_02aa
  02aa:3c                 dup 
  02ab:35 0c              ldi c 
  02ad:1a                 eq? 
  02ae:30 0023            bnt code_02d4 
  02b1:39 2b            pushi 2b // $2b number
  02b3:78               push1 
  02b4:39 64            pushi 64 // $64 moveDone
  02b6:39 66            pushi 66 // $66 flags
  02b8:78               push1 
  02b9:78               push1 
  02ba:38 00a2          pushi a2 // $a2 setLoop
  02bd:78               push1 
  02be:39 ff            pushi ff // $ff syncNum
  02c0:38 00a1          pushi a1 // $a1 setVol
  02c3:78               push1 
  02c4:39 7f            pushi 7f // $7f addAfter
  02c6:39 2a            pushi 2a // $2a play
  02c8:76               push0 
  02c9:81 66              lag  
  02cb:4a 1c             send 1c 

  02cd:35 78              ldi 78 
  02cf:65 16             aTop ticks 
  02d1:32 0655            jmp code_0929 

        code_02d4
  02d4:3c                 dup 
  02d5:35 0d              ldi d 
  02d7:1a                 eq? 
  02d8:30 0020            bnt code_02fb 
  02db:39 05            pushi 5 // $5 view
  02dd:38 01e0          pushi 1e0 // $1e0 addPt
  02e0:39 06            pushi 6 // $6 loop
  02e2:39 43            pushi 43 // $43 at
  02e4:39 ff            pushi ff // $ff syncNum
  02e6:39 14            pushi 14 // $14 brLeft
  02e8:45 0e 0a         callb procedure_000e a //  

  02eb:7a               push2 
  02ec:38 01e0          pushi 1e0 // $1e0 addPt
  02ef:39 07            pushi 7 // $7 cel
  02f1:45 0e 04         callb procedure_000e 4 //  

  02f4:35 03              ldi 3 
  02f6:65 12             aTop seconds 
  02f8:32 062e            jmp code_0929 

        code_02fb
  02fb:3c                 dup 
  02fc:35 0e              ldi e 
  02fe:1a                 eq? 
  02ff:30 0025            bnt code_0327 
  0302:39 07            pushi 7 // $7 cel
  0304:38 01e0          pushi 1e0 // $1e0 addPt
  0307:39 08            pushi 8 // $8 underBits
  0309:39 43            pushi 43 // $43 at
  030b:39 ff            pushi ff // $ff syncNum
  030d:39 0f            pushi f // $f lsBottom
  030f:39 46            pushi 46 // $46 width
  0311:38 0118          pushi 118 // $118 isNotHidden
  0314:45 0e 0e         callb procedure_000e e //  

  0317:7a               push2 
  0318:38 01e0          pushi 1e0 // $1e0 addPt
  031b:39 09            pushi 9 // $9 nsTop
  031d:45 0e 04         callb procedure_000e 4 //  

  0320:35 03              ldi 3 
  0322:65 12             aTop seconds 
  0324:32 0602            jmp code_0929 

        code_0327
  0327:3c                 dup 
  0328:35 0f              ldi f 
  032a:1a                 eq? 
  032b:30 0025            bnt code_0353 
  032e:39 07            pushi 7 // $7 cel
  0330:38 01e0          pushi 1e0 // $1e0 addPt
  0333:39 0a            pushi a // $a nsLeft
  0335:39 43            pushi 43 // $43 at
  0337:39 ff            pushi ff // $ff syncNum
  0339:39 0f            pushi f // $f lsBottom
  033b:39 46            pushi 46 // $46 width
  033d:38 0118          pushi 118 // $118 isNotHidden
  0340:45 0e 0e         callb procedure_000e e //  

  0343:7a               push2 
  0344:38 01e0          pushi 1e0 // $1e0 addPt
  0347:39 0b            pushi b // $b nsBottom
  0349:45 0e 04         callb procedure_000e 4 //  

  034c:35 03              ldi 3 
  034e:65 12             aTop seconds 
  0350:32 05d6            jmp code_0929 

        code_0353
  0353:3c                 dup 
  0354:35 10              ldi 10 
  0356:1a                 eq? 
  0357:30 0025            bnt code_037f 
  035a:39 07            pushi 7 // $7 cel
  035c:38 01e0          pushi 1e0 // $1e0 addPt
  035f:39 0c            pushi c // $c nsRight
  0361:39 43            pushi 43 // $43 at
  0363:39 ff            pushi ff // $ff syncNum
  0365:39 0f            pushi f // $f lsBottom
  0367:39 46            pushi 46 // $46 width
  0369:38 0118          pushi 118 // $118 isNotHidden
  036c:45 0e 0e         callb procedure_000e e //  

  036f:7a               push2 
  0370:38 01e0          pushi 1e0 // $1e0 addPt
  0373:39 0d            pushi d // $d lsTop
  0375:45 0e 04         callb procedure_000e 4 //  

  0378:35 03              ldi 3 
  037a:65 12             aTop seconds 
  037c:32 05aa            jmp code_0929 

        code_037f
  037f:3c                 dup 
  0380:35 11              ldi 11 
  0382:1a                 eq? 
  0383:30 0025            bnt code_03ab 
  0386:39 07            pushi 7 // $7 cel
  0388:38 01e0          pushi 1e0 // $1e0 addPt
  038b:39 0e            pushi e // $e lsLeft
  038d:39 43            pushi 43 // $43 at
  038f:39 ff            pushi ff // $ff syncNum
  0391:39 0f            pushi f // $f lsBottom
  0393:39 46            pushi 46 // $46 width
  0395:38 0118          pushi 118 // $118 isNotHidden
  0398:45 0e 0e         callb procedure_000e e //  

  039b:7a               push2 
  039c:38 01e0          pushi 1e0 // $1e0 addPt
  039f:39 0f            pushi f // $f lsBottom
  03a1:45 0e 04         callb procedure_000e 4 //  

  03a4:35 03              ldi 3 
  03a6:65 12             aTop seconds 
  03a8:32 057e            jmp code_0929 

        code_03ab
  03ab:3c                 dup 
  03ac:35 12              ldi 12 
  03ae:1a                 eq? 
  03af:30 0025            bnt code_03d7 
  03b2:39 07            pushi 7 // $7 cel
  03b4:38 01e0          pushi 1e0 // $1e0 addPt
  03b7:39 10            pushi 10 // $10 lsRight
  03b9:39 43            pushi 43 // $43 at
  03bb:39 ff            pushi ff // $ff syncNum
  03bd:39 0f            pushi f // $f lsBottom
  03bf:39 46            pushi 46 // $46 width
  03c1:38 0118          pushi 118 // $118 isNotHidden
  03c4:45 0e 0e         callb procedure_000e e //  

  03c7:7a               push2 
  03c8:38 01e0          pushi 1e0 // $1e0 addPt
  03cb:39 11            pushi 11 // $11 signal
  03cd:45 0e 04         callb procedure_000e 4 //  

  03d0:35 03              ldi 3 
  03d2:65 12             aTop seconds 
  03d4:32 0552            jmp code_0929 

        code_03d7
  03d7:3c                 dup 
  03d8:35 13              ldi 13 
  03da:1a                 eq? 
  03db:30 0025            bnt code_0403 
  03de:39 07            pushi 7 // $7 cel
  03e0:38 01e0          pushi 1e0 // $1e0 addPt
  03e3:39 12            pushi 12 // $12 illegalBits
  03e5:39 43            pushi 43 // $43 at
  03e7:39 ff            pushi ff // $ff syncNum
  03e9:39 0f            pushi f // $f lsBottom
  03eb:39 46            pushi 46 // $46 width
  03ed:38 0118          pushi 118 // $118 isNotHidden
  03f0:45 0e 0e         callb procedure_000e e //  

  03f3:7a               push2 
  03f4:38 01e0          pushi 1e0 // $1e0 addPt
  03f7:39 13            pushi 13 // $13 brTop
  03f9:45 0e 04         callb procedure_000e 4 //  

  03fc:35 03              ldi 3 
  03fe:65 12             aTop seconds 
  0400:32 0526            jmp code_0929 

        code_0403
  0403:3c                 dup 
  0404:35 14              ldi 14 
  0406:1a                 eq? 
  0407:30 001c            bnt code_0426 
  040a:39 07            pushi 7 // $7 cel
  040c:38 01e0          pushi 1e0 // $1e0 addPt
  040f:39 14            pushi 14 // $14 brLeft
  0411:39 43            pushi 43 // $43 at
  0413:39 ff            pushi ff // $ff syncNum
  0415:39 0f            pushi f // $f lsBottom
  0417:39 46            pushi 46 // $46 width
  0419:38 0118          pushi 118 // $118 isNotHidden
  041c:45 0e 0e         callb procedure_000e e //  

  041f:35 03              ldi 3 
  0421:65 12             aTop seconds 
  0423:32 0503            jmp code_0929 

        code_0426
  0426:3c                 dup 
  0427:35 15              ldi 15 
  0429:1a                 eq? 
  042a:30 0010            bnt code_043d 
  042d:7a               push2 
  042e:38 01e0          pushi 1e0 // $1e0 addPt
  0431:39 15            pushi 15 // $15 brBottom
  0433:45 0e 04         callb procedure_000e 4 //  

  0436:35 03              ldi 3 
  0438:65 12             aTop seconds 
  043a:32 04ec            jmp code_0929 

        code_043d
  043d:3c                 dup 
  043e:35 16              ldi 16 
  0440:1a                 eq? 
  0441:30 0018            bnt code_045c 
  0444:39 05            pushi 5 // $5 view
  0446:38 01e0          pushi 1e0 // $1e0 addPt
  0449:39 16            pushi 16 // $16 brRight
  044b:39 43            pushi 43 // $43 at
  044d:39 ff            pushi ff // $ff syncNum
  044f:38 00b9          pushi b9 // $b9 bottom
  0452:45 0e 0a         callb procedure_000e a //  

  0455:35 03              ldi 3 
  0457:65 12             aTop seconds 
  0459:32 04cd            jmp code_0929 

        code_045c
  045c:3c                 dup 
  045d:35 17              ldi 17 
  045f:1a                 eq? 
  0460:30 0012            bnt code_0475 
  0463:7a               push2 
  0464:72 0aa5          lofsa $0aa5 // Art Team Manager

Cheryl Loyd
  0467:36                push 
  0468:39 03            pushi 3 // $3 y
  046a:40 0597 04        call proc_0a05 4 

  046e:35 03              ldi 3 
  0470:65 12             aTop seconds 
  0472:32 04b4            jmp code_0929 

        code_0475
  0475:3c                 dup 
  0476:35 18              ldi 18 
  0478:1a                 eq? 
  0479:30 00b7            bnt code_0533 
  047c:38 018c          pushi 18c // $18c drawPic
  047f:7a               push2 
  0480:78               push1 
  0481:39 0d            pushi d // $d lsTop
  0483:81 02              lag  
  0485:4a 08             send 8 

  0487:7a               push2 
  0488:76               push0 
  0489:39 05            pushi 5 // $5 view
  048b:43 3c 04         callk Random 4 

  048e:36                push 
  048f:3c                 dup 
  0490:35 00              ldi 0 
  0492:1a                 eq? 
  0493:30 0005            bnt code_049b 
  0496:81 83              lag  
  0498:32 0032            jmp code_04cd 

        code_049b
  049b:3c                 dup 
  049c:35 01              ldi 1 
  049e:1a                 eq? 
  049f:30 0005            bnt code_04a7 
  04a2:81 86              lag  
  04a4:32 0026            jmp code_04cd 

        code_04a7
  04a7:3c                 dup 
  04a8:35 02              ldi 2 
  04aa:1a                 eq? 
  04ab:30 0005            bnt code_04b3 
  04ae:81 8a              lag  
  04b0:32 001a            jmp code_04cd 

        code_04b3
  04b3:3c                 dup 
  04b4:35 03              ldi 3 
  04b6:1a                 eq? 
  04b7:30 0005            bnt code_04bf 
  04ba:81 8e              lag  
  04bc:32 000e            jmp code_04cd 

        code_04bf
  04bf:3c                 dup 
  04c0:35 04              ldi 4 
  04c2:1a                 eq? 
  04c3:30 0005            bnt code_04cb 
  04c6:81 90              lag  
  04c8:32 0002            jmp code_04cd 

        code_04cb
  04cb:81 92              lag  

        code_04cd
  04cd:3a                toss 
  04ce:a3 1e              sal local30 
  04d0:39 0c            pushi c // $c nsRight
  04d2:72 0ac3          lofsa $0ac3 // Animators


  04d5:36                push 
  04d6:39 66            pushi 66 // $66 flags
  04d8:8b 1e              lsl local30 
  04da:39 64            pushi 64 // $64 moveDone
  04dc:78               push1 
  04dd:39 23            pushi 23 // $23 window
  04df:39 6a            pushi 6a // $6a new
  04e1:38 013e          pushi 13e // $13e prompt
  04e4:39 69            pushi 69 // $69 hide
  04e6:89 1a              lsg  
  04e8:39 65            pushi 65 // $65 topString
  04ea:78               push1 
  04eb:43 1b 18         callk Display 18 

  04ee:39 0c            pushi c // $c nsRight
  04f0:72 0acf          lofsa $0acf // 

Cheryl Loyd
Barry T. Smith
Roger Hardy Jr.
Dana M. Dean
Karin Young
Marc Hudgins
Eric Kasner
  04f3:36                push 
  04f4:39 66            pushi 66 // $66 flags
  04f6:8b 1e              lsl local30 
  04f8:39 64            pushi 64 // $64 moveDone
  04fa:78               push1 
  04fb:39 23            pushi 23 // $23 window
  04fd:39 6a            pushi 6a // $6a new
  04ff:38 009f          pushi 9f // $9f fade
  0502:39 69            pushi 69 // $69 hide
  0504:89 1a              lsg  
  0506:39 65            pushi 65 // $65 topString
  0508:78               push1 
  0509:43 1b 18         callk Display 18 

  050c:39 0c            pushi c // $c nsRight
  050e:72 0b2e          lofsa $0b2e // 

Richard Powell
Phyllis Cucchiara
Terry Falls
Michael Hutchison
Desie Hartman
Willis Wong
  0511:36                push 
  0512:39 66            pushi 66 // $66 flags
  0514:8b 1e              lsl local30 
  0516:39 64            pushi 64 // $64 moveDone
  0518:38 00a1          pushi a1 // $a1 setVol
  051b:39 23            pushi 23 // $23 window
  051d:39 6a            pushi 6a // $6a new
  051f:38 009f          pushi 9f // $9f fade
  0522:39 69            pushi 69 // $69 hide
  0524:89 1a              lsg  
  0526:39 65            pushi 65 // $65 topString
  0528:78               push1 
  0529:43 1b 18         callk Display 18 

  052c:35 08              ldi 8 
  052e:65 12             aTop seconds 
  0530:32 03f6            jmp code_0929 

        code_0533
  0533:3c                 dup 
  0534:35 19              ldi 19 
  0536:1a                 eq? 
  0537:30 0012            bnt code_054c 
  053a:7a               push2 
  053b:72 0b89          lofsa $0b89 // Background Artists

Jane Cardinal
Maurice Morgan
Andy Hoyos
Cheryl Loyd
Jay Friedmann
Jennifer Shontz
Gloria Garland
  053e:36                push 
  053f:39 09            pushi 9 // $9 nsTop
  0541:40 04c0 04        call proc_0a05 4 

  0545:35 05              ldi 5 
  0547:65 12             aTop seconds 
  0549:32 03dd            jmp code_0929 

        code_054c
  054c:3c                 dup 
  054d:35 1a              ldi 1a 
  054f:1a                 eq? 
  0550:30 0012            bnt code_0565 
  0553:7a               push2 
  0554:72 0bfe          lofsa $0bfe // Programmers

Brian K. Hughes
Carlos Escobar
Steve Conrad
John Hartin
Oliver Brelsford
Al Lowe
  0557:36                push 
  0558:39 08            pushi 8 // $8 underBits
  055a:40 04a7 04        call proc_0a05 4 

  055e:35 05              ldi 5 
  0560:65 12             aTop seconds 
  0562:32 03c4            jmp code_0929 

        code_0565
  0565:3c                 dup 
  0566:35 1b              ldi 1b 
  0568:1a                 eq? 
  0569:30 0012            bnt code_057e 
  056c:7a               push2 
  056d:72 0c5c          lofsa $0c5c // Music Director

Mark Seibert
  0570:36                push 
  0571:39 03            pushi 3 // $3 y
  0573:40 048e 04        call proc_0a05 4 

  0577:35 03              ldi 3 
  0579:65 12             aTop seconds 
  057b:32 03ab            jmp code_0929 

        code_057e
  057e:3c                 dup 
  057f:35 1c              ldi 1c 
  0581:1a                 eq? 
  0582:30 00b7            bnt code_063c 
  0585:38 018c          pushi 18c // $18c drawPic
  0588:7a               push2 
  0589:78               push1 
  058a:39 0d            pushi d // $d lsTop
  058c:81 02              lag  
  058e:4a 08             send 8 

  0590:7a               push2 
  0591:76               push0 
  0592:39 05            pushi 5 // $5 view
  0594:43 3c 04         callk Random 4 

  0597:36                push 
  0598:3c                 dup 
  0599:35 00              ldi 0 
  059b:1a                 eq? 
  059c:30 0005            bnt code_05a4 
  059f:81 83              lag  
  05a1:32 0032            jmp code_05d6 

        code_05a4
  05a4:3c                 dup 
  05a5:35 01              ldi 1 
  05a7:1a                 eq? 
  05a8:30 0005            bnt code_05b0 
  05ab:81 86              lag  
  05ad:32 0026            jmp code_05d6 

        code_05b0
  05b0:3c                 dup 
  05b1:35 02              ldi 2 
  05b3:1a                 eq? 
  05b4:30 0005            bnt code_05bc 
  05b7:81 8a              lag  
  05b9:32 001a            jmp code_05d6 

        code_05bc
  05bc:3c                 dup 
  05bd:35 03              ldi 3 
  05bf:1a                 eq? 
  05c0:30 0005            bnt code_05c8 
  05c3:81 8e              lag  
  05c5:32 000e            jmp code_05d6 

        code_05c8
  05c8:3c                 dup 
  05c9:35 04              ldi 4 
  05cb:1a                 eq? 
  05cc:30 0005            bnt code_05d4 
  05cf:81 90              lag  
  05d1:32 0002            jmp code_05d6 

        code_05d4
  05d4:81 92              lag  

        code_05d6
  05d6:3a                toss 
  05d7:a3 1e              sal local30 
  05d9:39 0c            pushi c // $c nsRight
  05db:72 0c79          lofsa $0c79 // Sierra's Creative Interpreter
Development System


  05de:36                push 
  05df:39 66            pushi 66 // $66 flags
  05e1:8b 1e              lsl local30 
  05e3:39 64            pushi 64 // $64 moveDone
  05e5:78               push1 
  05e6:39 17            pushi 17 // $17 name
  05e8:39 6a            pushi 6a // $6a new
  05ea:38 013e          pushi 13e // $13e prompt
  05ed:39 69            pushi 69 // $69 hide
  05ef:89 1a              lsg  
  05f1:39 65            pushi 65 // $65 topString
  05f3:78               push1 
  05f4:43 1b 18         callk Display 18 

  05f7:39 0c            pushi c // $c nsRight
  05f9:72 0cac          lofsa $0cac // 


Jeff Stephenson
Robert E. Heitman
Dan Foy
Larry Scott
John Rettig
J. Mark Hood
Chris Smith
Terry McHenry
  05fc:36                push 
  05fd:39 66            pushi 66 // $66 flags
  05ff:8b 1e              lsl local30 
  0601:39 64            pushi 64 // $64 moveDone
  0603:78               push1 
  0604:39 17            pushi 17 // $17 name
  0606:39 6a            pushi 6a // $6a new
  0608:38 009f          pushi 9f // $9f fade
  060b:39 69            pushi 69 // $69 hide
  060d:89 1a              lsg  
  060f:39 65            pushi 65 // $65 topString
  0611:78               push1 
  0612:43 1b 18         callk Display 18 

  0615:39 0c            pushi c // $c nsRight
  0617:72 0d18          lofsa $0d18 // 


Eric Hart
Chad Bye
Mark Wilden
Ken Koch
John Crane
Steve Coallier
Randy Moss
  061a:36                push 
  061b:39 66            pushi 66 // $66 flags
  061d:8b 1e              lsl local30 
  061f:39 64            pushi 64 // $64 moveDone
  0621:38 00a1          pushi a1 // $a1 setVol
  0624:39 17            pushi 17 // $17 name
  0626:39 6a            pushi 6a // $6a new
  0628:38 009f          pushi 9f // $9f fade
  062b:39 69            pushi 69 // $69 hide
  062d:89 1a              lsg  
  062f:39 65            pushi 65 // $65 topString
  0631:78               push1 
  0632:43 1b 18         callk Display 18 

  0635:35 08              ldi 8 
  0637:65 12             aTop seconds 
  0639:32 02ed            jmp code_0929 

        code_063c
  063c:3c                 dup 
  063d:35 1d              ldi 1d 
  063f:1a                 eq? 
  0640:30 0012            bnt code_0655 
  0643:7a               push2 
  0644:72 0d68          lofsa $0d68 // Additional Music

Chris Braymen
  0647:36                push 
  0648:39 03            pushi 3 // $3 y
  064a:40 03b7 04        call proc_0a05 4 

  064e:35 03              ldi 3 
  0650:65 12             aTop seconds 
  0652:32 02d4            jmp code_0929 

        code_0655
  0655:3c                 dup 
  0656:35 1e              ldi 1e 
  0658:1a                 eq? 
  0659:30 0012            bnt code_066e 
  065c:7a               push2 
  065d:72 0d88          lofsa $0d88 // Additional Written Material

Josh Mandel
  0660:36                push 
  0661:39 03            pushi 3 // $3 y
  0663:40 039e 04        call proc_0a05 4 

  0667:35 03              ldi 3 
  0669:65 12             aTop seconds 
  066b:32 02bb            jmp code_0929 

        code_066e
  066e:3c                 dup 
  066f:35 1f              ldi 1f 
  0671:1a                 eq? 
  0672:30 0012            bnt code_0687 
  0675:7a               push2 
  0676:72 0db1          lofsa $0db1 // Quality Assurance Team Leader

Robin Bradley
  0679:36                push 
  067a:39 03            pushi 3 // $3 y
  067c:40 0385 04        call proc_0a05 4 

  0680:35 03              ldi 3 
  0682:65 12             aTop seconds 
  0684:32 02a2            jmp code_0929 

        code_0687
  0687:3c                 dup 
  0688:35 20              ldi 20 
  068a:1a                 eq? 
  068b:30 0012            bnt code_06a0 
  068e:7a               push2 
  068f:72 0dde          lofsa $0dde // Coffee Grinder

C. Escobar
  0692:36                push 
  0693:39 03            pushi 3 // $3 y
  0695:40 036c 04        call proc_0a05 4 

  0699:35 64              ldi 64 
  069b:65 16             aTop ticks 
  069d:32 0289            jmp code_0929 

        code_06a0
  06a0:3c                 dup 
  06a1:35 21              ldi 21 
  06a3:1a                 eq? 
  06a4:30 0022            bnt code_06c9 
  06a7:78               push1 
  06a8:39 04            pushi 4 // $4 x
  06aa:43 2d 02         callk DoSound 2 

  06ad:30 0012            bnt code_06c2 
  06b0:39 2b            pushi 2b // $2b number
  06b2:78               push1 
  06b3:38 00a1          pushi a1 // $a1 setVol
  06b6:38 00a2          pushi a2 // $a2 setLoop
  06b9:78               push1 
  06ba:78               push1 
  06bb:39 2a            pushi 2a // $2a play
  06bd:76               push0 
  06be:81 67              lag  
  06c0:4a 10             send 10 


        code_06c2
  06c2:35 03              ldi 3 
  06c4:65 12             aTop seconds 
  06c6:32 0260            jmp code_0929 

        code_06c9
  06c9:3c                 dup 
  06ca:35 22              ldi 22 
  06cc:1a                 eq? 
  06cd:30 0032            bnt code_0702 
  06d0:38 018c          pushi 18c // $18c drawPic
  06d3:7a               push2 
  06d4:78               push1 
  06d5:39 0d            pushi d // $d lsTop
  06d7:81 02              lag  
  06d9:4a 08             send 8 

  06db:78               push1 
  06dc:39 04            pushi 4 // $4 x
  06de:43 2d 02         callk DoSound 2 

  06e1:30 0017            bnt code_06fb 
  06e4:39 07            pushi 7 // $7 cel
  06e6:38 01e0          pushi 1e0 // $1e0 addPt
  06e9:39 17            pushi 17 // $17 name
  06eb:39 50            pushi 50 // $50 title
  06ed:72 0df9          lofsa $0df9 // AL says
  06f0:36                push 
  06f1:39 43            pushi 43 // $43 at
  06f3:39 ff            pushi ff // $ff syncNum
  06f5:39 14            pushi 14 // $14 brLeft
  06f7:47 ff 00 0e      calle ff procedure_0000 e //  


        code_06fb
  06fb:35 05              ldi 5 
  06fd:65 12             aTop seconds 
  06ff:32 0227            jmp code_0929 

        code_0702
  0702:3c                 dup 
  0703:35 23              ldi 23 
  0705:1a                 eq? 
  0706:30 000c            bnt code_0715 
  0709:38 009f          pushi 9f // $9f fade
  070c:78               push1 
  070d:7c            pushSelf 
  070e:81 66              lag  
  0710:4a 06             send 6 

  0712:32 0214            jmp code_0929 

        code_0715
  0715:3c                 dup 
  0716:35 24              ldi 24 
  0718:1a                 eq? 
  0719:30 0044            bnt code_0760 
  071c:78               push1 
  071d:39 04            pushi 4 // $4 x
  071f:43 2d 02         callk DoSound 2 

  0722:18                 not 
  0723:30 000a            bnt code_0730 
  0726:67 0a             pTos state 
  0728:35 02              ldi 2 
  072a:02                 add 
  072b:65 0a             aTop state 
  072d:32 0027            jmp code_0757 

        code_0730
  0730:38 00bb          pushi bb // $bb setCursor
  0733:7a               push2 
  0734:38 03e7          pushi 3e7 // $3e7 sel_999
  0737:78               push1 
  0738:81 01              lag  
  073a:4a 08             send 8 

  073c:39 09            pushi 9 // $9 nsTop
  073e:38 01e0          pushi 1e0 // $1e0 addPt
  0741:39 18            pushi 18 // $18 key
  0743:39 50            pushi 50 // $50 title
  0745:72 0e01          lofsa $0e01 // Congratulations! You Win!!
  0748:36                push 
  0749:39 43            pushi 43 // $43 at
  074b:39 ff            pushi ff // $ff syncNum
  074d:39 0f            pushi f // $f lsBottom
  074f:39 46            pushi 46 // $46 width
  0751:38 0118          pushi 118 // $118 isNotHidden
  0754:45 0e 12         callb procedure_000e 12 //  


        code_0757
  0757:38 008d          pushi 8d // $8d cue
  075a:76               push0 
  075b:54 04             self 4 

  075d:32 01c9            jmp code_0929 

        code_0760
  0760:3c                 dup 
  0761:35 25              ldi 25 
  0763:1a                 eq? 
  0764:30 011d            bnt code_0884 
  0767:39 5d            pushi 5d // $5d handle
  0769:72 0e1c          lofsa $0e1c // Aren't you glad you bought a DAC?
  076c:36                push 
  076d:39 04            pushi 4 // $4 x
  076f:39 32            pushi 32 // $32 b-i2
  0771:39 6a            pushi 6a // $6a new
  0773:39 51            pushi 51 // $51 button
  0775:72 0e3e          lofsa $0e3e // Airport PA #1
  0778:36                push 
  0779:78               push1 
  077a:39 51            pushi 51 // $51 button
  077c:72 0e4c          lofsa $0e4c // Airport PA #2
  077f:36                push 
  0780:7a               push2 
  0781:39 51            pushi 51 // $51 button
  0783:72 0e5a          lofsa $0e5a // Airport PA #3
  0786:36                push 
  0787:39 03            pushi 3 // $3 y
  0789:39 6a            pushi 6a // $6a new
  078b:39 51            pushi 51 // $51 button
  078d:72 0e68          lofsa $0e68 // Airport PA #4
  0790:36                push 
  0791:39 04            pushi 4 // $4 x
  0793:39 51            pushi 51 // $51 button
  0795:72 0e76          lofsa $0e76 //   Atmosphere  
  0798:36                push 
  0799:39 05            pushi 5 // $5 view
  079b:39 51            pushi 51 // $51 button
  079d:72 0e85          lofsa $0e85 //     Screams    
  07a0:36                push 
  07a1:39 06            pushi 6 // $6 loop
  07a3:39 6a            pushi 6a // $6a new
  07a5:39 51            pushi 51 // $51 button
  07a7:72 0e95          lofsa $0e95 //       Yeow      
  07aa:36                push 
  07ab:39 07            pushi 7 // $7 cel
  07ad:39 51            pushi 51 // $51 button
  07af:72 0ea6          lofsa $0ea6 //      Coffee     
  07b2:36                push 
  07b3:39 08            pushi 8 // $8 underBits
  07b5:39 51            pushi 51 // $51 button
  07b7:72 0eb7          lofsa $0eb7 // Folding Chair
  07ba:36                push 
  07bb:39 09            pushi 9 // $9 nsTop
  07bd:39 6a            pushi 6a // $6a new
  07bf:39 51            pushi 51 // $51 button
  07c1:72 0ec5          lofsa $0ec5 //  Wolf Whistle 
  07c4:36                push 
  07c5:39 0a            pushi a // $a nsLeft
  07c7:39 51            pushi 51 // $51 button
  07c9:72 0ed4          lofsa $0ed4 //    Knocking   
  07cc:36                push 
  07cd:39 0b            pushi b // $b nsBottom
  07cf:39 51            pushi 51 // $51 button
  07d1:72 0ee3          lofsa $0ee3 //    Glass #1   
  07d4:36                push 
  07d5:39 0c            pushi c // $c nsRight
  07d7:39 6a            pushi 6a // $6a new
  07d9:39 51            pushi 51 // $51 button
  07db:72 0ef2          lofsa $0ef2 //    Glass #2   
  07de:36                push 
  07df:39 0d            pushi d // $d lsTop
  07e1:39 51            pushi 51 // $51 button
  07e3:72 0f01          lofsa $0f01 //        Ah       
  07e6:36                push 
  07e7:39 0e            pushi e // $e lsLeft
  07e9:39 51            pushi 51 // $51 button
  07eb:72 0f12          lofsa $0f12 //        Oh       
  07ee:36                push 
  07ef:39 0f            pushi f // $f lsBottom
  07f1:39 6a            pushi 6a // $6a new
  07f3:39 51            pushi 51 // $51 button
  07f5:72 0f23          lofsa $0f23 //        AH!       
  07f8:36                push 
  07f9:39 10            pushi 10 // $10 lsRight
  07fb:39 51            pushi 51 // $51 button
  07fd:72 0f35          lofsa $0f35 //       OH!      
  0800:36                push 
  0801:39 11            pushi 11 // $11 signal
  0803:39 51            pushi 51 // $51 button
  0805:72 0f45          lofsa $0f45 //      Oooh!     
  0808:36                push 
  0809:39 12            pushi 12 // $12 illegalBits
  080b:39 6a            pushi 6a // $6a new
  080d:39 51            pushi 51 // $51 button
  080f:72 0f55          lofsa $0f55 //  Crowd Gasp 
  0812:36                push 
  0813:39 13            pushi 13 // $13 brTop
  0815:39 51            pushi 51 // $51 button
  0817:72 0f62          lofsa $0f62 //  Slob Eating 
  081a:36                push 
  081b:39 14            pushi 14 // $14 brLeft
  081d:39 51            pushi 51 // $51 button
  081f:72 0f70          lofsa $0f70 //      Flush     
  0822:36                push 
  0823:39 15            pushi 15 // $15 brBottom
  0825:39 6a            pushi 6a // $6a new
  0827:39 51            pushi 51 // $51 button
  0829:72 0f80          lofsa $0f80 //      Belch     
  082c:36                push 
  082d:39 16            pushi 16 // $16 brRight
  082f:39 51            pushi 51 // $51 button
  0831:72 0f90          lofsa $0f90 //      Barf     
  0834:36                push 
  0835:39 17            pushi 17 // $17 name
  0837:39 51            pushi 51 // $51 button
  0839:72 0f9f          lofsa $0f9f // Do Not Touch
  083c:36                push 
  083d:39 18            pushi 18 // $18 key
  083f:39 6a            pushi 6a // $6a new
  0841:39 51            pushi 51 // $51 button
  0843:72 0fac          lofsa $0fac // < Done >
  0846:36                push 
  0847:76               push0 
  0848:39 04            pushi 4 // $4 x
  084a:39 73            pushi 73 // $73 add
  084c:39 50            pushi 50 // $50 title
  084e:72 0fb5          lofsa $0fb5 // Thanks for buying "Larry 5!"
  0851:36                push 
  0852:39 79            pushi 79 // $79 first
  0854:8b 00              lsl local0 
  0856:46 03ac 0000 ba  calle 3ac procedure_0000 ba //  

  085c:a3 00              sal local0 
  085e:30 001c            bnt code_087d 
  0861:39 2b            pushi 2b // $2b number
  0863:78               push1 
  0864:9b 01             lsli local1 
  0866:38 00a2          pushi a2 // $a2 setLoop
  0869:78               push1 
  086a:78               push1 
  086b:39 2a            pushi 2a // $2a play
  086d:76               push0 
  086e:81 66              lag  
  0870:4a 10             send 10 

  0872:38 008c          pushi 8c // $8c changeState
  0875:78               push1 
  0876:67 0a             pTos state 
  0878:54 06             self 6 

  087a:32 00ac            jmp code_0929 

        code_087d
  087d:35 01              ldi 1 
  087f:65 10             aTop cycles 
  0881:32 00a5            jmp code_0929 

        code_0884
  0884:3c                 dup 
  0885:35 26              ldi 26 
  0887:1a                 eq? 
  0888:30 0046            bnt code_08d1 
  088b:38 018c          pushi 18c // $18c drawPic
  088e:7a               push2 
  088f:78               push1 
  0890:39 0d            pushi d // $d lsTop
  0892:81 02              lag  
  0894:4a 08             send 8 

  0896:39 0c            pushi c // $c nsRight
  0898:72 0fd2          lofsa $0fd2 // Remember Al Lowe's Slogan:
  089b:36                push 
  089c:39 66            pushi 66 // $66 flags
  089e:89 85              lsg  
  08a0:39 64            pushi 64 // $64 moveDone
  08a2:78               push1 
  08a3:39 1e            pushi 1e // $1e mode
  08a5:39 6a            pushi 6a // $6a new
  08a7:38 013e          pushi 13e // $13e prompt
  08aa:39 69            pushi 69 // $69 hide
  08ac:89 af              lsg  
  08ae:39 65            pushi 65 // $65 topString
  08b0:78               push1 
  08b1:43 1b 18         callk Display 18 

  08b4:78               push1 
  08b5:39 04            pushi 4 // $4 x
  08b7:43 2d 02         callk DoSound 2 

  08ba:30 000d            bnt code_08ca 
  08bd:7a               push2 
  08be:38 0084          pushi 84 // $84 cycles
  08c1:38 01e1          pushi 1e1 // $1e1 finishAdding
  08c4:46 03be 0000 04  calle 3be procedure_0000 4 //  


        code_08ca
  08ca:35 03              ldi 3 
  08cc:65 12             aTop seconds 
  08ce:32 0058            jmp code_0929 

        code_08d1
  08d1:3c                 dup 
  08d2:35 27              ldi 27 
  08d4:1a                 eq? 
  08d5:30 0046            bnt code_091e 
  08d8:78               push1 
  08d9:39 04            pushi 4 // $4 x
  08db:43 2d 02         callk DoSound 2 

  08de:30 0018            bnt code_08f9 
  08e1:39 2b            pushi 2b // $2b number
  08e3:78               push1 
  08e4:38 01e1          pushi 1e1 // $1e1 finishAdding
  08e7:38 00a1          pushi a1 // $a1 setVol
  08ea:78               push1 
  08eb:39 7f            pushi 7f // $7f addAfter
  08ed:38 00a2          pushi a2 // $a2 setLoop
  08f0:78               push1 
  08f1:78               push1 
  08f2:39 2a            pushi 2a // $2a play
  08f4:76               push0 
  08f5:81 66              lag  
  08f7:4a 16             send 16 


        code_08f9
  08f9:39 0c            pushi c // $c nsRight
  08fb:72 0fed          lofsa $0fed // Better Babes Through
Technology!
  08fe:36                push 
  08ff:39 66            pushi 66 // $66 flags
  0901:89 80              lsg  
  0903:39 64            pushi 64 // $64 moveDone
  0905:78               push1 
  0906:39 5a            pushi 5a // $5a points
  0908:39 6a            pushi 6a // $6a new
  090a:38 013e          pushi 13e // $13e prompt
  090d:39 69            pushi 69 // $69 hide
  090f:89 ae              lsg  
  0911:39 65            pushi 65 // $65 topString
  0913:78               push1 
  0914:43 1b 18         callk Display 18 

  0917:35 05              ldi 5 
  0919:65 12             aTop seconds 
  091b:32 000b            jmp code_0929 

        code_091e
  091e:3c                 dup 
  091f:35 28              ldi 28 
  0921:1a                 eq? 
  0922:30 0004            bnt code_0929 
  0925:35 01              ldi 1 
  0927:a1 04              sag  

        code_0929
  0929:3a                toss 
  092a:48                 ret 
  092b:00                bnot 
    )

)

// 0968
(instance copter of Actor
    (properties
        x $a0
        y $90
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $1e0
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)



(procedure proc_0a05
  0a05:3f 02             link 2 // (var $2)
  0a07:38 018c          pushi 18c // $18c drawPic
  0a0a:7a               push2 
  0a0b:78               push1 
  0a0c:39 0d            pushi d // $d lsTop
  0a0e:81 02              lag  
  0a10:4a 08             send 8 

  0a12:7a               push2 
  0a13:76               push0 
  0a14:39 05            pushi 5 // $5 view
  0a16:43 3c 04         callk Random 4 

  0a19:36                push 
  0a1a:3c                 dup 
  0a1b:35 00              ldi 0 
  0a1d:1a                 eq? 
  0a1e:30 0005            bnt code_0a26 
  0a21:81 83              lag  
  0a23:32 0032            jmp code_0a58 

        code_0a26
  0a26:3c                 dup 
  0a27:35 01              ldi 1 
  0a29:1a                 eq? 
  0a2a:30 0005            bnt code_0a32 
  0a2d:81 86              lag  
  0a2f:32 0026            jmp code_0a58 

        code_0a32
  0a32:3c                 dup 
  0a33:35 02              ldi 2 
  0a35:1a                 eq? 
  0a36:30 0005            bnt code_0a3e 
  0a39:81 8a              lag  
  0a3b:32 001a            jmp code_0a58 

        code_0a3e
  0a3e:3c                 dup 
  0a3f:35 03              ldi 3 
  0a41:1a                 eq? 
  0a42:30 0005            bnt code_0a4a 
  0a45:81 8e              lag  
  0a47:32 000e            jmp code_0a58 

        code_0a4a
  0a4a:3c                 dup 
  0a4b:35 04              ldi 4 
  0a4d:1a                 eq? 
  0a4e:30 0005            bnt code_0a56 
  0a51:81 90              lag  
  0a53:32 0002            jmp code_0a58 

        code_0a56
  0a56:81 92              lag  

        code_0a58
  0a58:3a                toss 
  0a59:a5 01              sat temp1 
  0a5b:39 0c            pushi c // $c nsRight
  0a5d:8f 01              lsp param1 
  0a5f:39 66            pushi 66 // $66 flags
  0a61:36                push 
  0a62:39 64            pushi 64 // $64 moveDone
  0a64:78               push1 
  0a65:39 59            pushi 59 // $59 size
  0a67:39 0c            pushi c // $c nsRight
  0a69:87 02              lap param2 
  0a6b:06                 mul 
  0a6c:36                push 
  0a6d:35 02              ldi 2 
  0a6f:08                 div 
  0a70:04                 sub 
  0a71:36                push 
  0a72:39 6a            pushi 6a // $6a new
  0a74:38 013e          pushi 13e // $13e prompt
  0a77:39 69            pushi 69 // $69 hide
  0a79:89 1a              lsg  
  0a7b:39 65            pushi 65 // $65 topString
  0a7d:78               push1 
  0a7e:43 1b 18         callk Display 18 

  0a81:48                 ret 
)

