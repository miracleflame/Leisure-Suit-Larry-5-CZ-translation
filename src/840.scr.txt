(script 840)

(string
    string_210e "Mr. Krapper's office"
    string_2123 "John Krapper's Office is beautifully decorated in the latest high-tech look. Numerous halogen narrow-beam spotlights bathe the otherwise dark room with small brilliantly-white pools of light."
    string_21e3 "rm840"
    string_21e9 "the desk"
    string_21f2 "desk"
    string_21f7 "the potted plant"
    string_2208 "plant"
    string_220e "the copier"
    string_2219 "It's a genuine ZeroZ 9000, the latest in personal copiers."
    string_2254 "copier"
    string_225b "paper"
    string_2261 "the bathroom door"
    string_2273 "A sign on the door says \"Krapper's Crapper.\" A smaller sign below it says \"John's John\"."
    string_22cc "johnDoor"
    string_22d5 "the lobby door"
    string_22e4 "This is the door through which you entered. If you walked out it, you would return to the lobby."
    string_2345 "lobbyDoor"
    string_234f "the table"
    string_2359 "Krapper has a beautiful glass coffee table."
    string_2385 "table"
    string_238b "the chair"
    string_2395 "This is the kind of furniture you would buy if you ever settled down."
    string_23db "chair"
    string_23e1 "the sofa"
    string_23ea "What an unusual sofa! You so love modern furniture."
    string_241e "sofa"
    string_2423 "the telephone"
    string_2431 "John Krapper's telephone has very few buttons. He must be REALLY important!"
    string_247d "telephone"
    string_2487 "the desk computer"
    string_2499 "Look at the dust on that keyboard! He must never use his computer!"
    string_24dc "computer"
    string_24e5 "the window"
    string_24f0 "Krapper's office has a giant window looking out over beautiful downtown Philadelphia."
    string_2546 "myWindow"
    string_254f "the shelves"
    string_255b "Krapper's bookcase is filled with items, all of them useless to your mission."
    string_25a9 "stuff"
    string_25af "the lamp"
    string_25b8 "The small halogen spotlights cast a pure white light."
    string_25ee "lamp1"
    string_25f4 "lamp2"
    string_25fa "lamp3"
    string_2600 "lamp4"
    string_2606 "the letter opener"
    string_2618 "opener"
    string_261f "copyMachineSound"
    string_2630 "copyExplodesSound"
    string_2642 "pickLockSound"
    string_2650 "peekScript"
    string_265b "getKeyScript"
    string_2668 "sPawThruPlant"
    string_2676 "replaceKeyScript"
    string_2687 "openDeskScript"
    string_2696 "sOpenDesk2ndTime"
    string_26a7 "lookDeskScript"
    string_26b6 "sLookDesk2ndTime"
    string_26c7 "pickLockScript"
    string_26d6 "unlockDeskScript"
    string_26e7 "lockDeskScript"
    string_26f6 "getPapersScript"
    string_2706 "lookPapersScript"
    string_2717 "putPapersScript"
    string_2727 "runCopierScript"
    string_2737 "ActionsKRAP"
    string_2743 ""
)

(said
)

(local
    local0 = $0000
)

// 03e0
(instance publicrm840 of LLRoom
    (properties
// Problem with properties. Species has 17 but instance has 18.
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $2123
        picture $348
        style $ffff
        horizon $0
        controls $0
        north $0
        east $334
        south $0
        west $352
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 04            pushi 4 // $4 x
  0010:38 0080          pushi 80 // $80 indexOf
  0013:38 0348          pushi 348 // $348 sel_840
  0016:38 0349          pushi 349 // $349 sel_841
  0019:38 034a          pushi 34a // $34a sel_842
  001c:46 03be 0000 08  calle 3be procedure_0000 8 //  

  0022:39 06            pushi 6 // $6 loop
  0024:38 0084          pushi 84 // $84 cycles
  0027:38 0349          pushi 349 // $349 sel_841
  002a:38 034b          pushi 34b // $34b sel_843
  002d:38 0320          pushi 320 // $320 sel_800
  0030:38 0321          pushi 321 // $321 sel_801
  0033:38 0322          pushi 322 // $322 sel_802
  0036:46 03be 0000 0c  calle 3be procedure_0000 c //  

  003c:7a               push2 
  003d:38 0082          pushi 82 // $82 start
  0040:38 03c9          pushi 3c9 // $3c9 sel_969
  0043:46 03be 0000 04  calle 3be procedure_0000 4 //  

  0049:76               push0 
  004a:45 03 00         callb procedure_0003 0 //  

  004d:39 6b            pushi 6b // $6b init
  004f:76               push0 
  0050:38 020a          pushi 20a // $20a normalize
  0053:78               push1 
  0054:78               push1 
  0055:39 1b            pushi 1b // $1b elements
  0057:45 06 02         callb procedure_0006 2 //  

  005a:30 0006            bnt code_0063 
  005d:34 034a            ldi 34a 
  0060:32 0003            jmp code_0066 

        code_0063
  0063:34 023a            ldi 23a 

        code_0066
  0066:36                push 
  0067:81 00              lag  
  0069:4a 0a             send a 

  006b:78               push1 
  006c:39 1b            pushi 1b // $1b elements
  006e:45 06 02         callb procedure_0006 2 //  

  0071:30 000c            bnt code_0080 
  0074:38 010b          pushi 10b // $10b actions
  0077:78               push1 
  0078:72 20f6          lofsa $20f6 // ActionsKRAP
  007b:36                push 
  007c:81 00              lag  
  007e:4a 06             send 6 


        code_0080
  0080:89 0c              lsg  
  0082:3c                 dup 
  0083:63 1e             pToa east 
  0085:1a                 eq? 
  0086:30 0036            bnt code_00bf 
  0089:39 42            pushi 42 // $42 setPri
  008b:78               push1 
  008c:39 0c            pushi c // $c nsRight
  008e:72 0a8a          lofsa $0a8a // lobbyDoor
  0091:4a 06             send 6 

  0093:38 011c          pushi 11c // $11c posn
  0096:7a               push2 
  0097:38 010c          pushi 10c // $10c doVerb
  009a:38 0098          pushi 98 // $98 set60ths
  009d:38 00e4          pushi e4 // $e4 setHeading
  00a0:78               push1 
  00a1:38 010e          pushi 10e // $10e description
  00a4:38 0146          pushi 146 // $146 edgeHit
  00a7:78               push1 
  00a8:76               push0 
  00a9:38 012d          pushi 12d // $12d observeControl
  00ac:7a               push2 
  00ad:7a               push2 
  00ae:39 04            pushi 4 // $4 x
  00b0:81 00              lag  
  00b2:4a 1c             send 1c 

  00b4:7a               push2 
  00b5:78               push1 
  00b6:38 0096          pushi 96 // $96 setCycle
  00b9:45 0a 04         callb procedure_000a 4 //  

  00bc:32 0037            jmp code_00f6 

        code_00bf
  00bf:3c                 dup 
  00c0:63 22             pToa west 
  00c2:1a                 eq? 
  00c3:30 001b            bnt code_00e1 
  00c6:38 011c          pushi 11c // $11c posn
  00c9:7a               push2 
  00ca:39 23            pushi 23 // $23 window
  00cc:38 009b          pushi 9b // $9b owner
  00cf:38 00e4          pushi e4 // $e4 setHeading
  00d2:78               push1 
  00d3:39 5a            pushi 5a // $5a points
  00d5:38 0146          pushi 146 // $146 edgeHit
  00d8:78               push1 
  00d9:76               push0 
  00da:81 00              lag  
  00dc:4a 14             send 14 

  00de:32 0015            jmp code_00f6 

        code_00e1
  00e1:76               push0 
  00e2:45 03 00         callb procedure_0003 0 //  

  00e5:38 011c          pushi 11c // $11c posn
  00e8:7a               push2 
  00e9:38 00a0          pushi a0 // $a0 mute
  00ec:3c                 dup 
  00ed:38 0146          pushi 146 // $146 edgeHit
  00f0:78               push1 
  00f1:76               push0 
  00f2:81 00              lag  
  00f4:4a 0e             send e 


        code_00f6
  00f6:3a                toss 
  00f7:39 6b            pushi 6b // $6b init
  00f9:76               push0 
  00fa:57 72 04         super LLRoom 4 

  00fd:39 6b            pushi 6b // $6b init
  00ff:76               push0 
  0100:38 0119          pushi 119 // $119 approachVerbs
  0103:7a               push2 
  0104:39 03            pushi 3 // $3 y
  0106:39 04            pushi 4 // $4 x
  0108:72 09c6          lofsa $09c6 // johnDoor
  010b:4a 0c             send c 

  010d:39 6b            pushi 6b // $6b init
  010f:76               push0 
  0110:38 0119          pushi 119 // $119 approachVerbs
  0113:39 03            pushi 3 // $3 y
  0115:3c                 dup 
  0116:39 04            pushi 4 // $4 x
  0118:7a               push2 
  0119:38 011d          pushi 11d // $11d stopUpd
  011c:76               push0 
  011d:72 085a          lofsa $085a // copier
  0120:4a 12             send 12 

  0122:39 6b            pushi 6b // $6b init
  0124:76               push0 
  0125:38 0119          pushi 119 // $119 approachVerbs
  0128:78               push1 
  0129:39 03            pushi 3 // $3 y
  012b:72 0e4e          lofsa $0e4e // opener
  012e:4a 0a             send a 

  0130:39 6b            pushi 6b // $6b init
  0132:76               push0 
  0133:72 0b14          lofsa $0b14 // table
  0136:4a 04             send 4 

  0138:39 6b            pushi 6b // $6b init
  013a:76               push0 
  013b:72 0b8c          lofsa $0b8c // sofa
  013e:4a 04             send 4 

  0140:39 6b            pushi 6b // $6b init
  0142:76               push0 
  0143:72 0b50          lofsa $0b50 // chair
  0146:4a 04             send 4 

  0148:39 6b            pushi 6b // $6b init
  014a:76               push0 
  014b:38 0119          pushi 119 // $119 approachVerbs
  014e:7a               push2 
  014f:39 03            pushi 3 // $3 y
  0151:39 04            pushi 4 // $4 x
  0153:38 008b          pushi 8b // $8b caller
  0156:78               push1 
  0157:72 03e6          lofsa $03e6 // rm840
  015a:36                push 
  015b:72 0a8a          lofsa $0a8a // lobbyDoor
  015e:4a 12             send 12 

  0160:39 6b            pushi 6b // $6b init
  0162:76               push0 
  0163:38 0119          pushi 119 // $119 approachVerbs
  0166:7a               push2 
  0167:7a               push2 
  0168:39 03            pushi 3 // $3 y
  016a:72 0bf0          lofsa $0bf0 // telephone
  016d:4a 0c             send c 

  016f:39 6b            pushi 6b // $6b init
  0171:76               push0 
  0172:38 0119          pushi 119 // $119 approachVerbs
  0175:7a               push2 
  0176:7a               push2 
  0177:39 03            pushi 3 // $3 y
  0179:72 0c58          lofsa $0c58 // computer
  017c:4a 0c             send c 

  017e:39 6b            pushi 6b // $6b init
  0180:76               push0 
  0181:72 0cd4          lofsa $0cd4 // stuff
  0184:4a 04             send 4 

  0186:39 6b            pushi 6b // $6b init
  0188:76               push0 
  0189:72 0d10          lofsa $0d10 // lamp1
  018c:4a 04             send 4 

  018e:39 6b            pushi 6b // $6b init
  0190:76               push0 
  0191:72 0d4c          lofsa $0d4c // lamp2
  0194:4a 04             send 4 

  0196:39 6b            pushi 6b // $6b init
  0198:76               push0 
  0199:72 0d88          lofsa $0d88 // lamp3
  019c:4a 04             send 4 

  019e:39 6b            pushi 6b // $6b init
  01a0:76               push0 
  01a1:72 0dc4          lofsa $0dc4 // lamp4
  01a4:4a 04             send 4 

  01a6:39 6b            pushi 6b // $6b init
  01a8:76               push0 
  01a9:38 0119          pushi 119 // $119 approachVerbs
  01ac:39 03            pushi 3 // $3 y
  01ae:3c                 dup 
  01af:7a               push2 
  01b0:39 04            pushi 4 // $4 x
  01b2:72 0670          lofsa $0670 // desk
  01b5:4a 0e             send e 

  01b7:39 6b            pushi 6b // $6b init
  01b9:76               push0 
  01ba:38 0119          pushi 119 // $119 approachVerbs
  01bd:7a               push2 
  01be:39 03            pushi 3 // $3 y
  01c0:39 04            pushi 4 // $4 x
  01c2:72 0790          lofsa $0790 // plant
  01c5:4a 0c             send c 

  01c7:39 6b            pushi 6b // $6b init
  01c9:76               push0 
  01ca:72 0c98          lofsa $0c98 // myWindow
  01cd:4a 04             send 4 

  01cf:38 0176          pushi 176 // $176 addObstacle
  01d2:39 06            pushi 6 // $6 loop
  01d4:39 22            pushi 22 // $22 type
  01d6:78               push1 
  01d7:7a               push2 
  01d8:39 6b            pushi 6b // $6b init
  01da:39 20            pushi 20 // $20 state
  01dc:76               push0 
  01dd:76               push0 
  01de:38 013f          pushi 13f // $13f inputLineAddr
  01e1:76               push0 
  01e2:38 013f          pushi 13f // $13f inputLineAddr
  01e5:38 008e          pushi 8e // $8e setScript
  01e8:38 010c          pushi 10c // $10c doVerb
  01eb:38 0092          pushi 92 // $92 cycleCnt
  01ee:38 010b          pushi 10b // $10b actions
  01f1:38 008b          pushi 8b // $8b caller
  01f4:38 00ff          pushi ff // $ff syncNum
  01f7:39 7a            pushi 7a // $7a release
  01f9:38 00eb          pushi eb // $eb incClientPos
  01fc:39 7a            pushi 7a // $7a release
  01fe:38 00e2          pushi e2 // $e2 setTarget
  0201:39 71            pushi 71 // $71 respondsTo
  0203:39 5c            pushi 5c // $5c dataInc
  0205:39 71            pushi 71 // $71 respondsTo
  0207:39 4f            pushi 4f // $4f restore
  0209:39 71            pushi 71 // $71 respondsTo
  020b:39 60            pushi 60 // $60 frame
  020d:39 77            pushi 77 // $77 contains
  020f:39 60            pushi 60 // $60 frame
  0211:38 0085          pushi 85 // $85 seconds
  0214:39 46            pushi 46 // $46 width
  0216:38 008b          pushi 8b // $8b caller
  0219:39 34            pushi 34 // $34 b-xAxis
  021b:38 0093          pushi 93 // $93 ticksToDo
  021e:39 21            pushi 21 // $21 font
  0220:38 0093          pushi 93 // $93 ticksToDo
  0223:76               push0 
  0224:38 008b          pushi 8b // $8b caller
  0227:39 72            pushi 72 // $72 yourself
  0229:76               push0 
  022a:39 6a            pushi 6a // $6a new
  022c:76               push0 
  022d:51 23            class Polygon 
  022f:4a 04             send 4 

  0231:4a 4e             send 4e 

  0233:36                push 
  0234:39 22            pushi 22 // $22 type
  0236:78               push1 
  0237:7a               push2 
  0238:39 6b            pushi 6b // $6b init
  023a:39 14            pushi 14 // $14 brLeft
  023c:76               push0 
  023d:38 009b          pushi 9b // $9b owner
  0240:39 21            pushi 21 // $21 font
  0242:38 009b          pushi 9b // $9b owner
  0245:39 04            pushi 4 // $4 x
  0247:38 00ad          pushi ad // $ad setMark
  024a:39 03            pushi 3 // $3 y
  024c:38 00bb          pushi bb // $bb setCursor
  024f:38 013c          pushi 13c // $13c echo
  0252:38 00bb          pushi bb // $bb setCursor
  0255:38 013c          pushi 13c // $13c echo
  0258:38 00b4          pushi b4 // $b4 busy
  025b:38 011a          pushi 11a // $11a canControl
  025e:38 009c          pushi 9c // $9c stop
  0261:38 013f          pushi 13f // $13f inputLineAddr
  0264:38 009c          pushi 9c // $9c stop
  0267:38 013f          pushi 13f // $13f inputLineAddr
  026a:38 00bd          pushi bd // $bd maskView
  026d:76               push0 
  026e:38 00bd          pushi bd // $bd maskView
  0271:39 72            pushi 72 // $72 yourself
  0273:76               push0 
  0274:39 6a            pushi 6a // $6a new
  0276:76               push0 
  0277:51 23            class Polygon 
  0279:4a 04             send 4 

  027b:4a 36             send 36 

  027d:36                push 
  027e:39 22            pushi 22 // $22 type
  0280:78               push1 
  0281:7a               push2 
  0282:39 6b            pushi 6b // $6b init
  0284:39 08            pushi 8 // $8 underBits
  0286:39 65            pushi 65 // $65 topString
  0288:39 74            pushi 74 // $74 eachElementDo
  028a:38 00dc          pushi dc // $dc cycler
  028d:39 74            pushi 74 // $74 eachElementDo
  028f:38 00e1          pushi e1 // $e1 yLast
  0292:39 7f            pushi 7f // $7f addAfter
  0294:39 6c            pushi 6c // $6c dispose
  0296:39 7f            pushi 7f // $7f addAfter
  0298:39 72            pushi 72 // $72 yourself
  029a:76               push0 
  029b:39 6a            pushi 6a // $6a new
  029d:76               push0 
  029e:51 23            class Polygon 
  02a0:4a 04             send 4 

  02a2:4a 1e             send 1e 

  02a4:36                push 
  02a5:39 22            pushi 22 // $22 type
  02a7:78               push1 
  02a8:7a               push2 
  02a9:39 6b            pushi 6b // $6b init
  02ab:39 12            pushi 12 // $12 illegalBits
  02ad:39 47            pushi 47 // $47 wordFail
  02af:38 008e          pushi 8e // $8e setScript
  02b2:38 0094          pushi 94 // $94 lastTime
  02b5:38 0081          pushi 81 // $81 handleEvent
  02b8:38 00b0          pushi b0 // $b0 cycle
  02bb:38 0086          pushi 86 // $86 lastSeconds
  02be:38 00b0          pushi b0 // $b0 cycle
  02c1:38 008d          pushi 8d // $8d cue
  02c4:39 77            pushi 77 // $77 contains
  02c6:38 0097          pushi 97 // $97 setReal
  02c9:38 0093          pushi 93 // $93 ticksToDo
  02cc:38 00a4          pushi a4 // $a4 check
  02cf:38 0093          pushi 93 // $93 ticksToDo
  02d2:38 00ad          pushi ad // $ad setMark
  02d5:39 54            pushi 54 // $54 delete
  02d7:38 00b8          pushi b8 // $b8 left
  02da:39 4a            pushi 4a // $4a pragmaFail
  02dc:38 00a5          pushi a5 // $a5 clean
  02df:39 72            pushi 72 // $72 yourself
  02e1:76               push0 
  02e2:39 6a            pushi 6a // $6a new
  02e4:76               push0 
  02e5:51 23            class Polygon 
  02e7:4a 04             send 4 

  02e9:4a 32             send 32 

  02eb:36                push 
  02ec:39 22            pushi 22 // $22 type
  02ee:78               push1 
  02ef:7a               push2 
  02f0:39 6b            pushi 6b // $6b init
  02f2:39 14            pushi 14 // $14 brLeft
  02f4:38 0094          pushi 94 // $94 lastTime
  02f7:38 009b          pushi 9b // $9b owner
  02fa:38 00a0          pushi a0 // $a0 mute
  02fd:38 0095          pushi 95 // $95 set
  0300:38 00af          pushi af // $af checkState
  0303:38 0095          pushi 95 // $95 set
  0306:38 00d0          pushi d0 // $d0 prevIcon
  0309:38 0095          pushi 95 // $95 set
  030c:38 00da          pushi da // $da motionCue
  030f:38 0097          pushi 97 // $97 setReal
  0312:38 00ef          pushi ef // $ef lastBumped
  0315:38 009e          pushi 9e // $9e hold
  0318:38 00ed          pushi ed // $ed canBeHere
  031b:38 00a5          pushi a5 // $a5 clean
  031e:38 00e4          pushi e4 // $e4 setHeading
  0321:38 00aa          pushi aa // $aa setSize
  0324:38 00a1          pushi a1 // $a1 setVol
  0327:38 00a8          pushi a8 // $a8 select
  032a:38 0094          pushi 94 // $94 lastTime
  032d:38 00a1          pushi a1 // $a1 setVol
  0330:39 72            pushi 72 // $72 yourself
  0332:76               push0 
  0333:39 6a            pushi 6a // $6a new
  0335:76               push0 
  0336:51 23            class Polygon 
  0338:4a 04             send 4 

  033a:4a 36             send 36 

  033c:36                push 
  033d:39 22            pushi 22 // $22 type
  033f:78               push1 
  0340:7a               push2 
  0341:39 6b            pushi 6b // $6b init
  0343:39 0c            pushi c // $c nsRight
  0345:38 00d3          pushi d3 // $d3 helpIconItem
  0348:38 008d          pushi 8d // $8d cue
  034b:38 00f5          pushi f5 // $f5 counter
  034e:38 0087          pushi 87 // $87 ticks
  0351:38 0106          pushi 106 // $106 waitApogeeX
  0354:38 0090          pushi 90 // $90 localize
  0357:38 010c          pushi 10c // $10c doVerb
  035a:38 009b          pushi 9b // $9b owner
  035d:38 00ee          pushi ee // $ee bumpTurn
  0360:38 009b          pushi 9b // $9b owner
  0363:38 00da          pushi da // $da motionCue
  0366:38 0094          pushi 94 // $94 lastTime
  0369:39 72            pushi 72 // $72 yourself
  036b:76               push0 
  036c:39 6a            pushi 6a // $6a new
  036e:76               push0 
  036f:51 23            class Polygon 
  0371:4a 04             send 4 

  0373:4a 26             send 26 

  0375:36                push 
  0376:81 02              lag  
  0378:4a 10             send 10 

  037a:89 0c              lsg  
  037c:63 1e             pToa east 
  037e:1a                 eq? 
  037f:30 0008            bnt code_038a 
  0382:7a               push2 
  0383:38 0348          pushi 348 // $348 sel_840
  0386:76               push0 
  0387:45 0e 04         callb procedure_000e 4 //  


        code_038a
  038a:39 73            pushi 73 // $73 add
  038c:78               push1 
  038d:7c            pushSelf 
  038e:81 49              lag  
  0390:4a 06             send 6 

  0392:39 73            pushi 73 // $73 add
  0394:78               push1 
  0395:7c            pushSelf 
  0396:81 48              lag  
  0398:4a 06             send 6 

  039a:48                 ret 
    )

    (method (dispose) // method_03af
  03af:7a               push2 
  03b0:76               push0 
  03b1:38 03c9          pushi 3c9 // $3c9 sel_969
  03b4:46 03be 0000 04  calle 3be procedure_0000 4 //  

  03ba:39 54            pushi 54 // $54 delete
  03bc:78               push1 
  03bd:7c            pushSelf 
  03be:81 49              lag  
  03c0:4a 06             send 6 

  03c2:39 54            pushi 54 // $54 delete
  03c4:78               push1 
  03c5:7c            pushSelf 
  03c6:81 48              lag  
  03c8:4a 06             send 6 

  03ca:39 6c            pushi 6c // $6c dispose
  03cc:76               push0 
  03cd:72 20f6          lofsa $20f6 // ActionsKRAP
  03d0:4a 04             send 4 

  03d2:39 6c            pushi 6c // $6c dispose
  03d4:76               push0 
  03d5:57 72 04         super LLRoom 4 

  03d8:48                 ret 
  03d9:00                bnot 
    )

    (method (cue) // method_039b
  039b:38 0121          pushi 121 // $121 ignoreActors
  039e:76               push0 
  039f:72 0a8a          lofsa $0a8a // lobbyDoor
  03a2:4a 04             send 4 

  03a4:38 008b          pushi 8b // $8b caller
  03a7:78               push1 
  03a8:76               push0 
  03a9:72 0a8a          lofsa $0a8a // lobbyDoor
  03ac:4a 06             send 6 

  03ae:48                 ret 
    )

)

// 066a
(instance desk of Feature
    (properties
        x $96
        y $73
        z $0
        heading $0
        noun $0
        nsTop $5a
        nsLeft $71
        nsBottom $7e
        nsRight $d6
        description $21e9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $96
        approachY $70
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_042a
  042a:8f 01              lsp param1 
  042c:3c                 dup 
  042d:35 02              ldi 2 
  042f:1a                 eq? 
  0430:30 008c            bnt code_04bf 
  0433:78               push1 
  0434:39 18            pushi 18 // $18 key
  0436:45 06 02         callb procedure_0006 2 //  

  0439:18                 not 
  043a:30 002d            bnt code_046a 
  043d:7a               push2 
  043e:38 0348          pushi 348 // $348 sel_840
  0441:78               push1 
  0442:45 0e 04         callb procedure_000e 4 //  

  0445:38 00d5          pushi d5 // $d5 has
  0448:78               push1 
  0449:39 08            pushi 8 // $8 underBits
  044b:81 00              lag  
  044d:4a 06             send 6 

  044f:18                 not 
  0450:30 000b            bnt code_045e 
  0453:7a               push2 
  0454:38 0348          pushi 348 // $348 sel_840
  0457:7a               push2 
  0458:45 0e 04         callb procedure_000e 4 //  

  045b:32 0204            jmp code_0662 

        code_045e
  045e:7a               push2 
  045f:38 0348          pushi 348 // $348 sel_840
  0462:39 03            pushi 3 // $3 y
  0464:45 0e 04         callb procedure_000e 4 //  

  0467:32 01f8            jmp code_0662 

        code_046a
  046a:78               push1 
  046b:39 19            pushi 19 // $19 time
  046d:45 06 02         callb procedure_0006 2 //  

  0470:18                 not 
  0471:30 0015            bnt code_0489 
  0474:78               push1 
  0475:39 19            pushi 19 // $19 time
  0477:45 07 02         callb procedure_0007 2 //  

  047a:38 008e          pushi 8e // $8e setScript
  047d:78               push1 
  047e:72 1600          lofsa $1600 // lookDeskScript
  0481:36                push 
  0482:81 00              lag  
  0484:4a 06             send 6 

  0486:32 01d9            jmp code_0662 

        code_0489
  0489:38 00d5          pushi d5 // $d5 has
  048c:78               push1 
  048d:39 0a            pushi a // $a nsLeft
  048f:81 00              lag  
  0491:4a 06             send 6 

  0493:18                 not 
  0494:30 0019            bnt code_04b0 
  0497:38 0147          pushi 147 // $147 get
  049a:78               push1 
  049b:39 0a            pushi a // $a nsLeft
  049d:81 00              lag  
  049f:4a 06             send 6 

  04a1:38 008e          pushi 8e // $8e setScript
  04a4:78               push1 
  04a5:72 1c0a          lofsa $1c0a // lookPapersScript
  04a8:36                push 
  04a9:81 00              lag  
  04ab:4a 06             send 6 

  04ad:32 01b2            jmp code_0662 

        code_04b0
  04b0:38 008e          pushi 8e // $8e setScript
  04b3:78               push1 
  04b4:72 1710          lofsa $1710 // sLookDesk2ndTime
  04b7:36                push 
  04b8:81 00              lag  
  04ba:4a 06             send 6 

  04bc:32 01a3            jmp code_0662 

        code_04bf
  04bf:3c                 dup 
  04c0:35 03              ldi 3 
  04c2:1a                 eq? 
  04c3:30 00bc            bnt code_0582 
  04c6:38 00d5          pushi d5 // $d5 has
  04c9:78               push1 
  04ca:39 08            pushi 8 // $8 underBits
  04cc:81 00              lag  
  04ce:4a 06             send 6 

  04d0:18                 not 
  04d1:30 0031            bnt code_0505 
  04d4:78               push1 
  04d5:39 18            pushi 18 // $18 key
  04d7:45 06 02         callb procedure_0006 2 //  

  04da:18                 not 
  04db:30 0027            bnt code_0505 
  04de:7a               push2 
  04df:39 04            pushi 4 // $4 x
  04e1:38 0095          pushi 95 // $95 set
  04e4:45 0a 04         callb procedure_000a 4 //  

  04e7:7a               push2 
  04e8:38 0348          pushi 348 // $348 sel_840
  04eb:39 04            pushi 4 // $4 x
  04ed:45 0e 04         callb procedure_000e 4 //  

  04f0:39 69            pushi 69 // $69 hide
  04f2:76               push0 
  04f3:72 0e4e          lofsa $0e4e // opener
  04f6:4a 04             send 4 

  04f8:38 0147          pushi 147 // $147 get
  04fb:78               push1 
  04fc:39 08            pushi 8 // $8 underBits
  04fe:81 00              lag  
  0500:4a 06             send 6 

  0502:32 015d            jmp code_0662 

        code_0505
  0505:78               push1 
  0506:39 18            pushi 18 // $18 key
  0508:45 06 02         callb procedure_0006 2 //  

  050b:18                 not 
  050c:30 000c            bnt code_051b 
  050f:7a               push2 
  0510:38 0348          pushi 348 // $348 sel_840
  0513:39 05            pushi 5 // $5 view
  0515:45 0e 04         callb procedure_000e 4 //  

  0518:32 0147            jmp code_0662 

        code_051b
  051b:78               push1 
  051c:39 18            pushi 18 // $18 key
  051e:45 06 02         callb procedure_0006 2 //  

  0521:30 001f            bnt code_0543 
  0524:78               push1 
  0525:39 19            pushi 19 // $19 time
  0527:45 06 02         callb procedure_0006 2 //  

  052a:18                 not 
  052b:30 0015            bnt code_0543 
  052e:78               push1 
  052f:39 19            pushi 19 // $19 time
  0531:45 07 02         callb procedure_0007 2 //  

  0534:38 008e          pushi 8e // $8e setScript
  0537:78               push1 
  0538:72 13cc          lofsa $13cc // openDeskScript
  053b:36                push 
  053c:81 00              lag  
  053e:4a 06             send 6 

  0540:32 011f            jmp code_0662 

        code_0543
  0543:78               push1 
  0544:39 19            pushi 19 // $19 time
  0546:45 06 02         callb procedure_0006 2 //  

  0549:30 0027            bnt code_0573 
  054c:38 00d5          pushi d5 // $d5 has
  054f:78               push1 
  0550:39 0a            pushi a // $a nsLeft
  0552:81 00              lag  
  0554:4a 06             send 6 

  0556:18                 not 
  0557:30 0019            bnt code_0573 
  055a:38 0147          pushi 147 // $147 get
  055d:78               push1 
  055e:39 0a            pushi a // $a nsLeft
  0560:81 00              lag  
  0562:4a 06             send 6 

  0564:38 008e          pushi 8e // $8e setScript
  0567:78               push1 
  0568:72 1afc          lofsa $1afc // getPapersScript
  056b:36                push 
  056c:81 00              lag  
  056e:4a 06             send 6 

  0570:32 00ef            jmp code_0662 

        code_0573
  0573:38 008e          pushi 8e // $8e setScript
  0576:78               push1 
  0577:72 14dc          lofsa $14dc // sOpenDesk2ndTime
  057a:36                push 
  057b:81 00              lag  
  057d:4a 06             send 6 

  057f:32 00e0            jmp code_0662 

        code_0582
  0582:3c                 dup 
  0583:35 04              ldi 4 
  0585:1a                 eq? 
  0586:30 00cc            bnt code_0655 
  0589:8f 02              lsp param2 
  058b:3c                 dup 
  058c:35 08              ldi 8 
  058e:1a                 eq? 
  058f:30 0043            bnt code_05d5 
  0592:78               push1 
  0593:39 18            pushi 18 // $18 key
  0595:45 06 02         callb procedure_0006 2 //  

  0598:30 0025            bnt code_05c0 
  059b:7a               push2 
  059c:38 0348          pushi 348 // $348 sel_840
  059f:39 06            pushi 6 // $6 loop
  05a1:45 0e 04         callb procedure_000e 4 //  

  05a4:38 0148          pushi 148 // $148 put
  05a7:78               push1 
  05a8:39 08            pushi 8 // $8 underBits
  05aa:81 00              lag  
  05ac:4a 06             send 6 

  05ae:38 00c2          pushi c2 // $c2 show
  05b1:76               push0 
  05b2:72 0e4e          lofsa $0e4e // opener
  05b5:4a 04             send 4 

  05b7:78               push1 
  05b8:39 18            pushi 18 // $18 key
  05ba:45 08 02         callb procedure_0008 2 //  

  05bd:32 0091            jmp code_0651 

        code_05c0
  05c0:78               push1 
  05c1:39 18            pushi 18 // $18 key
  05c3:45 07 02         callb procedure_0007 2 //  

  05c6:38 008e          pushi 8e // $8e setScript
  05c9:78               push1 
  05ca:72 1804          lofsa $1804 // pickLockScript
  05cd:36                push 
  05ce:81 00              lag  
  05d0:4a 06             send 6 

  05d2:32 007c            jmp code_0651 

        code_05d5
  05d5:3c                 dup 
  05d6:35 09              ldi 9 
  05d8:1a                 eq? 
  05d9:30 0033            bnt code_060f 
  05dc:78               push1 
  05dd:39 18            pushi 18 // $18 key
  05df:45 06 02         callb procedure_0006 2 //  

  05e2:30 0015            bnt code_05fa 
  05e5:78               push1 
  05e6:39 18            pushi 18 // $18 key
  05e8:45 08 02         callb procedure_0008 2 //  

  05eb:38 008e          pushi 8e // $8e setScript
  05ee:78               push1 
  05ef:72 19e4          lofsa $19e4 // lockDeskScript
  05f2:36                push 
  05f3:81 00              lag  
  05f5:4a 06             send 6 

  05f7:32 0057            jmp code_0651 

        code_05fa
  05fa:78               push1 
  05fb:39 18            pushi 18 // $18 key
  05fd:45 07 02         callb procedure_0007 2 //  

  0600:38 008e          pushi 8e // $8e setScript
  0603:78               push1 
  0604:72 18f8          lofsa $18f8 // unlockDeskScript
  0607:36                push 
  0608:81 00              lag  
  060a:4a 06             send 6 

  060c:32 0042            jmp code_0651 

        code_060f
  060f:3c                 dup 
  0610:35 0a              ldi a 
  0612:1a                 eq? 
  0613:30 002e            bnt code_0644 
  0616:78               push1 
  0617:39 18            pushi 18 // $18 key
  0619:45 06 02         callb procedure_0006 2 //  

  061c:30 0019            bnt code_0638 
  061f:38 0148          pushi 148 // $148 put
  0622:78               push1 
  0623:39 0a            pushi a // $a nsLeft
  0625:81 00              lag  
  0627:4a 06             send 6 

  0629:38 008e          pushi 8e // $8e setScript
  062c:78               push1 
  062d:72 1d26          lofsa $1d26 // putPapersScript
  0630:36                push 
  0631:81 00              lag  
  0633:4a 06             send 6 

  0635:32 0019            jmp code_0651 

        code_0638
  0638:7a               push2 
  0639:38 0348          pushi 348 // $348 sel_840
  063c:39 07            pushi 7 // $7 cel
  063e:45 0e 04         callb procedure_000e 4 //  

  0641:32 000d            jmp code_0651 

        code_0644
  0644:38 010c          pushi 10c // $10c doVerb
  0647:7a               push2 
  0648:8f 01              lsp param1 
  064a:8f 02              lsp param2 
  064c:59 03            &rest 3 
  064e:57 2c 08         super Feature 8 


        code_0651
  0651:3a                toss 
  0652:32 000d            jmp code_0662 

        code_0655
  0655:38 010c          pushi 10c // $10c doVerb
  0658:7a               push2 
  0659:8f 01              lsp param1 
  065b:8f 02              lsp param2 
  065d:59 03            &rest 3 
  065f:57 2c 08         super Feature 8 


        code_0662
  0662:3a                toss 
  0663:48                 ret 
    )

)

// 078a
(instance plant of Feature
    (properties
        x $f8
        y $51
        z $0
        heading $0
        noun $0
        nsTop $28
        nsLeft $d0
        nsBottom $7a
        nsRight $122
        description $21f7
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $e7
        approachY $78
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_06a8
  06a8:8f 01              lsp param1 
  06aa:3c                 dup 
  06ab:35 02              ldi 2 
  06ad:1a                 eq? 
  06ae:30 0040            bnt code_06f1 
  06b1:38 00d5          pushi d5 // $d5 has
  06b4:78               push1 
  06b5:39 09            pushi 9 // $9 nsTop
  06b7:81 00              lag  
  06b9:4a 06             send 6 

  06bb:30 000c            bnt code_06ca 
  06be:7a               push2 
  06bf:38 0348          pushi 348 // $348 sel_840
  06c2:39 08            pushi 8 // $8 underBits
  06c4:45 0e 04         callb procedure_000e 4 //  

  06c7:32 00b8            jmp code_0782 

        code_06ca
  06ca:78               push1 
  06cb:39 17            pushi 17 // $17 name
  06cd:45 06 02         callb procedure_0006 2 //  

  06d0:30 000c            bnt code_06df 
  06d3:7a               push2 
  06d4:38 0348          pushi 348 // $348 sel_840
  06d7:39 09            pushi 9 // $9 nsTop
  06d9:45 0e 04         callb procedure_000e 4 //  

  06dc:32 00a3            jmp code_0782 

        code_06df
  06df:7a               push2 
  06e0:38 0348          pushi 348 // $348 sel_840
  06e3:39 0a            pushi a // $a nsLeft
  06e5:45 0e 04         callb procedure_000e 4 //  

  06e8:78               push1 
  06e9:39 17            pushi 17 // $17 name
  06eb:45 07 02         callb procedure_0007 2 //  

  06ee:32 0091            jmp code_0782 

        code_06f1
  06f1:3c                 dup 
  06f2:35 03              ldi 3 
  06f4:1a                 eq? 
  06f5:30 0045            bnt code_073d 
  06f8:38 00d5          pushi d5 // $d5 has
  06fb:78               push1 
  06fc:39 09            pushi 9 // $9 nsTop
  06fe:81 00              lag  
  0700:4a 06             send 6 

  0702:18                 not 
  0703:30 0027            bnt code_072d 
  0706:78               push1 
  0707:39 17            pushi 17 // $17 name
  0709:45 06 02         callb procedure_0006 2 //  

  070c:30 000f            bnt code_071e 
  070f:38 008e          pushi 8e // $8e setScript
  0712:78               push1 
  0713:72 10e0          lofsa $10e0 // getKeyScript
  0716:36                push 
  0717:81 00              lag  
  0719:4a 06             send 6 

  071b:32 0064            jmp code_0782 

        code_071e
  071e:38 008e          pushi 8e // $8e setScript
  0721:78               push1 
  0722:72 11cc          lofsa $11cc // sPawThruPlant
  0725:36                push 
  0726:81 00              lag  
  0728:4a 06             send 6 

  072a:32 0055            jmp code_0782 

        code_072d
  072d:38 010c          pushi 10c // $10c doVerb
  0730:7a               push2 
  0731:8f 01              lsp param1 
  0733:8f 02              lsp param2 
  0735:59 03            &rest 3 
  0737:57 2c 08         super Feature 8 

  073a:32 0045            jmp code_0782 

        code_073d
  073d:3c                 dup 
  073e:35 04              ldi 4 
  0740:1a                 eq? 
  0741:30 0031            bnt code_0775 
  0744:8f 02              lsp param2 
  0746:35 09              ldi 9 
  0748:1a                 eq? 
  0749:30 0019            bnt code_0765 
  074c:38 0148          pushi 148 // $148 put
  074f:78               push1 
  0750:39 09            pushi 9 // $9 nsTop
  0752:81 00              lag  
  0754:4a 06             send 6 

  0756:38 008e          pushi 8e // $8e setScript
  0759:78               push1 
  075a:72 12a8          lofsa $12a8 // replaceKeyScript
  075d:36                push 
  075e:81 00              lag  
  0760:4a 06             send 6 

  0762:32 001d            jmp code_0782 

        code_0765
  0765:38 010c          pushi 10c // $10c doVerb
  0768:7a               push2 
  0769:8f 01              lsp param1 
  076b:8f 02              lsp param2 
  076d:59 03            &rest 3 
  076f:57 2c 08         super Feature 8 

  0772:32 000d            jmp code_0782 

        code_0775
  0775:38 010c          pushi 10c // $10c doVerb
  0778:7a               push2 
  0779:8f 01              lsp param1 
  077b:8f 02              lsp param2 
  077d:59 03            &rest 3 
  077f:57 2c 08         super Feature 8 


        code_0782
  0782:3a                toss 
  0783:48                 ret 
    )

)

// 0854
(instance copier of Prop
    (properties
        x $3a
        y $8a
        z $14
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $220e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $44
        approachY $8a
        approachDist $0
        _approachVerbs $6789
        lookStr $2219
        yStep $2
        view $348
        loop $3
        cel $0
        priority $a
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $12
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_07c8
  07c8:8f 01              lsp param1 
  07ca:3c                 dup 
  07cb:35 03              ldi 3 
  07cd:1a                 eq? 
  07ce:30 0025            bnt code_07f6 
  07d1:38 00d5          pushi d5 // $d5 has
  07d4:78               push1 
  07d5:39 0b            pushi b // $b nsBottom
  07d7:81 00              lag  
  07d9:4a 06             send 6 

  07db:30 000c            bnt code_07ea 
  07de:7a               push2 
  07df:38 0348          pushi 348 // $348 sel_840
  07e2:39 0b            pushi b // $b nsBottom
  07e4:45 0e 04         callb procedure_000e 4 //  

  07e7:32 0062            jmp code_084c 

        code_07ea
  07ea:7a               push2 
  07eb:38 0348          pushi 348 // $348 sel_840
  07ee:39 0c            pushi c // $c nsRight
  07f0:45 0e 04         callb procedure_000e 4 //  

  07f3:32 0056            jmp code_084c 

        code_07f6
  07f6:3c                 dup 
  07f7:35 04              ldi 4 
  07f9:1a                 eq? 
  07fa:30 0042            bnt code_083f 
  07fd:8f 02              lsp param2 
  07ff:3c                 dup 
  0800:35 0a              ldi a 
  0802:1a                 eq? 
  0803:30 0028            bnt code_082e 
  0806:38 00d5          pushi d5 // $d5 has
  0809:78               push1 
  080a:39 0b            pushi b // $b nsBottom
  080c:81 00              lag  
  080e:4a 06             send 6 

  0810:30 000c            bnt code_081f 
  0813:7a               push2 
  0814:38 0348          pushi 348 // $348 sel_840
  0817:39 0b            pushi b // $b nsBottom
  0819:45 0e 04         callb procedure_000e 4 //  

  081c:32 001c            jmp code_083b 

        code_081f
  081f:38 008e          pushi 8e // $8e setScript
  0822:78               push1 
  0823:72 207e          lofsa $207e // runCopierScript
  0826:36                push 
  0827:81 00              lag  
  0829:4a 06             send 6 

  082b:32 000d            jmp code_083b 

        code_082e
  082e:38 010c          pushi 10c // $10c doVerb
  0831:7a               push2 
  0832:8f 01              lsp param1 
  0834:8f 02              lsp param2 
  0836:59 03            &rest 3 
  0838:57 2f 08         super Prop 8 


        code_083b
  083b:3a                toss 
  083c:32 000d            jmp code_084c 

        code_083f
  083f:38 010c          pushi 10c // $10c doVerb
  0842:7a               push2 
  0843:8f 01              lsp param1 
  0845:8f 02              lsp param2 
  0847:59 03            &rest 3 
  0849:57 2f 08         super Prop 8 


        code_084c
  084c:3a                toss 
  084d:48                 ret 
    )

)

// 08be
(instance paper of Prop
    (properties
        x $3a
        y $70
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $220e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $44
        approachY $8a
        approachDist $0
        _approachVerbs $6789
        lookStr $2219
        yStep $2
        view $348
        loop $5
        cel $0
        priority $a
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 09c0
(instance johnDoor of Door
    (properties
        x $b
        y $99
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2261
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $2c
        approachY $98
        approachDist $0
        _approachVerbs $6789
        lookStr $2273
        yStep $2
        view $348
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $352
        locked $0
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $0
        moveToY $8d
        enterType $0
        exitType $0
        closeScript $0
        openScript $0
    )
    (method (doVerb) // method_0922
  0922:8f 01              lsp param1 
  0924:3c                 dup 
  0925:35 03              ldi 3 
  0927:1a                 eq? 
  0928:30 006c            bnt code_0997 
  092b:38 00d5          pushi d5 // $d5 has
  092e:78               push1 
  092f:39 0a            pushi a // $a nsLeft
  0931:81 00              lag  
  0933:4a 06             send 6 

  0935:30 000c            bnt code_0944 
  0938:7a               push2 
  0939:38 0348          pushi 348 // $348 sel_840
  093c:39 0d            pushi d // $d lsTop
  093e:45 0e 04         callb procedure_000e 4 //  

  0941:32 0060            jmp code_09a4 

        code_0944
  0944:38 00d5          pushi d5 // $d5 has
  0947:78               push1 
  0948:39 09            pushi 9 // $9 nsTop
  094a:81 00              lag  
  094c:4a 06             send 6 

  094e:30 000c            bnt code_095d 
  0951:7a               push2 
  0952:38 0348          pushi 348 // $348 sel_840
  0955:39 0e            pushi e // $e lsLeft
  0957:45 0e 04         callb procedure_000e 4 //  

  095a:32 0047            jmp code_09a4 

        code_095d
  095d:38 00d5          pushi d5 // $d5 has
  0960:78               push1 
  0961:39 08            pushi 8 // $8 underBits
  0963:81 00              lag  
  0965:4a 06             send 6 

  0967:30 000c            bnt code_0976 
  096a:7a               push2 
  096b:38 0348          pushi 348 // $348 sel_840
  096e:39 0f            pushi f // $f lsBottom
  0970:45 0e 04         callb procedure_000e 4 //  

  0973:32 002e            jmp code_09a4 

        code_0976
  0976:38 012e          pushi 12e // $12e ignoreControl
  0979:78               push1 
  097a:39 04            pushi 4 // $4 x
  097c:81 00              lag  
  097e:4a 06             send 6 

  0980:39 42            pushi 42 // $42 setPri
  0982:78               push1 
  0983:39 0f            pushi f // $f lsBottom
  0985:54 06             self 6 

  0987:38 010c          pushi 10c // $10c doVerb
  098a:7a               push2 
  098b:8f 01              lsp param1 
  098d:8f 02              lsp param2 
  098f:59 03            &rest 3 
  0991:57 73 08         super Door 8 

  0994:32 000d            jmp code_09a4 

        code_0997
  0997:38 010c          pushi 10c // $10c doVerb
  099a:7a               push2 
  099b:8f 01              lsp param1 
  099d:8f 02              lsp param2 
  099f:59 03            &rest 3 
  09a1:57 73 08         super Door 8 


        code_09a4
  09a4:3a                toss 
  09a5:48                 ret 
    )

    (method (close) // method_09a6
  09a6:38 012d          pushi 12d // $12d observeControl
  09a9:7a               push2 
  09aa:39 04            pushi 4 // $4 x
  09ac:7a               push2 
  09ad:81 00              lag  
  09af:4a 08             send 8 

  09b1:38 0150          pushi 150 // $150 close
  09b4:76               push0 
  09b5:57 73 04         super Door 4 

  09b8:48                 ret 
  09b9:00                bnot 
    )

)

// 0a84
(instance lobbyDoor of Door
    (properties
        x $12e
        y $99
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $22d5
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $10d
        approachY $9f
        approachDist $0
        _approachVerbs $6789
        lookStr $22e4
        yStep $2
        view $348
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $334
        locked $0
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $118
        moveToY $96
        enterType $0
        exitType $2
        closeScript $0
        openScript $0
    )
    (method (doVerb) // method_0a48
  0a48:8f 01              lsp param1 
  0a4a:3c                 dup 
  0a4b:35 03              ldi 3 
  0a4d:1a                 eq? 
  0a4e:30 000f            bnt code_0a60 
  0a51:38 008e          pushi 8e // $8e setScript
  0a54:78               push1 
  0a55:72 0ff6          lofsa $0ff6 // peekScript
  0a58:36                push 
  0a59:81 00              lag  
  0a5b:4a 06             send 6 

  0a5d:32 000d            jmp code_0a6d 

        code_0a60
  0a60:38 010c          pushi 10c // $10c doVerb
  0a63:7a               push2 
  0a64:8f 01              lsp param1 
  0a66:8f 02              lsp param2 
  0a68:59 03            &rest 3 
  0a6a:57 73 08         super Door 8 


        code_0a6d
  0a6d:3a                toss 
  0a6e:48                 ret 
    )

    (method (close) // method_0a6f
  0a6f:39 42            pushi 42 // $42 setPri
  0a71:78               push1 
  0a72:39 ff            pushi ff // $ff syncNum
  0a74:54 06             self 6 

  0a76:38 0150          pushi 150 // $150 close
  0a79:76               push0 
  0a7a:57 73 04         super Door 4 

  0a7d:48                 ret 
    )

)

// 0b0e
(instance table of Feature
    (properties
        x $c0
        y $9d
        z $0
        heading $0
        noun $0
        nsTop $95
        nsLeft $98
        nsBottom $a5
        nsRight $e8
        description $234f
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2359
    )
)

// 0b4a
(instance chair of Feature
    (properties
        x $ed
        y $8b
        z $0
        heading $0
        noun $0
        nsTop $78
        nsLeft $de
        nsBottom $98
        nsRight $100
        description $238b
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2395
    )
)

// 0b86
(instance sofa of Feature
    (properties
        x $70
        y $99
        z $0
        heading $0
        noun $0
        nsTop $7e
        nsLeft $53
        nsBottom $b2
        nsRight $8d
        description $23e1
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $23ea
    )
)

// 0bea
(instance telephone of Feature
    (properties
        x $c2
        y $74
        z $14
        heading $0
        noun $0
        nsTop $60
        nsLeft $bb
        nsBottom $6a
        nsRight $ca
        description $2423
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $c8
        approachY $70
        approachDist $0
        _approachVerbs $6789
        lookStr $2431
    )
    (method (doVerb) // method_0bc0
  0bc0:8f 01              lsp param1 
  0bc2:3c                 dup 
  0bc3:35 03              ldi 3 
  0bc5:1a                 eq? 
  0bc6:30 000c            bnt code_0bd5 
  0bc9:7a               push2 
  0bca:38 0348          pushi 348 // $348 sel_840
  0bcd:39 10            pushi 10 // $10 lsRight
  0bcf:45 0e 04         callb procedure_000e 4 //  

  0bd2:32 000d            jmp code_0be2 

        code_0bd5
  0bd5:38 010c          pushi 10c // $10c doVerb
  0bd8:7a               push2 
  0bd9:8f 01              lsp param1 
  0bdb:8f 02              lsp param2 
  0bdd:59 03            &rest 3 
  0bdf:57 2c 08         super Feature 8 


        code_0be2
  0be2:3a                toss 
  0be3:48                 ret 
    )

)

// 0c52
(instance computer of Feature
    (properties
        x $89
        y $74
        z $14
        heading $0
        noun $0
        nsTop $58
        nsLeft $7f
        nsBottom $69
        nsRight $94
        description $2487
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $8c
        approachY $70
        approachDist $0
        _approachVerbs $6789
        lookStr $2499
    )
    (method (doVerb) // method_0c28
  0c28:8f 01              lsp param1 
  0c2a:3c                 dup 
  0c2b:35 03              ldi 3 
  0c2d:1a                 eq? 
  0c2e:30 000c            bnt code_0c3d 
  0c31:7a               push2 
  0c32:38 0348          pushi 348 // $348 sel_840
  0c35:39 11            pushi 11 // $11 signal
  0c37:45 0e 04         callb procedure_000e 4 //  

  0c3a:32 000d            jmp code_0c4a 

        code_0c3d
  0c3d:38 010c          pushi 10c // $10c doVerb
  0c40:7a               push2 
  0c41:8f 01              lsp param1 
  0c43:8f 02              lsp param2 
  0c45:59 03            &rest 3 
  0c47:57 2c 08         super Feature 8 


        code_0c4a
  0c4a:3a                toss 
  0c4b:48                 ret 
    )

)

// 0c92
(instance myWindow of Feature
    (properties
        x $a1
        y $49
        z $0
        heading $0
        noun $0
        nsTop $27
        nsLeft $42
        nsBottom $6b
        nsRight $100
        description $24e5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $24f0
    )
)

// 0cce
(instance stuff of Feature
    (properties
        x $35
        y $48
        z $0
        heading $0
        noun $0
        nsTop $2b
        nsLeft $21
        nsBottom $66
        nsRight $49
        description $254f
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $255b
    )
)

// 0d0a
(instance lamp1 of Feature
    (properties
        x $3b
        y $17
        z $0
        heading $0
        noun $0
        nsTop $11
        nsLeft $35
        nsBottom $1d
        nsRight $41
        description $25af
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $25b8
    )
)

// 0d46
(instance lamp2 of Feature
    (properties
        x $63
        y $6
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $5d
        nsBottom $d
        nsRight $6a
        description $25af
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $25b8
    )
)

// 0d82
(instance lamp3 of Feature
    (properties
        x $a3
        y $16
        z $0
        heading $0
        noun $0
        nsTop $12
        nsLeft $9e
        nsBottom $1a
        nsRight $a9
        description $25af
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $25b8
    )
)

// 0dbe
(instance lamp4 of Feature
    (properties
        x $104
        y $18
        z $0
        heading $0
        noun $0
        nsTop $14
        nsLeft $fd
        nsBottom $1d
        nsRight $10b
        description $25af
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $25b8
    )
)

// 0e48
(instance opener of View
    (properties
        x $9b
        y $69
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2606
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $bb
        approachY $76
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $348
        loop $0
        cel $0
        priority $9
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_0df8
  0df8:8f 01              lsp param1 
  0dfa:3c                 dup 
  0dfb:35 02              ldi 2 
  0dfd:1a                 eq? 
  0dfe:30 000c            bnt code_0e0d 
  0e01:7a               push2 
  0e02:38 0348          pushi 348 // $348 sel_840
  0e05:39 12            pushi 12 // $12 illegalBits
  0e07:45 0e 04         callb procedure_000e 4 //  

  0e0a:32 0032            jmp code_0e3f 

        code_0e0d
  0e0d:3c                 dup 
  0e0e:35 03              ldi 3 
  0e10:1a                 eq? 
  0e11:30 001e            bnt code_0e32 
  0e14:7a               push2 
  0e15:38 0348          pushi 348 // $348 sel_840
  0e18:39 04            pushi 4 // $4 x
  0e1a:45 0e 04         callb procedure_000e 4 //  

  0e1d:39 69            pushi 69 // $69 hide
  0e1f:76               push0 
  0e20:72 0e4e          lofsa $0e4e // opener
  0e23:4a 04             send 4 

  0e25:38 0147          pushi 147 // $147 get
  0e28:78               push1 
  0e29:39 08            pushi 8 // $8 underBits
  0e2b:81 00              lag  
  0e2d:4a 06             send 6 

  0e2f:32 000d            jmp code_0e3f 

        code_0e32
  0e32:38 010c          pushi 10c // $10c doVerb
  0e35:7a               push2 
  0e36:8f 01              lsp param1 
  0e38:8f 02              lsp param2 
  0e3a:59 03            &rest 3 
  0e3c:57 2e 08         super View 8 


        code_0e3f
  0e3f:3a                toss 
  0e40:48                 ret 
  0e41:00                bnot 
    )

)

// 0ea8
(instance copyMachineSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $349
        vol $7f
        priority $b
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 0ede
(instance copyExplodesSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $34a
        vol $7f
        priority $b
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 0f14
(instance pickLockSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $34b
        vol $7f
        priority $b
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 0ff0
(instance peekScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0f48
  0f48:87 01              lap param1 
  0f4a:65 0a             aTop state 
  0f4c:36                push 
  0f4d:3c                 dup 
  0f4e:35 00              ldi 0 
  0f50:1a                 eq? 
  0f51:30 0024            bnt code_0f78 
  0f54:76               push0 
  0f55:45 02 00         callb procedure_0002 0 //  

  0f58:38 0120          pushi 120 // $120 setCel
  0f5b:78               push1 
  0f5c:78               push1 
  0f5d:72 0a8a          lofsa $0a8a // lobbyDoor
  0f60:4a 06             send 6 

  0f62:38 011b          pushi 11b // $11b setMotion
  0f65:39 04            pushi 4 // $4 x
  0f67:51 1e            class MoveTo 
  0f69:36                push 
  0f6a:38 0110          pushi 110 // $110 onMeCheck
  0f6d:38 0096          pushi 96 // $96 setCycle
  0f70:7c            pushSelf 
  0f71:81 00              lag  
  0f73:4a 0c             send c 

  0f75:32 0070            jmp code_0fe8 

        code_0f78
  0f78:3c                 dup 
  0f79:35 01              ldi 1 
  0f7b:1a                 eq? 
  0f7c:30 0016            bnt code_0f95 
  0f7f:38 00a2          pushi a2 // $a2 setLoop
  0f82:78               push1 
  0f83:39 08            pushi 8 // $8 underBits
  0f85:38 0120          pushi 120 // $120 setCel
  0f88:78               push1 
  0f89:76               push0 
  0f8a:81 00              lag  
  0f8c:4a 0c             send c 

  0f8e:35 03              ldi 3 
  0f90:65 12             aTop seconds 
  0f92:32 0053            jmp code_0fe8 

        code_0f95
  0f95:3c                 dup 
  0f96:35 02              ldi 2 
  0f98:1a                 eq? 
  0f99:30 0010            bnt code_0fac 
  0f9c:7a               push2 
  0f9d:38 0348          pushi 348 // $348 sel_840
  0fa0:39 13            pushi 13 // $13 brTop
  0fa2:45 0e 04         callb procedure_000e 4 //  

  0fa5:35 03              ldi 3 
  0fa7:65 12             aTop seconds 
  0fa9:32 003c            jmp code_0fe8 

        code_0fac
  0fac:3c                 dup 
  0fad:35 03              ldi 3 
  0faf:1a                 eq? 
  0fb0:30 0035            bnt code_0fe8 
  0fb3:38 0120          pushi 120 // $120 setCel
  0fb6:78               push1 
  0fb7:76               push0 
  0fb8:72 0a8a          lofsa $0a8a // lobbyDoor
  0fbb:4a 06             send 6 

  0fbd:38 020a          pushi 20a // $20a normalize
  0fc0:78               push1 
  0fc1:78               push1 
  0fc2:39 1b            pushi 1b // $1b elements
  0fc4:45 06 02         callb procedure_0006 2 //  

  0fc7:30 0006            bnt code_0fd0 
  0fca:34 034a            ldi 34a 
  0fcd:32 0003            jmp code_0fd3 

        code_0fd0
  0fd0:34 023a            ldi 23a 

        code_0fd3
  0fd3:36                push 
  0fd4:38 012d          pushi 12d // $12d observeControl
  0fd7:7a               push2 
  0fd8:7a               push2 
  0fd9:39 04            pushi 4 // $4 x
  0fdb:38 008e          pushi 8e // $8e setScript
  0fde:78               push1 
  0fdf:76               push0 
  0fe0:81 00              lag  
  0fe2:4a 14             send 14 

  0fe4:76               push0 
  0fe5:45 03 00         callb procedure_0003 0 //  


        code_0fe8
  0fe8:3a                toss 
  0fe9:48                 ret 
    )

)

// 10da
(instance getKeyScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1024
  1024:87 01              lap param1 
  1026:65 0a             aTop state 
  1028:36                push 
  1029:3c                 dup 
  102a:35 00              ldi 0 
  102c:1a                 eq? 
  102d:30 0038            bnt code_1068 
  1030:76               push0 
  1031:45 02 00         callb procedure_0002 0 //  

  1034:39 05            pushi 5 // $5 view
  1036:78               push1 
  1037:38 0349          pushi 349 // $349 sel_841
  103a:39 06            pushi 6 // $6 loop
  103c:78               push1 
  103d:78               push1 
  103e:39 1b            pushi 1b // $1b elements
  1040:45 06 02         callb procedure_0006 2 //  

  1043:30 0005            bnt code_104b 
  1046:35 07              ldi 7 
  1048:32 0002            jmp code_104d 

        code_104b
  104b:35 02              ldi 2 

        code_104d
  104d:36                push 
  104e:38 0120          pushi 120 // $120 setCel
  1051:78               push1 
  1052:76               push0 
  1053:38 00db          pushi db // $db cycleSpeed
  1056:78               push1 
  1057:39 12            pushi 12 // $12 illegalBits
  1059:38 0096          pushi 96 // $96 setCycle
  105c:7a               push2 
  105d:51 1a            class End 
  105f:36                push 
  1060:7c            pushSelf 
  1061:81 00              lag  
  1063:4a 20             send 20 

  1065:32 0069            jmp code_10d1 

        code_1068
  1068:3c                 dup 
  1069:35 01              ldi 1 
  106b:1a                 eq? 
  106c:30 0035            bnt code_10a4 
  106f:38 020a          pushi 20a // $20a normalize
  1072:78               push1 
  1073:78               push1 
  1074:39 1b            pushi 1b // $1b elements
  1076:45 06 02         callb procedure_0006 2 //  

  1079:30 0006            bnt code_1082 
  107c:34 034a            ldi 34a 
  107f:32 0003            jmp code_1085 

        code_1082
  1082:34 023a            ldi 23a 

        code_1085
  1085:36                push 
  1086:38 012d          pushi 12d // $12d observeControl
  1089:7a               push2 
  108a:7a               push2 
  108b:39 04            pushi 4 // $4 x
  108d:38 0147          pushi 147 // $147 get
  1090:78               push1 
  1091:39 09            pushi 9 // $9 nsTop
  1093:38 00e4          pushi e4 // $e4 setHeading
  1096:78               push1 
  1097:39 5a            pushi 5a // $5a points
  1099:81 00              lag  
  109b:4a 1a             send 1a 

  109d:35 1e              ldi 1e 
  109f:65 16             aTop ticks 
  10a1:32 002d            jmp code_10d1 

        code_10a4
  10a4:3c                 dup 
  10a5:35 02              ldi 2 
  10a7:1a                 eq? 
  10a8:30 0026            bnt code_10d1 
  10ab:7a               push2 
  10ac:39 0a            pushi a // $a nsLeft
  10ae:38 0094          pushi 94 // $94 lastTime
  10b1:45 0a 04         callb procedure_000a 4 //  

  10b4:39 05            pushi 5 // $5 view
  10b6:38 0348          pushi 348 // $348 sel_840
  10b9:39 14            pushi 14 // $14 brLeft
  10bb:39 43            pushi 43 // $43 at
  10bd:39 ff            pushi ff // $ff syncNum
  10bf:39 14            pushi 14 // $14 brLeft
  10c1:45 0e 0a         callb procedure_000e a //  

  10c4:76               push0 
  10c5:45 03 00         callb procedure_0003 0 //  

  10c8:38 008e          pushi 8e // $8e setScript
  10cb:78               push1 
  10cc:76               push0 
  10cd:81 00              lag  
  10cf:4a 06             send 6 


        code_10d1
  10d1:3a                toss 
  10d2:48                 ret 
  10d3:00                bnot 
    )

)

// 11c6
(instance sPawThruPlant of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_110e
  110e:87 01              lap param1 
  1110:65 0a             aTop state 
  1112:36                push 
  1113:3c                 dup 
  1114:35 00              ldi 0 
  1116:1a                 eq? 
  1117:30 003c            bnt code_1156 
  111a:76               push0 
  111b:45 02 00         callb procedure_0002 0 //  

  111e:39 05            pushi 5 // $5 view
  1120:78               push1 
  1121:38 0349          pushi 349 // $349 sel_841
  1124:39 06            pushi 6 // $6 loop
  1126:78               push1 
  1127:78               push1 
  1128:39 1b            pushi 1b // $1b elements
  112a:45 06 02         callb procedure_0006 2 //  

  112d:30 0005            bnt code_1135 
  1130:35 07              ldi 7 
  1132:32 0002            jmp code_1137 

        code_1135
  1135:35 02              ldi 2 

        code_1137
  1137:36                push 
  1138:38 0120          pushi 120 // $120 setCel
  113b:78               push1 
  113c:76               push0 
  113d:38 00db          pushi db // $db cycleSpeed
  1140:78               push1 
  1141:39 12            pushi 12 // $12 illegalBits
  1143:38 0096          pushi 96 // $96 setCycle
  1146:39 04            pushi 4 // $4 x
  1148:51 19            class CT 
  114a:36                push 
  114b:39 05            pushi 5 // $5 view
  114d:78               push1 
  114e:7c            pushSelf 
  114f:81 00              lag  
  1151:4a 24             send 24 

  1153:32 0068            jmp code_11be 

        code_1156
  1156:3c                 dup 
  1157:35 01              ldi 1 
  1159:1a                 eq? 
  115a:30 0013            bnt code_1170 
  115d:38 0096          pushi 96 // $96 setCycle
  1160:39 04            pushi 4 // $4 x
  1162:51 19            class CT 
  1164:36                push 
  1165:76               push0 
  1166:39 ff            pushi ff // $ff syncNum
  1168:7c            pushSelf 
  1169:81 00              lag  
  116b:4a 0c             send c 

  116d:32 004e            jmp code_11be 

        code_1170
  1170:3c                 dup 
  1171:35 02              ldi 2 
  1173:1a                 eq? 
  1174:30 0028            bnt code_119f 
  1177:38 020a          pushi 20a // $20a normalize
  117a:78               push1 
  117b:78               push1 
  117c:39 1b            pushi 1b // $1b elements
  117e:45 06 02         callb procedure_0006 2 //  

  1181:30 0006            bnt code_118a 
  1184:34 034a            ldi 34a 
  1187:32 0003            jmp code_118d 

        code_118a
  118a:34 023a            ldi 23a 

        code_118d
  118d:36                push 
  118e:38 00e4          pushi e4 // $e4 setHeading
  1191:78               push1 
  1192:39 5a            pushi 5a // $5a points
  1194:81 00              lag  
  1196:4a 0c             send c 

  1198:35 1e              ldi 1e 
  119a:65 16             aTop ticks 
  119c:32 001f            jmp code_11be 

        code_119f
  119f:3c                 dup 
  11a0:35 03              ldi 3 
  11a2:1a                 eq? 
  11a3:30 0018            bnt code_11be 
  11a6:7a               push2 
  11a7:38 0348          pushi 348 // $348 sel_840
  11aa:39 15            pushi 15 // $15 brBottom
  11ac:45 0e 04         callb procedure_000e 4 //  

  11af:78               push1 
  11b0:39 17            pushi 17 // $17 name
  11b2:45 07 02         callb procedure_0007 2 //  

  11b5:76               push0 
  11b6:45 03 00         callb procedure_0003 0 //  

  11b9:39 6c            pushi 6c // $6c dispose
  11bb:76               push0 
  11bc:54 04             self 4 


        code_11be
  11be:3a                toss 
  11bf:48                 ret 
    )

)

// 12a2
(instance replaceKeyScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_11fa
  11fa:87 01              lap param1 
  11fc:65 0a             aTop state 
  11fe:36                push 
  11ff:3c                 dup 
  1200:35 00              ldi 0 
  1202:1a                 eq? 
  1203:30 003a            bnt code_1240 
  1206:76               push0 
  1207:45 02 00         callb procedure_0002 0 //  

  120a:39 05            pushi 5 // $5 view
  120c:78               push1 
  120d:38 0349          pushi 349 // $349 sel_841
  1210:39 06            pushi 6 // $6 loop
  1212:78               push1 
  1213:78               push1 
  1214:39 1b            pushi 1b // $1b elements
  1216:45 06 02         callb procedure_0006 2 //  

  1219:30 0005            bnt code_1221 
  121c:35 07              ldi 7 
  121e:32 0002            jmp code_1223 

        code_1221
  1221:35 02              ldi 2 

        code_1223
  1223:36                push 
  1224:38 0120          pushi 120 // $120 setCel
  1227:78               push1 
  1228:38 00ff          pushi ff // $ff syncNum
  122b:38 00db          pushi db // $db cycleSpeed
  122e:78               push1 
  122f:39 12            pushi 12 // $12 illegalBits
  1231:38 0096          pushi 96 // $96 setCycle
  1234:7a               push2 
  1235:51 1b            class Beg 
  1237:36                push 
  1238:7c            pushSelf 
  1239:81 00              lag  
  123b:4a 20             send 20 

  123d:32 005a            jmp code_129a 

        code_1240
  1240:3c                 dup 
  1241:35 01              ldi 1 
  1243:1a                 eq? 
  1244:30 002f            bnt code_1276 
  1247:38 020a          pushi 20a // $20a normalize
  124a:78               push1 
  124b:78               push1 
  124c:39 1b            pushi 1b // $1b elements
  124e:45 06 02         callb procedure_0006 2 //  

  1251:30 0006            bnt code_125a 
  1254:34 034a            ldi 34a 
  1257:32 0003            jmp code_125d 

        code_125a
  125a:34 023a            ldi 23a 

        code_125d
  125d:36                push 
  125e:38 012d          pushi 12d // $12d observeControl
  1261:7a               push2 
  1262:7a               push2 
  1263:39 04            pushi 4 // $4 x
  1265:38 00e4          pushi e4 // $e4 setHeading
  1268:78               push1 
  1269:39 5a            pushi 5a // $5a points
  126b:81 00              lag  
  126d:4a 14             send 14 

  126f:35 1e              ldi 1e 
  1271:65 16             aTop ticks 
  1273:32 0024            jmp code_129a 

        code_1276
  1276:3c                 dup 
  1277:35 02              ldi 2 
  1279:1a                 eq? 
  127a:30 001d            bnt code_129a 
  127d:39 05            pushi 5 // $5 view
  127f:38 0348          pushi 348 // $348 sel_840
  1282:39 16            pushi 16 // $16 brRight
  1284:39 43            pushi 43 // $43 at
  1286:39 ff            pushi ff // $ff syncNum
  1288:39 14            pushi 14 // $14 brLeft
  128a:45 0e 0a         callb procedure_000e a //  

  128d:76               push0 
  128e:45 03 00         callb procedure_0003 0 //  

  1291:38 008e          pushi 8e // $8e setScript
  1294:78               push1 
  1295:76               push0 
  1296:81 00              lag  
  1298:4a 06             send 6 


        code_129a
  129a:3a                toss 
  129b:48                 ret 
    )

)

// 13c6
(instance openDeskScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_12d6
  12d6:3f 64             link 64 // (var $64)
  12d8:87 01              lap param1 
  12da:65 0a             aTop state 
  12dc:36                push 
  12dd:3c                 dup 
  12de:35 00              ldi 0 
  12e0:1a                 eq? 
  12e1:30 0038            bnt code_131c 
  12e4:76               push0 
  12e5:45 02 00         callb procedure_0002 0 //  

  12e8:39 05            pushi 5 // $5 view
  12ea:78               push1 
  12eb:38 0349          pushi 349 // $349 sel_841
  12ee:39 06            pushi 6 // $6 loop
  12f0:78               push1 
  12f1:78               push1 
  12f2:39 1b            pushi 1b // $1b elements
  12f4:45 06 02         callb procedure_0006 2 //  

  12f7:30 0005            bnt code_12ff 
  12fa:35 06              ldi 6 
  12fc:32 0002            jmp code_1301 

        code_12ff
  12ff:35 00              ldi 0 

        code_1301
  1301:36                push 
  1302:38 0120          pushi 120 // $120 setCel
  1305:78               push1 
  1306:76               push0 
  1307:38 00db          pushi db // $db cycleSpeed
  130a:78               push1 
  130b:39 12            pushi 12 // $12 illegalBits
  130d:38 0096          pushi 96 // $96 setCycle
  1310:7a               push2 
  1311:51 1a            class End 
  1313:36                push 
  1314:7c            pushSelf 
  1315:81 00              lag  
  1317:4a 20             send 20 

  1319:32 00a2            jmp code_13be 

        code_131c
  131c:3c                 dup 
  131d:35 01              ldi 1 
  131f:1a                 eq? 
  1320:30 0007            bnt code_132a 
  1323:35 7b              ldi 7b 
  1325:65 16             aTop ticks 
  1327:32 0094            jmp code_13be 

        code_132a
  132a:3c                 dup 
  132b:35 02              ldi 2 
  132d:1a                 eq? 
  132e:30 0016            bnt code_1347 
  1331:38 0120          pushi 120 // $120 setCel
  1334:78               push1 
  1335:38 00ff          pushi ff // $ff syncNum
  1338:38 0096          pushi 96 // $96 setCycle
  133b:7a               push2 
  133c:51 1b            class Beg 
  133e:36                push 
  133f:7c            pushSelf 
  1340:81 00              lag  
  1342:4a 0e             send e 

  1344:32 0077            jmp code_13be 

        code_1347
  1347:3c                 dup 
  1348:35 03              ldi 3 
  134a:1a                 eq? 
  134b:30 0007            bnt code_1355 
  134e:35 7b              ldi 7b 
  1350:65 16             aTop ticks 
  1352:32 0069            jmp code_13be 

        code_1355
  1355:3c                 dup 
  1356:35 04              ldi 4 
  1358:1a                 eq? 
  1359:30 0062            bnt code_13be 
  135c:39 04            pushi 4 // $4 x
  135e:5b 04 00           lea 4 0 
  1361:36                push 
  1362:38 0348          pushi 348 // $348 sel_840
  1365:39 17            pushi 17 // $17 name
  1367:7a               push2 
  1368:38 2710          pushi 2710 // $2710 sel_10000
  136b:38 fde8          pushi fde8 // $fde8 sel_65000
  136e:43 3c 04         callk Random 4 

  1371:a1 ab              sag  
  1373:36                push 
  1374:43 48 08         callk Format 8 

  1377:7a               push2 
  1378:39 04            pushi 4 // $4 x
  137a:38 0090          pushi 90 // $90 localize
  137d:45 0a 04         callb procedure_000a 4 //  

  1380:78               push1 
  1381:5b 04 00           lea 4 0 
  1384:36                push 
  1385:45 0e 02         callb procedure_000e 2 //  

  1388:38 020a          pushi 20a // $20a normalize
  138b:78               push1 
  138c:78               push1 
  138d:39 1b            pushi 1b // $1b elements
  138f:45 06 02         callb procedure_0006 2 //  

  1392:30 0006            bnt code_139b 
  1395:34 034a            ldi 34a 
  1398:32 0003            jmp code_139e 

        code_139b
  139b:34 023a            ldi 23a 

        code_139e
  139e:36                push 
  139f:38 012d          pushi 12d // $12d observeControl
  13a2:7a               push2 
  13a3:7a               push2 
  13a4:39 04            pushi 4 // $4 x
  13a6:39 06            pushi 6 // $6 loop
  13a8:78               push1 
  13a9:7a               push2 
  13aa:38 00e4          pushi e4 // $e4 setHeading
  13ad:78               push1 
  13ae:38 00b4          pushi b4 // $b4 busy
  13b1:38 008e          pushi 8e // $8e setScript
  13b4:78               push1 
  13b5:76               push0 
  13b6:81 00              lag  
  13b8:4a 20             send 20 

  13ba:76               push0 
  13bb:45 03 00         callb procedure_0003 0 //  


        code_13be
  13be:3a                toss 
  13bf:48                 ret 
    )

)

// 14d6
(instance sOpenDesk2ndTime of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_13fa
  13fa:3f 64             link 64 // (var $64)
  13fc:87 01              lap param1 
  13fe:65 0a             aTop state 
  1400:36                push 
  1401:3c                 dup 
  1402:35 00              ldi 0 
  1404:1a                 eq? 
  1405:30 0038            bnt code_1440 
  1408:76               push0 
  1409:45 02 00         callb procedure_0002 0 //  

  140c:39 05            pushi 5 // $5 view
  140e:78               push1 
  140f:38 0349          pushi 349 // $349 sel_841
  1412:39 06            pushi 6 // $6 loop
  1414:78               push1 
  1415:78               push1 
  1416:39 1b            pushi 1b // $1b elements
  1418:45 06 02         callb procedure_0006 2 //  

  141b:30 0005            bnt code_1423 
  141e:35 06              ldi 6 
  1420:32 0002            jmp code_1425 

        code_1423
  1423:35 00              ldi 0 

        code_1425
  1425:36                push 
  1426:38 0120          pushi 120 // $120 setCel
  1429:78               push1 
  142a:76               push0 
  142b:38 00db          pushi db // $db cycleSpeed
  142e:78               push1 
  142f:39 12            pushi 12 // $12 illegalBits
  1431:38 0096          pushi 96 // $96 setCycle
  1434:7a               push2 
  1435:51 1a            class End 
  1437:36                push 
  1438:7c            pushSelf 
  1439:81 00              lag  
  143b:4a 20             send 20 

  143d:32 008e            jmp code_14ce 

        code_1440
  1440:3c                 dup 
  1441:35 01              ldi 1 
  1443:1a                 eq? 
  1444:30 0007            bnt code_144e 
  1447:35 7b              ldi 7b 
  1449:65 16             aTop ticks 
  144b:32 0080            jmp code_14ce 

        code_144e
  144e:3c                 dup 
  144f:35 02              ldi 2 
  1451:1a                 eq? 
  1452:30 0016            bnt code_146b 
  1455:38 0120          pushi 120 // $120 setCel
  1458:78               push1 
  1459:38 00ff          pushi ff // $ff syncNum
  145c:38 0096          pushi 96 // $96 setCycle
  145f:7a               push2 
  1460:51 1b            class Beg 
  1462:36                push 
  1463:7c            pushSelf 
  1464:81 00              lag  
  1466:4a 0e             send e 

  1468:32 0063            jmp code_14ce 

        code_146b
  146b:3c                 dup 
  146c:35 03              ldi 3 
  146e:1a                 eq? 
  146f:30 0007            bnt code_1479 
  1472:35 7b              ldi 7b 
  1474:65 16             aTop ticks 
  1476:32 0055            jmp code_14ce 

        code_1479
  1479:3c                 dup 
  147a:35 04              ldi 4 
  147c:1a                 eq? 
  147d:30 004e            bnt code_14ce 
  1480:39 04            pushi 4 // $4 x
  1482:5b 04 00           lea 4 0 
  1485:36                push 
  1486:38 0348          pushi 348 // $348 sel_840
  1489:39 18            pushi 18 // $18 key
  148b:89 ab              lsg  
  148d:43 48 08         callk Format 8 

  1490:78               push1 
  1491:5b 04 00           lea 4 0 
  1494:36                push 
  1495:45 0e 02         callb procedure_000e 2 //  

  1498:38 020a          pushi 20a // $20a normalize
  149b:78               push1 
  149c:78               push1 
  149d:39 1b            pushi 1b // $1b elements
  149f:45 06 02         callb procedure_0006 2 //  

  14a2:30 0006            bnt code_14ab 
  14a5:34 034a            ldi 34a 
  14a8:32 0003            jmp code_14ae 

        code_14ab
  14ab:34 023a            ldi 23a 

        code_14ae
  14ae:36                push 
  14af:38 012d          pushi 12d // $12d observeControl
  14b2:7a               push2 
  14b3:7a               push2 
  14b4:39 04            pushi 4 // $4 x
  14b6:38 00e4          pushi e4 // $e4 setHeading
  14b9:78               push1 
  14ba:38 00b4          pushi b4 // $b4 busy
  14bd:39 06            pushi 6 // $6 loop
  14bf:78               push1 
  14c0:7a               push2 
  14c1:38 008e          pushi 8e // $8e setScript
  14c4:78               push1 
  14c5:76               push0 
  14c6:81 00              lag  
  14c8:4a 20             send 20 

  14ca:76               push0 
  14cb:45 03 00         callb procedure_0003 0 //  


        code_14ce
  14ce:3a                toss 
  14cf:48                 ret 
    )

)

// 15fa
(instance lookDeskScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_150a
  150a:3f 64             link 64 // (var $64)
  150c:87 01              lap param1 
  150e:65 0a             aTop state 
  1510:36                push 
  1511:3c                 dup 
  1512:35 00              ldi 0 
  1514:1a                 eq? 
  1515:30 0038            bnt code_1550 
  1518:76               push0 
  1519:45 02 00         callb procedure_0002 0 //  

  151c:39 05            pushi 5 // $5 view
  151e:78               push1 
  151f:38 0349          pushi 349 // $349 sel_841
  1522:39 06            pushi 6 // $6 loop
  1524:78               push1 
  1525:78               push1 
  1526:39 1b            pushi 1b // $1b elements
  1528:45 06 02         callb procedure_0006 2 //  

  152b:30 0005            bnt code_1533 
  152e:35 06              ldi 6 
  1530:32 0002            jmp code_1535 

        code_1533
  1533:35 00              ldi 0 

        code_1535
  1535:36                push 
  1536:38 00db          pushi db // $db cycleSpeed
  1539:78               push1 
  153a:39 12            pushi 12 // $12 illegalBits
  153c:38 0120          pushi 120 // $120 setCel
  153f:78               push1 
  1540:76               push0 
  1541:38 0096          pushi 96 // $96 setCycle
  1544:7a               push2 
  1545:51 1a            class End 
  1547:36                push 
  1548:7c            pushSelf 
  1549:81 00              lag  
  154b:4a 20             send 20 

  154d:32 00a2            jmp code_15f2 

        code_1550
  1550:3c                 dup 
  1551:35 01              ldi 1 
  1553:1a                 eq? 
  1554:30 0007            bnt code_155e 
  1557:35 7b              ldi 7b 
  1559:65 16             aTop ticks 
  155b:32 0094            jmp code_15f2 

        code_155e
  155e:3c                 dup 
  155f:35 02              ldi 2 
  1561:1a                 eq? 
  1562:30 0016            bnt code_157b 
  1565:38 0120          pushi 120 // $120 setCel
  1568:78               push1 
  1569:38 00ff          pushi ff // $ff syncNum
  156c:38 0096          pushi 96 // $96 setCycle
  156f:7a               push2 
  1570:51 1b            class Beg 
  1572:36                push 
  1573:7c            pushSelf 
  1574:81 00              lag  
  1576:4a 0e             send e 

  1578:32 0077            jmp code_15f2 

        code_157b
  157b:3c                 dup 
  157c:35 03              ldi 3 
  157e:1a                 eq? 
  157f:30 0007            bnt code_1589 
  1582:35 7b              ldi 7b 
  1584:65 16             aTop ticks 
  1586:32 0069            jmp code_15f2 

        code_1589
  1589:3c                 dup 
  158a:35 04              ldi 4 
  158c:1a                 eq? 
  158d:30 0062            bnt code_15f2 
  1590:39 04            pushi 4 // $4 x
  1592:5b 04 00           lea 4 0 
  1595:36                push 
  1596:38 0348          pushi 348 // $348 sel_840
  1599:39 17            pushi 17 // $17 name
  159b:7a               push2 
  159c:38 2710          pushi 2710 // $2710 sel_10000
  159f:38 fde8          pushi fde8 // $fde8 sel_65000
  15a2:43 3c 04         callk Random 4 

  15a5:a1 ab              sag  
  15a7:36                push 
  15a8:43 48 08         callk Format 8 

  15ab:7a               push2 
  15ac:39 05            pushi 5 // $5 view
  15ae:38 0090          pushi 90 // $90 localize
  15b1:45 0a 04         callb procedure_000a 4 //  

  15b4:78               push1 
  15b5:5b 04 00           lea 4 0 
  15b8:36                push 
  15b9:45 0e 02         callb procedure_000e 2 //  

  15bc:38 020a          pushi 20a // $20a normalize
  15bf:78               push1 
  15c0:78               push1 
  15c1:39 1b            pushi 1b // $1b elements
  15c3:45 06 02         callb procedure_0006 2 //  

  15c6:30 0006            bnt code_15cf 
  15c9:34 034a            ldi 34a 
  15cc:32 0003            jmp code_15d2 

        code_15cf
  15cf:34 023a            ldi 23a 

        code_15d2
  15d2:36                push 
  15d3:38 012d          pushi 12d // $12d observeControl
  15d6:7a               push2 
  15d7:7a               push2 
  15d8:39 04            pushi 4 // $4 x
  15da:39 06            pushi 6 // $6 loop
  15dc:78               push1 
  15dd:7a               push2 
  15de:38 00e4          pushi e4 // $e4 setHeading
  15e1:78               push1 
  15e2:38 00b4          pushi b4 // $b4 busy
  15e5:38 008e          pushi 8e // $8e setScript
  15e8:78               push1 
  15e9:76               push0 
  15ea:81 00              lag  
  15ec:4a 20             send 20 

  15ee:76               push0 
  15ef:45 03 00         callb procedure_0003 0 //  


        code_15f2
  15f2:3a                toss 
  15f3:48                 ret 
    )

)

// 170a
(instance sLookDesk2ndTime of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_162e
  162e:3f 64             link 64 // (var $64)
  1630:87 01              lap param1 
  1632:65 0a             aTop state 
  1634:36                push 
  1635:3c                 dup 
  1636:35 00              ldi 0 
  1638:1a                 eq? 
  1639:30 0038            bnt code_1674 
  163c:76               push0 
  163d:45 02 00         callb procedure_0002 0 //  

  1640:39 05            pushi 5 // $5 view
  1642:78               push1 
  1643:38 0349          pushi 349 // $349 sel_841
  1646:39 06            pushi 6 // $6 loop
  1648:78               push1 
  1649:78               push1 
  164a:39 1b            pushi 1b // $1b elements
  164c:45 06 02         callb procedure_0006 2 //  

  164f:30 0005            bnt code_1657 
  1652:35 06              ldi 6 
  1654:32 0002            jmp code_1659 

        code_1657
  1657:35 00              ldi 0 

        code_1659
  1659:36                push 
  165a:38 0120          pushi 120 // $120 setCel
  165d:78               push1 
  165e:76               push0 
  165f:38 00db          pushi db // $db cycleSpeed
  1662:78               push1 
  1663:39 12            pushi 12 // $12 illegalBits
  1665:38 0096          pushi 96 // $96 setCycle
  1668:7a               push2 
  1669:51 1a            class End 
  166b:36                push 
  166c:7c            pushSelf 
  166d:81 00              lag  
  166f:4a 20             send 20 

  1671:32 008e            jmp code_1702 

        code_1674
  1674:3c                 dup 
  1675:35 01              ldi 1 
  1677:1a                 eq? 
  1678:30 0007            bnt code_1682 
  167b:35 7b              ldi 7b 
  167d:65 16             aTop ticks 
  167f:32 0080            jmp code_1702 

        code_1682
  1682:3c                 dup 
  1683:35 02              ldi 2 
  1685:1a                 eq? 
  1686:30 0016            bnt code_169f 
  1689:38 0120          pushi 120 // $120 setCel
  168c:78               push1 
  168d:38 00ff          pushi ff // $ff syncNum
  1690:38 0096          pushi 96 // $96 setCycle
  1693:7a               push2 
  1694:51 1b            class Beg 
  1696:36                push 
  1697:7c            pushSelf 
  1698:81 00              lag  
  169a:4a 0e             send e 

  169c:32 0063            jmp code_1702 

        code_169f
  169f:3c                 dup 
  16a0:35 03              ldi 3 
  16a2:1a                 eq? 
  16a3:30 0007            bnt code_16ad 
  16a6:35 7b              ldi 7b 
  16a8:65 16             aTop ticks 
  16aa:32 0055            jmp code_1702 

        code_16ad
  16ad:3c                 dup 
  16ae:35 04              ldi 4 
  16b0:1a                 eq? 
  16b1:30 004e            bnt code_1702 
  16b4:39 04            pushi 4 // $4 x
  16b6:5b 04 00           lea 4 0 
  16b9:36                push 
  16ba:38 0348          pushi 348 // $348 sel_840
  16bd:39 18            pushi 18 // $18 key
  16bf:89 ab              lsg  
  16c1:43 48 08         callk Format 8 

  16c4:78               push1 
  16c5:5b 04 00           lea 4 0 
  16c8:36                push 
  16c9:45 0e 02         callb procedure_000e 2 //  

  16cc:38 020a          pushi 20a // $20a normalize
  16cf:78               push1 
  16d0:78               push1 
  16d1:39 1b            pushi 1b // $1b elements
  16d3:45 06 02         callb procedure_0006 2 //  

  16d6:30 0006            bnt code_16df 
  16d9:34 034a            ldi 34a 
  16dc:32 0003            jmp code_16e2 

        code_16df
  16df:34 023a            ldi 23a 

        code_16e2
  16e2:36                push 
  16e3:38 012d          pushi 12d // $12d observeControl
  16e6:7a               push2 
  16e7:7a               push2 
  16e8:39 04            pushi 4 // $4 x
  16ea:39 06            pushi 6 // $6 loop
  16ec:78               push1 
  16ed:7a               push2 
  16ee:38 00e4          pushi e4 // $e4 setHeading
  16f1:78               push1 
  16f2:38 00b4          pushi b4 // $b4 busy
  16f5:38 008e          pushi 8e // $8e setScript
  16f8:78               push1 
  16f9:76               push0 
  16fa:81 00              lag  
  16fc:4a 20             send 20 

  16fe:76               push0 
  16ff:45 03 00         callb procedure_0003 0 //  


        code_1702
  1702:3a                toss 
  1703:48                 ret 
    )

)

// 17fe
(instance pickLockScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_173e
  173e:87 01              lap param1 
  1740:65 0a             aTop state 
  1742:36                push 
  1743:3c                 dup 
  1744:35 00              ldi 0 
  1746:1a                 eq? 
  1747:30 0038            bnt code_1782 
  174a:76               push0 
  174b:45 02 00         callb procedure_0002 0 //  

  174e:39 05            pushi 5 // $5 view
  1750:78               push1 
  1751:38 0349          pushi 349 // $349 sel_841
  1754:39 06            pushi 6 // $6 loop
  1756:78               push1 
  1757:78               push1 
  1758:39 1b            pushi 1b // $1b elements
  175a:45 06 02         callb procedure_0006 2 //  

  175d:30 0005            bnt code_1765 
  1760:35 06              ldi 6 
  1762:32 0002            jmp code_1767 

        code_1765
  1765:35 00              ldi 0 

        code_1767
  1767:36                push 
  1768:38 0120          pushi 120 // $120 setCel
  176b:78               push1 
  176c:76               push0 
  176d:38 00db          pushi db // $db cycleSpeed
  1770:78               push1 
  1771:39 12            pushi 12 // $12 illegalBits
  1773:38 0096          pushi 96 // $96 setCycle
  1776:7a               push2 
  1777:51 1a            class End 
  1779:36                push 
  177a:7c            pushSelf 
  177b:81 00              lag  
  177d:4a 20             send 20 

  177f:32 0074            jmp code_17f6 

        code_1782
  1782:3c                 dup 
  1783:35 01              ldi 1 
  1785:1a                 eq? 
  1786:30 001e            bnt code_17a7 
  1789:39 2a            pushi 2a // $2a play
  178b:76               push0 
  178c:72 0f1a          lofsa $0f1a // pickLockSound
  178f:4a 04             send 4 

  1791:38 0120          pushi 120 // $120 setCel
  1794:78               push1 
  1795:38 00ff          pushi ff // $ff syncNum
  1798:38 0096          pushi 96 // $96 setCycle
  179b:7a               push2 
  179c:51 1b            class Beg 
  179e:36                push 
  179f:7c            pushSelf 
  17a0:81 00              lag  
  17a2:4a 0e             send e 

  17a4:32 004f            jmp code_17f6 

        code_17a7
  17a7:3c                 dup 
  17a8:35 02              ldi 2 
  17aa:1a                 eq? 
  17ab:30 0048            bnt code_17f6 
  17ae:7a               push2 
  17af:39 05            pushi 5 // $5 view
  17b1:38 0093          pushi 93 // $93 ticksToDo
  17b4:45 0a 04         callb procedure_000a 4 //  

  17b7:7a               push2 
  17b8:38 0348          pushi 348 // $348 sel_840
  17bb:39 19            pushi 19 // $19 time
  17bd:45 0e 04         callb procedure_000e 4 //  

  17c0:38 020a          pushi 20a // $20a normalize
  17c3:78               push1 
  17c4:78               push1 
  17c5:39 1b            pushi 1b // $1b elements
  17c7:45 06 02         callb procedure_0006 2 //  

  17ca:30 0006            bnt code_17d3 
  17cd:34 034a            ldi 34a 
  17d0:32 0003            jmp code_17d6 

        code_17d3
  17d3:34 023a            ldi 23a 

        code_17d6
  17d6:36                push 
  17d7:38 012d          pushi 12d // $12d observeControl
  17da:7a               push2 
  17db:7a               push2 
  17dc:39 04            pushi 4 // $4 x
  17de:39 06            pushi 6 // $6 loop
  17e0:78               push1 
  17e1:7a               push2 
  17e2:38 00e4          pushi e4 // $e4 setHeading
  17e5:78               push1 
  17e6:38 00b4          pushi b4 // $b4 busy
  17e9:38 008e          pushi 8e // $8e setScript
  17ec:78               push1 
  17ed:76               push0 
  17ee:81 00              lag  
  17f0:4a 20             send 20 

  17f2:76               push0 
  17f3:45 03 00         callb procedure_0003 0 //  


        code_17f6
  17f6:3a                toss 
  17f7:48                 ret 
    )

)

// 18f2
(instance unlockDeskScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1832
  1832:87 01              lap param1 
  1834:65 0a             aTop state 
  1836:36                push 
  1837:3c                 dup 
  1838:35 00              ldi 0 
  183a:1a                 eq? 
  183b:30 0038            bnt code_1876 
  183e:76               push0 
  183f:45 02 00         callb procedure_0002 0 //  

  1842:39 05            pushi 5 // $5 view
  1844:78               push1 
  1845:38 0349          pushi 349 // $349 sel_841
  1848:39 06            pushi 6 // $6 loop
  184a:78               push1 
  184b:78               push1 
  184c:39 1b            pushi 1b // $1b elements
  184e:45 06 02         callb procedure_0006 2 //  

  1851:30 0005            bnt code_1859 
  1854:35 06              ldi 6 
  1856:32 0002            jmp code_185b 

        code_1859
  1859:35 00              ldi 0 

        code_185b
  185b:36                push 
  185c:38 0120          pushi 120 // $120 setCel
  185f:78               push1 
  1860:76               push0 
  1861:38 00db          pushi db // $db cycleSpeed
  1864:78               push1 
  1865:39 12            pushi 12 // $12 illegalBits
  1867:38 0096          pushi 96 // $96 setCycle
  186a:7a               push2 
  186b:51 1a            class End 
  186d:36                push 
  186e:7c            pushSelf 
  186f:81 00              lag  
  1871:4a 20             send 20 

  1873:32 0074            jmp code_18ea 

        code_1876
  1876:3c                 dup 
  1877:35 01              ldi 1 
  1879:1a                 eq? 
  187a:30 001e            bnt code_189b 
  187d:39 2a            pushi 2a // $2a play
  187f:76               push0 
  1880:72 0f1a          lofsa $0f1a // pickLockSound
  1883:4a 04             send 4 

  1885:38 0120          pushi 120 // $120 setCel
  1888:78               push1 
  1889:38 00ff          pushi ff // $ff syncNum
  188c:38 0096          pushi 96 // $96 setCycle
  188f:7a               push2 
  1890:51 1b            class Beg 
  1892:36                push 
  1893:7c            pushSelf 
  1894:81 00              lag  
  1896:4a 0e             send e 

  1898:32 004f            jmp code_18ea 

        code_189b
  189b:3c                 dup 
  189c:35 02              ldi 2 
  189e:1a                 eq? 
  189f:30 0048            bnt code_18ea 
  18a2:7a               push2 
  18a3:39 0d            pushi d // $d lsTop
  18a5:38 0093          pushi 93 // $93 ticksToDo
  18a8:45 0a 04         callb procedure_000a 4 //  

  18ab:7a               push2 
  18ac:38 0348          pushi 348 // $348 sel_840
  18af:39 1a            pushi 1a // $1a text
  18b1:45 0e 04         callb procedure_000e 4 //  

  18b4:38 020a          pushi 20a // $20a normalize
  18b7:78               push1 
  18b8:78               push1 
  18b9:39 1b            pushi 1b // $1b elements
  18bb:45 06 02         callb procedure_0006 2 //  

  18be:30 0006            bnt code_18c7 
  18c1:34 034a            ldi 34a 
  18c4:32 0003            jmp code_18ca 

        code_18c7
  18c7:34 023a            ldi 23a 

        code_18ca
  18ca:36                push 
  18cb:38 012d          pushi 12d // $12d observeControl
  18ce:7a               push2 
  18cf:7a               push2 
  18d0:39 04            pushi 4 // $4 x
  18d2:39 06            pushi 6 // $6 loop
  18d4:78               push1 
  18d5:7a               push2 
  18d6:38 00e4          pushi e4 // $e4 setHeading
  18d9:78               push1 
  18da:38 00b4          pushi b4 // $b4 busy
  18dd:38 008e          pushi 8e // $8e setScript
  18e0:78               push1 
  18e1:76               push0 
  18e2:81 00              lag  
  18e4:4a 20             send 20 

  18e6:76               push0 
  18e7:45 03 00         callb procedure_0003 0 //  


        code_18ea
  18ea:3a                toss 
  18eb:48                 ret 
    )

)

// 19de
(instance lockDeskScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1926
  1926:87 01              lap param1 
  1928:65 0a             aTop state 
  192a:36                push 
  192b:3c                 dup 
  192c:35 00              ldi 0 
  192e:1a                 eq? 
  192f:30 0038            bnt code_196a 
  1932:76               push0 
  1933:45 02 00         callb procedure_0002 0 //  

  1936:39 05            pushi 5 // $5 view
  1938:78               push1 
  1939:38 0349          pushi 349 // $349 sel_841
  193c:39 06            pushi 6 // $6 loop
  193e:78               push1 
  193f:78               push1 
  1940:39 1b            pushi 1b // $1b elements
  1942:45 06 02         callb procedure_0006 2 //  

  1945:30 0005            bnt code_194d 
  1948:35 06              ldi 6 
  194a:32 0002            jmp code_194f 

        code_194d
  194d:35 00              ldi 0 

        code_194f
  194f:36                push 
  1950:38 0120          pushi 120 // $120 setCel
  1953:78               push1 
  1954:76               push0 
  1955:38 00db          pushi db // $db cycleSpeed
  1958:78               push1 
  1959:39 12            pushi 12 // $12 illegalBits
  195b:38 0096          pushi 96 // $96 setCycle
  195e:7a               push2 
  195f:51 1a            class End 
  1961:36                push 
  1962:7c            pushSelf 
  1963:81 00              lag  
  1965:4a 20             send 20 

  1967:32 006b            jmp code_19d5 

        code_196a
  196a:3c                 dup 
  196b:35 01              ldi 1 
  196d:1a                 eq? 
  196e:30 001e            bnt code_198f 
  1971:39 2a            pushi 2a // $2a play
  1973:76               push0 
  1974:72 0f1a          lofsa $0f1a // pickLockSound
  1977:4a 04             send 4 

  1979:38 0120          pushi 120 // $120 setCel
  197c:78               push1 
  197d:38 00ff          pushi ff // $ff syncNum
  1980:38 0096          pushi 96 // $96 setCycle
  1983:7a               push2 
  1984:51 1b            class Beg 
  1986:36                push 
  1987:7c            pushSelf 
  1988:81 00              lag  
  198a:4a 0e             send e 

  198c:32 0046            jmp code_19d5 

        code_198f
  198f:3c                 dup 
  1990:35 02              ldi 2 
  1992:1a                 eq? 
  1993:30 003f            bnt code_19d5 
  1996:7a               push2 
  1997:38 0348          pushi 348 // $348 sel_840
  199a:39 1b            pushi 1b // $1b elements
  199c:45 0e 04         callb procedure_000e 4 //  

  199f:38 020a          pushi 20a // $20a normalize
  19a2:78               push1 
  19a3:78               push1 
  19a4:39 1b            pushi 1b // $1b elements
  19a6:45 06 02         callb procedure_0006 2 //  

  19a9:30 0006            bnt code_19b2 
  19ac:34 034a            ldi 34a 
  19af:32 0003            jmp code_19b5 

        code_19b2
  19b2:34 023a            ldi 23a 

        code_19b5
  19b5:36                push 
  19b6:38 012d          pushi 12d // $12d observeControl
  19b9:7a               push2 
  19ba:7a               push2 
  19bb:39 04            pushi 4 // $4 x
  19bd:39 06            pushi 6 // $6 loop
  19bf:78               push1 
  19c0:7a               push2 
  19c1:38 00e4          pushi e4 // $e4 setHeading
  19c4:78               push1 
  19c5:38 00b4          pushi b4 // $b4 busy
  19c8:38 008e          pushi 8e // $8e setScript
  19cb:78               push1 
  19cc:76               push0 
  19cd:81 00              lag  
  19cf:4a 20             send 20 

  19d1:76               push0 
  19d2:45 03 00         callb procedure_0003 0 //  


        code_19d5
  19d5:3a                toss 
  19d6:48                 ret 
  19d7:00                bnot 
    )

)

// 1af6
(instance getPapersScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1a12
  1a12:87 01              lap param1 
  1a14:65 0a             aTop state 
  1a16:36                push 
  1a17:3c                 dup 
  1a18:35 00              ldi 0 
  1a1a:1a                 eq? 
  1a1b:30 0038            bnt code_1a56 
  1a1e:76               push0 
  1a1f:45 02 00         callb procedure_0002 0 //  

  1a22:39 05            pushi 5 // $5 view
  1a24:78               push1 
  1a25:38 0349          pushi 349 // $349 sel_841
  1a28:39 06            pushi 6 // $6 loop
  1a2a:78               push1 
  1a2b:78               push1 
  1a2c:39 1b            pushi 1b // $1b elements
  1a2e:45 06 02         callb procedure_0006 2 //  

  1a31:30 0005            bnt code_1a39 
  1a34:35 06              ldi 6 
  1a36:32 0002            jmp code_1a3b 

        code_1a39
  1a39:35 00              ldi 0 

        code_1a3b
  1a3b:36                push 
  1a3c:38 0120          pushi 120 // $120 setCel
  1a3f:78               push1 
  1a40:76               push0 
  1a41:38 00db          pushi db // $db cycleSpeed
  1a44:78               push1 
  1a45:39 12            pushi 12 // $12 illegalBits
  1a47:38 0096          pushi 96 // $96 setCycle
  1a4a:7a               push2 
  1a4b:51 1a            class End 
  1a4d:36                push 
  1a4e:7c            pushSelf 
  1a4f:81 00              lag  
  1a51:4a 20             send 20 

  1a53:32 0098            jmp code_1aee 

        code_1a56
  1a56:3c                 dup 
  1a57:35 01              ldi 1 
  1a59:1a                 eq? 
  1a5a:30 0034            bnt code_1a91 
  1a5d:39 05            pushi 5 // $5 view
  1a5f:78               push1 
  1a60:38 0349          pushi 349 // $349 sel_841
  1a63:39 06            pushi 6 // $6 loop
  1a65:78               push1 
  1a66:78               push1 
  1a67:39 1b            pushi 1b // $1b elements
  1a69:45 06 02         callb procedure_0006 2 //  

  1a6c:30 0005            bnt code_1a74 
  1a6f:35 08              ldi 8 
  1a71:32 0002            jmp code_1a76 

        code_1a74
  1a74:35 01              ldi 1 

        code_1a76
  1a76:36                push 
  1a77:38 0120          pushi 120 // $120 setCel
  1a7a:78               push1 
  1a7b:76               push0 
  1a7c:38 00db          pushi db // $db cycleSpeed
  1a7f:78               push1 
  1a80:39 12            pushi 12 // $12 illegalBits
  1a82:38 0096          pushi 96 // $96 setCycle
  1a85:7a               push2 
  1a86:51 1a            class End 
  1a88:36                push 
  1a89:7c            pushSelf 
  1a8a:81 00              lag  
  1a8c:4a 20             send 20 

  1a8e:32 005d            jmp code_1aee 

        code_1a91
  1a91:3c                 dup 
  1a92:35 02              ldi 2 
  1a94:1a                 eq? 
  1a95:30 0007            bnt code_1a9f 
  1a98:35 7b              ldi 7b 
  1a9a:65 16             aTop ticks 
  1a9c:32 004f            jmp code_1aee 

        code_1a9f
  1a9f:3c                 dup 
  1aa0:35 03              ldi 3 
  1aa2:1a                 eq? 
  1aa3:30 0048            bnt code_1aee 
  1aa6:7a               push2 
  1aa7:39 05            pushi 5 // $5 view
  1aa9:38 0091          pushi 91 // $91 globalize
  1aac:45 0a 04         callb procedure_000a 4 //  

  1aaf:7a               push2 
  1ab0:38 0348          pushi 348 // $348 sel_840
  1ab3:39 1c            pushi 1c // $1c color
  1ab5:45 0e 04         callb procedure_000e 4 //  

  1ab8:38 020a          pushi 20a // $20a normalize
  1abb:78               push1 
  1abc:78               push1 
  1abd:39 1b            pushi 1b // $1b elements
  1abf:45 06 02         callb procedure_0006 2 //  

  1ac2:30 0006            bnt code_1acb 
  1ac5:34 034a            ldi 34a 
  1ac8:32 0003            jmp code_1ace 

        code_1acb
  1acb:34 023a            ldi 23a 

        code_1ace
  1ace:36                push 
  1acf:38 012d          pushi 12d // $12d observeControl
  1ad2:7a               push2 
  1ad3:7a               push2 
  1ad4:39 04            pushi 4 // $4 x
  1ad6:39 06            pushi 6 // $6 loop
  1ad8:78               push1 
  1ad9:7a               push2 
  1ada:38 00e4          pushi e4 // $e4 setHeading
  1add:78               push1 
  1ade:38 00b4          pushi b4 // $b4 busy
  1ae1:38 008e          pushi 8e // $8e setScript
  1ae4:78               push1 
  1ae5:76               push0 
  1ae6:81 00              lag  
  1ae8:4a 20             send 20 

  1aea:76               push0 
  1aeb:45 03 00         callb procedure_0003 0 //  


        code_1aee
  1aee:3a                toss 
  1aef:48                 ret 
    )

)

// 1c04
(instance lookPapersScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1b2a
  1b2a:87 01              lap param1 
  1b2c:65 0a             aTop state 
  1b2e:36                push 
  1b2f:3c                 dup 
  1b30:35 00              ldi 0 
  1b32:1a                 eq? 
  1b33:30 003a            bnt code_1b70 
  1b36:76               push0 
  1b37:45 02 00         callb procedure_0002 0 //  

  1b3a:39 05            pushi 5 // $5 view
  1b3c:78               push1 
  1b3d:38 0349          pushi 349 // $349 sel_841
  1b40:39 06            pushi 6 // $6 loop
  1b42:78               push1 
  1b43:78               push1 
  1b44:39 1b            pushi 1b // $1b elements
  1b46:45 06 02         callb procedure_0006 2 //  

  1b49:30 0005            bnt code_1b51 
  1b4c:35 08              ldi 8 
  1b4e:32 0002            jmp code_1b53 

        code_1b51
  1b51:35 01              ldi 1 

        code_1b53
  1b53:36                push 
  1b54:38 0120          pushi 120 // $120 setCel
  1b57:78               push1 
  1b58:38 00ff          pushi ff // $ff syncNum
  1b5b:38 00db          pushi db // $db cycleSpeed
  1b5e:78               push1 
  1b5f:39 12            pushi 12 // $12 illegalBits
  1b61:38 0096          pushi 96 // $96 setCycle
  1b64:7a               push2 
  1b65:51 1a            class End 
  1b67:36                push 
  1b68:7c            pushSelf 
  1b69:81 00              lag  
  1b6b:4a 20             send 20 

  1b6d:32 008b            jmp code_1bfb 

        code_1b70
  1b70:3c                 dup 
  1b71:35 01              ldi 1 
  1b73:1a                 eq? 
  1b74:30 0010            bnt code_1b87 
  1b77:7a               push2 
  1b78:38 0348          pushi 348 // $348 sel_840
  1b7b:39 1d            pushi 1d // $1d back
  1b7d:45 0e 04         callb procedure_000e 4 //  

  1b80:35 3c              ldi 3c 
  1b82:65 16             aTop ticks 
  1b84:32 0074            jmp code_1bfb 

        code_1b87
  1b87:3c                 dup 
  1b88:35 02              ldi 2 
  1b8a:1a                 eq? 
  1b8b:30 0010            bnt code_1b9e 
  1b8e:7a               push2 
  1b8f:38 0348          pushi 348 // $348 sel_840
  1b92:39 1e            pushi 1e // $1e mode
  1b94:45 0e 04         callb procedure_000e 4 //  

  1b97:35 3c              ldi 3c 
  1b99:65 16             aTop ticks 
  1b9b:32 005d            jmp code_1bfb 

        code_1b9e
  1b9e:3c                 dup 
  1b9f:35 03              ldi 3 
  1ba1:1a                 eq? 
  1ba2:30 0019            bnt code_1bbe 
  1ba5:7a               push2 
  1ba6:39 05            pushi 5 // $5 view
  1ba8:38 0091          pushi 91 // $91 globalize
  1bab:45 0a 04         callb procedure_000a 4 //  

  1bae:7a               push2 
  1baf:38 0348          pushi 348 // $348 sel_840
  1bb2:39 1f            pushi 1f // $1f style
  1bb4:45 0e 04         callb procedure_000e 4 //  

  1bb7:35 7b              ldi 7b 
  1bb9:65 16             aTop ticks 
  1bbb:32 003d            jmp code_1bfb 

        code_1bbe
  1bbe:3c                 dup 
  1bbf:35 04              ldi 4 
  1bc1:1a                 eq? 
  1bc2:30 0036            bnt code_1bfb 
  1bc5:38 020a          pushi 20a // $20a normalize
  1bc8:78               push1 
  1bc9:78               push1 
  1bca:39 1b            pushi 1b // $1b elements
  1bcc:45 06 02         callb procedure_0006 2 //  

  1bcf:30 0006            bnt code_1bd8 
  1bd2:34 034a            ldi 34a 
  1bd5:32 0003            jmp code_1bdb 

        code_1bd8
  1bd8:34 023a            ldi 23a 

        code_1bdb
  1bdb:36                push 
  1bdc:38 012d          pushi 12d // $12d observeControl
  1bdf:7a               push2 
  1be0:7a               push2 
  1be1:39 04            pushi 4 // $4 x
  1be3:39 06            pushi 6 // $6 loop
  1be5:78               push1 
  1be6:7a               push2 
  1be7:38 00e4          pushi e4 // $e4 setHeading
  1bea:78               push1 
  1beb:38 00b4          pushi b4 // $b4 busy
  1bee:38 008e          pushi 8e // $8e setScript
  1bf1:78               push1 
  1bf2:76               push0 
  1bf3:81 00              lag  
  1bf5:4a 20             send 20 

  1bf7:76               push0 
  1bf8:45 03 00         callb procedure_0003 0 //  


        code_1bfb
  1bfb:3a                toss 
  1bfc:48                 ret 
  1bfd:00                bnot 
    )

)

// 1d20
(instance putPapersScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1c38
  1c38:87 01              lap param1 
  1c3a:65 0a             aTop state 
  1c3c:36                push 
  1c3d:3c                 dup 
  1c3e:35 00              ldi 0 
  1c40:1a                 eq? 
  1c41:30 003b            bnt code_1c7f 
  1c44:76               push0 
  1c45:45 02 00         callb procedure_0002 0 //  

  1c48:39 05            pushi 5 // $5 view
  1c4a:78               push1 
  1c4b:38 0349          pushi 349 // $349 sel_841
  1c4e:38 00a2          pushi a2 // $a2 setLoop
  1c51:78               push1 
  1c52:78               push1 
  1c53:39 1b            pushi 1b // $1b elements
  1c55:45 06 02         callb procedure_0006 2 //  

  1c58:30 0005            bnt code_1c60 
  1c5b:35 08              ldi 8 
  1c5d:32 0002            jmp code_1c62 

        code_1c60
  1c60:35 01              ldi 1 

        code_1c62
  1c62:36                push 
  1c63:38 0120          pushi 120 // $120 setCel
  1c66:78               push1 
  1c67:38 00ff          pushi ff // $ff syncNum
  1c6a:38 00db          pushi db // $db cycleSpeed
  1c6d:78               push1 
  1c6e:39 12            pushi 12 // $12 illegalBits
  1c70:38 0096          pushi 96 // $96 setCycle
  1c73:7a               push2 
  1c74:51 1b            class Beg 
  1c76:36                push 
  1c77:7c            pushSelf 
  1c78:81 00              lag  
  1c7a:4a 20             send 20 

  1c7c:32 0099            jmp code_1d18 

        code_1c7f
  1c7f:3c                 dup 
  1c80:35 01              ldi 1 
  1c82:1a                 eq? 
  1c83:30 0007            bnt code_1c8d 
  1c86:35 03              ldi 3 
  1c88:65 12             aTop seconds 
  1c8a:32 008b            jmp code_1d18 

        code_1c8d
  1c8d:3c                 dup 
  1c8e:35 02              ldi 2 
  1c90:1a                 eq? 
  1c91:30 0030            bnt code_1cc4 
  1c94:39 06            pushi 6 // $6 loop
  1c96:78               push1 
  1c97:78               push1 
  1c98:39 1b            pushi 1b // $1b elements
  1c9a:45 06 02         callb procedure_0006 2 //  

  1c9d:30 0005            bnt code_1ca5 
  1ca0:35 06              ldi 6 
  1ca2:32 0002            jmp code_1ca7 

        code_1ca5
  1ca5:35 00              ldi 0 

        code_1ca7
  1ca7:36                push 
  1ca8:38 0120          pushi 120 // $120 setCel
  1cab:78               push1 
  1cac:38 00ff          pushi ff // $ff syncNum
  1caf:38 00db          pushi db // $db cycleSpeed
  1cb2:78               push1 
  1cb3:39 12            pushi 12 // $12 illegalBits
  1cb5:38 0096          pushi 96 // $96 setCycle
  1cb8:7a               push2 
  1cb9:51 1b            class Beg 
  1cbb:36                push 
  1cbc:7c            pushSelf 
  1cbd:81 00              lag  
  1cbf:4a 1a             send 1a 

  1cc1:32 0054            jmp code_1d18 

        code_1cc4
  1cc4:3c                 dup 
  1cc5:35 03              ldi 3 
  1cc7:1a                 eq? 
  1cc8:30 0007            bnt code_1cd2 
  1ccb:35 3c              ldi 3c 
  1ccd:65 16             aTop ticks 
  1ccf:32 0046            jmp code_1d18 

        code_1cd2
  1cd2:3c                 dup 
  1cd3:35 04              ldi 4 
  1cd5:1a                 eq? 
  1cd6:30 003f            bnt code_1d18 
  1cd9:7a               push2 
  1cda:38 0348          pushi 348 // $348 sel_840
  1cdd:39 20            pushi 20 // $20 state
  1cdf:45 0e 04         callb procedure_000e 4 //  

  1ce2:38 020a          pushi 20a // $20a normalize
  1ce5:78               push1 
  1ce6:78               push1 
  1ce7:39 1b            pushi 1b // $1b elements
  1ce9:45 06 02         callb procedure_0006 2 //  

  1cec:30 0006            bnt code_1cf5 
  1cef:34 034a            ldi 34a 
  1cf2:32 0003            jmp code_1cf8 

        code_1cf5
  1cf5:34 023a            ldi 23a 

        code_1cf8
  1cf8:36                push 
  1cf9:38 012d          pushi 12d // $12d observeControl
  1cfc:7a               push2 
  1cfd:7a               push2 
  1cfe:39 04            pushi 4 // $4 x
  1d00:39 06            pushi 6 // $6 loop
  1d02:78               push1 
  1d03:7a               push2 
  1d04:38 00e4          pushi e4 // $e4 setHeading
  1d07:78               push1 
  1d08:38 00b4          pushi b4 // $b4 busy
  1d0b:38 008e          pushi 8e // $8e setScript
  1d0e:78               push1 
  1d0f:76               push0 
  1d10:81 00              lag  
  1d12:4a 20             send 20 

  1d14:76               push0 
  1d15:45 03 00         callb procedure_0003 0 //  


        code_1d18
  1d18:3a                toss 
  1d19:48                 ret 
    )

)

// 2078
(instance runCopierScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1d54
  1d54:87 01              lap param1 
  1d56:65 0a             aTop state 
  1d58:36                push 
  1d59:3c                 dup 
  1d5a:35 00              ldi 0 
  1d5c:1a                 eq? 
  1d5d:30 002f            bnt code_1d8f 
  1d60:76               push0 
  1d61:45 02 00         callb procedure_0002 0 //  

  1d64:39 05            pushi 5 // $5 view
  1d66:78               push1 
  1d67:38 0349          pushi 349 // $349 sel_841
  1d6a:39 06            pushi 6 // $6 loop
  1d6c:78               push1 
  1d6d:39 03            pushi 3 // $3 y
  1d6f:38 00db          pushi db // $db cycleSpeed
  1d72:78               push1 
  1d73:39 12            pushi 12 // $12 illegalBits
  1d75:39 04            pushi 4 // $4 x
  1d77:78               push1 
  1d78:39 44            pushi 44 // $44 next
  1d7a:39 03            pushi 3 // $3 y
  1d7c:78               push1 
  1d7d:38 008a          pushi 8a // $8a script
  1d80:38 0096          pushi 96 // $96 setCycle
  1d83:7a               push2 
  1d84:51 1a            class End 
  1d86:36                push 
  1d87:7c            pushSelf 
  1d88:81 00              lag  
  1d8a:4a 26             send 26 

  1d8c:32 02e1            jmp code_2070 

        code_1d8f
  1d8f:3c                 dup 
  1d90:35 01              ldi 1 
  1d92:1a                 eq? 
  1d93:30 001b            bnt code_1db1 
  1d96:39 06            pushi 6 // $6 loop
  1d98:78               push1 
  1d99:39 04            pushi 4 // $4 x
  1d9b:38 0120          pushi 120 // $120 setCel
  1d9e:78               push1 
  1d9f:38 00ff          pushi ff // $ff syncNum
  1da2:38 0096          pushi 96 // $96 setCycle
  1da5:7a               push2 
  1da6:51 1b            class Beg 
  1da8:36                push 
  1da9:7c            pushSelf 
  1daa:81 00              lag  
  1dac:4a 14             send 14 

  1dae:32 02bf            jmp code_2070 

        code_1db1
  1db1:3c                 dup 
  1db2:35 02              ldi 2 
  1db4:1a                 eq? 
  1db5:30 0019            bnt code_1dd1 
  1db8:7a               push2 
  1db9:39 0c            pushi c // $c nsRight
  1dbb:38 0097          pushi 97 // $97 setReal
  1dbe:45 0a 04         callb procedure_000a 4 //  

  1dc1:7a               push2 
  1dc2:38 0348          pushi 348 // $348 sel_840
  1dc5:39 21            pushi 21 // $21 font
  1dc7:45 0e 04         callb procedure_000e 4 //  

  1dca:35 7b              ldi 7b 
  1dcc:65 16             aTop ticks 
  1dce:32 029f            jmp code_2070 

        code_1dd1
  1dd1:3c                 dup 
  1dd2:35 03              ldi 3 
  1dd4:1a                 eq? 
  1dd5:30 0014            bnt code_1dec 
  1dd8:39 06            pushi 6 // $6 loop
  1dda:78               push1 
  1ddb:39 04            pushi 4 // $4 x
  1ddd:38 0096          pushi 96 // $96 setCycle
  1de0:7a               push2 
  1de1:51 1a            class End 
  1de3:36                push 
  1de4:7c            pushSelf 
  1de5:81 00              lag  
  1de7:4a 0e             send e 

  1de9:32 0284            jmp code_2070 

        code_1dec
  1dec:3c                 dup 
  1ded:35 04              ldi 4 
  1def:1a                 eq? 
  1df0:30 0028            bnt code_1e1b 
  1df3:39 2a            pushi 2a // $2a play
  1df5:76               push0 
  1df6:38 00a2          pushi a2 // $a2 setLoop
  1df9:78               push1 
  1dfa:39 ff            pushi ff // $ff syncNum
  1dfc:72 0eae          lofsa $0eae // copyMachineSound
  1dff:4a 0a             send a 

  1e01:38 0120          pushi 120 // $120 setCel
  1e04:78               push1 
  1e05:76               push0 
  1e06:38 0096          pushi 96 // $96 setCycle
  1e09:7a               push2 
  1e0a:51 1a            class End 
  1e0c:36                push 
  1e0d:7c            pushSelf 
  1e0e:39 42            pushi 42 // $42 setPri
  1e10:78               push1 
  1e11:39 09            pushi 9 // $9 nsTop
  1e13:72 085a          lofsa $085a // copier
  1e16:4a 14             send 14 

  1e18:32 0255            jmp code_2070 

        code_1e1b
  1e1b:3c                 dup 
  1e1c:35 05              ldi 5 
  1e1e:1a                 eq? 
  1e1f:30 0010            bnt code_1e32 
  1e22:38 011d          pushi 11d // $11d stopUpd
  1e25:76               push0 
  1e26:72 085a          lofsa $085a // copier
  1e29:4a 04             send 4 

  1e2b:35 01              ldi 1 
  1e2d:65 10             aTop cycles 
  1e2f:32 023e            jmp code_2070 

        code_1e32
  1e32:3c                 dup 
  1e33:35 06              ldi 6 
  1e35:1a                 eq? 
  1e36:30 0020            bnt code_1e59 
  1e39:39 6b            pushi 6b // $6b init
  1e3b:76               push0 
  1e3c:38 0120          pushi 120 // $120 setCel
  1e3f:78               push1 
  1e40:76               push0 
  1e41:39 42            pushi 42 // $42 setPri
  1e43:78               push1 
  1e44:39 09            pushi 9 // $9 nsTop
  1e46:38 0096          pushi 96 // $96 setCycle
  1e49:39 03            pushi 3 // $3 y
  1e4b:51 59            class ForwardCounter 
  1e4d:36                push 
  1e4e:39 05            pushi 5 // $5 view
  1e50:7c            pushSelf 
  1e51:72 08c4          lofsa $08c4 // paper
  1e54:4a 1a             send 1a 

  1e56:32 0217            jmp code_2070 

        code_1e59
  1e59:3c                 dup 
  1e5a:35 07              ldi 7 
  1e5c:1a                 eq? 
  1e5d:30 0011            bnt code_1e71 
  1e60:38 009c          pushi 9c // $9c stop
  1e63:76               push0 
  1e64:72 0eae          lofsa $0eae // copyMachineSound
  1e67:4a 04             send 4 

  1e69:34 00c8            ldi c8 
  1e6c:65 16             aTop ticks 
  1e6e:32 01ff            jmp code_2070 

        code_1e71
  1e71:3c                 dup 
  1e72:35 08              ldi 8 
  1e74:1a                 eq? 
  1e75:30 0013            bnt code_1e8b 
  1e78:39 03            pushi 3 // $3 y
  1e7a:89 00              lsg  
  1e7c:38 0348          pushi 348 // $348 sel_840
  1e7f:39 22            pushi 22 // $22 type
  1e81:45 12 06         callb procedure_0012 6 //  

  1e84:35 03              ldi 3 
  1e86:65 12             aTop seconds 
  1e88:32 01e5            jmp code_2070 

        code_1e8b
  1e8b:3c                 dup 
  1e8c:35 09              ldi 9 
  1e8e:1a                 eq? 
  1e8f:30 001b            bnt code_1ead 
  1e92:39 06            pushi 6 // $6 loop
  1e94:78               push1 
  1e95:39 03            pushi 3 // $3 y
  1e97:38 0120          pushi 120 // $120 setCel
  1e9a:78               push1 
  1e9b:38 00ff          pushi ff // $ff syncNum
  1e9e:38 0096          pushi 96 // $96 setCycle
  1ea1:7a               push2 
  1ea2:51 1b            class Beg 
  1ea4:36                push 
  1ea5:7c            pushSelf 
  1ea6:81 00              lag  
  1ea8:4a 14             send 14 

  1eaa:32 01c3            jmp code_2070 

        code_1ead
  1ead:3c                 dup 
  1eae:35 0a              ldi a 
  1eb0:1a                 eq? 
  1eb1:30 0025            bnt code_1ed9 
  1eb4:39 6c            pushi 6c // $6c dispose
  1eb6:76               push0 
  1eb7:72 08c4          lofsa $08c4 // paper
  1eba:4a 04             send 4 

  1ebc:38 0120          pushi 120 // $120 setCel
  1ebf:78               push1 
  1ec0:76               push0 
  1ec1:72 085a          lofsa $085a // copier
  1ec4:4a 06             send 6 

  1ec6:39 03            pushi 3 // $3 y
  1ec8:89 00              lsg  
  1eca:38 0348          pushi 348 // $348 sel_840
  1ecd:39 23            pushi 23 // $23 window
  1ecf:45 12 06         callb procedure_0012 6 //  

  1ed2:35 03              ldi 3 
  1ed4:65 12             aTop seconds 
  1ed6:32 0197            jmp code_2070 

        code_1ed9
  1ed9:3c                 dup 
  1eda:35 0b              ldi b 
  1edc:1a                 eq? 
  1edd:30 0019            bnt code_1ef9 
  1ee0:39 06            pushi 6 // $6 loop
  1ee2:78               push1 
  1ee3:39 04            pushi 4 // $4 x
  1ee5:38 0120          pushi 120 // $120 setCel
  1ee8:78               push1 
  1ee9:76               push0 
  1eea:38 0096          pushi 96 // $96 setCycle
  1eed:7a               push2 
  1eee:51 1a            class End 
  1ef0:36                push 
  1ef1:7c            pushSelf 
  1ef2:81 00              lag  
  1ef4:4a 14             send 14 

  1ef6:32 0177            jmp code_2070 

        code_1ef9
  1ef9:3c                 dup 
  1efa:35 0c              ldi c 
  1efc:1a                 eq? 
  1efd:30 0013            bnt code_1f13 
  1f00:39 03            pushi 3 // $3 y
  1f02:89 00              lsg  
  1f04:38 0348          pushi 348 // $348 sel_840
  1f07:39 24            pushi 24 // $24 cursor
  1f09:45 12 06         callb procedure_0012 6 //  

  1f0c:35 7b              ldi 7b 
  1f0e:65 16             aTop ticks 
  1f10:32 015d            jmp code_2070 

        code_1f13
  1f13:3c                 dup 
  1f14:35 0d              ldi d 
  1f16:1a                 eq? 
  1f17:30 0018            bnt code_1f32 
  1f1a:39 05            pushi 5 // $5 view
  1f1c:38 0348          pushi 348 // $348 sel_840
  1f1f:39 25            pushi 25 // $25 max
  1f21:39 43            pushi 43 // $43 at
  1f23:39 ff            pushi ff // $ff syncNum
  1f25:38 00b9          pushi b9 // $b9 bottom
  1f28:45 0e 0a         callb procedure_000e a //  

  1f2b:35 3c              ldi 3c 
  1f2d:65 16             aTop ticks 
  1f2f:32 013e            jmp code_2070 

        code_1f32
  1f32:3c                 dup 
  1f33:35 0e              ldi e 
  1f35:1a                 eq? 
  1f36:30 001b            bnt code_1f54 
  1f39:39 06            pushi 6 // $6 loop
  1f3b:78               push1 
  1f3c:39 04            pushi 4 // $4 x
  1f3e:38 0120          pushi 120 // $120 setCel
  1f41:78               push1 
  1f42:38 00ff          pushi ff // $ff syncNum
  1f45:38 0096          pushi 96 // $96 setCycle
  1f48:7a               push2 
  1f49:51 1b            class Beg 
  1f4b:36                push 
  1f4c:7c            pushSelf 
  1f4d:81 00              lag  
  1f4f:4a 14             send 14 

  1f51:32 011c            jmp code_2070 

        code_1f54
  1f54:3c                 dup 
  1f55:35 0f              ldi f 
  1f57:1a                 eq? 
  1f58:30 0028            bnt code_1f83 
  1f5b:38 020a          pushi 20a // $20a normalize
  1f5e:78               push1 
  1f5f:38 023a          pushi 23a // $23a sel_570
  1f62:39 04            pushi 4 // $4 x
  1f64:78               push1 
  1f65:39 45            pushi 45 // $45 done
  1f67:39 03            pushi 3 // $3 y
  1f69:78               push1 
  1f6a:38 008c          pushi 8c // $8c changeState
  1f6d:39 06            pushi 6 // $6 loop
  1f6f:78               push1 
  1f70:78               push1 
  1f71:38 00e4          pushi e4 // $e4 setHeading
  1f74:78               push1 
  1f75:38 010e          pushi 10e // $10e description
  1f78:81 00              lag  
  1f7a:4a 1e             send 1e 

  1f7c:35 3c              ldi 3c 
  1f7e:65 16             aTop ticks 
  1f80:32 00ed            jmp code_2070 

        code_1f83
  1f83:3c                 dup 
  1f84:35 10              ldi 10 
  1f86:1a                 eq? 
  1f87:30 0036            bnt code_1fc0 
  1f8a:39 2a            pushi 2a // $2a play
  1f8c:76               push0 
  1f8d:72 0ee4          lofsa $0ee4 // copyExplodesSound
  1f90:4a 04             send 4 

  1f92:39 05            pushi 5 // $5 view
  1f94:78               push1 
  1f95:38 0348          pushi 348 // $348 sel_840
  1f98:38 011f          pushi 11f // $11f startUpd
  1f9b:76               push0 
  1f9c:38 00db          pushi db // $db cycleSpeed
  1f9f:78               push1 
  1fa0:39 0c            pushi c // $c nsRight
  1fa2:38 0120          pushi 120 // $120 setCel
  1fa5:78               push1 
  1fa6:76               push0 
  1fa7:38 00a2          pushi a2 // $a2 setLoop
  1faa:78               push1 
  1fab:39 04            pushi 4 // $4 x
  1fad:38 0096          pushi 96 // $96 setCycle
  1fb0:39 04            pushi 4 // $4 x
  1fb2:51 19            class CT 
  1fb4:36                push 
  1fb5:78               push1 
  1fb6:78               push1 
  1fb7:7c            pushSelf 
  1fb8:72 085a          lofsa $085a // copier
  1fbb:4a 28             send 28 

  1fbd:32 00b0            jmp code_2070 

        code_1fc0
  1fc0:3c                 dup 
  1fc1:35 11              ldi 11 
  1fc3:1a                 eq? 
  1fc4:30 003c            bnt code_2003 
  1fc7:38 020a          pushi 20a // $20a normalize
  1fca:78               push1 
  1fcb:38 034a          pushi 34a // $34a sel_842
  1fce:38 012d          pushi 12d // $12d observeControl
  1fd1:7a               push2 
  1fd2:7a               push2 
  1fd3:39 04            pushi 4 // $4 x
  1fd5:39 06            pushi 6 // $6 loop
  1fd7:78               push1 
  1fd8:78               push1 
  1fd9:38 00e4          pushi e4 // $e4 setHeading
  1fdc:78               push1 
  1fdd:38 010e          pushi 10e // $10e description
  1fe0:81 00              lag  
  1fe2:4a 1a             send 1a 

  1fe4:39 05            pushi 5 // $5 view
  1fe6:78               push1 
  1fe7:38 0348          pushi 348 // $348 sel_840
  1fea:39 42            pushi 42 // $42 setPri
  1fec:78               push1 
  1fed:39 0b            pushi b // $b nsBottom
  1fef:38 0096          pushi 96 // $96 setCycle
  1ff2:39 04            pushi 4 // $4 x
  1ff4:51 19            class CT 
  1ff6:36                push 
  1ff7:39 04            pushi 4 // $4 x
  1ff9:78               push1 
  1ffa:7c            pushSelf 
  1ffb:72 085a          lofsa $085a // copier
  1ffe:4a 18             send 18 

  2000:32 006d            jmp code_2070 

        code_2003
  2003:3c                 dup 
  2004:35 12              ldi 12 
  2006:1a                 eq? 
  2007:30 001b            bnt code_2025 
  200a:39 05            pushi 5 // $5 view
  200c:78               push1 
  200d:38 0348          pushi 348 // $348 sel_840
  2010:39 42            pushi 42 // $42 setPri
  2012:78               push1 
  2013:39 09            pushi 9 // $9 nsTop
  2015:38 0096          pushi 96 // $96 setCycle
  2018:7a               push2 
  2019:51 1a            class End 
  201b:36                push 
  201c:7c            pushSelf 
  201d:72 085a          lofsa $085a // copier
  2020:4a 14             send 14 

  2022:32 004b            jmp code_2070 

        code_2025
  2025:3c                 dup 
  2026:35 13              ldi 13 
  2028:1a                 eq? 
  2029:30 0007            bnt code_2033 
  202c:35 03              ldi 3 
  202e:65 12             aTop seconds 
  2030:32 003d            jmp code_2070 

        code_2033
  2033:3c                 dup 
  2034:35 14              ldi 14 
  2036:1a                 eq? 
  2037:30 0036            bnt code_2070 
  203a:39 03            pushi 3 // $3 y
  203c:89 00              lsg  
  203e:38 0348          pushi 348 // $348 sel_840
  2041:39 26            pushi 26 // $26 mark
  2043:45 12 06         callb procedure_0012 6 //  

  2046:38 011d          pushi 11d // $11d stopUpd
  2049:76               push0 
  204a:72 085a          lofsa $085a // copier
  204d:4a 04             send 4 

  204f:78               push1 
  2050:39 1b            pushi 1b // $1b elements
  2052:45 07 02         callb procedure_0007 2 //  

  2055:38 0147          pushi 147 // $147 get
  2058:78               push1 
  2059:39 0b            pushi b // $b nsBottom
  205b:38 010b          pushi 10b // $10b actions
  205e:78               push1 
  205f:72 20f6          lofsa $20f6 // ActionsKRAP
  2062:36                push 
  2063:38 008e          pushi 8e // $8e setScript
  2066:78               push1 
  2067:76               push0 
  2068:81 00              lag  
  206a:4a 12             send 12 

  206c:76               push0 
  206d:45 03 00         callb procedure_0003 0 //  


        code_2070
  2070:3a                toss 
  2071:48                 ret 
    )

)

// 20f0
(instance ActionsKRAP of Actions
    (properties
    )
    (method (doit) // method_20ac
  20ac:35 00              ldi 0 
  20ae:48                 ret 
    )

    (method (doVerb) // method_20af
  20af:8f 01              lsp param1 
  20b1:3c                 dup 
  20b2:35 02              ldi 2 
  20b4:1a                 eq? 
  20b5:30 002d            bnt code_20e5 
  20b8:39 05            pushi 5 // $5 view
  20ba:76               push0 
  20bb:81 00              lag  
  20bd:4a 04             send 4 

  20bf:36                push 
  20c0:34 034a            ldi 34a 
  20c3:1a                 eq? 
  20c4:30 000f            bnt code_20d6 
  20c7:7a               push2 
  20c8:38 0348          pushi 348 // $348 sel_840
  20cb:39 27            pushi 27 // $27 who
  20cd:45 0e 04         callb procedure_000e 4 //  

  20d0:35 01              ldi 1 
  20d2:48                 ret 
  20d3:32 0012            jmp code_20e8 

        code_20d6
  20d6:7a               push2 
  20d7:38 0348          pushi 348 // $348 sel_840
  20da:39 28            pushi 28 // $28 message
  20dc:45 0e 04         callb procedure_000e 4 //  

  20df:35 01              ldi 1 
  20e1:48                 ret 
  20e2:32 0003            jmp code_20e8 

        code_20e5
  20e5:35 00              ldi 0 
  20e7:48                 ret 

        code_20e8
  20e8:3a                toss 
  20e9:48                 ret 
    )

)



