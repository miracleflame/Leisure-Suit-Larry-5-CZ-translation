(script 890)

(string
    string_1e74 "You are inside K-RAP radio's Control Room B. For such a large room, it certainly looked smaller from the outside. The walls are filled with a myriad of recording equipment, electronic gear, mixers, microphones, recording tape, etc. etc."
    string_1f61 "rm890"
    string_1f67 "sCartoon"
    string_1f70 "the giant speaker"
    string_1f82 "You could swear these are genuine Altec \"Voice of the Theatre\" speakers. You haven't seen these babies in years!"
    string_1ff3 "fElectronics1"
    string_2001 "the electronic equipment"
    string_201a "Everywhere you look, you see buttons, switches, lights, reels of tape, and tape drives."
    string_2072 "fElectronics2"
    string_2080 "fElectronics3"
    string_208e "the left large-hub reel-to-reel recorder"
    string_20b7 "fElectronics4"
    string_20c5 "the right large-hub reel-to-reel recorder"
    string_20ef "fElectronics5"
    string_20fd "Everywhere you look, you see buttons, switches, lights, reels of tape, and tape drives. Unfortunately, they are much too high for you to reach."
    string_218d "fElectronics6"
    string_219b "fElectronics7"
    string_21a9 "the monitor speaker"
    string_21bd "speaker1"
    string_21c6 "speaker2"
    string_21cf "speaker3"
    string_21d8 "the equipment rack"
    string_21eb "This shelf contains a lot of electronic equipment, most of it old, plus a shelf filled with blank reel-to-reel tapes."
    string_2261 "shelf"
    string_2267 "the shelf of tapes"
    string_227a "Why, here's what you need! A shelf filled with blank, reel-to-reel recording tapes."
    string_22ce "tapeShelf"
    string_22d8 "the microphone mixer"
    string_22ed "mixer"
    string_22f3 "the microphone"
    string_2302 "A professional-quality, high-fidelity, studio ribbon microphone hangs from a boom over the studio console."
    string_236d "microphone"
    string_2378 "the reel-to-reel tape recorder"
    string_2397 "recorder"
    string_23a0 "the tape"
    string_23a9 "A large Studer console recorder is all warmed up and ready to record--except there's no tape upon which to record!"
    string_241c "tape"
    string_2421 "tapeHole"
    string_242a "P. C. Hammer"
    string_2437 "P. C. Hammer is working in the next Control Room."
    string_2469 "hammer"
    string_2470 "the glass window"
    string_2481 "A heavy, soundproof, plate-glass window separates you from the outside--and your freedom!"
    string_24db "glass"
    string_24e1 "lights"
    string_24e8 "the recording sign"
    string_24fb "This sign is illuminated whenever anyone is recording inside control room A."
    string_2548 "recSignA"
    string_2551 "useMikeSound"
    string_255e "breakGlassSound"
    string_256e "useMikeScript"
    string_257c "GetTape"
    string_2584 "turnRecorderOn"
    string_2593 "turnRecorderOff"
    string_25a3 "rewindTape"
    string_25ae "getRecordedTape"
    string_25be "useMixer"
    string_25c7 "sHearingScrew"
    string_25d5 "mountTapeScript"
    string_25e5 "the Control Room A door"
    string_25fd "Be careful, Patti! Inside that door stands the man you've come here to investigate: P. C. Hammer!"
    string_265f "doorA"
    string_2665 "the Control Room B door"
    string_267d "A sign on the door reads \"Control Room B.\" It is currently unoccupied."
    string_26c4 "doorB"
    string_26ca "Through the control room window, you see P. C. Hammer mixing his \"live\" radio broadcast for tomorrow morning's drive time show."
    string_274a "the microphone stand"
    string_275f "A large boom microphone stand sits just outside the door to Control Room B."
    string_27ab "mikestand"
    string_27b5 "This sign is illuminated whenever anyone is recording inside this control room."
    string_2805 "recSign"
    string_280d "ActionsKRAP"
    string_2819 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0000
    local6 = $0000
    local7 = $0000
    local8 = $0000
    local9 = $0000
    local10 = $0000
)

// 02cc
(instance publicrm890 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $1e74
        picture $37a
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $370
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 07            pushi 7 // $7 cel
  0010:38 0080          pushi 80 // $80 indexOf
  0013:38 0368          pushi 368 // $368 sel_872
  0016:38 0370          pushi 370 // $370 sel_880
  0019:38 0372          pushi 372 // $372 sel_882
  001c:38 0373          pushi 373 // $373 sel_883
  001f:38 037a          pushi 37a // $37a sel_890
  0022:38 037b          pushi 37b // $37b sel_891
  0025:46 03be 0000 0e  calle 3be procedure_0000 e //  

  002b:39 06            pushi 6 // $6 loop
  002d:38 0084          pushi 84 // $84 cycles
  0030:38 037b          pushi 37b // $37b sel_891
  0033:38 0092          pushi 92 // $92 cycleCnt
  0036:38 0320          pushi 320 // $320 sel_800
  0039:38 0321          pushi 321 // $321 sel_801
  003c:38 0322          pushi 322 // $322 sel_802
  003f:46 03be 0000 0c  calle 3be procedure_0000 c //  

  0045:7a               push2 
  0046:38 0082          pushi 82 // $82 start
  0049:38 03c9          pushi 3c9 // $3c9 sel_969
  004c:46 03be 0000 04  calle 3be procedure_0000 4 //  

  0052:76               push0 
  0053:45 03 00         callb procedure_0003 0 //  

  0056:78               push1 
  0057:76               push0 
  0058:45 0d 02         callb procedure_000d 2 //  

  005b:39 6b            pushi 6b // $6b init
  005d:76               push0 
  005e:38 010b          pushi 10b // $10b actions
  0061:78               push1 
  0062:72 1e5c          lofsa $1e5c // ActionsKRAP
  0065:36                push 
  0066:38 020a          pushi 20a // $20a normalize
  0069:78               push1 
  006a:38 0368          pushi 368 // $368 sel_872
  006d:39 04            pushi 4 // $4 x
  006f:78               push1 
  0070:39 46            pushi 46 // $46 width
  0072:39 03            pushi 3 // $3 y
  0074:78               push1 
  0075:38 00b9          pushi b9 // $b9 bottom
  0078:81 00              lag  
  007a:4a 1c             send 1c 

  007c:39 6b            pushi 6b // $6b init
  007e:76               push0 
  007f:57 72 04         super LLRoom 4 

  0082:39 6b            pushi 6b // $6b init
  0084:76               push0 
  0085:38 0119          pushi 119 // $119 approachVerbs
  0088:39 03            pushi 3 // $3 y
  008a:3c                 dup 
  008b:39 04            pushi 4 // $4 x
  008d:7a               push2 
  008e:72 0628          lofsa $0628 // fElectronics1
  0091:4a 0e             send e 

  0093:39 6b            pushi 6b // $6b init
  0095:76               push0 
  0096:38 0119          pushi 119 // $119 approachVerbs
  0099:39 03            pushi 3 // $3 y
  009b:3c                 dup 
  009c:39 04            pushi 4 // $4 x
  009e:7a               push2 
  009f:72 0664          lofsa $0664 // fElectronics2
  00a2:4a 0e             send e 

  00a4:39 6b            pushi 6b // $6b init
  00a6:76               push0 
  00a7:38 0119          pushi 119 // $119 approachVerbs
  00aa:39 03            pushi 3 // $3 y
  00ac:3c                 dup 
  00ad:39 04            pushi 4 // $4 x
  00af:7a               push2 
  00b0:72 06a0          lofsa $06a0 // fElectronics3
  00b3:4a 0e             send e 

  00b5:39 6b            pushi 6b // $6b init
  00b7:76               push0 
  00b8:38 0119          pushi 119 // $119 approachVerbs
  00bb:39 03            pushi 3 // $3 y
  00bd:3c                 dup 
  00be:39 04            pushi 4 // $4 x
  00c0:7a               push2 
  00c1:72 0744          lofsa $0744 // fElectronics4
  00c4:4a 0e             send e 

  00c6:39 6b            pushi 6b // $6b init
  00c8:76               push0 
  00c9:38 0119          pushi 119 // $119 approachVerbs
  00cc:39 03            pushi 3 // $3 y
  00ce:3c                 dup 
  00cf:39 04            pushi 4 // $4 x
  00d1:7a               push2 
  00d2:72 0798          lofsa $0798 // fElectronics5
  00d5:4a 0e             send e 

  00d7:39 6b            pushi 6b // $6b init
  00d9:76               push0 
  00da:72 07d8          lofsa $07d8 // fElectronics6
  00dd:4a 04             send 4 

  00df:39 6b            pushi 6b // $6b init
  00e1:76               push0 
  00e2:72 0814          lofsa $0814 // fElectronics7
  00e5:4a 04             send 4 

  00e7:39 6b            pushi 6b // $6b init
  00e9:76               push0 
  00ea:72 0850          lofsa $0850 // speaker1
  00ed:4a 04             send 4 

  00ef:39 6b            pushi 6b // $6b init
  00f1:76               push0 
  00f2:72 088c          lofsa $088c // speaker2
  00f5:4a 04             send 4 

  00f7:39 6b            pushi 6b // $6b init
  00f9:76               push0 
  00fa:72 08c8          lofsa $08c8 // speaker3
  00fd:4a 04             send 4 

  00ff:39 6b            pushi 6b // $6b init
  0101:76               push0 
  0102:38 0119          pushi 119 // $119 approachVerbs
  0105:7a               push2 
  0106:39 03            pushi 3 // $3 y
  0108:7a               push2 
  0109:72 098e          lofsa $098e // tapeShelf
  010c:4a 0c             send c 

  010e:39 6b            pushi 6b // $6b init
  0110:76               push0 
  0111:38 0119          pushi 119 // $119 approachVerbs
  0114:7a               push2 
  0115:39 03            pushi 3 // $3 y
  0117:7a               push2 
  0118:72 0904          lofsa $0904 // shelf
  011b:4a 0c             send c 

  011d:39 6b            pushi 6b // $6b init
  011f:76               push0 
  0120:38 0119          pushi 119 // $119 approachVerbs
  0123:39 03            pushi 3 // $3 y
  0125:3c                 dup 
  0126:39 04            pushi 4 // $4 x
  0128:7a               push2 
  0129:72 0cd2          lofsa $0cd2 // recorder
  012c:4a 0e             send e 

  012e:39 6b            pushi 6b // $6b init
  0130:76               push0 
  0131:38 0119          pushi 119 // $119 approachVerbs
  0134:39 03            pushi 3 // $3 y
  0136:3c                 dup 
  0137:39 04            pushi 4 // $4 x
  0139:7a               push2 
  013a:72 0d24          lofsa $0d24 // tape
  013d:4a 0e             send e 

  013f:38 009b          pushi 9b // $9b owner
  0142:76               push0 
  0143:39 43            pushi 43 // $43 at
  0145:78               push1 
  0146:39 0c            pushi c // $c nsRight
  0148:51 40            class Inv 
  014a:4a 06             send 6 

  014c:4a 04             send 4 

  014e:36                push 
  014f:35 03              ldi 3 
  0151:1a                 eq? 
  0152:30 001c            bnt code_0171 
  0155:38 00a2          pushi a2 // $a2 setLoop
  0158:78               push1 
  0159:76               push0 
  015a:39 04            pushi 4 // $4 x
  015c:78               push1 
  015d:39 23            pushi 23 // $23 window
  015f:39 03            pushi 3 // $3 y
  0161:78               push1 
  0162:38 008e          pushi 8e // $8e setScript
  0165:38 011d          pushi 11d // $11d stopUpd
  0168:76               push0 
  0169:72 0d24          lofsa $0d24 // tape
  016c:4a 16             send 16 

  016e:32 0009            jmp code_017a 

        code_0171
  0171:38 011d          pushi 11d // $11d stopUpd
  0174:76               push0 
  0175:72 0d24          lofsa $0d24 // tape
  0178:4a 04             send 4 


        code_017a
  017a:39 6b            pushi 6b // $6b init
  017c:76               push0 
  017d:38 0119          pushi 119 // $119 approachVerbs
  0180:7a               push2 
  0181:39 03            pushi 3 // $3 y
  0183:7a               push2 
  0184:72 0aaa          lofsa $0aaa // mixer
  0187:4a 0c             send c 

  0189:39 6b            pushi 6b // $6b init
  018b:76               push0 
  018c:38 0119          pushi 119 // $119 approachVerbs
  018f:39 03            pushi 3 // $3 y
  0191:3c                 dup 
  0192:39 05            pushi 5 // $5 view
  0194:7a               push2 
  0195:72 0b4a          lofsa $0b4a // microphone
  0198:4a 0e             send e 

  019a:39 6b            pushi 6b // $6b init
  019c:76               push0 
  019d:38 011d          pushi 11d // $11d stopUpd
  01a0:76               push0 
  01a1:72 0e6a          lofsa $0e6a // glass
  01a4:4a 08             send 8 

  01a6:39 6b            pushi 6b // $6b init
  01a8:76               push0 
  01a9:38 0119          pushi 119 // $119 approachVerbs
  01ac:7a               push2 
  01ad:39 03            pushi 3 // $3 y
  01af:7a               push2 
  01b0:38 011d          pushi 11d // $11d stopUpd
  01b3:76               push0 
  01b4:72 0f18          lofsa $0f18 // lights
  01b7:4a 10             send 10 

  01b9:78               push1 
  01ba:38 009a          pushi 9a // $9a prevSignal
  01bd:45 06 02         callb procedure_0006 2 //  

  01c0:30 0010            bnt code_01d3 
  01c3:38 0096          pushi 96 // $96 setCycle
  01c6:78               push1 
  01c7:51 17            class Fwd 
  01c9:36                push 
  01ca:38 011f          pushi 11f // $11f startUpd
  01cd:76               push0 
  01ce:72 0f18          lofsa $0f18 // lights
  01d1:4a 0a             send a 


        code_01d3
  01d3:39 3c            pushi 3c // $3c doit
  01d5:76               push0 
  01d6:81 0a              lag  
  01d8:4a 04             send 4 

  01da:39 6b            pushi 6b // $6b init
  01dc:76               push0 
  01dd:38 0096          pushi 96 // $96 setCycle
  01e0:78               push1 
  01e1:51 17            class Fwd 
  01e3:36                push 
  01e4:72 0f82          lofsa $0f82 // recSignA
  01e7:4a 0a             send a 

  01e9:39 6b            pushi 6b // $6b init
  01eb:76               push0 
  01ec:38 0096          pushi 96 // $96 setCycle
  01ef:78               push1 
  01f0:51 5e            class RandCycle 
  01f2:36                push 
  01f3:38 00db          pushi db // $db cycleSpeed
  01f6:78               push1 
  01f7:39 0c            pushi c // $c nsRight
  01f9:72 0dec          lofsa $0dec // hammer
  01fc:4a 10             send 10 

  01fe:38 0176          pushi 176 // $176 addObstacle
  0201:78               push1 
  0202:39 22            pushi 22 // $22 type
  0204:78               push1 
  0205:7a               push2 
  0206:39 6b            pushi 6b // $6b init
  0208:39 1c            pushi 1c // $1c color
  020a:76               push0 
  020b:76               push0 
  020c:38 013f          pushi 13f // $13f inputLineAddr
  020f:76               push0 
  0210:38 013f          pushi 13f // $13f inputLineAddr
  0213:38 00bd          pushi bd // $bd maskView
  0216:39 62            pushi 62 // $62 pri
  0218:38 00bd          pushi bd // $bd maskView
  021b:39 67            pushi 67 // $67 quitGame
  021d:38 00bb          pushi bb // $bb setCursor
  0220:38 00eb          pushi eb // $eb incClientPos
  0223:38 00bb          pushi bb // $bb setCursor
  0226:38 0121          pushi 121 // $121 ignoreActors
  0229:38 00a6          pushi a6 // $a6 playBed
  022c:38 011c          pushi 11c // $11c posn
  022f:38 009a          pushi 9a // $9a prevSignal
  0232:38 0109          pushi 109 // $109 theVerb
  0235:38 00a1          pushi a1 // $a1 setVol
  0238:38 00bd          pushi bd // $bd maskView
  023b:38 0085          pushi 85 // $85 seconds
  023e:39 70            pushi 70 // $70 isMemberOf
  0240:38 0085          pushi 85 // $85 seconds
  0243:39 11            pushi 11 // $11 signal
  0245:38 00b0          pushi b0 // $b0 cycle
  0248:39 1d            pushi 1d // $1d back
  024a:38 00bd          pushi bd // $bd maskView
  024d:76               push0 
  024e:38 00bd          pushi bd // $bd maskView
  0251:39 72            pushi 72 // $72 yourself
  0253:76               push0 
  0254:39 6a            pushi 6a // $6a new
  0256:76               push0 
  0257:51 23            class Polygon 
  0259:4a 04             send 4 

  025b:4a 46             send 46 

  025d:36                push 
  025e:54 06             self 6 

  0260:48                 ret 
    )

    (method (doit) // method_0261
  0261:63 08             pToa script 
  0263:30 0008            bnt code_026e 
  0266:39 3c            pushi 3c // $3c doit
  0268:76               push0 
  0269:4a 04             send 4 

  026b:32 0045            jmp code_02b3 

        code_026e
  026e:38 0146          pushi 146 // $146 edgeHit
  0271:76               push0 
  0272:81 00              lag  
  0274:4a 04             send 4 

  0276:30 0028            bnt code_02a1 
  0279:83 03              lal local3 
  027b:30 0015            bnt code_0293 
  027e:83 05              lal local5 
  0280:18                 not 
  0281:30 002f            bnt code_02b3 
  0284:7a               push2 
  0285:38 037a          pushi 37a // $37a sel_890
  0288:76               push0 
  0289:45 0e 04         callb procedure_000e 4 //  

  028c:35 01              ldi 1 
  028e:a3 05              sal local5 
  0290:32 0020            jmp code_02b3 

        code_0293
  0293:38 0179          pushi 179 // $179 newRoom
  0296:78               push1 
  0297:38 0370          pushi 370 // $370 sel_880
  029a:81 02              lag  
  029c:4a 06             send 6 

  029e:32 0012            jmp code_02b3 

        code_02a1
  02a1:83 05              lal local5 
  02a3:30 0007            bnt code_02ad 
  02a6:35 00              ldi 0 
  02a8:a3 05              sal local5 
  02aa:32 0006            jmp code_02b3 

        code_02ad
  02ad:39 3c            pushi 3c // $3c doit
  02af:76               push0 
  02b0:57 72 04         super LLRoom 4 


        code_02b3
  02b3:48                 ret 
    )

    (method (dispose) // method_02b4
  02b4:7a               push2 
  02b5:76               push0 
  02b6:38 03c9          pushi 3c9 // $3c9 sel_969
  02b9:46 03be 0000 04  calle 3be procedure_0000 4 //  

  02bf:39 6c            pushi 6c // $6c dispose
  02c1:76               push0 
  02c2:57 72 04         super LLRoom 4 

  02c5:48                 ret 
    )

)

// 05ec
(instance sCartoon of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0314
  0314:87 01              lap param1 
  0316:65 0a             aTop state 
  0318:36                push 
  0319:3c                 dup 
  031a:35 00              ldi 0 
  031c:1a                 eq? 
  031d:30 00db            bnt code_03fb 
  0320:39 69            pushi 69 // $69 hide
  0322:76               push0 
  0323:81 00              lag  
  0325:4a 04             send 4 

  0327:39 69            pushi 69 // $69 hide
  0329:76               push0 
  032a:72 0d24          lofsa $0d24 // tape
  032d:4a 04             send 4 

  032f:39 69            pushi 69 // $69 hide
  0331:76               push0 
  0332:72 0e6a          lofsa $0e6a // glass
  0335:4a 04             send 4 

  0337:39 69            pushi 69 // $69 hide
  0339:76               push0 
  033a:72 0f18          lofsa $0f18 // lights
  033d:4a 04             send 4 

  033f:39 6c            pushi 6c // $6c dispose
  0341:76               push0 
  0342:72 0f82          lofsa $0f82 // recSignA
  0345:4a 04             send 4 

  0347:39 6c            pushi 6c // $6c dispose
  0349:76               push0 
  034a:38 00ea          pushi ea // $ea obstacles
  034d:76               push0 
  034e:81 02              lag  
  0350:4a 04             send 4 

  0352:4a 04             send 4 

  0354:38 00c9          pushi c9 // $c9 disable
  0357:76               push0 
  0358:81 45              lag  
  035a:4a 04             send 4 

  035c:38 018c          pushi 18c // $18c drawPic
  035f:78               push1 
  0360:38 0370          pushi 370 // $370 sel_880
  0363:38 0183          pushi 183 // $183 picture
  0366:78               push1 
  0367:38 0370          pushi 370 // $370 sel_880
  036a:38 0180          pushi 180 // $180 curPic
  036d:78               push1 
  036e:38 0370          pushi 370 // $370 sel_880
  0371:81 02              lag  
  0373:4a 12             send 12 

  0375:38 00a7          pushi a7 // $a7 enable
  0378:76               push0 
  0379:81 45              lag  
  037b:4a 04             send 4 

  037d:39 6b            pushi 6b // $6b init
  037f:76               push0 
  0380:38 0150          pushi 150 // $150 close
  0383:76               push0 
  0384:72 1bb8          lofsa $1bb8 // doorA
  0387:4a 08             send 8 

  0389:39 6b            pushi 6b // $6b init
  038b:76               push0 
  038c:72 1c3e          lofsa $1c3e // doorB
  038f:4a 04             send 4 

  0391:39 6b            pushi 6b // $6b init
  0393:76               push0 
  0394:38 011d          pushi 11d // $11d stopUpd
  0397:76               push0 
  0398:72 1d3e          lofsa $1d3e // mikestand
  039b:4a 08             send 8 

  039d:39 6b            pushi 6b // $6b init
  039f:76               push0 
  03a0:38 0096          pushi 96 // $96 setCycle
  03a3:78               push1 
  03a4:51 17            class Fwd 
  03a6:36                push 
  03a7:72 1dbc          lofsa $1dbc // recSign
  03aa:4a 0a             send a 

  03ac:39 3c            pushi 3c // $3c doit
  03ae:76               push0 
  03af:81 0a              lag  
  03b1:4a 04             send 4 

  03b3:38 00a2          pushi a2 // $a2 setLoop
  03b6:78               push1 
  03b7:39 ff            pushi ff // $ff syncNum
  03b9:39 05            pushi 5 // $5 view
  03bb:78               push1 
  03bc:38 0372          pushi 372 // $372 sel_882
  03bf:39 04            pushi 4 // $4 x
  03c1:78               push1 
  03c2:39 41            pushi 41 // $41 replay
  03c4:39 03            pushi 3 // $3 y
  03c6:78               push1 
  03c7:39 56            pushi 56 // $56 parseLang
  03c9:39 36            pushi 36 // $36 xStep
  03cb:78               push1 
  03cc:39 08            pushi 8 // $8 underBits
  03ce:39 37            pushi 37 // $37 yStep
  03d0:78               push1 
  03d1:39 04            pushi 4 // $4 x
  03d3:38 00db          pushi db // $db cycleSpeed
  03d6:78               push1 
  03d7:39 0c            pushi c // $c nsRight
  03d9:39 38            pushi 38 // $38 moveSpeed
  03db:78               push1 
  03dc:39 0c            pushi c // $c nsRight
  03de:38 0096          pushi 96 // $96 setCycle
  03e1:78               push1 
  03e2:51 18            class Walk 
  03e4:36                push 
  03e5:38 011b          pushi 11b // $11b setMotion
  03e8:39 04            pushi 4 // $4 x
  03ea:51 1e            class MoveTo 
  03ec:36                push 
  03ed:38 009c          pushi 9c // $9c stop
  03f0:39 7b            pushi 7b // $7b last
  03f2:7c            pushSelf 
  03f3:72 0dec          lofsa $0dec // hammer
  03f6:4a 42             send 42 

  03f8:32 01e9            jmp code_05e4 

        code_03fb
  03fb:3c                 dup 
  03fc:35 01              ldi 1 
  03fe:1a                 eq? 
  03ff:30 0053            bnt code_0455 
  0402:7a               push2 
  0403:38 037a          pushi 37a // $37a sel_890
  0406:78               push1 
  0407:45 0e 04         callb procedure_000e 4 //  

  040a:39 05            pushi 5 // $5 view
  040c:78               push1 
  040d:38 0373          pushi 373 // $373 sel_883
  0410:39 36            pushi 36 // $36 xStep
  0412:78               push1 
  0413:39 03            pushi 3 // $3 y
  0415:39 37            pushi 37 // $37 yStep
  0417:78               push1 
  0418:7a               push2 
  0419:38 00db          pushi db // $db cycleSpeed
  041c:78               push1 
  041d:39 06            pushi 6 // $6 loop
  041f:39 38            pushi 38 // $38 moveSpeed
  0421:78               push1 
  0422:39 06            pushi 6 // $6 loop
  0424:38 00a2          pushi a2 // $a2 setLoop
  0427:78               push1 
  0428:7a               push2 
  0429:38 011b          pushi 11b // $11b setMotion
  042c:39 04            pushi 4 // $4 x
  042e:51 1e            class MoveTo 
  0430:36                push 
  0431:38 00ba          pushi ba // $ba right
  0434:39 7b            pushi 7b // $7b last
  0436:7c            pushSelf 
  0437:72 0dec          lofsa $0dec // hammer
  043a:4a 30             send 30 

  043c:38 011f          pushi 11f // $11f startUpd
  043f:76               push0 
  0440:38 011b          pushi 11b // $11b setMotion
  0443:39 03            pushi 3 // $3 y
  0445:51 1e            class MoveTo 
  0447:36                push 
  0448:38 00cd          pushi cd // $cd oldMouseY
  044b:39 7b            pushi 7b // $7b last
  044d:72 1d3e          lofsa $1d3e // mikestand
  0450:4a 0e             send e 

  0452:32 018f            jmp code_05e4 

        code_0455
  0455:3c                 dup 
  0456:35 02              ldi 2 
  0458:1a                 eq? 
  0459:30 004a            bnt code_04a6 
  045c:35 01              ldi 1 
  045e:a3 03              sal local3 
  0460:38 011d          pushi 11d // $11d stopUpd
  0463:76               push0 
  0464:72 1d3e          lofsa $1d3e // mikestand
  0467:4a 04             send 4 

  0469:38 00a2          pushi a2 // $a2 setLoop
  046c:78               push1 
  046d:39 ff            pushi ff // $ff syncNum
  046f:39 05            pushi 5 // $5 view
  0471:78               push1 
  0472:38 0372          pushi 372 // $372 sel_882
  0475:39 36            pushi 36 // $36 xStep
  0477:78               push1 
  0478:39 08            pushi 8 // $8 underBits
  047a:39 37            pushi 37 // $37 yStep
  047c:78               push1 
  047d:39 04            pushi 4 // $4 x
  047f:38 00db          pushi db // $db cycleSpeed
  0482:78               push1 
  0483:39 0c            pushi c // $c nsRight
  0485:39 38            pushi 38 // $38 moveSpeed
  0487:78               push1 
  0488:39 0c            pushi c // $c nsRight
  048a:38 0096          pushi 96 // $96 setCycle
  048d:78               push1 
  048e:51 18            class Walk 
  0490:36                push 
  0491:38 011b          pushi 11b // $11b setMotion
  0494:39 04            pushi 4 // $4 x
  0496:51 1e            class MoveTo 
  0498:36                push 
  0499:39 1e            pushi 1e // $1e mode
  049b:39 7c            pushi 7c // $7c prev
  049d:7c            pushSelf 
  049e:72 0dec          lofsa $0dec // hammer
  04a1:4a 36             send 36 

  04a3:32 013e            jmp code_05e4 

        code_04a6
  04a6:3c                 dup 
  04a7:35 03              ldi 3 
  04a9:1a                 eq? 
  04aa:30 0026            bnt code_04d3 
  04ad:7a               push2 
  04ae:38 037a          pushi 37a // $37a sel_890
  04b1:7a               push2 
  04b2:45 0e 04         callb procedure_000e 4 //  

  04b5:7a               push2 
  04b6:38 037a          pushi 37a // $37a sel_890
  04b9:39 03            pushi 3 // $3 y
  04bb:45 0e 04         callb procedure_000e 4 //  

  04be:38 011b          pushi 11b // $11b setMotion
  04c1:39 04            pushi 4 // $4 x
  04c3:51 1e            class MoveTo 
  04c5:36                push 
  04c6:39 e2            pushi e2 // $e2 setTarget
  04c8:39 7c            pushi 7c // $7c prev
  04ca:7c            pushSelf 
  04cb:72 0dec          lofsa $0dec // hammer
  04ce:4a 0c             send c 

  04d0:32 0111            jmp code_05e4 

        code_04d3
  04d3:3c                 dup 
  04d4:35 04              ldi 4 
  04d6:1a                 eq? 
  04d7:30 00df            bnt code_05b9 
  04da:39 6c            pushi 6c // $6c dispose
  04dc:76               push0 
  04dd:72 1bb8          lofsa $1bb8 // doorA
  04e0:4a 04             send 4 

  04e2:39 6c            pushi 6c // $6c dispose
  04e4:76               push0 
  04e5:72 1c3e          lofsa $1c3e // doorB
  04e8:4a 04             send 4 

  04ea:39 6c            pushi 6c // $6c dispose
  04ec:76               push0 
  04ed:72 1d3e          lofsa $1d3e // mikestand
  04f0:4a 04             send 4 

  04f2:39 6c            pushi 6c // $6c dispose
  04f4:76               push0 
  04f5:72 0dec          lofsa $0dec // hammer
  04f8:4a 04             send 4 

  04fa:39 6c            pushi 6c // $6c dispose
  04fc:76               push0 
  04fd:72 1dbc          lofsa $1dbc // recSign
  0500:4a 04             send 4 

  0502:38 00c9          pushi c9 // $c9 disable
  0505:76               push0 
  0506:81 45              lag  
  0508:4a 04             send 4 

  050a:38 018c          pushi 18c // $18c drawPic
  050d:78               push1 
  050e:38 037a          pushi 37a // $37a sel_890
  0511:38 0183          pushi 183 // $183 picture
  0514:78               push1 
  0515:38 037a          pushi 37a // $37a sel_890
  0518:38 0180          pushi 180 // $180 curPic
  051b:78               push1 
  051c:38 037a          pushi 37a // $37a sel_890
  051f:38 0176          pushi 176 // $176 addObstacle
  0522:78               push1 
  0523:39 22            pushi 22 // $22 type
  0525:78               push1 
  0526:7a               push2 
  0527:39 6b            pushi 6b // $6b init
  0529:39 1c            pushi 1c // $1c color
  052b:76               push0 
  052c:76               push0 
  052d:38 013f          pushi 13f // $13f inputLineAddr
  0530:76               push0 
  0531:38 013f          pushi 13f // $13f inputLineAddr
  0534:38 00bd          pushi bd // $bd maskView
  0537:39 62            pushi 62 // $62 pri
  0539:38 00bd          pushi bd // $bd maskView
  053c:39 67            pushi 67 // $67 quitGame
  053e:38 00bb          pushi bb // $bb setCursor
  0541:38 00eb          pushi eb // $eb incClientPos
  0544:38 00bb          pushi bb // $bb setCursor
  0547:38 0121          pushi 121 // $121 ignoreActors
  054a:38 00a6          pushi a6 // $a6 playBed
  054d:38 011c          pushi 11c // $11c posn
  0550:38 009a          pushi 9a // $9a prevSignal
  0553:38 0109          pushi 109 // $109 theVerb
  0556:38 00a1          pushi a1 // $a1 setVol
  0559:38 00bd          pushi bd // $bd maskView
  055c:38 0085          pushi 85 // $85 seconds
  055f:39 70            pushi 70 // $70 isMemberOf
  0561:38 0085          pushi 85 // $85 seconds
  0564:39 11            pushi 11 // $11 signal
  0566:38 00b0          pushi b0 // $b0 cycle
  0569:39 1d            pushi 1d // $1d back
  056b:38 00bd          pushi bd // $bd maskView
  056e:76               push0 
  056f:38 00bd          pushi bd // $bd maskView
  0572:39 72            pushi 72 // $72 yourself
  0574:76               push0 
  0575:39 6a            pushi 6a // $6a new
  0577:76               push0 
  0578:51 23            class Polygon 
  057a:4a 04             send 4 

  057c:4a 46             send 46 

  057e:36                push 
  057f:81 02              lag  
  0581:4a 18             send 18 

  0583:38 00a7          pushi a7 // $a7 enable
  0586:76               push0 
  0587:81 45              lag  
  0589:4a 04             send 4 

  058b:38 00c2          pushi c2 // $c2 show
  058e:76               push0 
  058f:81 00              lag  
  0591:4a 04             send 4 

  0593:38 00c2          pushi c2 // $c2 show
  0596:76               push0 
  0597:72 0d24          lofsa $0d24 // tape
  059a:4a 04             send 4 

  059c:38 00c2          pushi c2 // $c2 show
  059f:76               push0 
  05a0:38 011d          pushi 11d // $11d stopUpd
  05a3:76               push0 
  05a4:72 0e6a          lofsa $0e6a // glass
  05a7:4a 08             send 8 

  05a9:38 00c2          pushi c2 // $c2 show
  05ac:76               push0 
  05ad:72 0f18          lofsa $0f18 // lights
  05b0:4a 04             send 4 

  05b2:35 03              ldi 3 
  05b4:65 12             aTop seconds 
  05b6:32 002b            jmp code_05e4 

        code_05b9
  05b9:3c                 dup 
  05ba:35 05              ldi 5 
  05bc:1a                 eq? 
  05bd:30 0024            bnt code_05e4 
  05c0:7a               push2 
  05c1:38 037a          pushi 37a // $37a sel_890
  05c4:39 04            pushi 4 // $4 x
  05c6:45 0e 04         callb procedure_000e 4 //  

  05c9:7a               push2 
  05ca:38 037a          pushi 37a // $37a sel_890
  05cd:39 05            pushi 5 // $5 view
  05cf:45 0e 04         callb procedure_000e 4 //  

  05d2:7a               push2 
  05d3:38 037a          pushi 37a // $37a sel_890
  05d6:39 06            pushi 6 // $6 loop
  05d8:45 0e 04         callb procedure_000e 4 //  

  05db:76               push0 
  05dc:45 03 00         callb procedure_0003 0 //  

  05df:39 6c            pushi 6c // $6c dispose
  05e1:76               push0 
  05e2:54 04             self 4 


        code_05e4
  05e4:3a                toss 
  05e5:48                 ret 
    )

)

// 0622
(instance fElectronics1 of Feature
    (properties
        x $96
        y $c7
        z $0
        heading $0
        noun $0
        nsTop $a5
        nsLeft $75
        nsBottom $bd
        nsRight $b8
        description $1f70
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $97
        approachY $bb
        approachDist $0
        _approachVerbs $6789
        lookStr $1f82
    )
)

// 065e
(instance fElectronics2 of Feature
    (properties
        x $11b
        y $bb
        z $0
        heading $0
        noun $0
        nsTop $a3
        nsLeft $f7
        nsBottom $bd
        nsRight $13f
        description $2001
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $eb
        approachY $bb
        approachDist $0
        _approachVerbs $6789
        lookStr $201a
    )
)

// 069a
(instance fElectronics3 of Feature
    (properties
        x $12d
        y $a9
        z $0
        heading $0
        noun $0
        nsTop $81
        nsLeft $11b
        nsBottom $a3
        nsRight $13f
        description $2001
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $119
        approachY $a9
        approachDist $0
        _approachVerbs $6789
        lookStr $201a
    )
)

// 073e
(instance fElectronics4 of Feature
    (properties
        x $115
        y $97
        z $0
        heading $0
        noun $0
        nsTop $6a
        nsLeft $eb
        nsBottom $87
        nsRight $13f
        description $208e
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $ed
        approachY $97
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_06d4
  06d4:8f 01              lsp param1 
  06d6:3c                 dup 
  06d7:35 03              ldi 3 
  06d9:1a                 eq? 
  06da:30 000c            bnt code_06e9 
  06dd:7a               push2 
  06de:38 037a          pushi 37a // $37a sel_890
  06e1:39 07            pushi 7 // $7 cel
  06e3:45 0e 04         callb procedure_000e 4 //  

  06e6:32 004d            jmp code_0736 

        code_06e9
  06e9:3c                 dup 
  06ea:35 02              ldi 2 
  06ec:1a                 eq? 
  06ed:30 000c            bnt code_06fc 
  06f0:7a               push2 
  06f1:38 037a          pushi 37a // $37a sel_890
  06f4:39 08            pushi 8 // $8 underBits
  06f6:45 0e 04         callb procedure_000e 4 //  

  06f9:32 003a            jmp code_0736 

        code_06fc
  06fc:3c                 dup 
  06fd:35 04              ldi 4 
  06ff:1a                 eq? 
  0700:30 0026            bnt code_0729 
  0703:8f 02              lsp param2 
  0705:3c                 dup 
  0706:35 0c              ldi c 
  0708:1a                 eq? 
  0709:30 000c            bnt code_0718 
  070c:7a               push2 
  070d:38 037a          pushi 37a // $37a sel_890
  0710:39 09            pushi 9 // $9 nsTop
  0712:45 0e 04         callb procedure_000e 4 //  

  0715:32 000d            jmp code_0725 

        code_0718
  0718:38 010c          pushi 10c // $10c doVerb
  071b:7a               push2 
  071c:8f 01              lsp param1 
  071e:8f 02              lsp param2 
  0720:59 03            &rest 3 
  0722:57 2c 08         super Feature 8 


        code_0725
  0725:3a                toss 
  0726:32 000d            jmp code_0736 

        code_0729
  0729:38 010c          pushi 10c // $10c doVerb
  072c:7a               push2 
  072d:8f 01              lsp param1 
  072f:8f 02              lsp param2 
  0731:59 03            &rest 3 
  0733:57 2c 08         super Feature 8 


        code_0736
  0736:3a                toss 
  0737:48                 ret 
    )

)

// 0792
(instance fElectronics5 of Feature
    (properties
        x $d7
        y $8b
        z $0
        heading $0
        noun $0
        nsTop $6a
        nsLeft $c4
        nsBottom $7d
        nsRight $eb
        description $20c5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $cd
        approachY $8b
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_077c
  077c:38 010c          pushi 10c // $10c doVerb
  077f:7a               push2 
  0780:8f 01              lsp param1 
  0782:8f 02              lsp param2 
  0784:59 03            &rest 3 
  0786:72 0744          lofsa $0744 // fElectronics4
  0789:4a 08             send 8 

  078b:48                 ret 
    )

)

// 07d2
(instance fElectronics6 of Feature
    (properties
        x $109
        y $3f
        z $0
        heading $0
        noun $0
        nsTop $11
        nsLeft $112
        nsBottom $6d
        nsRight $13f
        description $2001
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $20fd
    )
)

// 080e
(instance fElectronics7 of Feature
    (properties
        x $109
        y $3f
        z $0
        heading $0
        noun $0
        nsTop $1e
        nsLeft $d4
        nsBottom $6d
        nsRight $112
        description $2001
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $20fd
    )
)

// 084a
(instance speaker1 of Feature
    (properties
        x $64
        y $3c
        z $0
        heading $0
        noun $0
        nsTop $2b
        nsLeft $56
        nsBottom $4e
        nsRight $72
        description $21a9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1f82
    )
)

// 0886
(instance speaker2 of Feature
    (properties
        x $c7
        y $39
        z $0
        heading $0
        noun $0
        nsTop $2a
        nsLeft $ba
        nsBottom $48
        nsRight $d4
        description $21a9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1f82
    )
)

// 08c2
(instance speaker3 of Feature
    (properties
        x $a
        y $18
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $31
        nsRight $15
        description $21a9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1f82
    )
)

// 08fe
(instance shelf of Feature
    (properties
        x $9a
        y $57
        z $0
        heading $0
        noun $0
        nsTop $3f
        nsLeft $78
        nsBottom $83
        nsRight $bd
        description $21d8
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $9b
        approachY $8b
        approachDist $0
        _approachVerbs $6789
        lookStr $21eb
    )
)

// 0988
(instance tapeShelf of Feature
    (properties
        x $9a
        y $57
        z $0
        heading $0
        noun $0
        nsTop $4f
        nsLeft $8a
        nsBottom $66
        nsRight $a9
        description $2267
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $9b
        approachY $8b
        approachDist $0
        _approachVerbs $6789
        lookStr $227a
    )
    (method (doVerb) // method_0938
  0938:8f 01              lsp param1 
  093a:3c                 dup 
  093b:35 03              ldi 3 
  093d:1a                 eq? 
  093e:30 0031            bnt code_0972 
  0941:38 009b          pushi 9b // $9b owner
  0944:76               push0 
  0945:39 43            pushi 43 // $43 at
  0947:78               push1 
  0948:39 0c            pushi c // $c nsRight
  094a:51 40            class Inv 
  094c:4a 06             send 6 

  094e:4a 04             send 4 

  0950:36                push 
  0951:35 00              ldi 0 
  0953:1c                 ne? 
  0954:30 000c            bnt code_0963 
  0957:7a               push2 
  0958:38 037a          pushi 37a // $37a sel_890
  095b:39 0a            pushi a // $a nsLeft
  095d:45 0e 04         callb procedure_000e 4 //  

  0960:32 001c            jmp code_097f 

        code_0963
  0963:38 008e          pushi 8e // $8e setScript
  0966:78               push1 
  0967:72 13ac          lofsa $13ac // GetTape
  096a:36                push 
  096b:81 00              lag  
  096d:4a 06             send 6 

  096f:32 000d            jmp code_097f 

        code_0972
  0972:38 010c          pushi 10c // $10c doVerb
  0975:7a               push2 
  0976:8f 01              lsp param1 
  0978:8f 02              lsp param2 
  097a:59 03            &rest 3 
  097c:57 2c 08         super Feature 8 


        code_097f
  097f:3a                toss 
  0980:48                 ret 
  0981:00                bnot 
    )

)

// 0aa4
(instance mixer of Feature
    (properties
        x $46
        y $90
        z $0
        heading $0
        noun $0
        nsTop $6b
        nsLeft $42
        nsBottom $7e
        nsRight $68
        description $22d8
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $5a
        approachY $8c
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_09c6
  09c6:8f 01              lsp param1 
  09c8:3c                 dup 
  09c9:35 02              ldi 2 
  09cb:1a                 eq? 
  09cc:30 0095            bnt code_0a64 
  09cf:c3 06              +al local6 
  09d1:36                push 
  09d2:3c                 dup 
  09d3:35 01              ldi 1 
  09d5:1a                 eq? 
  09d6:30 000c            bnt code_09e5 
  09d9:7a               push2 
  09da:38 037a          pushi 37a // $37a sel_890
  09dd:39 0b            pushi b // $b nsBottom
  09df:45 0e 04         callb procedure_000e 4 //  

  09e2:32 007b            jmp code_0a60 

        code_09e5
  09e5:3c                 dup 
  09e6:35 02              ldi 2 
  09e8:1a                 eq? 
  09e9:30 000c            bnt code_09f8 
  09ec:7a               push2 
  09ed:38 037a          pushi 37a // $37a sel_890
  09f0:39 0c            pushi c // $c nsRight
  09f2:45 0e 04         callb procedure_000e 4 //  

  09f5:32 0068            jmp code_0a60 

        code_09f8
  09f8:3c                 dup 
  09f9:35 03              ldi 3 
  09fb:1a                 eq? 
  09fc:30 000c            bnt code_0a0b 
  09ff:7a               push2 
  0a00:38 037a          pushi 37a // $37a sel_890
  0a03:39 0d            pushi d // $d lsTop
  0a05:45 0e 04         callb procedure_000e 4 //  

  0a08:32 0055            jmp code_0a60 

        code_0a0b
  0a0b:3c                 dup 
  0a0c:35 04              ldi 4 
  0a0e:1a                 eq? 
  0a0f:30 000c            bnt code_0a1e 
  0a12:7a               push2 
  0a13:38 037a          pushi 37a // $37a sel_890
  0a16:39 0e            pushi e // $e lsLeft
  0a18:45 0e 04         callb procedure_000e 4 //  

  0a1b:32 0042            jmp code_0a60 

        code_0a1e
  0a1e:3c                 dup 
  0a1f:35 05              ldi 5 
  0a21:1a                 eq? 
  0a22:30 000c            bnt code_0a31 
  0a25:7a               push2 
  0a26:38 037a          pushi 37a // $37a sel_890
  0a29:39 0f            pushi f // $f lsBottom
  0a2b:45 0e 04         callb procedure_000e 4 //  

  0a2e:32 002f            jmp code_0a60 

        code_0a31
  0a31:3c                 dup 
  0a32:35 06              ldi 6 
  0a34:1a                 eq? 
  0a35:30 000c            bnt code_0a44 
  0a38:7a               push2 
  0a39:38 037a          pushi 37a // $37a sel_890
  0a3c:39 10            pushi 10 // $10 lsRight
  0a3e:45 0e 04         callb procedure_000e 4 //  

  0a41:32 001c            jmp code_0a60 

        code_0a44
  0a44:3c                 dup 
  0a45:35 07              ldi 7 
  0a47:1a                 eq? 
  0a48:30 000c            bnt code_0a57 
  0a4b:7a               push2 
  0a4c:38 037a          pushi 37a // $37a sel_890
  0a4f:39 11            pushi 11 // $11 signal
  0a51:45 0e 04         callb procedure_000e 4 //  

  0a54:32 0009            jmp code_0a60 

        code_0a57
  0a57:7a               push2 
  0a58:38 037a          pushi 37a // $37a sel_890
  0a5b:39 12            pushi 12 // $12 illegalBits
  0a5d:45 0e 04         callb procedure_000e 4 //  


        code_0a60
  0a60:3a                toss 
  0a61:32 0038            jmp code_0a9c 

        code_0a64
  0a64:3c                 dup 
  0a65:35 03              ldi 3 
  0a67:1a                 eq? 
  0a68:30 0024            bnt code_0a8f 
  0a6b:c3 07              +al local7 
  0a6d:36                push 
  0a6e:35 01              ldi 1 
  0a70:1a                 eq? 
  0a71:30 000c            bnt code_0a80 
  0a74:7a               push2 
  0a75:38 037a          pushi 37a // $37a sel_890
  0a78:39 13            pushi 13 // $13 brTop
  0a7a:45 0e 04         callb procedure_000e 4 //  

  0a7d:32 001c            jmp code_0a9c 

        code_0a80
  0a80:38 008e          pushi 8e // $8e setScript
  0a83:78               push1 
  0a84:72 19c6          lofsa $19c6 // useMixer
  0a87:36                push 
  0a88:81 00              lag  
  0a8a:4a 06             send 6 

  0a8c:32 000d            jmp code_0a9c 

        code_0a8f
  0a8f:38 010c          pushi 10c // $10c doVerb
  0a92:7a               push2 
  0a93:8f 01              lsp param1 
  0a95:8f 02              lsp param2 
  0a97:59 03            &rest 3 
  0a99:57 2c 08         super Feature 8 


        code_0a9c
  0a9c:3a                toss 
  0a9d:48                 ret 
    )

)

// 0b44
(instance microphone of Feature
    (properties
        x $3b
        y $91
        z $0
        heading $0
        noun $0
        nsTop $66
        nsLeft $32
        nsBottom $78
        nsRight $44
        description $22f3
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $59
        approachY $8d
        approachDist $0
        _approachVerbs $6789
        lookStr $2302
    )
    (method (doVerb) // method_0ae2
  0ae2:8f 01              lsp param1 
  0ae4:3c                 dup 
  0ae5:35 03              ldi 3 
  0ae7:1a                 eq? 
  0ae8:30 000c            bnt code_0af7 
  0aeb:7a               push2 
  0aec:38 037a          pushi 37a // $37a sel_890
  0aef:39 14            pushi 14 // $14 brLeft
  0af1:45 0e 04         callb procedure_000e 4 //  

  0af4:32 0045            jmp code_0b3c 

        code_0af7
  0af7:3c                 dup 
  0af8:35 05              ldi 5 
  0afa:1a                 eq? 
  0afb:30 0031            bnt code_0b2f 
  0afe:83 03              lal local3 
  0b00:30 0020            bnt code_0b23 
  0b03:83 08              lal local8 
  0b05:30 000f            bnt code_0b17 
  0b08:38 008e          pushi 8e // $8e setScript
  0b0b:78               push1 
  0b0c:72 12ba          lofsa $12ba // useMikeScript
  0b0f:36                push 
  0b10:81 00              lag  
  0b12:4a 06             send 6 

  0b14:32 0025            jmp code_0b3c 

        code_0b17
  0b17:7a               push2 
  0b18:38 037a          pushi 37a // $37a sel_890
  0b1b:39 15            pushi 15 // $15 brBottom
  0b1d:45 0e 04         callb procedure_000e 4 //  

  0b20:32 0019            jmp code_0b3c 

        code_0b23
  0b23:7a               push2 
  0b24:38 037a          pushi 37a // $37a sel_890
  0b27:39 16            pushi 16 // $16 brRight
  0b29:45 0e 04         callb procedure_000e 4 //  

  0b2c:32 000d            jmp code_0b3c 

        code_0b2f
  0b2f:38 010c          pushi 10c // $10c doVerb
  0b32:7a               push2 
  0b33:8f 01              lsp param1 
  0b35:8f 02              lsp param2 
  0b37:59 03            &rest 3 
  0b39:57 2c 08         super Feature 8 


        code_0b3c
  0b3c:3a                toss 
  0b3d:48                 ret 
    )

)

// 0ccc
(instance recorder of Feature
    (properties
        x $1a
        y $a3
        z $0
        heading $0
        noun $0
        nsTop $73
        nsLeft $0
        nsBottom $92
        nsRight $34
        description $2378
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $2a
        approachY $a3
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_0b82
  0b82:8f 01              lsp param1 
  0b84:3c                 dup 
  0b85:35 03              ldi 3 
  0b87:1a                 eq? 
  0b88:30 0083            bnt code_0c0e 
  0b8b:83 01              lal local1 
  0b8d:30 000f            bnt code_0b9f 
  0b90:38 008e          pushi 8e // $8e setScript
  0b93:78               push1 
  0b94:72 15fa          lofsa $15fa // turnRecorderOff
  0b97:36                push 
  0b98:81 00              lag  
  0b9a:4a 06             send 6 

  0b9c:32 0125            jmp code_0cc4 

        code_0b9f
  0b9f:38 009b          pushi 9b // $9b owner
  0ba2:76               push0 
  0ba3:39 43            pushi 43 // $43 at
  0ba5:78               push1 
  0ba6:39 0c            pushi c // $c nsRight
  0ba8:51 40            class Inv 
  0baa:4a 06             send 6 

  0bac:4a 04             send 4 

  0bae:36                push 
  0baf:35 03              ldi 3 
  0bb1:1a                 eq? 
  0bb2:30 004d            bnt code_0c02 
  0bb5:83 09              lal local9 
  0bb7:30 000f            bnt code_0bc9 
  0bba:38 008e          pushi 8e // $8e setScript
  0bbd:78               push1 
  0bbe:72 1812          lofsa $1812 // getRecordedTape
  0bc1:36                push 
  0bc2:81 00              lag  
  0bc4:4a 06             send 6 

  0bc6:32 00fb            jmp code_0cc4 

        code_0bc9
  0bc9:83 02              lal local2 
  0bcb:30 000f            bnt code_0bdd 
  0bce:38 008e          pushi 8e // $8e setScript
  0bd1:78               push1 
  0bd2:72 16f0          lofsa $16f0 // rewindTape
  0bd5:36                push 
  0bd6:81 00              lag  
  0bd8:4a 06             send 6 

  0bda:32 00e7            jmp code_0cc4 

        code_0bdd
  0bdd:78               push1 
  0bde:38 009a          pushi 9a // $9a prevSignal
  0be1:45 06 02         callb procedure_0006 2 //  

  0be4:30 000f            bnt code_0bf6 
  0be7:38 008e          pushi 8e // $8e setScript
  0bea:78               push1 
  0beb:72 1522          lofsa $1522 // turnRecorderOn
  0bee:36                push 
  0bef:81 00              lag  
  0bf1:4a 06             send 6 

  0bf3:32 00ce            jmp code_0cc4 

        code_0bf6
  0bf6:7a               push2 
  0bf7:38 037a          pushi 37a // $37a sel_890
  0bfa:39 17            pushi 17 // $17 name
  0bfc:45 0e 04         callb procedure_000e 4 //  

  0bff:32 00c2            jmp code_0cc4 

        code_0c02
  0c02:7a               push2 
  0c03:38 037a          pushi 37a // $37a sel_890
  0c06:39 18            pushi 18 // $18 key
  0c08:45 0e 04         callb procedure_000e 4 //  

  0c0b:32 00b6            jmp code_0cc4 

        code_0c0e
  0c0e:3c                 dup 
  0c0f:35 02              ldi 2 
  0c11:1a                 eq? 
  0c12:30 0061            bnt code_0c76 
  0c15:83 01              lal local1 
  0c17:30 000c            bnt code_0c26 
  0c1a:7a               push2 
  0c1b:38 037a          pushi 37a // $37a sel_890
  0c1e:39 19            pushi 19 // $19 time
  0c20:45 0e 04         callb procedure_000e 4 //  

  0c23:32 009e            jmp code_0cc4 

        code_0c26
  0c26:38 009b          pushi 9b // $9b owner
  0c29:76               push0 
  0c2a:39 43            pushi 43 // $43 at
  0c2c:78               push1 
  0c2d:39 0c            pushi c // $c nsRight
  0c2f:51 40            class Inv 
  0c31:4a 06             send 6 

  0c33:4a 04             send 4 

  0c35:36                push 
  0c36:35 03              ldi 3 
  0c38:1a                 eq? 
  0c39:30 002e            bnt code_0c6a 
  0c3c:83 09              lal local9 
  0c3e:30 000c            bnt code_0c4d 
  0c41:7a               push2 
  0c42:38 037a          pushi 37a // $37a sel_890
  0c45:39 1a            pushi 1a // $1a text
  0c47:45 0e 04         callb procedure_000e 4 //  

  0c4a:32 0077            jmp code_0cc4 

        code_0c4d
  0c4d:83 02              lal local2 
  0c4f:30 000c            bnt code_0c5e 
  0c52:7a               push2 
  0c53:38 037a          pushi 37a // $37a sel_890
  0c56:39 1b            pushi 1b // $1b elements
  0c58:45 0e 04         callb procedure_000e 4 //  

  0c5b:32 0066            jmp code_0cc4 

        code_0c5e
  0c5e:7a               push2 
  0c5f:38 037a          pushi 37a // $37a sel_890
  0c62:39 1c            pushi 1c // $1c color
  0c64:45 0e 04         callb procedure_000e 4 //  

  0c67:32 005a            jmp code_0cc4 

        code_0c6a
  0c6a:7a               push2 
  0c6b:38 037a          pushi 37a // $37a sel_890
  0c6e:39 1d            pushi 1d // $1d back
  0c70:45 0e 04         callb procedure_000e 4 //  

  0c73:32 004e            jmp code_0cc4 

        code_0c76
  0c76:3c                 dup 
  0c77:35 04              ldi 4 
  0c79:1a                 eq? 
  0c7a:30 003a            bnt code_0cb7 
  0c7d:8f 02              lsp param2 
  0c7f:3c                 dup 
  0c80:35 0c              ldi c 
  0c82:1a                 eq? 
  0c83:30 0020            bnt code_0ca6 
  0c86:83 02              lal local2 
  0c88:30 000c            bnt code_0c97 
  0c8b:7a               push2 
  0c8c:38 037a          pushi 37a // $37a sel_890
  0c8f:39 1e            pushi 1e // $1e mode
  0c91:45 0e 04         callb procedure_000e 4 //  

  0c94:32 001c            jmp code_0cb3 

        code_0c97
  0c97:38 008e          pushi 8e // $8e setScript
  0c9a:78               push1 
  0c9b:72 1b5a          lofsa $1b5a // mountTapeScript
  0c9e:36                push 
  0c9f:81 00              lag  
  0ca1:4a 06             send 6 

  0ca3:32 000d            jmp code_0cb3 

        code_0ca6
  0ca6:38 010c          pushi 10c // $10c doVerb
  0ca9:7a               push2 
  0caa:8f 01              lsp param1 
  0cac:8f 02              lsp param2 
  0cae:59 03            &rest 3 
  0cb0:57 2c 08         super Feature 8 


        code_0cb3
  0cb3:3a                toss 
  0cb4:32 000d            jmp code_0cc4 

        code_0cb7
  0cb7:38 010c          pushi 10c // $10c doVerb
  0cba:7a               push2 
  0cbb:8f 01              lsp param1 
  0cbd:8f 02              lsp param2 
  0cbf:59 03            &rest 3 
  0cc1:57 2c 08         super Feature 8 


        code_0cc4
  0cc4:3a                toss 
  0cc5:48                 ret 
    )

)

// 0d1e
(instance tape of Prop
    (properties
        x $2a
        y $82
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $23a0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $2a
        approachY $a3
        approachDist $0
        _approachVerbs $6789
        lookStr $23a9
        yStep $2
        view $37a
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0d0a
  0d0a:38 010c          pushi 10c // $10c doVerb
  0d0d:7a               push2 
  0d0e:8f 01              lsp param1 
  0d10:8f 02              lsp param2 
  0d12:72 0cd2          lofsa $0cd2 // recorder
  0d15:4a 08             send 8 

  0d17:48                 ret 
    )

)

// 0d9a
(instance tapeHole of PicView
    (properties
        x $9e
        y $55
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $37a
        loop $7
        cel $0
        priority $ffff
        signal $0
        palette $0
    )
    (method (doVerb) // method_0d86
  0d86:38 010c          pushi 10c // $10c doVerb
  0d89:7a               push2 
  0d8a:8f 01              lsp param1 
  0d8c:8f 02              lsp param2 
  0d8e:72 098e          lofsa $098e // tapeShelf
  0d91:4a 08             send 8 

  0d93:48                 ret 
    )

)

// 0de6
(instance hammer of Actor
    (properties
        x $26
        y $78
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $242a
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2437
        yStep $2
        view $373
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)

// 0e64
(instance glass of Prop
    (properties
        x $29
        y $74
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2470
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2481
        yStep $2
        view $37a
        loop $2
        cel $1
        priority $9
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0f12
(instance lights of Prop
    (properties
        x $35
        y $7a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $22d8
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $5a
        approachY $90
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $37a
        loop $3
        cel $0
        priority $9
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0ec8
  0ec8:8f 01              lsp param1 
  0eca:3c                 dup 
  0ecb:35 03              ldi 3 
  0ecd:1a                 eq? 
  0ece:30 0012            bnt code_0ee3 
  0ed1:38 010c          pushi 10c // $10c doVerb
  0ed4:7a               push2 
  0ed5:8f 01              lsp param1 
  0ed7:8f 02              lsp param2 
  0ed9:59 03            &rest 3 
  0edb:72 0aaa          lofsa $0aaa // mixer
  0ede:4a 08             send 8 

  0ee0:32 0026            jmp code_0f09 

        code_0ee3
  0ee3:3c                 dup 
  0ee4:35 02              ldi 2 
  0ee6:1a                 eq? 
  0ee7:30 0012            bnt code_0efc 
  0eea:38 010c          pushi 10c // $10c doVerb
  0eed:7a               push2 
  0eee:8f 01              lsp param1 
  0ef0:8f 02              lsp param2 
  0ef2:59 03            &rest 3 
  0ef4:72 0aaa          lofsa $0aaa // mixer
  0ef7:4a 08             send 8 

  0ef9:32 000d            jmp code_0f09 

        code_0efc
  0efc:38 010c          pushi 10c // $10c doVerb
  0eff:7a               push2 
  0f00:8f 01              lsp param1 
  0f02:8f 02              lsp param2 
  0f04:59 03            &rest 3 
  0f06:57 2f 08         super Prop 8 


        code_0f09
  0f09:3a                toss 
  0f0a:48                 ret 
  0f0b:00                bnot 
    )

)

// 0f7c
(instance recSignA of Prop
    (properties
        x $11
        y $33
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $24e8
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $24fb
        yStep $2
        view $37a
        loop $6
        cel $1
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0fe2
(instance useMikeSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $37b
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 1018
(instance breakGlassSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $92
        vol $7f
        priority $b
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 12b4
(instance useMikeScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_104c
  104c:3f 02             link 2 // (var $2)
  104e:87 01              lap param1 
  1050:65 0a             aTop state 
  1052:36                push 
  1053:3c                 dup 
  1054:35 00              ldi 0 
  1056:1a                 eq? 
  1057:30 0019            bnt code_1073 
  105a:76               push0 
  105b:45 02 00         callb procedure_0002 0 //  

  105e:38 011b          pushi 11b // $11b setMotion
  1061:39 04            pushi 4 // $4 x
  1063:51 1e            class MoveTo 
  1065:36                push 
  1066:39 59            pushi 59 // $59 size
  1068:38 008d          pushi 8d // $8d cue
  106b:7c            pushSelf 
  106c:81 00              lag  
  106e:4a 0c             send c 

  1070:32 0239            jmp code_12ac 

        code_1073
  1073:3c                 dup 
  1074:35 01              ldi 1 
  1076:1a                 eq? 
  1077:30 0025            bnt code_109f 
  107a:39 05            pushi 5 // $5 view
  107c:78               push1 
  107d:38 037b          pushi 37b // $37b sel_891
  1080:38 00a2          pushi a2 // $a2 setLoop
  1083:78               push1 
  1084:7a               push2 
  1085:38 0120          pushi 120 // $120 setCel
  1088:78               push1 
  1089:76               push0 
  108a:38 00db          pushi db // $db cycleSpeed
  108d:78               push1 
  108e:39 0c            pushi c // $c nsRight
  1090:38 0096          pushi 96 // $96 setCycle
  1093:7a               push2 
  1094:51 1a            class End 
  1096:36                push 
  1097:7c            pushSelf 
  1098:81 00              lag  
  109a:4a 20             send 20 

  109c:32 020d            jmp code_12ac 

        code_109f
  109f:3c                 dup 
  10a0:35 02              ldi 2 
  10a2:1a                 eq? 
  10a3:30 0022            bnt code_10c8 
  10a6:39 2a            pushi 2a // $2a play
  10a8:76               push0 
  10a9:72 0fe8          lofsa $0fe8 // useMikeSound
  10ac:4a 04             send 4 

  10ae:38 00a2          pushi a2 // $a2 setLoop
  10b1:78               push1 
  10b2:39 03            pushi 3 // $3 y
  10b4:38 0120          pushi 120 // $120 setCel
  10b7:78               push1 
  10b8:76               push0 
  10b9:38 0096          pushi 96 // $96 setCycle
  10bc:7a               push2 
  10bd:51 1a            class End 
  10bf:36                push 
  10c0:7c            pushSelf 
  10c1:81 00              lag  
  10c3:4a 14             send 14 

  10c5:32 01e4            jmp code_12ac 

        code_10c8
  10c8:3c                 dup 
  10c9:35 03              ldi 3 
  10cb:1a                 eq? 
  10cc:30 001e            bnt code_10ed 
  10cf:7a               push2 
  10d0:38 037a          pushi 37a // $37a sel_890
  10d3:39 1f            pushi 1f // $1f style
  10d5:45 0e 04         callb procedure_000e 4 //  

  10d8:38 011f          pushi 11f // $11f startUpd
  10db:76               push0 
  10dc:38 0120          pushi 120 // $120 setCel
  10df:78               push1 
  10e0:7a               push2 
  10e1:72 0e6a          lofsa $0e6a // glass
  10e4:4a 0a             send a 

  10e6:35 7b              ldi 7b 
  10e8:65 16             aTop ticks 
  10ea:32 01bf            jmp code_12ac 

        code_10ed
  10ed:3c                 dup 
  10ee:35 04              ldi 4 
  10f0:1a                 eq? 
  10f1:30 0018            bnt code_110c 
  10f4:39 2a            pushi 2a // $2a play
  10f6:76               push0 
  10f7:72 101e          lofsa $101e // breakGlassSound
  10fa:4a 04             send 4 

  10fc:38 0096          pushi 96 // $96 setCycle
  10ff:7a               push2 
  1100:51 1a            class End 
  1102:36                push 
  1103:7c            pushSelf 
  1104:72 0e6a          lofsa $0e6a // glass
  1107:4a 08             send 8 

  1109:32 01a0            jmp code_12ac 

        code_110c
  110c:3c                 dup 
  110d:35 05              ldi 5 
  110f:1a                 eq? 
  1110:30 0007            bnt code_111a 
  1113:35 03              ldi 3 
  1115:65 12             aTop seconds 
  1117:32 0192            jmp code_12ac 

        code_111a
  111a:3c                 dup 
  111b:35 06              ldi 6 
  111d:1a                 eq? 
  111e:30 0019            bnt code_113a 
  1121:7a               push2 
  1122:38 037a          pushi 37a // $37a sel_890
  1125:39 20            pushi 20 // $20 state
  1127:45 0e 04         callb procedure_000e 4 //  

  112a:7a               push2 
  112b:38 037a          pushi 37a // $37a sel_890
  112e:39 21            pushi 21 // $21 font
  1130:45 0e 04         callb procedure_000e 4 //  

  1133:35 04              ldi 4 
  1135:65 12             aTop seconds 
  1137:32 0172            jmp code_12ac 

        code_113a
  113a:3c                 dup 
  113b:35 07              ldi 7 
  113d:1a                 eq? 
  113e:30 0025            bnt code_1166 
  1141:38 00a2          pushi a2 // $a2 setLoop
  1144:78               push1 
  1145:39 04            pushi 4 // $4 x
  1147:39 42            pushi 42 // $42 setPri
  1149:78               push1 
  114a:39 09            pushi 9 // $9 nsTop
  114c:38 0120          pushi 120 // $120 setCel
  114f:78               push1 
  1150:76               push0 
  1151:38 00db          pushi db // $db cycleSpeed
  1154:78               push1 
  1155:39 0a            pushi a // $a nsLeft
  1157:38 0096          pushi 96 // $96 setCycle
  115a:7a               push2 
  115b:51 1a            class End 
  115d:36                push 
  115e:7c            pushSelf 
  115f:81 00              lag  
  1161:4a 20             send 20 

  1163:32 0146            jmp code_12ac 

        code_1166
  1166:3c                 dup 
  1167:35 08              ldi 8 
  1169:1a                 eq? 
  116a:30 001f            bnt code_118c 
  116d:38 010b          pushi 10b // $10b actions
  1170:78               push1 
  1171:76               push0 
  1172:38 00a2          pushi a2 // $a2 setLoop
  1175:78               push1 
  1176:39 05            pushi 5 // $5 view
  1178:38 0120          pushi 120 // $120 setCel
  117b:78               push1 
  117c:76               push0 
  117d:38 0096          pushi 96 // $96 setCycle
  1180:7a               push2 
  1181:51 1a            class End 
  1183:36                push 
  1184:7c            pushSelf 
  1185:81 00              lag  
  1187:4a 1a             send 1a 

  1189:32 0120            jmp code_12ac 

        code_118c
  118c:3c                 dup 
  118d:35 09              ldi 9 
  118f:1a                 eq? 
  1190:30 0010            bnt code_11a3 
  1193:7a               push2 
  1194:39 0f            pushi f // $f lsBottom
  1196:38 009d          pushi 9d // $9d pause
  1199:45 0a 04         callb procedure_000a 4 //  

  119c:35 7b              ldi 7b 
  119e:65 16             aTop ticks 
  11a0:32 0109            jmp code_12ac 

        code_11a3
  11a3:3c                 dup 
  11a4:35 0a              ldi a 
  11a6:1a                 eq? 
  11a7:30 002e            bnt code_11d8 
  11aa:39 05            pushi 5 // $5 view
  11ac:78               push1 
  11ad:38 037b          pushi 37b // $37b sel_891
  11b0:38 011c          pushi 11c // $11c posn
  11b3:7a               push2 
  11b4:39 12            pushi 12 // $12 illegalBits
  11b6:39 72            pushi 72 // $72 yourself
  11b8:38 010b          pushi 10b // $10b actions
  11bb:78               push1 
  11bc:76               push0 
  11bd:38 0120          pushi 120 // $120 setCel
  11c0:78               push1 
  11c1:76               push0 
  11c2:38 00a2          pushi a2 // $a2 setLoop
  11c5:78               push1 
  11c6:39 07            pushi 7 // $7 cel
  11c8:38 0096          pushi 96 // $96 setCycle
  11cb:78               push1 
  11cc:76               push0 
  11cd:81 00              lag  
  11cf:4a 26             send 26 

  11d1:35 7b              ldi 7b 
  11d3:65 16             aTop ticks 
  11d5:32 00d4            jmp code_12ac 

        code_11d8
  11d8:3c                 dup 
  11d9:35 0b              ldi b 
  11db:1a                 eq? 
  11dc:30 0013            bnt code_11f2 
  11df:38 011b          pushi 11b // $11b setMotion
  11e2:39 04            pushi 4 // $4 x
  11e4:51 1e            class MoveTo 
  11e6:36                push 
  11e7:78               push1 
  11e8:39 72            pushi 72 // $72 yourself
  11ea:7c            pushSelf 
  11eb:81 00              lag  
  11ed:4a 0c             send c 

  11ef:32 00ba            jmp code_12ac 

        code_11f2
  11f2:3c                 dup 
  11f3:35 0c              ldi c 
  11f5:1a                 eq? 
  11f6:30 0007            bnt code_1200 
  11f9:35 03              ldi 3 
  11fb:65 12             aTop seconds 
  11fd:32 00ac            jmp code_12ac 

        code_1200
  1200:3c                 dup 
  1201:35 0d              ldi d 
  1203:1a                 eq? 
  1204:30 0026            bnt code_122d 
  1207:38 009f          pushi 9f // $9f fade
  120a:39 04            pushi 4 // $4 x
  120c:76               push0 
  120d:39 0f            pushi f // $f lsBottom
  120f:39 0c            pushi c // $c nsRight
  1211:78               push1 
  1212:81 66              lag  
  1214:4a 0c             send c 

  1216:38 00c9          pushi c9 // $c9 disable
  1219:76               push0 
  121a:81 45              lag  
  121c:4a 04             send 4 

  121e:7a               push2 
  121f:78               push1 
  1220:38 8006          pushi 8006 // $8006 sel_32774
  1223:43 08 04         callk DrawPic 4 

  1226:35 1e              ldi 1e 
  1228:65 16             aTop ticks 
  122a:32 007f            jmp code_12ac 

        code_122d
  122d:3c                 dup 
  122e:35 0e              ldi e 
  1230:1a                 eq? 
  1231:30 0018            bnt code_124c 
  1234:38 00a7          pushi a7 // $a7 enable
  1237:76               push0 
  1238:81 45              lag  
  123a:4a 04             send 4 

  123c:7a               push2 
  123d:38 037a          pushi 37a // $37a sel_890
  1240:39 22            pushi 22 // $22 type
  1242:45 0e 04         callb procedure_000e 4 //  

  1245:35 03              ldi 3 
  1247:65 12             aTop seconds 
  1249:32 0060            jmp code_12ac 

        code_124c
  124c:3c                 dup 
  124d:35 0f              ldi f 
  124f:1a                 eq? 
  1250:30 0010            bnt code_1263 
  1253:7a               push2 
  1254:38 037a          pushi 37a // $37a sel_890
  1257:39 23            pushi 23 // $23 window
  1259:45 0e 04         callb procedure_000e 4 //  

  125c:35 03              ldi 3 
  125e:65 12             aTop seconds 
  1260:32 0049            jmp code_12ac 

        code_1263
  1263:3c                 dup 
  1264:35 10              ldi 10 
  1266:1a                 eq? 
  1267:30 0042            bnt code_12ac 
  126a:35 00              ldi 0 
  126c:a5 00              sat temp0 

        code_126e
  126e:8d 00              lst temp0 
  1270:39 59            pushi 59 // $59 size
  1272:76               push0 
  1273:51 40            class Inv 
  1275:4a 04             send 4 

  1277:22                 lt? 
  1278:30 0026            bnt code_12a1 
  127b:39 43            pushi 43 // $43 at
  127d:78               push1 
  127e:8d 00              lst temp0 
  1280:51 40            class Inv 
  1282:4a 06             send 6 

  1284:a5 01              sat temp1 
  1286:38 0149          pushi 149 // $149 ownedBy
  1289:78               push1 
  128a:38 03e8          pushi 3e8 // $3e8 sel_1000
  128d:4a 06             send 6 

  128f:30 000a            bnt code_129c 
  1292:38 009b          pushi 9b // $9b owner
  1295:78               push1 
  1296:39 18            pushi 18 // $18 key
  1298:85 01              lat temp1 
  129a:4a 06             send 6 


        code_129c
  129c:c5 00              +at temp0 
  129e:32 ffcd            jmp code_126e 

        code_12a1
  12a1:38 0179          pushi 179 // $179 newRoom
  12a4:78               push1 
  12a5:38 00c8          pushi c8 // $c8 dispatchEvent
  12a8:81 02              lag  
  12aa:4a 06             send 6 


        code_12ac
  12ac:3a                toss 
  12ad:48                 ret 
    )

)

// 13a6
(instance GetTape of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_12e8
  12e8:87 01              lap param1 
  12ea:65 0a             aTop state 
  12ec:36                push 
  12ed:3c                 dup 
  12ee:35 00              ldi 0 
  12f0:1a                 eq? 
  12f1:30 0029            bnt code_131d 
  12f4:76               push0 
  12f5:45 02 00         callb procedure_0002 0 //  

  12f8:39 05            pushi 5 // $5 view
  12fa:78               push1 
  12fb:38 037b          pushi 37b // $37b sel_891
  12fe:38 00a2          pushi a2 // $a2 setLoop
  1301:78               push1 
  1302:76               push0 
  1303:38 0120          pushi 120 // $120 setCel
  1306:78               push1 
  1307:76               push0 
  1308:38 00db          pushi db // $db cycleSpeed
  130b:78               push1 
  130c:39 0c            pushi c // $c nsRight
  130e:38 0096          pushi 96 // $96 setCycle
  1311:7a               push2 
  1312:51 1a            class End 
  1314:36                push 
  1315:7c            pushSelf 
  1316:81 00              lag  
  1318:4a 20             send 20 

  131a:32 0080            jmp code_139d 

        code_131d
  131d:3c                 dup 
  131e:35 01              ldi 1 
  1320:1a                 eq? 
  1321:30 0007            bnt code_132b 
  1324:35 1e              ldi 1e 
  1326:65 16             aTop ticks 
  1328:32 0072            jmp code_139d 

        code_132b
  132b:3c                 dup 
  132c:35 02              ldi 2 
  132e:1a                 eq? 
  132f:30 0025            bnt code_1357 
  1332:39 6b            pushi 6b // $6b init
  1334:76               push0 
  1335:72 0da0          lofsa $0da0 // tapeHole
  1338:4a 04             send 4 

  133a:39 3c            pushi 3c // $3c doit
  133c:76               push0 
  133d:81 0a              lag  
  133f:4a 04             send 4 

  1341:38 0120          pushi 120 // $120 setCel
  1344:78               push1 
  1345:38 00ff          pushi ff // $ff syncNum
  1348:38 0096          pushi 96 // $96 setCycle
  134b:7a               push2 
  134c:51 1b            class Beg 
  134e:36                push 
  134f:7c            pushSelf 
  1350:81 00              lag  
  1352:4a 0e             send e 

  1354:32 0046            jmp code_139d 

        code_1357
  1357:3c                 dup 
  1358:35 03              ldi 3 
  135a:1a                 eq? 
  135b:30 001d            bnt code_137b 
  135e:38 0147          pushi 147 // $147 get
  1361:78               push1 
  1362:39 0c            pushi c // $c nsRight
  1364:38 020a          pushi 20a // $20a normalize
  1367:78               push1 
  1368:38 0368          pushi 368 // $368 sel_872
  136b:38 00e4          pushi e4 // $e4 setHeading
  136e:78               push1 
  136f:76               push0 
  1370:81 00              lag  
  1372:4a 12             send 12 

  1374:35 1e              ldi 1e 
  1376:65 16             aTop ticks 
  1378:32 0022            jmp code_139d 

        code_137b
  137b:3c                 dup 
  137c:35 04              ldi 4 
  137e:1a                 eq? 
  137f:30 001b            bnt code_139d 
  1382:7a               push2 
  1383:39 04            pushi 4 // $4 x
  1385:38 009e          pushi 9e // $9e hold
  1388:45 0a 04         callb procedure_000a 4 //  

  138b:7a               push2 
  138c:38 037a          pushi 37a // $37a sel_890
  138f:39 24            pushi 24 // $24 cursor
  1391:45 0e 04         callb procedure_000e 4 //  

  1394:76               push0 
  1395:45 03 00         callb procedure_0003 0 //  

  1398:39 6c            pushi 6c // $6c dispose
  139a:76               push0 
  139b:54 04             self 4 


        code_139d
  139d:3a                toss 
  139e:48                 ret 
  139f:00                bnot 
    )

)

// 151c
(instance turnRecorderOn of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_13da
  13da:87 01              lap param1 
  13dc:65 0a             aTop state 
  13de:36                push 
  13df:3c                 dup 
  13e0:35 00              ldi 0 
  13e2:1a                 eq? 
  13e3:30 0029            bnt code_140f 
  13e6:76               push0 
  13e7:45 02 00         callb procedure_0002 0 //  

  13ea:39 05            pushi 5 // $5 view
  13ec:78               push1 
  13ed:38 037b          pushi 37b // $37b sel_891
  13f0:38 00a2          pushi a2 // $a2 setLoop
  13f3:78               push1 
  13f4:7a               push2 
  13f5:38 0120          pushi 120 // $120 setCel
  13f8:78               push1 
  13f9:76               push0 
  13fa:38 00db          pushi db // $db cycleSpeed
  13fd:78               push1 
  13fe:39 0c            pushi c // $c nsRight
  1400:38 0096          pushi 96 // $96 setCycle
  1403:7a               push2 
  1404:51 1a            class End 
  1406:36                push 
  1407:7c            pushSelf 
  1408:81 00              lag  
  140a:4a 20             send 20 

  140c:32 0104            jmp code_1513 

        code_140f
  140f:3c                 dup 
  1410:35 01              ldi 1 
  1412:1a                 eq? 
  1413:30 0032            bnt code_1448 
  1416:38 0096          pushi 96 // $96 setCycle
  1419:78               push1 
  141a:51 1f            class Rev 
  141c:36                push 
  141d:38 011f          pushi 11f // $11f startUpd
  1420:76               push0 
  1421:72 0d24          lofsa $0d24 // tape
  1424:4a 0a             send a 

  1426:38 020a          pushi 20a // $20a normalize
  1429:78               push1 
  142a:38 0368          pushi 368 // $368 sel_872
  142d:39 06            pushi 6 // $6 loop
  142f:78               push1 
  1430:39 04            pushi 4 // $4 x
  1432:39 07            pushi 7 // $7 cel
  1434:78               push1 
  1435:78               push1 
  1436:38 00e4          pushi e4 // $e4 setHeading
  1439:78               push1 
  143a:38 010e          pushi 10e // $10e description
  143d:81 00              lag  
  143f:4a 18             send 18 

  1441:35 1e              ldi 1e 
  1443:65 16             aTop ticks 
  1445:32 00cb            jmp code_1513 

        code_1448
  1448:3c                 dup 
  1449:35 02              ldi 2 
  144b:1a                 eq? 
  144c:30 001d            bnt code_146c 
  144f:7a               push2 
  1450:39 04            pushi 4 // $4 x
  1452:38 009b          pushi 9b // $9b owner
  1455:45 0a 04         callb procedure_000a 4 //  

  1458:7a               push2 
  1459:38 037a          pushi 37a // $37a sel_890
  145c:39 25            pushi 25 // $25 max
  145e:45 0e 04         callb procedure_000e 4 //  

  1461:35 01              ldi 1 
  1463:a3 01              sal local1 
  1465:35 07              ldi 7 
  1467:65 12             aTop seconds 
  1469:32 00a7            jmp code_1513 

        code_146c
  146c:3c                 dup 
  146d:35 03              ldi 3 
  146f:1a                 eq? 
  1470:30 0010            bnt code_1483 
  1473:7a               push2 
  1474:38 037a          pushi 37a // $37a sel_890
  1477:39 26            pushi 26 // $26 mark
  1479:45 0e 04         callb procedure_000e 4 //  

  147c:35 03              ldi 3 
  147e:65 12             aTop seconds 
  1480:32 0090            jmp code_1513 

        code_1483
  1483:3c                 dup 
  1484:35 04              ldi 4 
  1486:1a                 eq? 
  1487:30 0015            bnt code_149f 
  148a:38 00a2          pushi a2 // $a2 setLoop
  148d:78               push1 
  148e:78               push1 
  148f:38 0096          pushi 96 // $96 setCycle
  1492:7a               push2 
  1493:51 1a            class End 
  1495:36                push 
  1496:7c            pushSelf 
  1497:72 0dec          lofsa $0dec // hammer
  149a:4a 0e             send e 

  149c:32 0074            jmp code_1513 

        code_149f
  149f:3c                 dup 
  14a0:35 05              ldi 5 
  14a2:1a                 eq? 
  14a3:30 0010            bnt code_14b6 
  14a6:7a               push2 
  14a7:38 037a          pushi 37a // $37a sel_890
  14aa:39 27            pushi 27 // $27 who
  14ac:45 0e 04         callb procedure_000e 4 //  

  14af:35 03              ldi 3 
  14b1:65 12             aTop seconds 
  14b3:32 005d            jmp code_1513 

        code_14b6
  14b6:3c                 dup 
  14b7:35 06              ldi 6 
  14b9:1a                 eq? 
  14ba:30 001e            bnt code_14db 
  14bd:39 07            pushi 7 // $7 cel
  14bf:78               push1 
  14c0:76               push0 
  14c1:38 0096          pushi 96 // $96 setCycle
  14c4:78               push1 
  14c5:76               push0 
  14c6:38 011b          pushi 11b // $11b setMotion
  14c9:39 04            pushi 4 // $4 x
  14cb:51 1e            class MoveTo 
  14cd:36                push 
  14ce:39 0a            pushi a // $a nsLeft
  14d0:39 78            pushi 78 // $78 isEmpty
  14d2:7c            pushSelf 
  14d3:72 0dec          lofsa $0dec // hammer
  14d6:4a 18             send 18 

  14d8:32 0038            jmp code_1513 

        code_14db
  14db:3c                 dup 
  14dc:35 07              ldi 7 
  14de:1a                 eq? 
  14df:30 0019            bnt code_14fb 
  14e2:7a               push2 
  14e3:38 037a          pushi 37a // $37a sel_890
  14e6:39 28            pushi 28 // $28 message
  14e8:45 0e 04         callb procedure_000e 4 //  

  14eb:38 011f          pushi 11f // $11f startUpd
  14ee:76               push0 
  14ef:72 0e6a          lofsa $0e6a // glass
  14f2:4a 04             send 4 

  14f4:35 05              ldi 5 
  14f6:65 10             aTop cycles 
  14f8:32 0018            jmp code_1513 

        code_14fb
  14fb:3c                 dup 
  14fc:35 08              ldi 8 
  14fe:1a                 eq? 
  14ff:30 0011            bnt code_1513 
  1502:39 6c            pushi 6c // $6c dispose
  1504:76               push0 
  1505:54 04             self 4 

  1507:38 008e          pushi 8e // $8e setScript
  150a:78               push1 
  150b:72 05f2          lofsa $05f2 // sCartoon
  150e:36                push 
  150f:81 02              lag  
  1511:4a 06             send 6 


        code_1513
  1513:3a                toss 
  1514:48                 ret 
  1515:00                bnot 
    )

)

// 15f4
(instance turnRecorderOff of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1550
  1550:87 01              lap param1 
  1552:65 0a             aTop state 
  1554:36                push 
  1555:3c                 dup 
  1556:35 00              ldi 0 
  1558:1a                 eq? 
  1559:30 0029            bnt code_1585 
  155c:76               push0 
  155d:45 02 00         callb procedure_0002 0 //  

  1560:39 05            pushi 5 // $5 view
  1562:78               push1 
  1563:38 037b          pushi 37b // $37b sel_891
  1566:38 00a2          pushi a2 // $a2 setLoop
  1569:78               push1 
  156a:7a               push2 
  156b:38 0120          pushi 120 // $120 setCel
  156e:78               push1 
  156f:76               push0 
  1570:38 00db          pushi db // $db cycleSpeed
  1573:78               push1 
  1574:39 0c            pushi c // $c nsRight
  1576:38 0096          pushi 96 // $96 setCycle
  1579:7a               push2 
  157a:51 1a            class End 
  157c:36                push 
  157d:7c            pushSelf 
  157e:81 00              lag  
  1580:4a 20             send 20 

  1582:32 0066            jmp code_15eb 

        code_1585
  1585:3c                 dup 
  1586:35 01              ldi 1 
  1588:1a                 eq? 
  1589:30 0015            bnt code_15a1 
  158c:38 0096          pushi 96 // $96 setCycle
  158f:78               push1 
  1590:76               push0 
  1591:38 011d          pushi 11d // $11d stopUpd
  1594:76               push0 
  1595:72 0d24          lofsa $0d24 // tape
  1598:4a 0a             send a 

  159a:35 1e              ldi 1e 
  159c:65 16             aTop ticks 
  159e:32 004a            jmp code_15eb 

        code_15a1
  15a1:3c                 dup 
  15a2:35 02              ldi 2 
  15a4:1a                 eq? 
  15a5:30 002a            bnt code_15d2 
  15a8:35 00              ldi 0 
  15aa:a3 01              sal local1 
  15ac:35 01              ldi 1 
  15ae:a3 02              sal local2 
  15b0:38 020a          pushi 20a // $20a normalize
  15b3:78               push1 
  15b4:38 0368          pushi 368 // $368 sel_872
  15b7:39 06            pushi 6 // $6 loop
  15b9:78               push1 
  15ba:39 04            pushi 4 // $4 x
  15bc:39 07            pushi 7 // $7 cel
  15be:78               push1 
  15bf:78               push1 
  15c0:38 00e4          pushi e4 // $e4 setHeading
  15c3:78               push1 
  15c4:38 010e          pushi 10e // $10e description
  15c7:81 00              lag  
  15c9:4a 18             send 18 

  15cb:35 1e              ldi 1e 
  15cd:65 16             aTop ticks 
  15cf:32 0019            jmp code_15eb 

        code_15d2
  15d2:3c                 dup 
  15d3:35 03              ldi 3 
  15d5:1a                 eq? 
  15d6:30 0012            bnt code_15eb 
  15d9:7a               push2 
  15da:38 037a          pushi 37a // $37a sel_890
  15dd:39 29            pushi 29 // $29 edit
  15df:45 0e 04         callb procedure_000e 4 //  

  15e2:76               push0 
  15e3:45 03 00         callb procedure_0003 0 //  

  15e6:39 6c            pushi 6c // $6c dispose
  15e8:76               push0 
  15e9:54 04             self 4 


        code_15eb
  15eb:3a                toss 
  15ec:48                 ret 
  15ed:00                bnot 
    )

)

// 16ea
(instance rewindTape of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1628
  1628:87 01              lap param1 
  162a:65 0a             aTop state 
  162c:36                push 
  162d:3c                 dup 
  162e:35 00              ldi 0 
  1630:1a                 eq? 
  1631:30 0029            bnt code_165d 
  1634:76               push0 
  1635:45 02 00         callb procedure_0002 0 //  

  1638:39 05            pushi 5 // $5 view
  163a:78               push1 
  163b:38 037b          pushi 37b // $37b sel_891
  163e:38 00a2          pushi a2 // $a2 setLoop
  1641:78               push1 
  1642:7a               push2 
  1643:38 0120          pushi 120 // $120 setCel
  1646:78               push1 
  1647:76               push0 
  1648:38 00db          pushi db // $db cycleSpeed
  164b:78               push1 
  164c:39 0c            pushi c // $c nsRight
  164e:38 0096          pushi 96 // $96 setCycle
  1651:7a               push2 
  1652:51 1a            class End 
  1654:36                push 
  1655:7c            pushSelf 
  1656:81 00              lag  
  1658:4a 20             send 20 

  165a:32 0085            jmp code_16e2 

        code_165d
  165d:3c                 dup 
  165e:35 01              ldi 1 
  1660:1a                 eq? 
  1661:30 0007            bnt code_166b 
  1664:35 1e              ldi 1e 
  1666:65 16             aTop ticks 
  1668:32 0077            jmp code_16e2 

        code_166b
  166b:3c                 dup 
  166c:35 02              ldi 2 
  166e:1a                 eq? 
  166f:30 0037            bnt code_16a9 
  1672:38 020a          pushi 20a // $20a normalize
  1675:78               push1 
  1676:38 0368          pushi 368 // $368 sel_872
  1679:39 06            pushi 6 // $6 loop
  167b:78               push1 
  167c:39 04            pushi 4 // $4 x
  167e:39 07            pushi 7 // $7 cel
  1680:78               push1 
  1681:78               push1 
  1682:38 00e4          pushi e4 // $e4 setHeading
  1685:78               push1 
  1686:38 010e          pushi 10e // $10e description
  1689:81 00              lag  
  168b:4a 18             send 18 

  168d:38 0096          pushi 96 // $96 setCycle
  1690:78               push1 
  1691:51 17            class Fwd 
  1693:36                push 
  1694:38 011f          pushi 11f // $11f startUpd
  1697:76               push0 
  1698:38 00db          pushi db // $db cycleSpeed
  169b:78               push1 
  169c:76               push0 
  169d:72 0d24          lofsa $0d24 // tape
  16a0:4a 10             send 10 

  16a2:35 07              ldi 7 
  16a4:65 12             aTop seconds 
  16a6:32 0039            jmp code_16e2 

        code_16a9
  16a9:3c                 dup 
  16aa:35 03              ldi 3 
  16ac:1a                 eq? 
  16ad:30 0015            bnt code_16c5 
  16b0:38 0096          pushi 96 // $96 setCycle
  16b3:78               push1 
  16b4:76               push0 
  16b5:38 011d          pushi 11d // $11d stopUpd
  16b8:76               push0 
  16b9:72 0d24          lofsa $0d24 // tape
  16bc:4a 0a             send a 

  16be:35 1e              ldi 1e 
  16c0:65 16             aTop ticks 
  16c2:32 001d            jmp code_16e2 

        code_16c5
  16c5:3c                 dup 
  16c6:35 04              ldi 4 
  16c8:1a                 eq? 
  16c9:30 0016            bnt code_16e2 
  16cc:7a               push2 
  16cd:38 037a          pushi 37a // $37a sel_890
  16d0:39 2a            pushi 2a // $2a play
  16d2:45 0e 04         callb procedure_000e 4 //  

  16d5:35 01              ldi 1 
  16d7:a3 09              sal local9 
  16d9:76               push0 
  16da:45 03 00         callb procedure_0003 0 //  

  16dd:39 6c            pushi 6c // $6c dispose
  16df:76               push0 
  16e0:54 04             self 4 


        code_16e2
  16e2:3a                toss 
  16e3:48                 ret 
    )

)

// 180c
(instance getRecordedTape of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_171e
  171e:87 01              lap param1 
  1720:65 0a             aTop state 
  1722:36                push 
  1723:3c                 dup 
  1724:35 00              ldi 0 
  1726:1a                 eq? 
  1727:30 002e            bnt code_1758 
  172a:76               push0 
  172b:45 02 00         callb procedure_0002 0 //  

  172e:39 05            pushi 5 // $5 view
  1730:78               push1 
  1731:38 037b          pushi 37b // $37b sel_891
  1734:38 00a2          pushi a2 // $a2 setLoop
  1737:78               push1 
  1738:78               push1 
  1739:38 0120          pushi 120 // $120 setCel
  173c:78               push1 
  173d:39 03            pushi 3 // $3 y
  173f:38 00db          pushi db // $db cycleSpeed
  1742:78               push1 
  1743:39 0c            pushi c // $c nsRight
  1745:38 0096          pushi 96 // $96 setCycle
  1748:39 04            pushi 4 // $4 x
  174a:51 19            class CT 
  174c:36                push 
  174d:7a               push2 
  174e:39 ff            pushi ff // $ff syncNum
  1750:7c            pushSelf 
  1751:81 00              lag  
  1753:4a 24             send 24 

  1755:32 00ac            jmp code_1804 

        code_1758
  1758:3c                 dup 
  1759:35 01              ldi 1 
  175b:1a                 eq? 
  175c:30 0033            bnt code_1792 
  175f:38 00a2          pushi a2 // $a2 setLoop
  1762:78               push1 
  1763:78               push1 
  1764:38 0120          pushi 120 // $120 setCel
  1767:78               push1 
  1768:76               push0 
  1769:39 04            pushi 4 // $4 x
  176b:78               push1 
  176c:39 2a            pushi 2a // $2a play
  176e:39 03            pushi 3 // $3 y
  1770:78               push1 
  1771:38 0082          pushi 82 // $82 start
  1774:38 011d          pushi 11d // $11d stopUpd
  1777:76               push0 
  1778:72 0d24          lofsa $0d24 // tape
  177b:4a 1c             send 1c 

  177d:38 00db          pushi db // $db cycleSpeed
  1780:78               push1 
  1781:39 0c            pushi c // $c nsRight
  1783:38 0096          pushi 96 // $96 setCycle
  1786:7a               push2 
  1787:51 1b            class Beg 
  1789:36                push 
  178a:7c            pushSelf 
  178b:81 00              lag  
  178d:4a 0e             send e 

  178f:32 0072            jmp code_1804 

        code_1792
  1792:3c                 dup 
  1793:35 02              ldi 2 
  1795:1a                 eq? 
  1796:30 003b            bnt code_17d4 
  1799:38 0147          pushi 147 // $147 get
  179c:78               push1 
  179d:39 0c            pushi c // $c nsRight
  179f:81 00              lag  
  17a1:4a 06             send 6 

  17a3:39 20            pushi 20 // $20 state
  17a5:78               push1 
  17a6:78               push1 
  17a7:39 43            pushi 43 // $43 at
  17a9:78               push1 
  17aa:39 0c            pushi c // $c nsRight
  17ac:51 40            class Inv 
  17ae:4a 06             send 6 

  17b0:4a 06             send 6 

  17b2:38 020a          pushi 20a // $20a normalize
  17b5:78               push1 
  17b6:38 0368          pushi 368 // $368 sel_872
  17b9:39 06            pushi 6 // $6 loop
  17bb:78               push1 
  17bc:39 04            pushi 4 // $4 x
  17be:39 07            pushi 7 // $7 cel
  17c0:78               push1 
  17c1:78               push1 
  17c2:38 00e4          pushi e4 // $e4 setHeading
  17c5:78               push1 
  17c6:38 010e          pushi 10e // $10e description
  17c9:81 00              lag  
  17cb:4a 18             send 18 

  17cd:35 1e              ldi 1e 
  17cf:65 16             aTop ticks 
  17d1:32 0030            jmp code_1804 

        code_17d4
  17d4:3c                 dup 
  17d5:35 03              ldi 3 
  17d7:1a                 eq? 
  17d8:30 0019            bnt code_17f4 
  17db:7a               push2 
  17dc:39 07            pushi 7 // $7 cel
  17de:38 009c          pushi 9c // $9c stop
  17e1:45 0a 04         callb procedure_000a 4 //  

  17e4:7a               push2 
  17e5:38 037a          pushi 37a // $37a sel_890
  17e8:39 2b            pushi 2b // $2b number
  17ea:45 0e 04         callb procedure_000e 4 //  

  17ed:35 1e              ldi 1e 
  17ef:65 16             aTop ticks 
  17f1:32 0010            jmp code_1804 

        code_17f4
  17f4:3c                 dup 
  17f5:35 04              ldi 4 
  17f7:1a                 eq? 
  17f8:30 0009            bnt code_1804 
  17fb:76               push0 
  17fc:45 03 00         callb procedure_0003 0 //  

  17ff:39 6c            pushi 6c // $6c dispose
  1801:76               push0 
  1802:54 04             self 4 


        code_1804
  1804:3a                toss 
  1805:48                 ret 
    )

)

// 19c0
(instance useMixer of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1840
  1840:87 01              lap param1 
  1842:65 0a             aTop state 
  1844:36                push 
  1845:3c                 dup 
  1846:35 00              ldi 0 
  1848:1a                 eq? 
  1849:30 002b            bnt code_1877 
  184c:76               push0 
  184d:45 02 00         callb procedure_0002 0 //  

  1850:39 05            pushi 5 // $5 view
  1852:78               push1 
  1853:38 037b          pushi 37b // $37b sel_891
  1856:38 00a2          pushi a2 // $a2 setLoop
  1859:78               push1 
  185a:7a               push2 
  185b:38 00db          pushi db // $db cycleSpeed
  185e:78               push1 
  185f:39 0c            pushi c // $c nsRight
  1861:38 0120          pushi 120 // $120 setCel
  1864:78               push1 
  1865:76               push0 
  1866:38 0096          pushi 96 // $96 setCycle
  1869:39 03            pushi 3 // $3 y
  186b:51 5f            class Osc 
  186d:36                push 
  186e:78               push1 
  186f:7c            pushSelf 
  1870:81 00              lag  
  1872:4a 22             send 22 

  1874:32 0141            jmp code_19b8 

        code_1877
  1877:3c                 dup 
  1878:35 01              ldi 1 
  187a:1a                 eq? 
  187b:30 0022            bnt code_18a0 
  187e:39 06            pushi 6 // $6 loop
  1880:78               push1 
  1881:39 04            pushi 4 // $4 x
  1883:39 07            pushi 7 // $7 cel
  1885:78               push1 
  1886:78               push1 
  1887:38 00e4          pushi e4 // $e4 setHeading
  188a:78               push1 
  188b:38 010e          pushi 10e // $10e description
  188e:38 020a          pushi 20a // $20a normalize
  1891:78               push1 
  1892:38 0368          pushi 368 // $368 sel_872
  1895:81 00              lag  
  1897:4a 18             send 18 

  1899:35 1e              ldi 1e 
  189b:65 16             aTop ticks 
  189d:32 0118            jmp code_19b8 

        code_18a0
  18a0:3c                 dup 
  18a1:35 02              ldi 2 
  18a3:1a                 eq? 
  18a4:30 0111            bnt code_19b8 
  18a7:8b 07              lsl local7 
  18a9:3c                 dup 
  18aa:35 01              ldi 1 
  18ac:1a                 eq? 
  18ad:30 0003            bnt code_18b3 
  18b0:32 00fb            jmp code_19ae 

        code_18b3
  18b3:3c                 dup 
  18b4:35 02              ldi 2 
  18b6:1a                 eq? 
  18b7:30 001b            bnt code_18d5 
  18ba:7a               push2 
  18bb:38 037a          pushi 37a // $37a sel_890
  18be:39 2c            pushi 2c // $2c nodePtr
  18c0:45 0e 04         callb procedure_000e 4 //  

  18c3:78               push1 
  18c4:39 3c            pushi 3c // $3c doit
  18c6:43 41 02         callk Wait 2 

  18c9:7a               push2 
  18ca:38 037a          pushi 37a // $37a sel_890
  18cd:39 2d            pushi 2d // $2d client
  18cf:45 0e 04         callb procedure_000e 4 //  

  18d2:32 00d9            jmp code_19ae 

        code_18d5
  18d5:3c                 dup 
  18d6:35 03              ldi 3 
  18d8:1a                 eq? 
  18d9:30 001b            bnt code_18f7 
  18dc:7a               push2 
  18dd:38 037a          pushi 37a // $37a sel_890
  18e0:39 2e            pushi 2e // $2e dx
  18e2:45 0e 04         callb procedure_000e 4 //  

  18e5:78               push1 
  18e6:39 3c            pushi 3c // $3c doit
  18e8:43 41 02         callk Wait 2 

  18eb:7a               push2 
  18ec:38 037a          pushi 37a // $37a sel_890
  18ef:39 2f            pushi 2f // $2f dy
  18f1:45 0e 04         callb procedure_000e 4 //  

  18f4:32 00b7            jmp code_19ae 

        code_18f7
  18f7:3c                 dup 
  18f8:35 04              ldi 4 
  18fa:1a                 eq? 
  18fb:30 0023            bnt code_1921 
  18fe:7a               push2 
  18ff:38 037a          pushi 37a // $37a sel_890
  1902:39 30            pushi 30 // $30 b-moveCnt
  1904:45 0e 04         callb procedure_000e 4 //  

  1907:78               push1 
  1908:39 3c            pushi 3c // $3c doit
  190a:43 41 02         callk Wait 2 

  190d:39 05            pushi 5 // $5 view
  190f:38 037a          pushi 37a // $37a sel_890
  1912:39 31            pushi 31 // $31 b-i1
  1914:39 43            pushi 43 // $43 at
  1916:39 ff            pushi ff // $ff syncNum
  1918:38 00b9          pushi b9 // $b9 bottom
  191b:45 0e 0a         callb procedure_000e a //  

  191e:32 008d            jmp code_19ae 

        code_1921
  1921:3c                 dup 
  1922:35 05              ldi 5 
  1924:1a                 eq? 
  1925:30 001b            bnt code_1943 
  1928:7a               push2 
  1929:38 037a          pushi 37a // $37a sel_890
  192c:39 32            pushi 32 // $32 b-i2
  192e:45 0e 04         callb procedure_000e 4 //  

  1931:78               push1 
  1932:39 3c            pushi 3c // $3c doit
  1934:43 41 02         callk Wait 2 

  1937:7a               push2 
  1938:38 037a          pushi 37a // $37a sel_890
  193b:39 33            pushi 33 // $33 b-di
  193d:45 0e 04         callb procedure_000e 4 //  

  1940:32 006b            jmp code_19ae 

        code_1943
  1943:3c                 dup 
  1944:35 06              ldi 6 
  1946:1a                 eq? 
  1947:30 001b            bnt code_1965 
  194a:7a               push2 
  194b:38 037a          pushi 37a // $37a sel_890
  194e:39 34            pushi 34 // $34 b-xAxis
  1950:45 0e 04         callb procedure_000e 4 //  

  1953:78               push1 
  1954:39 3c            pushi 3c // $3c doit
  1956:43 41 02         callk Wait 2 

  1959:7a               push2 
  195a:38 037a          pushi 37a // $37a sel_890
  195d:39 35            pushi 35 // $35 b-incr
  195f:45 0e 04         callb procedure_000e 4 //  

  1962:32 0049            jmp code_19ae 

        code_1965
  1965:78               push1 
  1966:38 009a          pushi 9a // $9a prevSignal
  1969:45 06 02         callb procedure_0006 2 //  

  196c:18                 not 
  196d:30 000f            bnt code_197f 
  1970:38 008e          pushi 8e // $8e setScript
  1973:78               push1 
  1974:72 1a6c          lofsa $1a6c // sHearingScrew
  1977:36                push 
  1978:81 00              lag  
  197a:4a 06             send 6 

  197c:32 002f            jmp code_19ae 

        code_197f
  197f:83 03              lal local3 
  1981:30 0021            bnt code_19a5 
  1984:83 08              lal local8 
  1986:30 000c            bnt code_1995 
  1989:7a               push2 
  198a:38 037a          pushi 37a // $37a sel_890
  198d:39 36            pushi 36 // $36 xStep
  198f:45 0e 04         callb procedure_000e 4 //  

  1992:32 0019            jmp code_19ae 

        code_1995
  1995:7a               push2 
  1996:38 037a          pushi 37a // $37a sel_890
  1999:39 37            pushi 37 // $37 yStep
  199b:45 0e 04         callb procedure_000e 4 //  

  199e:35 01              ldi 1 
  19a0:a3 08              sal local8 
  19a2:32 0009            jmp code_19ae 

        code_19a5
  19a5:7a               push2 
  19a6:38 037a          pushi 37a // $37a sel_890
  19a9:39 38            pushi 38 // $38 moveSpeed
  19ab:45 0e 04         callb procedure_000e 4 //  


        code_19ae
  19ae:3a                toss 
  19af:76               push0 
  19b0:45 03 00         callb procedure_0003 0 //  

  19b3:39 6c            pushi 6c // $6c dispose
  19b5:76               push0 
  19b6:54 04             self 4 


        code_19b8
  19b8:3a                toss 
  19b9:48                 ret 
    )

)

// 1a66
(instance sHearingScrew of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_19f4
  19f4:87 01              lap param1 
  19f6:65 0a             aTop state 
  19f8:36                push 
  19f9:3c                 dup 
  19fa:35 00              ldi 0 
  19fc:1a                 eq? 
  19fd:30 0020            bnt code_1a20 
  1a00:7a               push2 
  1a01:38 037a          pushi 37a // $37a sel_890
  1a04:39 39            pushi 39 // $39 cantBeHere
  1a06:45 0e 04         callb procedure_000e 4 //  

  1a09:38 0096          pushi 96 // $96 setCycle
  1a0c:78               push1 
  1a0d:51 17            class Fwd 
  1a0f:36                push 
  1a10:38 011f          pushi 11f // $11f startUpd
  1a13:76               push0 
  1a14:72 0f18          lofsa $0f18 // lights
  1a17:4a 0a             send a 

  1a19:35 03              ldi 3 
  1a1b:65 12             aTop seconds 
  1a1d:32 003d            jmp code_1a5d 

        code_1a20
  1a20:3c                 dup 
  1a21:35 01              ldi 1 
  1a23:1a                 eq? 
  1a24:30 0010            bnt code_1a37 
  1a27:7a               push2 
  1a28:38 037a          pushi 37a // $37a sel_890
  1a2b:39 3a            pushi 3a // $3a heading
  1a2d:45 0e 04         callb procedure_000e 4 //  

  1a30:35 03              ldi 3 
  1a32:65 12             aTop seconds 
  1a34:32 0026            jmp code_1a5d 

        code_1a37
  1a37:3c                 dup 
  1a38:35 02              ldi 2 
  1a3a:1a                 eq? 
  1a3b:30 001f            bnt code_1a5d 
  1a3e:7a               push2 
  1a3f:39 08            pushi 8 // $8 underBits
  1a41:38 009a          pushi 9a // $9a prevSignal
  1a44:45 0a 04         callb procedure_000a 4 //  

  1a47:7a               push2 
  1a48:38 037a          pushi 37a // $37a sel_890
  1a4b:39 3b            pushi 3b // $3b mover
  1a4d:45 0e 04         callb procedure_000e 4 //  

  1a50:35 01              ldi 1 
  1a52:a3 04              sal local4 
  1a54:76               push0 
  1a55:45 03 00         callb procedure_0003 0 //  

  1a58:39 6c            pushi 6c // $6c dispose
  1a5a:76               push0 
  1a5b:54 04             self 4 


        code_1a5d
  1a5d:3a                toss 
  1a5e:48                 ret 
  1a5f:00                bnot 
    )

)

// 1b54
(instance mountTapeScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1a9a
  1a9a:87 01              lap param1 
  1a9c:65 0a             aTop state 
  1a9e:36                push 
  1a9f:3c                 dup 
  1aa0:35 00              ldi 0 
  1aa2:1a                 eq? 
  1aa3:30 0038            bnt code_1ade 
  1aa6:76               push0 
  1aa7:45 02 00         callb procedure_0002 0 //  

  1aaa:38 0148          pushi 148 // $148 put
  1aad:7a               push2 
  1aae:39 0c            pushi c // $c nsRight
  1ab0:39 03            pushi 3 // $3 y
  1ab2:51 71            class Patti 
  1ab4:4a 08             send 8 

  1ab6:39 05            pushi 5 // $5 view
  1ab8:78               push1 
  1ab9:38 037b          pushi 37b // $37b sel_891
  1abc:38 00a2          pushi a2 // $a2 setLoop
  1abf:78               push1 
  1ac0:78               push1 
  1ac1:38 00db          pushi db // $db cycleSpeed
  1ac4:78               push1 
  1ac5:39 0c            pushi c // $c nsRight
  1ac7:38 0120          pushi 120 // $120 setCel
  1aca:78               push1 
  1acb:76               push0 
  1acc:38 0096          pushi 96 // $96 setCycle
  1acf:39 04            pushi 4 // $4 x
  1ad1:51 19            class CT 
  1ad3:36                push 
  1ad4:7a               push2 
  1ad5:78               push1 
  1ad6:7c            pushSelf 
  1ad7:81 00              lag  
  1ad9:4a 24             send 24 

  1adb:32 006d            jmp code_1b4b 

        code_1ade
  1ade:3c                 dup 
  1adf:35 01              ldi 1 
  1ae1:1a                 eq? 
  1ae2:30 0024            bnt code_1b09 
  1ae5:38 00a2          pushi a2 // $a2 setLoop
  1ae8:78               push1 
  1ae9:76               push0 
  1aea:39 04            pushi 4 // $4 x
  1aec:78               push1 
  1aed:39 23            pushi 23 // $23 window
  1aef:39 03            pushi 3 // $3 y
  1af1:78               push1 
  1af2:38 008e          pushi 8e // $8e setScript
  1af5:72 0d24          lofsa $0d24 // tape
  1af8:4a 12             send 12 

  1afa:38 0096          pushi 96 // $96 setCycle
  1afd:7a               push2 
  1afe:51 1a            class End 
  1b00:36                push 
  1b01:7c            pushSelf 
  1b02:81 00              lag  
  1b04:4a 08             send 8 

  1b06:32 0042            jmp code_1b4b 

        code_1b09
  1b09:3c                 dup 
  1b0a:35 02              ldi 2 
  1b0c:1a                 eq? 
  1b0d:30 0022            bnt code_1b32 
  1b10:38 020a          pushi 20a // $20a normalize
  1b13:78               push1 
  1b14:38 0368          pushi 368 // $368 sel_872
  1b17:39 06            pushi 6 // $6 loop
  1b19:78               push1 
  1b1a:39 04            pushi 4 // $4 x
  1b1c:39 07            pushi 7 // $7 cel
  1b1e:78               push1 
  1b1f:78               push1 
  1b20:38 00e4          pushi e4 // $e4 setHeading
  1b23:78               push1 
  1b24:38 010e          pushi 10e // $10e description
  1b27:81 00              lag  
  1b29:4a 18             send 18 

  1b2b:35 1e              ldi 1e 
  1b2d:65 16             aTop ticks 
  1b2f:32 0019            jmp code_1b4b 

        code_1b32
  1b32:3c                 dup 
  1b33:35 03              ldi 3 
  1b35:1a                 eq? 
  1b36:30 0012            bnt code_1b4b 
  1b39:7a               push2 
  1b3a:38 037a          pushi 37a // $37a sel_890
  1b3d:39 3c            pushi 3c // $3c doit
  1b3f:45 0e 04         callb procedure_000e 4 //  

  1b42:76               push0 
  1b43:45 03 00         callb procedure_0003 0 //  

  1b46:39 6c            pushi 6c // $6c dispose
  1b48:76               push0 
  1b49:54 04             self 4 


        code_1b4b
  1b4b:3a                toss 
  1b4c:48                 ret 
  1b4d:00                bnot 
    )

)

// 1bb2
(instance doorA of Door
    (properties
        x $2f
        y $4d
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $25e5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $40
        approachY $50
        approachDist $0
        _approachVerbs $6789
        lookStr $25fd
        yStep $2
        view $370
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $0
        locked $1
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $0
        moveToY $0
        enterType $2
        exitType $2
        closeScript $0
        openScript $0
    )
    (method (doVerb) // method_1b88
  1b88:8f 01              lsp param1 
  1b8a:3c                 dup 
  1b8b:35 03              ldi 3 
  1b8d:1a                 eq? 
  1b8e:30 000c            bnt code_1b9d 
  1b91:7a               push2 
  1b92:38 037a          pushi 37a // $37a sel_890
  1b95:39 3d            pushi 3d // $3d isBlocked
  1b97:45 0e 04         callb procedure_000e 4 //  

  1b9a:32 000d            jmp code_1baa 

        code_1b9d
  1b9d:38 010c          pushi 10c // $10c doVerb
  1ba0:7a               push2 
  1ba1:8f 01              lsp param1 
  1ba3:8f 02              lsp param2 
  1ba5:59 03            &rest 3 
  1ba7:57 73 08         super Door 8 


        code_1baa
  1baa:3a                toss 
  1bab:48                 ret 
    )

)

// 1c38
(instance doorB of Door
    (properties
        x $c7
        y $6f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2665
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $da
        approachY $74
        approachDist $0
        _approachVerbs $6789
        lookStr $267d
        yStep $2
        view $370
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $37a
        locked $1
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $dc
        moveToY $74
        enterType $0
        exitType $0
        closeScript $0
        openScript $0
    )
)

// 1cba
(instance hammer of Actor
    (properties
        x $52
        y $4f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $242a
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $26ca
        yStep $2
        view $373
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)

// 1d38
(instance mikestand of Actor
    (properties
        x $af
        y $79
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $274a
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $275f
        yStep $2
        view $370
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)

// 1db6
(instance recSign of Prop
    (properties
        x $b1
        y $2a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $24e8
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $27b5
        yStep $2
        view $370
        loop $3
        cel $1
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1e56
(instance ActionsKRAP of Actions
    (properties
    )
    (method (doit) // method_1e1a
  1e1a:35 00              ldi 0 
  1e1c:48                 ret 
    )

    (method (doVerb) // method_1e1d
  1e1d:8f 01              lsp param1 
  1e1f:3c                 dup 
  1e20:35 03              ldi 3 
  1e22:1a                 eq? 
  1e23:30 000f            bnt code_1e35 
  1e26:7a               push2 
  1e27:38 037a          pushi 37a // $37a sel_890
  1e2a:39 3e            pushi 3e // $3e looper
  1e2c:45 0e 04         callb procedure_000e 4 //  

  1e2f:35 01              ldi 1 
  1e31:48                 ret 
  1e32:32 0019            jmp code_1e4e 

        code_1e35
  1e35:3c                 dup 
  1e36:35 0a              ldi a 
  1e38:1a                 eq? 
  1e39:30 000f            bnt code_1e4b 
  1e3c:7a               push2 
  1e3d:38 037a          pushi 37a // $37a sel_890
  1e40:39 3f            pushi 3f // $3f priority
  1e42:45 0e 04         callb procedure_000e 4 //  

  1e45:35 01              ldi 1 
  1e47:48                 ret 
  1e48:32 0003            jmp code_1e4e 

        code_1e4b
  1e4b:35 00              ldi 0 
  1e4d:48                 ret 

        code_1e4e
  1e4e:3a                toss 
  1e4f:48                 ret 
    )

)



