(script 290)

(string
    string_0f58 "All your life you assumed those snooty, private airport waiting rooms were filled with luxurious appointments."
    string_0fc7 "Los Angeles"
    string_0fd3 "New York"
    string_0fdc "Atlantic City"
    string_0fea "Miami"
    string_0ff0 "rm290"
    string_0ff6 "the chair"
    string_1000 "chair"
    string_1006 "the jetway door"
    string_1016 "door"
    string_101b "the boarding sign"
    string_102d "boardingSign"
    string_103a "sExit270"
    string_1043 "sEnter270"
    string_104d "the Automatic Boarding Pass Machine"
    string_1071 "ABM"
    string_1075 "the coffee pot"
    string_1084 "pot"
    string_1088 "the coffee cabinet"
    string_109b "cabinet"
    string_10a3 "the light fixture"
    string_10b5 "light"
    string_10bb "the lovely painting"
    string_10cf "You've always admired paintings on velvet!"
    string_10fa "leftPainting"
    string_1107 "the beautiful painting"
    string_111e "The last time you saw art this nice, you were in Tijuana."
    string_1158 "rightPainting"
    string_1166 "sChair"
    string_116d "Los Angeles, cheater"
    string_1182 "sReturning"
    string_118d "sJetWay"
    string_1195 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0000
    local6 = $0000
    local7 = $0000
    local8 = $0000
    local9 = $0000
    local10 = $0000
    local11 = $0000
    local12 = $0000
    local13 = $0000
    local14 = $0000
    local15 = $0000
    local16 = $0000
    local17 = $0000
    local18 = $0000
    local19 = $0000
    local20 = $0000
    local21 = $0000
    local22 = $0000
    local23 = $0000
    local24 = $0000
    local25 = $0000
    local26 = $0000
    local27 = $0000
    local28 = $0000
    local29 = $0000
    local30 = $0000
    local31 = $0000
    local32 = $0000
    local33 = $0000
    local34 = $0000
    local35 = $0000
    local36 = $0000
    local37 = $0000
    local38 = $0000
    local39 = $0000
    local40 = $0000
    local41 = $0000
    local42 = $0000
    local43 = $0000
    local44 = $0000
    local45 = $0000
    local46 = $0000
    local47 = $0000
    local48 = $0000
    local49 = $0000
    local50 = $0000
    local51 = $0000
    local52 = $0000
    local53 = $0000
    local54 = $0000
    local55 = $0000
    local56 = $0000
    local57 = $0000
    local58 = $0000
    local59 = $0000
    local60 = $0000
    local61 = $0000
    local62 = $0000
    local63 = $0000
    local64 = $0000
    local65 = $0000
    local66 = $0000
    local67 = $0000
    local68 = $0000
    local69 = $0000
    local70 = $0000
    local71 = $0000
    local72 = $0000
    local73 = $0000
    local74 = $0000
    local75 = $0000
    local76 = $0000
    local77 = $0000
    local78 = $0000
    local79 = $0000
    local80 = $0000
    local81 = $0000
    local82 = $0000
    local83 = $0000
    local84 = $0000
    local85 = $0000
    local86 = $0000
    local87 = $0000
    local88 = $0000
    local89 = $0000
    local90 = $0000
    local91 = $0000
    local92 = $0000
    local93 = $0000
    local94 = $0000
    local95 = $0000
    local96 = $0000
    local97 = $0000
    local98 = $0000
    local99 = $0000
    local100 = $0000
)

// 032e
(instance publicrm290 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $f58
        picture $122
        style $ffff
        horizon $0
        controls $0
        north $136
        east $0
        south $10e
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:7a               push2 
  000f:38 0080          pushi 80 // $80 indexOf
  0012:38 0123          pushi 123 // $123 isExtra
  0015:43 00 04         callk Load 4 

  0018:7a               push2 
  0019:38 0080          pushi 80 // $80 indexOf
  001c:38 0226          pushi 226 // $226 turn
  001f:43 00 04         callk Load 4 

  0022:7a               push2 
  0023:38 0080          pushi 80 // $80 indexOf
  0026:38 0123          pushi 123 // $123 isExtra
  0029:43 00 04         callk Load 4 

  002c:39 6b            pushi 6b // $6b init
  002e:76               push0 
  002f:38 020a          pushi 20a // $20a normalize
  0032:76               push0 
  0033:81 00              lag  
  0035:4a 08             send 8 

  0037:39 6b            pushi 6b // $6b init
  0039:76               push0 
  003a:38 011d          pushi 11d // $11d stopUpd
  003d:76               push0 
  003e:72 0460          lofsa $0460 // door
  0041:4a 08             send 8 

  0043:89 0c              lsg  
  0045:3c                 dup 
  0046:63 1c             pToa north 
  0048:1a                 eq? 
  0049:30 0043            bnt code_008f 
  004c:39 05            pushi 5 // $5 view
  004e:78               push1 
  004f:38 0123          pushi 123 // $123 isExtra
  0052:38 00a2          pushi a2 // $a2 setLoop
  0055:78               push1 
  0056:39 05            pushi 5 // $5 view
  0058:38 0096          pushi 96 // $96 setCycle
  005b:78               push1 
  005c:76               push0 
  005d:38 011c          pushi 11c // $11c posn
  0060:7a               push2 
  0061:38 0098          pushi 98 // $98 set60ths
  0064:39 5d            pushi 5d // $5d handle
  0066:81 00              lag  
  0068:4a 1a             send 1a 

  006a:38 011c          pushi 11c // $11c posn
  006d:7a               push2 
  006e:39 6f            pushi 6f // $6f isKindOf
  0070:39 76            pushi 76 // $76 allTrue
  0072:72 0460          lofsa $0460 // door
  0075:4a 08             send 8 

  0077:78               push1 
  0078:76               push0 
  0079:45 16 02         callb procedure_0016 2 //  

  007c:78               push1 
  007d:39 20            pushi 20 // $20 state
  007f:45 08 02         callb procedure_0008 2 //  

  0082:38 008e          pushi 8e // $8e setScript
  0085:78               push1 
  0086:72 0d90          lofsa $0d90 // sReturning
  0089:36                push 
  008a:54 06             self 6 

  008c:32 0037            jmp code_00c6 

        code_008f
  008f:3c                 dup 
  0090:63 20             pToa south 
  0092:1a                 eq? 
  0093:30 001b            bnt code_00b1 
  0096:38 011c          pushi 11c // $11c posn
  0099:7a               push2 
  009a:38 009f          pushi 9f // $9f fade
  009d:38 00e1          pushi e1 // $e1 yLast
  00a0:81 00              lag  
  00a2:4a 08             send 8 

  00a4:38 008e          pushi 8e // $8e setScript
  00a7:78               push1 
  00a8:72 0668          lofsa $0668 // sEnter270
  00ab:36                push 
  00ac:54 06             self 6 

  00ae:32 0015            jmp code_00c6 

        code_00b1
  00b1:76               push0 
  00b2:45 03 00         callb procedure_0003 0 //  

  00b5:38 011c          pushi 11c // $11c posn
  00b8:7a               push2 
  00b9:38 00a0          pushi a0 // $a0 mute
  00bc:3c                 dup 
  00bd:38 0146          pushi 146 // $146 edgeHit
  00c0:78               push1 
  00c1:76               push0 
  00c2:81 00              lag  
  00c4:4a 0e             send e 


        code_00c6
  00c6:3a                toss 
  00c7:39 6b            pushi 6b // $6b init
  00c9:76               push0 
  00ca:57 72 04         super LLRoom 4 

  00cd:81 0c              lag  
  00cf:18                 not 
  00d0:30 000d            bnt code_00e0 
  00d3:39 03            pushi 3 // $3 y
  00d5:39 5a            pushi 5a // $5a points
  00d7:76               push0 
  00d8:89 02              lsg  
  00da:45 11 06         callb procedure_0011 6 //  

  00dd:32 0034            jmp code_0114 

        code_00e0
  00e0:78               push1 
  00e1:39 20            pushi 20 // $20 state
  00e3:45 06 02         callb procedure_0006 2 //  

  00e6:30 000b            bnt code_00f4 
  00e9:39 6b            pushi 6b // $6b init
  00eb:76               push0 
  00ec:72 0536          lofsa $0536 // boardingSign
  00ef:4a 04             send 4 

  00f1:32 0020            jmp code_0114 

        code_00f4
  00f4:38 00d5          pushi d5 // $d5 has
  00f7:78               push1 
  00f8:39 08            pushi 8 // $8 underBits
  00fa:81 00              lag  
  00fc:4a 06             send 6 

  00fe:30 0013            bnt code_0114 
  0101:78               push1 
  0102:39 08            pushi 8 // $8 underBits
  0104:45 06 02         callb procedure_0006 2 //  

  0107:30 000a            bnt code_0114 
  010a:39 03            pushi 3 // $3 y
  010c:39 5a            pushi 5a // $5a points
  010e:76               push0 
  010f:89 02              lsg  
  0111:45 11 06         callb procedure_0011 6 //  


        code_0114
  0114:38 0176          pushi 176 // $176 addObstacle
  0117:7a               push2 
  0118:39 22            pushi 22 // $22 type
  011a:78               push1 
  011b:7a               push2 
  011c:39 6b            pushi 6b // $6b init
  011e:39 22            pushi 22 // $22 type
  0120:39 5b            pushi 5b // $5b palette
  0122:39 7e            pushi 7e // $7e addToEnd
  0124:39 73            pushi 73 // $73 add
  0126:39 7e            pushi 7e // $7e addToEnd
  0128:39 6f            pushi 6f // $6f isKindOf
  012a:38 0089          pushi 89 // $89 register
  012d:39 60            pushi 60 // $60 frame
  012f:38 0091          pushi 91 // $91 globalize
  0132:39 4a            pushi 4a // $4a pragmaFail
  0134:38 0090          pushi 90 // $90 localize
  0137:39 43            pushi 43 // $43 at
  0139:38 0096          pushi 96 // $96 setCycle
  013c:39 3f            pushi 3f // $3f priority
  013e:38 00a7          pushi a7 // $a7 enable
  0141:39 6d            pushi 6d // $6d showStr
  0143:38 00bd          pushi bd // $bd maskView
  0146:76               push0 
  0147:38 00bd          pushi bd // $bd maskView
  014a:76               push0 
  014b:76               push0 
  014c:38 013f          pushi 13f // $13f inputLineAddr
  014f:76               push0 
  0150:38 013f          pushi 13f // $13f inputLineAddr
  0153:38 00bd          pushi bd // $bd maskView
  0156:38 00ca          pushi ca // $ca noClickHelp
  0159:38 00bd          pushi bd // $bd maskView
  015c:38 00e8          pushi e8 // $e8 finalX
  015f:38 00a9          pushi a9 // $a9 track
  0162:38 0105          pushi 105 // $105 gy
  0165:38 0096          pushi 96 // $96 setCycle
  0168:38 00d2          pushi d2 // $d2 useIconItem
  016b:39 7b            pushi 7b // $7b last
  016d:39 66            pushi 66 // $66 flags
  016f:39 7b            pushi 7b // $7b last
  0171:39 72            pushi 72 // $72 yourself
  0173:76               push0 
  0174:39 6a            pushi 6a // $6a new
  0176:76               push0 
  0177:51 23            class Polygon 
  0179:4a 04             send 4 

  017b:4a 52             send 52 

  017d:36                push 
  017e:39 22            pushi 22 // $22 type
  0180:78               push1 
  0181:7a               push2 
  0182:39 6b            pushi 6b // $6b init
  0184:39 0e            pushi e // $e lsLeft
  0186:38 00c9          pushi c9 // $c9 disable
  0189:38 0084          pushi 84 // $84 cycles
  018c:38 00d5          pushi d5 // $d5 has
  018f:38 0089          pushi 89 // $89 register
  0192:38 00d9          pushi d9 // $d9 cycleDone
  0195:38 0090          pushi 90 // $90 localize
  0198:38 00c6          pushi c6 // $c6 swapCurIcon
  019b:38 0096          pushi 96 // $96 setCycle
  019e:38 00b4          pushi b4 // $b4 busy
  01a1:38 0094          pushi 94 // $94 lastTime
  01a4:38 00ac          pushi ac // $ac moveTo
  01a7:38 0091          pushi 91 // $91 globalize
  01aa:38 00aa          pushi aa // $aa setSize
  01ad:38 0089          pushi 89 // $89 register
  01b0:39 72            pushi 72 // $72 yourself
  01b2:76               push0 
  01b3:39 6a            pushi 6a // $6a new
  01b5:76               push0 
  01b6:51 23            class Polygon 
  01b8:4a 04             send 4 

  01ba:4a 2a             send 2a 

  01bc:36                push 
  01bd:54 08             self 8 

  01bf:38 0121          pushi 121 // $121 ignoreActors
  01c2:78               push1 
  01c3:78               push1 
  01c4:39 6b            pushi 6b // $6b init
  01c6:76               push0 
  01c7:38 011d          pushi 11d // $11d stopUpd
  01ca:76               push0 
  01cb:72 03c4          lofsa $03c4 // chair
  01ce:4a 0e             send e 

  01d0:39 6b            pushi 6b // $6b init
  01d2:76               push0 
  01d3:72 0744          lofsa $0744 // ABM
  01d6:4a 04             send 4 

  01d8:39 6b            pushi 6b // $6b init
  01da:76               push0 
  01db:38 0119          pushi 119 // $119 approachVerbs
  01de:78               push1 
  01df:39 03            pushi 3 // $3 y
  01e1:72 07c0          lofsa $07c0 // pot
  01e4:4a 0a             send a 

  01e6:39 6b            pushi 6b // $6b init
  01e8:76               push0 
  01e9:72 083c          lofsa $083c // cabinet
  01ec:4a 04             send 4 

  01ee:39 6b            pushi 6b // $6b init
  01f0:76               push0 
  01f1:72 08b8          lofsa $08b8 // light
  01f4:4a 04             send 4 

  01f6:39 6b            pushi 6b // $6b init
  01f8:76               push0 
  01f9:72 0920          lofsa $0920 // leftPainting
  01fc:4a 04             send 4 

  01fe:39 6b            pushi 6b // $6b init
  0200:76               push0 
  0201:72 0988          lofsa $0988 // rightPainting
  0204:4a 04             send 4 

  0206:48                 ret 
    )

    (method (doit) // method_02fe
  02fe:39 3c            pushi 3c // $3c doit
  0300:76               push0 
  0301:57 72 04         super LLRoom 4 

  0304:63 08             pToa script 
  0306:30 0003            bnt code_030c 
  0309:32 001a            jmp code_0326 

        code_030c
  030c:7a               push2 
  030d:89 00              lsg  
  030f:7a               push2 
  0310:45 05 04         callb procedure_0005 4 //  

  0313:30 0010            bnt code_0326 
  0316:76               push0 
  0317:45 02 00         callb procedure_0002 0 //  

  031a:38 008e          pushi 8e // $8e setScript
  031d:78               push1 
  031e:72 05ec          lofsa $05ec // sExit270
  0321:36                push 
  0322:81 02              lag  
  0324:4a 06             send 6 


        code_0326
  0326:48                 ret 
  0327:00                bnot 
    )

    (method (doVerb) // method_021b
  021b:3f 96             link 96 // (var $96)
  021d:8f 01              lsp param1 
  021f:3c                 dup 
  0220:35 02              ldi 2 
  0222:1a                 eq? 
  0223:30 004d            bnt code_0273 
  0226:39 04            pushi 4 // $4 x
  0228:5b 04 00           lea 4 0 
  022b:36                push 
  022c:38 0122          pushi 122 // $122 addToPic
  022f:76               push0 
  0230:89 a0              lsg  
  0232:3c                 dup 
  0233:35 00              ldi 0 
  0235:1a                 eq? 
  0236:30 0006            bnt code_023f 
  0239:72 0fc7          lofsa $0fc7 // Los Angeles
  023c:32 0024            jmp code_0263 

        code_023f
  023f:3c                 dup 
  0240:35 01              ldi 1 
  0242:1a                 eq? 
  0243:30 0006            bnt code_024c 
  0246:72 0fd3          lofsa $0fd3 // New York
  0249:32 0017            jmp code_0263 

        code_024c
  024c:3c                 dup 
  024d:35 02              ldi 2 
  024f:1a                 eq? 
  0250:30 0006            bnt code_0259 
  0253:72 0fdc          lofsa $0fdc // Atlantic City
  0256:32 000a            jmp code_0263 

        code_0259
  0259:3c                 dup 
  025a:35 03              ldi 3 
  025c:1a                 eq? 
  025d:30 0003            bnt code_0263 
  0260:72 0fea          lofsa $0fea // Miami

        code_0263
  0263:3a                toss 
  0264:36                push 
  0265:43 48 08         callk Format 8 

  0268:78               push1 
  0269:5b 04 00           lea 4 0 
  026c:36                push 
  026d:45 0e 02         callb procedure_000e 2 //  

  0270:32 000b            jmp code_027e 

        code_0273
  0273:38 010c          pushi 10c // $10c doVerb
  0276:78               push1 
  0277:8f 01              lsp param1 
  0279:59 02            &rest 2 
  027b:57 72 06         super LLRoom 6 


        code_027e
  027e:3a                toss 
  027f:48                 ret 
    )

    (method (cue) // method_0280
  0280:c3 00              +al local0 
  0282:36                push 
  0283:3c                 dup 
  0284:35 01              ldi 1 
  0286:1a                 eq? 
  0287:30 001f            bnt code_02a9 
  028a:76               push0 
  028b:45 02 00         callb procedure_0002 0 //  

  028e:78               push1 
  028f:39 20            pushi 20 // $20 state
  0291:45 07 02         callb procedure_0007 2 //  

  0294:39 6b            pushi 6b // $6b init
  0296:76               push0 
  0297:72 0536          lofsa $0536 // boardingSign
  029a:4a 04             send 4 

  029c:39 03            pushi 3 // $3 y
  029e:39 04            pushi 4 // $4 x
  02a0:76               push0 
  02a1:89 02              lsg  
  02a3:45 11 06         callb procedure_0011 6 //  

  02a6:32 0053            jmp code_02fc 

        code_02a9
  02a9:3c                 dup 
  02aa:35 02              ldi 2 
  02ac:1a                 eq? 
  02ad:30 001e            bnt code_02ce 
  02b0:39 2b            pushi 2b // $2b number
  02b2:78               push1 
  02b3:38 0129          pushi 129 // $129 avoider
  02b6:39 06            pushi 6 // $6 loop
  02b8:78               push1 
  02b9:78               push1 
  02ba:39 2a            pushi 2a // $2a play
  02bc:76               push0 
  02bd:81 66              lag  
  02bf:4a 10             send 10 

  02c1:39 03            pushi 3 // $3 y
  02c3:39 05            pushi 5 // $5 view
  02c5:78               push1 
  02c6:89 02              lsg  
  02c8:45 11 06         callb procedure_0011 6 //  

  02cb:32 002e            jmp code_02fc 

        code_02ce
  02ce:3c                 dup 
  02cf:35 03              ldi 3 
  02d1:1a                 eq? 
  02d2:30 001c            bnt code_02f1 
  02d5:7a               push2 
  02d6:38 0122          pushi 122 // $122 addToPic
  02d9:78               push1 
  02da:45 0e 04         callb procedure_000e 4 //  

  02dd:7a               push2 
  02de:38 0122          pushi 122 // $122 addToPic
  02e1:7a               push2 
  02e2:45 0e 04         callb procedure_000e 4 //  

  02e5:39 03            pushi 3 // $3 y
  02e7:7a               push2 
  02e8:76               push0 
  02e9:89 02              lsg  
  02eb:45 11 06         callb procedure_0011 6 //  

  02ee:32 000b            jmp code_02fc 

        code_02f1
  02f1:3c                 dup 
  02f2:35 04              ldi 4 
  02f4:1a                 eq? 
  02f5:30 0004            bnt code_02fc 
  02f8:76               push0 
  02f9:45 03 00         callb procedure_0003 0 //  


        code_02fc
  02fc:3a                toss 
  02fd:48                 ret 
    )

    (method (newRoom) // method_0207
  0207:39 6c            pushi 6c // $6c dispose
  0209:76               push0 
  020a:39 54            pushi 54 // $54 delete
  020c:76               push0 
  020d:81 aa              lag  
  020f:4a 08             send 8 

  0211:38 0179          pushi 179 // $179 newRoom
  0214:78               push1 
  0215:8f 01              lsp param1 
  0217:57 72 06         super LLRoom 6 

  021a:48                 ret 
    )

)

// 03be
(instance chair of View
    (properties
        x $be
        y $90
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $ff6
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $122
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $101
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_037e
  037e:8f 01              lsp param1 
  0380:3c                 dup 
  0381:35 02              ldi 2 
  0383:1a                 eq? 
  0384:30 000c            bnt code_0393 
  0387:7a               push2 
  0388:38 0122          pushi 122 // $122 addToPic
  038b:39 03            pushi 3 // $3 y
  038d:45 0e 04         callb procedure_000e 4 //  

  0390:32 0023            jmp code_03b6 

        code_0393
  0393:3c                 dup 
  0394:35 03              ldi 3 
  0396:1a                 eq? 
  0397:30 000f            bnt code_03a9 
  039a:38 008e          pushi 8e // $8e setScript
  039d:78               push1 
  039e:72 0baa          lofsa $0baa // sChair
  03a1:36                push 
  03a2:81 02              lag  
  03a4:4a 06             send 6 

  03a6:32 000d            jmp code_03b6 

        code_03a9
  03a9:38 010c          pushi 10c // $10c doVerb
  03ac:7a               push2 
  03ad:8f 01              lsp param1 
  03af:8f 02              lsp param2 
  03b1:59 03            &rest 3 
  03b3:57 2e 08         super View 8 


        code_03b6
  03b6:3a                toss 
  03b7:48                 ret 
    )

)

// 045a
(instance door of Actor
    (properties
        x $98
        y $76
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $1006
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $122
        loop $1
        cel $0
        priority $3
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $0
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (doVerb) // method_041c
  041c:8f 01              lsp param1 
  041e:3c                 dup 
  041f:35 02              ldi 2 
  0421:1a                 eq? 
  0422:30 000c            bnt code_0431 
  0425:7a               push2 
  0426:38 0122          pushi 122 // $122 addToPic
  0429:39 04            pushi 4 // $4 x
  042b:45 0e 04         callb procedure_000e 4 //  

  042e:32 0020            jmp code_0451 

        code_0431
  0431:3c                 dup 
  0432:35 03              ldi 3 
  0434:1a                 eq? 
  0435:30 000c            bnt code_0444 
  0438:7a               push2 
  0439:38 0122          pushi 122 // $122 addToPic
  043c:39 05            pushi 5 // $5 view
  043e:45 0e 04         callb procedure_000e 4 //  

  0441:32 000d            jmp code_0451 

        code_0444
  0444:38 010c          pushi 10c // $10c doVerb
  0447:7a               push2 
  0448:8f 01              lsp param1 
  044a:8f 02              lsp param2 
  044c:59 03            &rest 3 
  044e:57 30 08         super Actor 8 


        code_0451
  0451:3a                toss 
  0452:48                 ret 
  0453:00                bnot 
    )

)

// 0530
(instance boardingSign of Prop
    (properties
        x $99
        y $3e
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $101b
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $122
        loop $2
        cel $0
        priority $5
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (init) // method_04da
  04da:39 6b            pushi 6b // $6b init
  04dc:76               push0 
  04dd:57 2f 04         super Prop 4 

  04e0:38 00db          pushi db // $db cycleSpeed
  04e3:78               push1 
  04e4:39 08            pushi 8 // $8 underBits
  04e6:38 0096          pushi 96 // $96 setCycle
  04e9:78               push1 
  04ea:51 17            class Fwd 
  04ec:36                push 
  04ed:54 0c             self c 

  04ef:48                 ret 
    )

    (method (doVerb) // method_04f0
  04f0:8f 01              lsp param1 
  04f2:3c                 dup 
  04f3:35 02              ldi 2 
  04f5:1a                 eq? 
  04f6:30 0021            bnt code_051a 
  04f9:78               push1 
  04fa:39 20            pushi 20 // $20 state
  04fc:45 06 02         callb procedure_0006 2 //  

  04ff:30 000c            bnt code_050e 
  0502:7a               push2 
  0503:38 0122          pushi 122 // $122 addToPic
  0506:39 06            pushi 6 // $6 loop
  0508:45 0e 04         callb procedure_000e 4 //  

  050b:32 0019            jmp code_0527 

        code_050e
  050e:7a               push2 
  050f:38 0122          pushi 122 // $122 addToPic
  0512:39 07            pushi 7 // $7 cel
  0514:45 0e 04         callb procedure_000e 4 //  

  0517:32 000d            jmp code_0527 

        code_051a
  051a:38 010c          pushi 10c // $10c doVerb
  051d:7a               push2 
  051e:8f 01              lsp param1 
  0520:8f 02              lsp param2 
  0522:59 03            &rest 3 
  0524:57 2f 08         super Prop 8 


        code_0527
  0527:3a                toss 
  0528:48                 ret 
  0529:00                bnot 
    )

)

// 05e6
(instance sExit270 of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_059c
  059c:3f 02             link 2 // (var $2)
  059e:87 01              lap param1 
  05a0:65 0a             aTop state 
  05a2:36                push 
  05a3:3c                 dup 
  05a4:35 00              ldi 0 
  05a6:1a                 eq? 
  05a7:30 001b            bnt code_05c5 
  05aa:38 011b          pushi 11b // $11b setMotion
  05ad:39 04            pushi 4 // $4 x
  05af:51 1e            class MoveTo 
  05b1:36                push 
  05b2:39 04            pushi 4 // $4 x
  05b4:76               push0 
  05b5:81 00              lag  
  05b7:4a 04             send 4 

  05b9:36                push 
  05ba:38 00e1          pushi e1 // $e1 yLast
  05bd:7c            pushSelf 
  05be:81 00              lag  
  05c0:4a 0c             send c 

  05c2:32 0018            jmp code_05dd 

        code_05c5
  05c5:3c                 dup 
  05c6:35 01              ldi 1 
  05c8:1a                 eq? 
  05c9:30 0011            bnt code_05dd 
  05cc:38 0179          pushi 179 // $179 newRoom
  05cf:78               push1 
  05d0:38 0186          pushi 186 // $186 south
  05d3:76               push0 
  05d4:81 02              lag  
  05d6:4a 04             send 4 

  05d8:36                push 
  05d9:81 02              lag  
  05db:4a 06             send 6 


        code_05dd
  05dd:3a                toss 
  05de:48                 ret 
  05df:00                bnot 
    )

)

// 0662
(instance sEnter270 of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_061a
  061a:3f 02             link 2 // (var $2)
  061c:87 01              lap param1 
  061e:65 0a             aTop state 
  0620:36                push 
  0621:3c                 dup 
  0622:35 00              ldi 0 
  0624:1a                 eq? 
  0625:30 001a            bnt code_0642 
  0628:76               push0 
  0629:45 02 00         callb procedure_0002 0 //  

  062c:38 011b          pushi 11b // $11b setMotion
  062f:39 04            pushi 4 // $4 x
  0631:51 1e            class MoveTo 
  0633:36                push 
  0634:38 009f          pushi 9f // $9f fade
  0637:38 00a0          pushi a0 // $a0 mute
  063a:7c            pushSelf 
  063b:81 00              lag  
  063d:4a 0c             send c 

  063f:32 0018            jmp code_065a 

        code_0642
  0642:3c                 dup 
  0643:35 01              ldi 1 
  0645:1a                 eq? 
  0646:30 0011            bnt code_065a 
  0649:76               push0 
  064a:45 03 00         callb procedure_0003 0 //  

  064d:38 020a          pushi 20a // $20a normalize
  0650:76               push0 
  0651:81 00              lag  
  0653:4a 04             send 4 

  0655:39 6c            pushi 6c // $6c dispose
  0657:76               push0 
  0658:54 04             self 4 


        code_065a
  065a:3a                toss 
  065b:48                 ret 
    )

)

// 073e
(instance ABM of Feature
    (properties
        x $b9
        y $62
        z $0
        heading $0
        noun $0
        nsTop $5c
        nsLeft $b0
        nsBottom $69
        nsRight $c2
        description $104d
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_0696
  0696:8f 01              lsp param1 
  0698:3c                 dup 
  0699:35 04              ldi 4 
  069b:1a                 eq? 
  069c:30 005c            bnt code_06fb 
  069f:8f 02              lsp param2 
  06a1:3c                 dup 
  06a2:35 07              ldi 7 
  06a4:1a                 eq? 
  06a5:30 000c            bnt code_06b4 
  06a8:7a               push2 
  06a9:38 0122          pushi 122 // $122 addToPic
  06ac:39 08            pushi 8 // $8 underBits
  06ae:45 0e 04         callb procedure_000e 4 //  

  06b1:32 0043            jmp code_06f7 

        code_06b4
  06b4:3c                 dup 
  06b5:35 08              ldi 8 
  06b7:1a                 eq? 
  06b8:30 002f            bnt code_06ea 
  06bb:78               push1 
  06bc:39 20            pushi 20 // $20 state
  06be:45 06 02         callb procedure_0006 2 //  

  06c1:30 001a            bnt code_06de 
  06c4:38 0148          pushi 148 // $148 put
  06c7:7a               push2 
  06c8:39 08            pushi 8 // $8 underBits
  06ca:76               push0 
  06cb:81 00              lag  
  06cd:4a 08             send 8 

  06cf:38 008e          pushi 8e // $8e setScript
  06d2:78               push1 
  06d3:72 0f2a          lofsa $0f2a // sJetWay
  06d6:36                push 
  06d7:81 02              lag  
  06d9:4a 06             send 6 

  06db:32 0019            jmp code_06f7 

        code_06de
  06de:7a               push2 
  06df:38 0122          pushi 122 // $122 addToPic
  06e2:39 09            pushi 9 // $9 nsTop
  06e4:45 0e 04         callb procedure_000e 4 //  

  06e7:32 000d            jmp code_06f7 

        code_06ea
  06ea:38 010c          pushi 10c // $10c doVerb
  06ed:7a               push2 
  06ee:8f 01              lsp param1 
  06f0:8f 02              lsp param2 
  06f2:59 03            &rest 3 
  06f4:57 2c 08         super Feature 8 


        code_06f7
  06f7:3a                toss 
  06f8:32 003a            jmp code_0735 

        code_06fb
  06fb:3c                 dup 
  06fc:35 02              ldi 2 
  06fe:1a                 eq? 
  06ff:30 0026            bnt code_0728 
  0702:7a               push2 
  0703:38 0122          pushi 122 // $122 addToPic
  0706:39 0a            pushi a // $a nsLeft
  0708:45 0e 04         callb procedure_000e 4 //  

  070b:7a               push2 
  070c:38 0122          pushi 122 // $122 addToPic
  070f:39 0b            pushi b // $b nsBottom
  0711:45 0e 04         callb procedure_000e 4 //  

  0714:39 05            pushi 5 // $5 view
  0716:38 0122          pushi 122 // $122 addToPic
  0719:39 0c            pushi c // $c nsRight
  071b:39 43            pushi 43 // $43 at
  071d:39 ff            pushi ff // $ff syncNum
  071f:38 00b9          pushi b9 // $b9 bottom
  0722:45 0e 0a         callb procedure_000e a //  

  0725:32 000d            jmp code_0735 

        code_0728
  0728:38 010c          pushi 10c // $10c doVerb
  072b:7a               push2 
  072c:8f 01              lsp param1 
  072e:8f 02              lsp param2 
  0730:59 03            &rest 3 
  0732:57 2c 08         super Feature 8 


        code_0735
  0735:3a                toss 
  0736:48                 ret 
  0737:00                bnot 
    )

)

// 07ba
(instance pot of Feature
    (properties
        x $5b
        y $d3
        z $64
        heading $0
        noun $0
        nsTop $6b
        nsLeft $55
        nsBottom $74
        nsRight $61
        description $1075
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $68
        approachY $88
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_077c
  077c:8f 01              lsp param1 
  077e:3c                 dup 
  077f:35 02              ldi 2 
  0781:1a                 eq? 
  0782:30 000c            bnt code_0791 
  0785:7a               push2 
  0786:38 0122          pushi 122 // $122 addToPic
  0789:39 0d            pushi d // $d lsTop
  078b:45 0e 04         callb procedure_000e 4 //  

  078e:32 0020            jmp code_07b1 

        code_0791
  0791:3c                 dup 
  0792:35 03              ldi 3 
  0794:1a                 eq? 
  0795:30 000c            bnt code_07a4 
  0798:7a               push2 
  0799:38 0122          pushi 122 // $122 addToPic
  079c:39 0e            pushi e // $e lsLeft
  079e:45 0e 04         callb procedure_000e 4 //  

  07a1:32 000d            jmp code_07b1 

        code_07a4
  07a4:38 010c          pushi 10c // $10c doVerb
  07a7:7a               push2 
  07a8:8f 01              lsp param1 
  07aa:8f 02              lsp param2 
  07ac:59 03            &rest 3 
  07ae:57 2c 08         super Feature 8 


        code_07b1
  07b1:3a                toss 
  07b2:48                 ret 
  07b3:00                bnot 
    )

)

// 0836
(instance cabinet of Feature
    (properties
        x $55
        y $77
        z $0
        heading $0
        noun $0
        nsTop $65
        nsLeft $44
        nsBottom $89
        nsRight $66
        description $1088
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_07f8
  07f8:8f 01              lsp param1 
  07fa:3c                 dup 
  07fb:35 02              ldi 2 
  07fd:1a                 eq? 
  07fe:30 000c            bnt code_080d 
  0801:7a               push2 
  0802:38 0122          pushi 122 // $122 addToPic
  0805:39 0f            pushi f // $f lsBottom
  0807:45 0e 04         callb procedure_000e 4 //  

  080a:32 0020            jmp code_082d 

        code_080d
  080d:3c                 dup 
  080e:35 03              ldi 3 
  0810:1a                 eq? 
  0811:30 000c            bnt code_0820 
  0814:7a               push2 
  0815:38 0122          pushi 122 // $122 addToPic
  0818:39 10            pushi 10 // $10 lsRight
  081a:45 0e 04         callb procedure_000e 4 //  

  081d:32 000d            jmp code_082d 

        code_0820
  0820:38 010c          pushi 10c // $10c doVerb
  0823:7a               push2 
  0824:8f 01              lsp param1 
  0826:8f 02              lsp param2 
  0828:59 03            &rest 3 
  082a:57 2c 08         super Feature 8 


        code_082d
  082d:3a                toss 
  082e:48                 ret 
  082f:00                bnot 
    )

)

// 08b2
(instance light of Feature
    (properties
        x $96
        y $23
        z $0
        heading $0
        noun $0
        nsTop $1a
        nsLeft $8c
        nsBottom $2d
        nsRight $a1
        description $10a3
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_0874
  0874:8f 01              lsp param1 
  0876:3c                 dup 
  0877:35 02              ldi 2 
  0879:1a                 eq? 
  087a:30 000c            bnt code_0889 
  087d:7a               push2 
  087e:38 0122          pushi 122 // $122 addToPic
  0881:39 11            pushi 11 // $11 signal
  0883:45 0e 04         callb procedure_000e 4 //  

  0886:32 0020            jmp code_08a9 

        code_0889
  0889:3c                 dup 
  088a:35 03              ldi 3 
  088c:1a                 eq? 
  088d:30 000c            bnt code_089c 
  0890:7a               push2 
  0891:38 0122          pushi 122 // $122 addToPic
  0894:39 12            pushi 12 // $12 illegalBits
  0896:45 0e 04         callb procedure_000e 4 //  

  0899:32 000d            jmp code_08a9 

        code_089c
  089c:38 010c          pushi 10c // $10c doVerb
  089f:7a               push2 
  08a0:8f 01              lsp param1 
  08a2:8f 02              lsp param2 
  08a4:59 03            &rest 3 
  08a6:57 2c 08         super Feature 8 


        code_08a9
  08a9:3a                toss 
  08aa:48                 ret 
  08ab:00                bnot 
    )

)

// 091a
(instance leftPainting of Feature
    (properties
        x $4c
        y $51
        z $0
        heading $0
        noun $0
        nsTop $43
        nsLeft $40
        nsBottom $60
        nsRight $59
        description $10bb
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $10cf
    )
    (method (doVerb) // method_08f0
  08f0:8f 01              lsp param1 
  08f2:3c                 dup 
  08f3:35 03              ldi 3 
  08f5:1a                 eq? 
  08f6:30 000c            bnt code_0905 
  08f9:7a               push2 
  08fa:38 0122          pushi 122 // $122 addToPic
  08fd:39 13            pushi 13 // $13 brTop
  08ff:45 0e 04         callb procedure_000e 4 //  

  0902:32 000d            jmp code_0912 

        code_0905
  0905:38 010c          pushi 10c // $10c doVerb
  0908:7a               push2 
  0909:8f 01              lsp param1 
  090b:8f 02              lsp param2 
  090d:59 03            &rest 3 
  090f:57 2c 08         super Feature 8 


        code_0912
  0912:3a                toss 
  0913:48                 ret 
    )

)

// 0982
(instance rightPainting of Feature
    (properties
        x $e5
        y $5e
        z $0
        heading $0
        noun $0
        nsTop $54
        nsLeft $d5
        nsBottom $69
        nsRight $f6
        description $1107
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $111e
    )
    (method (doVerb) // method_0958
  0958:8f 01              lsp param1 
  095a:3c                 dup 
  095b:35 03              ldi 3 
  095d:1a                 eq? 
  095e:30 000c            bnt code_096d 
  0961:7a               push2 
  0962:38 0122          pushi 122 // $122 addToPic
  0965:39 13            pushi 13 // $13 brTop
  0967:45 0e 04         callb procedure_000e 4 //  

  096a:32 000d            jmp code_097a 

        code_096d
  096d:38 010c          pushi 10c // $10c doVerb
  0970:7a               push2 
  0971:8f 01              lsp param1 
  0973:8f 02              lsp param2 
  0975:59 03            &rest 3 
  0977:57 2c 08         super Feature 8 


        code_097a
  097a:3a                toss 
  097b:48                 ret 
    )

)

// 0ba4
(instance sChair of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_09c0
  09c0:3f 02             link 2 // (var $2)
  09c2:87 01              lap param1 
  09c4:65 0a             aTop state 
  09c6:36                push 
  09c7:3c                 dup 
  09c8:35 00              ldi 0 
  09ca:1a                 eq? 
  09cb:30 0060            bnt code_0a2e 
  09ce:76               push0 
  09cf:45 02 00         callb procedure_0002 0 //  

  09d2:7a               push2 
  09d3:38 0084          pushi 84 // $84 cycles
  09d6:38 0123          pushi 123 // $123 isExtra
  09d9:43 00 04         callk Load 4 

  09dc:7a               push2 
  09dd:38 0084          pushi 84 // $84 cycles
  09e0:38 0127          pushi 127 // $127 baseSetter
  09e3:43 00 04         callk Load 4 

  09e6:7a               push2 
  09e7:38 0084          pushi 84 // $84 cycles
  09ea:38 0128          pushi 128 // $128 viewer
  09ed:43 00 04         callk Load 4 

  09f0:7a               push2 
  09f1:38 0080          pushi 80 // $80 indexOf
  09f4:38 0123          pushi 123 // $123 isExtra
  09f7:43 00 04         callk Load 4 

  09fa:7a               push2 
  09fb:38 0080          pushi 80 // $80 indexOf
  09fe:38 0123          pushi 123 // $123 isExtra
  0a01:43 00 04         callk Load 4 

  0a04:38 011b          pushi 11b // $11b setMotion
  0a07:39 04            pushi 4 // $4 x
  0a09:51 24            class PolyPath 
  0a0b:36                push 
  0a0c:39 04            pushi 4 // $4 x
  0a0e:76               push0 
  0a0f:72 03c4          lofsa $03c4 // chair
  0a12:4a 04             send 4 

  0a14:36                push 
  0a15:35 0a              ldi a 
  0a17:04                 sub 
  0a18:36                push 
  0a19:39 03            pushi 3 // $3 y
  0a1b:76               push0 
  0a1c:72 03c4          lofsa $03c4 // chair
  0a1f:4a 04             send 4 

  0a21:36                push 
  0a22:35 01              ldi 1 
  0a24:04                 sub 
  0a25:36                push 
  0a26:7c            pushSelf 
  0a27:81 00              lag  
  0a29:4a 0c             send c 

  0a2b:32 016d            jmp code_0b9b 

        code_0a2e
  0a2e:3c                 dup 
  0a2f:35 01              ldi 1 
  0a31:1a                 eq? 
  0a32:30 000f            bnt code_0a44 
  0a35:38 00e4          pushi e4 // $e4 setHeading
  0a38:7a               push2 
  0a39:38 00b4          pushi b4 // $b4 busy
  0a3c:7c            pushSelf 
  0a3d:81 00              lag  
  0a3f:4a 08             send 8 

  0a41:32 0157            jmp code_0b9b 

        code_0a44
  0a44:3c                 dup 
  0a45:35 02              ldi 2 
  0a47:1a                 eq? 
  0a48:30 0050            bnt code_0a9b 
  0a4b:39 69            pushi 69 // $69 hide
  0a4d:76               push0 
  0a4e:72 03c4          lofsa $03c4 // chair
  0a51:4a 04             send 4 

  0a53:39 42            pushi 42 // $42 setPri
  0a55:78               push1 
  0a56:39 0e            pushi e // $e lsLeft
  0a58:39 05            pushi 5 // $5 view
  0a5a:78               push1 
  0a5b:38 0123          pushi 123 // $123 isExtra
  0a5e:38 00a2          pushi a2 // $a2 setLoop
  0a61:78               push1 
  0a62:76               push0 
  0a63:38 011c          pushi 11c // $11c posn
  0a66:7a               push2 
  0a67:39 04            pushi 4 // $4 x
  0a69:76               push0 
  0a6a:72 03c4          lofsa $03c4 // chair
  0a6d:4a 04             send 4 

  0a6f:36                push 
  0a70:35 01              ldi 1 
  0a72:02                 add 
  0a73:36                push 
  0a74:39 03            pushi 3 // $3 y
  0a76:76               push0 
  0a77:72 03c4          lofsa $03c4 // chair
  0a7a:4a 04             send 4 

  0a7c:36                push 
  0a7d:38 00db          pushi db // $db cycleSpeed
  0a80:78               push1 
  0a81:39 06            pushi 6 // $6 loop
  0a83:38 0120          pushi 120 // $120 setCel
  0a86:78               push1 
  0a87:76               push0 
  0a88:38 0096          pushi 96 // $96 setCycle
  0a8b:39 04            pushi 4 // $4 x
  0a8d:51 19            class CT 
  0a8f:36                push 
  0a90:39 05            pushi 5 // $5 view
  0a92:78               push1 
  0a93:7c            pushSelf 
  0a94:81 00              lag  
  0a96:4a 32             send 32 

  0a98:32 0100            jmp code_0b9b 

        code_0a9b
  0a9b:3c                 dup 
  0a9c:35 03              ldi 3 
  0a9e:1a                 eq? 
  0a9f:30 0024            bnt code_0ac6 
  0aa2:39 2b            pushi 2b // $2b number
  0aa4:78               push1 
  0aa5:38 0123          pushi 123 // $123 isExtra
  0aa8:39 06            pushi 6 // $6 loop
  0aaa:78               push1 
  0aab:78               push1 
  0aac:39 2a            pushi 2a // $2a play
  0aae:76               push0 
  0aaf:81 67              lag  
  0ab1:4a 10             send 10 

  0ab3:38 0096          pushi 96 // $96 setCycle
  0ab6:39 04            pushi 4 // $4 x
  0ab8:51 19            class CT 
  0aba:36                push 
  0abb:39 09            pushi 9 // $9 nsTop
  0abd:78               push1 
  0abe:7c            pushSelf 
  0abf:81 00              lag  
  0ac1:4a 0c             send c 

  0ac3:32 00d5            jmp code_0b9b 

        code_0ac6
  0ac6:3c                 dup 
  0ac7:35 04              ldi 4 
  0ac9:1a                 eq? 
  0aca:30 001c            bnt code_0ae9 
  0acd:39 2b            pushi 2b // $2b number
  0acf:78               push1 
  0ad0:38 0127          pushi 127 // $127 baseSetter
  0ad3:39 2a            pushi 2a // $2a play
  0ad5:76               push0 
  0ad6:81 67              lag  
  0ad8:4a 0a             send a 

  0ada:38 0096          pushi 96 // $96 setCycle
  0add:7a               push2 
  0ade:51 1a            class End 
  0ae0:36                push 
  0ae1:7c            pushSelf 
  0ae2:81 00              lag  
  0ae4:4a 08             send 8 

  0ae6:32 00b2            jmp code_0b9b 

        code_0ae9
  0ae9:3c                 dup 
  0aea:35 05              ldi 5 
  0aec:1a                 eq? 
  0aed:30 0055            bnt code_0b45 
  0af0:38 00c2          pushi c2 // $c2 show
  0af3:76               push0 
  0af4:72 03c4          lofsa $03c4 // chair
  0af7:4a 04             send 4 

  0af9:39 2b            pushi 2b // $2b number
  0afb:78               push1 
  0afc:38 0128          pushi 128 // $128 viewer
  0aff:39 06            pushi 6 // $6 loop
  0b01:78               push1 
  0b02:78               push1 
  0b03:39 2a            pushi 2a // $2a play
  0b05:76               push0 
  0b06:81 67              lag  
  0b08:4a 10             send 10 

  0b0a:38 011c          pushi 11c // $11c posn
  0b0d:7a               push2 
  0b0e:39 04            pushi 4 // $4 x
  0b10:76               push0 
  0b11:72 03c4          lofsa $03c4 // chair
  0b14:4a 04             send 4 

  0b16:36                push 
  0b17:35 2c              ldi 2c 
  0b19:02                 add 
  0b1a:36                push 
  0b1b:39 03            pushi 3 // $3 y
  0b1d:76               push0 
  0b1e:72 03c4          lofsa $03c4 // chair
  0b21:4a 04             send 4 

  0b23:36                push 
  0b24:35 03              ldi 3 
  0b26:02                 add 
  0b27:36                push 
  0b28:38 00a2          pushi a2 // $a2 setLoop
  0b2b:78               push1 
  0b2c:78               push1 
  0b2d:38 00db          pushi db // $db cycleSpeed
  0b30:78               push1 
  0b31:39 04            pushi 4 // $4 x
  0b33:38 0096          pushi 96 // $96 setCycle
  0b36:78               push1 
  0b37:51 17            class Fwd 
  0b39:36                push 
  0b3a:81 00              lag  
  0b3c:4a 1a             send 1a 

  0b3e:35 3c              ldi 3c 
  0b40:65 16             aTop ticks 
  0b42:32 0056            jmp code_0b9b 

        code_0b45
  0b45:3c                 dup 
  0b46:35 06              ldi 6 
  0b48:1a                 eq? 
  0b49:30 001f            bnt code_0b6b 
  0b4c:38 00a2          pushi a2 // $a2 setLoop
  0b4f:78               push1 
  0b50:7a               push2 
  0b51:38 00db          pushi db // $db cycleSpeed
  0b54:78               push1 
  0b55:39 06            pushi 6 // $6 loop
  0b57:38 0120          pushi 120 // $120 setCel
  0b5a:78               push1 
  0b5b:76               push0 
  0b5c:38 0096          pushi 96 // $96 setCycle
  0b5f:7a               push2 
  0b60:51 1a            class End 
  0b62:36                push 
  0b63:7c            pushSelf 
  0b64:81 00              lag  
  0b66:4a 1a             send 1a 

  0b68:32 0030            jmp code_0b9b 

        code_0b6b
  0b6b:3c                 dup 
  0b6c:35 07              ldi 7 
  0b6e:1a                 eq? 
  0b6f:30 0029            bnt code_0b9b 
  0b72:38 011c          pushi 11c // $11c posn
  0b75:7a               push2 
  0b76:39 04            pushi 4 // $4 x
  0b78:76               push0 
  0b79:81 00              lag  
  0b7b:4a 04             send 4 

  0b7d:36                push 
  0b7e:35 0c              ldi c 
  0b80:04                 sub 
  0b81:36                push 
  0b82:39 03            pushi 3 // $3 y
  0b84:76               push0 
  0b85:81 00              lag  
  0b87:4a 04             send 4 

  0b89:36                push 
  0b8a:38 020a          pushi 20a // $20a normalize
  0b8d:76               push0 
  0b8e:81 00              lag  
  0b90:4a 0c             send c 

  0b92:76               push0 
  0b93:45 03 00         callb procedure_0003 0 //  

  0b96:39 6c            pushi 6c // $6c dispose
  0b98:76               push0 
  0b99:54 04             self 4 


        code_0b9b
  0b9b:3a                toss 
  0b9c:48                 ret 
  0b9d:00                bnot 
    )

)

// 0d8a
(instance sReturning of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0bd8
  0bd8:3f 02             link 2 // (var $2)
  0bda:87 01              lap param1 
  0bdc:65 0a             aTop state 
  0bde:36                push 
  0bdf:3c                 dup 
  0be0:35 00              ldi 0 
  0be2:1a                 eq? 
  0be3:30 000b            bnt code_0bf1 
  0be6:76               push0 
  0be7:45 02 00         callb procedure_0002 0 //  

  0bea:35 3c              ldi 3c 
  0bec:65 16             aTop ticks 
  0bee:32 0191            jmp code_0d82 

        code_0bf1
  0bf1:3c                 dup 
  0bf2:35 01              ldi 1 
  0bf4:1a                 eq? 
  0bf5:30 001f            bnt code_0c17 
  0bf8:38 0120          pushi 120 // $120 setCel
  0bfb:78               push1 
  0bfc:76               push0 
  0bfd:38 00db          pushi db // $db cycleSpeed
  0c00:78               push1 
  0c01:39 0c            pushi c // $c nsRight
  0c03:39 38            pushi 38 // $38 moveSpeed
  0c05:78               push1 
  0c06:39 05            pushi 5 // $5 view
  0c08:38 0096          pushi 96 // $96 setCycle
  0c0b:7a               push2 
  0c0c:51 1a            class End 
  0c0e:36                push 
  0c0f:7c            pushSelf 
  0c10:81 00              lag  
  0c12:4a 1a             send 1a 

  0c14:32 016b            jmp code_0d82 

        code_0c17
  0c17:3c                 dup 
  0c18:35 02              ldi 2 
  0c1a:1a                 eq? 
  0c1b:30 0032            bnt code_0c50 
  0c1e:38 020a          pushi 20a // $20a normalize
  0c21:76               push0 
  0c22:38 011c          pushi 11c // $11c posn
  0c25:7a               push2 
  0c26:38 0098          pushi 98 // $98 set60ths
  0c29:39 7b            pushi 7b // $7b last
  0c2b:39 06            pushi 6 // $6 loop
  0c2d:78               push1 
  0c2e:7a               push2 
  0c2f:38 00db          pushi db // $db cycleSpeed
  0c32:78               push1 
  0c33:39 07            pushi 7 // $7 cel
  0c35:39 38            pushi 38 // $38 moveSpeed
  0c37:78               push1 
  0c38:39 07            pushi 7 // $7 cel
  0c3a:38 011b          pushi 11b // $11b setMotion
  0c3d:39 04            pushi 4 // $4 x
  0c3f:51 1e            class MoveTo 
  0c41:36                push 
  0c42:38 0098          pushi 98 // $98 set60ths
  0c45:38 0083          pushi 83 // $83 timer
  0c48:7c            pushSelf 
  0c49:81 00              lag  
  0c4b:4a 2a             send 2a 

  0c4d:32 0132            jmp code_0d82 

        code_0c50
  0c50:3c                 dup 
  0c51:35 03              ldi 3 
  0c53:1a                 eq? 
  0c54:30 0030            bnt code_0c87 
  0c57:38 020a          pushi 20a // $20a normalize
  0c5a:76               push0 
  0c5b:81 00              lag  
  0c5d:4a 04             send 4 

  0c5f:39 2b            pushi 2b // $2b number
  0c61:78               push1 
  0c62:38 0125          pushi 125 // $125 detailLevel
  0c65:39 06            pushi 6 // $6 loop
  0c67:78               push1 
  0c68:39 ff            pushi ff // $ff syncNum
  0c6a:39 2a            pushi 2a // $2a play
  0c6c:76               push0 
  0c6d:81 67              lag  
  0c6f:4a 10             send 10 

  0c71:38 011b          pushi 11b // $11b setMotion
  0c74:39 04            pushi 4 // $4 x
  0c76:51 1e            class MoveTo 
  0c78:36                push 
  0c79:38 0098          pushi 98 // $98 set60ths
  0c7c:39 76            pushi 76 // $76 allTrue
  0c7e:7c            pushSelf 
  0c7f:72 0460          lofsa $0460 // door
  0c82:4a 0c             send c 

  0c84:32 00fb            jmp code_0d82 

        code_0c87
  0c87:3c                 dup 
  0c88:35 04              ldi 4 
  0c8a:1a                 eq? 
  0c8b:30 000f            bnt code_0c9d 
  0c8e:38 009c          pushi 9c // $9c stop
  0c91:76               push0 
  0c92:81 67              lag  
  0c94:4a 04             send 4 

  0c96:35 02              ldi 2 
  0c98:65 10             aTop cycles 
  0c9a:32 00e5            jmp code_0d82 

        code_0c9d
  0c9d:3c                 dup 
  0c9e:35 05              ldi 5 
  0ca0:1a                 eq? 
  0ca1:30 0052            bnt code_0cf6 
  0ca4:39 04            pushi 4 // $4 x
  0ca6:5b 02 01           lea 2 1 
  0ca9:36                push 
  0caa:38 0122          pushi 122 // $122 addToPic
  0cad:39 14            pushi 14 // $14 brLeft
  0caf:89 a0              lsg  
  0cb1:3c                 dup 
  0cb2:35 00              ldi 0 
  0cb4:1a                 eq? 
  0cb5:30 0006            bnt code_0cbe 
  0cb8:72 116d          lofsa $116d // Los Angeles, cheater
  0cbb:32 0024            jmp code_0ce2 

        code_0cbe
  0cbe:3c                 dup 
  0cbf:35 01              ldi 1 
  0cc1:1a                 eq? 
  0cc2:30 0006            bnt code_0ccb 
  0cc5:72 0fd3          lofsa $0fd3 // New York
  0cc8:32 0017            jmp code_0ce2 

        code_0ccb
  0ccb:3c                 dup 
  0ccc:35 02              ldi 2 
  0cce:1a                 eq? 
  0ccf:30 0006            bnt code_0cd8 
  0cd2:72 0fdc          lofsa $0fdc // Atlantic City
  0cd5:32 000a            jmp code_0ce2 

        code_0cd8
  0cd8:3c                 dup 
  0cd9:35 03              ldi 3 
  0cdb:1a                 eq? 
  0cdc:30 0003            bnt code_0ce2 
  0cdf:72 0fea          lofsa $0fea // Miami

        code_0ce2
  0ce2:3a                toss 
  0ce3:36                push 
  0ce4:43 48 08         callk Format 8 

  0ce7:78               push1 
  0ce8:5b 02 01           lea 2 1 
  0ceb:36                push 
  0cec:45 0e 02         callb procedure_000e 2 //  

  0cef:35 3c              ldi 3c 
  0cf1:65 16             aTop ticks 
  0cf3:32 008c            jmp code_0d82 

        code_0cf6
  0cf6:3c                 dup 
  0cf7:35 06              ldi 6 
  0cf9:1a                 eq? 
  0cfa:30 0075            bnt code_0d72 
  0cfd:78               push1 
  0cfe:39 09            pushi 9 // $9 nsTop
  0d00:45 06 02         callb procedure_0006 2 //  

  0d03:30 000f            bnt code_0d15 
  0d06:7a               push2 
  0d07:5b 02 33           lea 2 33 
  0d0a:36                push 
  0d0b:72 0fd3          lofsa $0fd3 // New York
  0d0e:36                push 
  0d0f:43 48 04         callk Format 4 

  0d12:32 003c            jmp code_0d51 

        code_0d15
  0d15:78               push1 
  0d16:39 0b            pushi b // $b nsBottom
  0d18:45 06 02         callb procedure_0006 2 //  

  0d1b:30 000f            bnt code_0d2d 
  0d1e:7a               push2 
  0d1f:5b 02 33           lea 2 33 
  0d22:36                push 
  0d23:72 0fea          lofsa $0fea // Miami
  0d26:36                push 
  0d27:43 48 04         callk Format 4 

  0d2a:32 0024            jmp code_0d51 

        code_0d2d
  0d2d:78               push1 
  0d2e:39 0a            pushi a // $a nsLeft
  0d30:45 06 02         callb procedure_0006 2 //  

  0d33:30 000f            bnt code_0d45 
  0d36:7a               push2 
  0d37:5b 02 33           lea 2 33 
  0d3a:36                push 
  0d3b:72 0fdc          lofsa $0fdc // Atlantic City
  0d3e:36                push 
  0d3f:43 48 04         callk Format 4 

  0d42:32 000c            jmp code_0d51 

        code_0d45
  0d45:7a               push2 
  0d46:5b 02 33           lea 2 33 
  0d49:36                push 
  0d4a:72 0fc7          lofsa $0fc7 // Los Angeles
  0d4d:36                push 
  0d4e:43 48 04         callk Format 4 


        code_0d51
  0d51:39 04            pushi 4 // $4 x
  0d53:5b 02 01           lea 2 1 
  0d56:36                push 
  0d57:38 0122          pushi 122 // $122 addToPic
  0d5a:39 15            pushi 15 // $15 brBottom
  0d5c:5b 02 33           lea 2 33 
  0d5f:36                push 
  0d60:43 48 08         callk Format 8 

  0d63:78               push1 
  0d64:5b 02 01           lea 2 1 
  0d67:36                push 
  0d68:45 0e 02         callb procedure_000e 2 //  

  0d6b:35 3c              ldi 3c 
  0d6d:65 16             aTop ticks 
  0d6f:32 0010            jmp code_0d82 

        code_0d72
  0d72:3c                 dup 
  0d73:35 07              ldi 7 
  0d75:1a                 eq? 
  0d76:30 0009            bnt code_0d82 
  0d79:76               push0 
  0d7a:45 03 00         callb procedure_0003 0 //  

  0d7d:39 6c            pushi 6c // $6c dispose
  0d7f:76               push0 
  0d80:54 04             self 4 


        code_0d82
  0d82:3a                toss 
  0d83:48                 ret 
    )

)

// 0f24
(instance sJetWay of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0dbe
  0dbe:3f 02             link 2 // (var $2)
  0dc0:87 01              lap param1 
  0dc2:65 0a             aTop state 
  0dc4:36                push 
  0dc5:3c                 dup 
  0dc6:35 00              ldi 0 
  0dc8:1a                 eq? 
  0dc9:30 0019            bnt code_0de5 
  0dcc:76               push0 
  0dcd:45 02 00         callb procedure_0002 0 //  

  0dd0:38 011b          pushi 11b // $11b setMotion
  0dd3:39 04            pushi 4 // $4 x
  0dd5:51 24            class PolyPath 
  0dd7:36                push 
  0dd8:38 00b3          pushi b3 // $b3 theItem
  0ddb:39 7c            pushi 7c // $7c prev
  0ddd:7c            pushSelf 
  0dde:81 00              lag  
  0de0:4a 0c             send c 

  0de2:32 0136            jmp code_0f1b 

        code_0de5
  0de5:3c                 dup 
  0de6:35 01              ldi 1 
  0de8:1a                 eq? 
  0de9:30 0026            bnt code_0e12 
  0dec:39 05            pushi 5 // $5 view
  0dee:78               push1 
  0def:38 0123          pushi 123 // $123 isExtra
  0df2:38 00a2          pushi a2 // $a2 setLoop
  0df5:78               push1 
  0df6:39 03            pushi 3 // $3 y
  0df8:38 00db          pushi db // $db cycleSpeed
  0dfb:78               push1 
  0dfc:39 06            pushi 6 // $6 loop
  0dfe:38 0120          pushi 120 // $120 setCel
  0e01:78               push1 
  0e02:76               push0 
  0e03:38 0096          pushi 96 // $96 setCycle
  0e06:7a               push2 
  0e07:51 1a            class End 
  0e09:36                push 
  0e0a:7c            pushSelf 
  0e0b:81 00              lag  
  0e0d:4a 20             send 20 

  0e0f:32 0109            jmp code_0f1b 

        code_0e12
  0e12:3c                 dup 
  0e13:35 02              ldi 2 
  0e15:1a                 eq? 
  0e16:30 0007            bnt code_0e20 
  0e19:35 1e              ldi 1e 
  0e1b:65 16             aTop ticks 
  0e1d:32 00fb            jmp code_0f1b 

        code_0e20
  0e20:3c                 dup 
  0e21:35 03              ldi 3 
  0e23:1a                 eq? 
  0e24:30 003a            bnt code_0e61 
  0e27:7a               push2 
  0e28:39 07            pushi 7 // $7 cel
  0e2a:39 61            pushi 61 // $61 vol
  0e2c:45 0a 04         callb procedure_000a 4 //  

  0e2f:89 a0              lsg  
  0e31:35 00              ldi 0 
  0e33:1a                 eq? 
  0e34:30 0012            bnt code_0e49 
  0e37:7a               push2 
  0e38:38 0122          pushi 122 // $122 addToPic
  0e3b:39 16            pushi 16 // $16 brRight
  0e3d:45 0e 04         callb procedure_000e 4 //  

  0e40:7a               push2 
  0e41:38 0122          pushi 122 // $122 addToPic
  0e44:39 17            pushi 17 // $17 name
  0e46:45 0e 04         callb procedure_000e 4 //  


        code_0e49
  0e49:39 2b            pushi 2b // $2b number
  0e4b:78               push1 
  0e4c:38 0124          pushi 124 // $124 checkDetail
  0e4f:39 06            pushi 6 // $6 loop
  0e51:78               push1 
  0e52:78               push1 
  0e53:39 2a            pushi 2a // $2a play
  0e55:76               push0 
  0e56:81 67              lag  
  0e58:4a 10             send 10 

  0e5a:35 1e              ldi 1e 
  0e5c:65 16             aTop ticks 
  0e5e:32 00ba            jmp code_0f1b 

        code_0e61
  0e61:3c                 dup 
  0e62:35 04              ldi 4 
  0e64:1a                 eq? 
  0e65:30 003f            bnt code_0ea7 
  0e68:38 00db          pushi db // $db cycleSpeed
  0e6b:78               push1 
  0e6c:39 08            pushi 8 // $8 underBits
  0e6e:38 0096          pushi 96 // $96 setCycle
  0e71:78               push1 
  0e72:51 1b            class Beg 
  0e74:36                push 
  0e75:81 00              lag  
  0e77:4a 0c             send c 

  0e79:39 2b            pushi 2b // $2b number
  0e7b:78               push1 
  0e7c:38 0125          pushi 125 // $125 detailLevel
  0e7f:39 06            pushi 6 // $6 loop
  0e81:78               push1 
  0e82:39 ff            pushi ff // $ff syncNum
  0e84:39 2a            pushi 2a // $2a play
  0e86:76               push0 
  0e87:81 67              lag  
  0e89:4a 10             send 10 

  0e8b:38 011b          pushi 11b // $11b setMotion
  0e8e:39 04            pushi 4 // $4 x
  0e90:51 1e            class MoveTo 
  0e92:36                push 
  0e93:39 6e            pushi 6e // $6e showSelf
  0e95:39 03            pushi 3 // $3 y
  0e97:76               push0 
  0e98:72 0460          lofsa $0460 // door
  0e9b:4a 04             send 4 

  0e9d:36                push 
  0e9e:7c            pushSelf 
  0e9f:72 0460          lofsa $0460 // door
  0ea2:4a 0c             send c 

  0ea4:32 0074            jmp code_0f1b 

        code_0ea7
  0ea7:3c                 dup 
  0ea8:35 05              ldi 5 
  0eaa:1a                 eq? 
  0eab:30 0021            bnt code_0ecf 
  0eae:38 009c          pushi 9c // $9c stop
  0eb1:76               push0 
  0eb2:81 67              lag  
  0eb4:4a 04             send 4 

  0eb6:38 020a          pushi 20a // $20a normalize
  0eb9:76               push0 
  0eba:38 011b          pushi 11b // $11b setMotion
  0ebd:39 04            pushi 4 // $4 x
  0ebf:51 24            class PolyPath 
  0ec1:36                push 
  0ec2:38 009a          pushi 9a // $9a prevSignal
  0ec5:39 7c            pushi 7c // $7c prev
  0ec7:7c            pushSelf 
  0ec8:81 00              lag  
  0eca:4a 10             send 10 

  0ecc:32 004c            jmp code_0f1b 

        code_0ecf
  0ecf:3c                 dup 
  0ed0:35 06              ldi 6 
  0ed2:1a                 eq? 
  0ed3:30 002f            bnt code_0f05 
  0ed6:39 05            pushi 5 // $5 view
  0ed8:78               push1 
  0ed9:38 0123          pushi 123 // $123 isExtra
  0edc:38 00a2          pushi a2 // $a2 setLoop
  0edf:78               push1 
  0ee0:39 04            pushi 4 // $4 x
  0ee2:38 00db          pushi db // $db cycleSpeed
  0ee5:78               push1 
  0ee6:39 08            pushi 8 // $8 underBits
  0ee8:38 0120          pushi 120 // $120 setCel
  0eeb:78               push1 
  0eec:76               push0 
  0eed:38 011c          pushi 11c // $11c posn
  0ef0:7a               push2 
  0ef1:38 0098          pushi 98 // $98 set60ths
  0ef4:39 5e            pushi 5e // $5e min
  0ef6:38 0096          pushi 96 // $96 setCycle
  0ef9:7a               push2 
  0efa:51 1a            class End 
  0efc:36                push 
  0efd:7c            pushSelf 
  0efe:81 00              lag  
  0f00:4a 28             send 28 

  0f02:32 0016            jmp code_0f1b 

        code_0f05
  0f05:3c                 dup 
  0f06:35 07              ldi 7 
  0f08:1a                 eq? 
  0f09:30 000f            bnt code_0f1b 
  0f0c:35 00              ldi 0 
  0f0e:a1 a8              sag  
  0f10:38 0179          pushi 179 // $179 newRoom
  0f13:78               push1 
  0f14:38 0136          pushi 136 // $136 horizon
  0f17:81 02              lag  
  0f19:4a 06             send 6 


        code_0f1b
  0f1b:3a                toss 
  0f1c:48                 ret 
  0f1d:00                bnot 
    )

)



