(script 19)

(string
    string_24aa "January"
    string_24b2 "February"
    string_24bb "March"
    string_24c1 "April"
    string_24c7 "May"
    string_24cb "June"
    string_24d0 "July"
    string_24d5 "August"
    string_24dc "September"
    string_24e6 "October"
    string_24ee "November"
    string_24f7 "December"
    string_2500 "LLIconItem"
    string_250b "invCode"
    string_2513 "invWin"
    string_251a "Click here to close this window and return to the game."
    string_2552 "ok"
    string_2555 "To look more closely at one of your inventory items, first click here, then click on the item."
    string_25b4 "invLook"
    string_25bc "To do something to one of your inventory items, first click here, then click on the item."
    string_2616 "invHand"
    string_261e "To learn about the other icons in this window, first click here, then pass the question mark over the other icons."
    string_2691 "invHelp"
    string_2699 "To use one of your inventory items in the game, first click here, then click on the item, then click on OK."
    string_2705 "invSelect"
    string_270f "Camcorder"
    string_2719 "the camcorder"
    string_2727 "On"
    string_272a "Off"
    string_272e "Battery Charger"
    string_273e "the battery charger"
    string_2752 "A Blank Videotape"
    string_2764 "the videotape"
    string_2772 "Michelle Milken's Resume"
    string_278b "Michelle's resume"
    string_279d "Hard Disk Cafe Napkin"
    string_27b3 "the Hard Disk Cafe napkin"
    string_27cd "AeroDork Gold Card"
    string_27e0 "the AeroDork Gold Card"
    string_27f7 "Boarding Pass"
    string_2805 "the boarding pass"
    string_2817 "L.A."
    string_281c "New York"
    string_2825 "Atlantic City"
    string_2833 "Miami"
    string_2839 "AeroDork's In-Flight Magazine"
    string_2857 "the magazine"
    string_2864 "Some Change"
    string_2870 "the quarter"
    string_287c "heads"
    string_2882 "tails"
    string_2888 "DayTrotter"
    string_2894 "the DayTrotter"
    string_28a4 "Money"
    string_28aa "the money"
    string_28b4 "Credit Cards"
    string_28c1 "the credit cards"
    string_28d2 "Membership Tape"
    string_28e2 "the membership tape"
    string_28f6 "DataMan"
    string_28fe "the DataMan"
    string_290a "Reverse Biaz DataPak"
    string_291f "the Reverse Biaz DataPak"
    string_2938 "P. C. Hammer DataPak"
    string_294d "the P. C. Hammer DataPak"
    string_2966 "Lana Luscious' Resume"
    string_297c "Lana's resume"
    string_298a "Tramp Casino Matchbook"
    string_29a1 "the Tramp's casino matchbook"
    string_29be "Silver Dollar"
    string_29cc "the silver dollar"
    string_29de "s"
    string_29e0 ""
    string_29e1 ""
    string_29e2 "Roller-skates"
    string_29f0 "the roller-blades"
    string_2a02 "Reverse Biaz Fax"
    string_2a13 "the fax on Reverse Biaz"
    string_2a2b "Champagne"
    string_2a35 "the champagne"
    string_2a43 "Gold Record"
    string_2a4f "the gold record"
    string_2a5f "Cassette Tape"
    string_2a6d "the cassette tape"
    string_2a7f "Chi Chi Lambada's Resume"
    string_2a98 "Chi Chi's resume"
    string_2aa9 "Doc Pulliam's Card"
    string_2abc "Doc Pulliam's card"
    string_2acf "Green Card"
    string_2ada "the green card"
    string_2ae9 "Doily"
    string_2aef "the doily"
    string_2af9 "P. C. Hammer Fax"
    string_2b0a "the fax on P. C. Hammer"
    string_2b22 "Letter Opener"
    string_2b30 "the letter opener"
    string_2b42 "Desk Key"
    string_2b4b "the desk key"
    string_2b58 "Folder Of Evidence"
    string_2b6b "the folder of evidence"
    string_2b82 "Photocopied Evidence"
    string_2b97 "the photocopies"
    string_2ba7 "Reel To Reel Tape"
    string_2bb9 "the reel-to-reel tape"
    string_2bcf "Hooter Shooter"
    string_2bde "the \"Hooter Shooter\" bra"
    string_2bf7 ""
)

(said
)

(local
    local0 = $0000
    local1 = $24aa
    local2 = $24b2
    local3 = $24bb
    local4 = $24c1
    local5 = $24c7
    local6 = $24cb
    local7 = $24d0
    local8 = $24d5
    local9 = $24dc
    local10 = $24e6
    local11 = $24ee
    local12 = $24f7
)

// 001c
(class LLIconItem of IconI
    (properties
        view $ffff
        loop $ffff
        cel $ffff
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $ffff
        type $4000
        message $ffff
        modifiers $0
        signal $1
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (ownedBy) // method_0012
  0012:35 00              ldi 0 
  0014:48                 ret 
  0015:00                bnot 
    )

)

// 01ee
(instance publicinvCode of Code
    (properties
    )
    (method (init) // method_00a3
  00a3:39 6b            pushi 6b // $6b init
  00a5:76               push0 
  00a6:39 73            pushi 73 // $73 add
  00a8:78               push1 
  00a9:72 02c0          lofsa $02c0 // ok
  00ac:36                push 
  00ad:39 23            pushi 23 // $23 window
  00af:78               push1 
  00b0:72 0240          lofsa $0240 // invWin
  00b3:36                push 
  00b4:38 00d3          pushi d3 // $d3 helpIconItem
  00b7:78               push1 
  00b8:72 03c2          lofsa $03c2 // invHelp
  00bb:36                push 
  00bc:38 0175          pushi 175 // $175 selectIcon
  00bf:78               push1 
  00c0:72 0418          lofsa $0418 // invSelect
  00c3:36                push 
  00c4:38 0174          pushi 174 // $174 okButton
  00c7:78               push1 
  00c8:72 02c0          lofsa $02c0 // ok
  00cb:36                push 
  00cc:51 40            class Inv 
  00ce:4a 22             send 22 

  00d0:48                 ret 
    )

    (method (doit) // method_00d1
  00d1:8f 01              lsp param1 
  00d3:3c                 dup 
  00d4:35 17              ldi 17 
  00d6:1a                 eq? 
  00d7:30 0096            bnt code_0170 
  00da:39 73            pushi 73 // $73 add
  00dc:39 1c            pushi 1c // $1c color
  00de:72 0660          lofsa $0660 // Camcorder
  00e1:36                push 
  00e2:72 0718          lofsa $0718 // Battery Charger
  00e5:36                push 
  00e6:72 0824          lofsa $0824 // A Blank Videotape
  00e9:36                push 
  00ea:72 092e          lofsa $092e // A Blank Videotape
  00ed:36                push 
  00ee:72 0a38          lofsa $0a38 // A Blank Videotape
  00f1:36                push 
  00f2:72 0b4c          lofsa $0b4c // Michelle Milken's Resume
  00f5:36                push 
  00f6:72 0bf8          lofsa $0bf8 // Hard Disk Cafe Napkin
  00f9:36                push 
  00fa:72 0c9c          lofsa $0c9c // AeroDork Gold Card
  00fd:36                push 
  00fe:72 0df2          lofsa $0df2 // Boarding Pass
  0101:36                push 
  0102:72 0ea6          lofsa $0ea6 // AeroDork's In-Flight Magazine
  0105:36                push 
  0106:72 0f7e          lofsa $0f7e // Some Change
  0109:36                push 
  010a:72 1070          lofsa $1070 // DayTrotter
  010d:36                push 
  010e:72 1114          lofsa $1114 // Money
  0111:36                push 
  0112:72 11b8          lofsa $11b8 // Credit Cards
  0115:36                push 
  0116:72 1292          lofsa $1292 // Membership Tape
  0119:36                push 
  011a:72 16f4          lofsa $16f4 // Lana Luscious' Resume
  011d:36                push 
  011e:72 17aa          lofsa $17aa // Tramp Casino Matchbook
  0121:36                push 
  0122:72 1876          lofsa $1876 // Silver Dollar
  0125:36                push 
  0126:72 1938          lofsa $1938 // Roller-skates
  0129:36                push 
  012a:72 1ce8          lofsa $1ce8 // Chi Chi Lambada's Resume
  012d:36                push 
  012e:72 1da2          lofsa $1da2 // Doc Pulliam's Card
  0131:36                push 
  0132:72 1e46          lofsa $1e46 // Green Card
  0135:36                push 
  0136:72 1fa2          lofsa $1fa2 // Doily
  0139:36                push 
  013a:72 0316          lofsa $0316 // invLook
  013d:36                push 
  013e:72 036c          lofsa $036c // invHand
  0141:36                push 
  0142:72 0418          lofsa $0418 // invSelect
  0145:36                push 
  0146:72 03c2          lofsa $03c2 // invHelp
  0149:36                push 
  014a:72 02c0          lofsa $02c0 // ok
  014d:36                push 
  014e:39 74            pushi 74 // $74 eachElementDo
  0150:7a               push2 
  0151:38 00c0          pushi c0 // $c0 highlightColor
  0154:89 8d              lsg  
  0156:39 74            pushi 74 // $74 eachElementDo
  0158:7a               push2 
  0159:38 00c1          pushi c1 // $c1 lowlightColor
  015c:89 8b              lsg  
  015e:39 74            pushi 74 // $74 eachElementDo
  0160:78               push1 
  0161:39 6b            pushi 6b // $6b init
  0163:39 20            pushi 20 // $20 state
  0165:78               push1 
  0166:38 0800          pushi 800 // $800 sel_2048
  0169:51 40            class Inv 
  016b:4a 58             send 58 

  016d:32 0076            jmp code_01e6 

        code_0170
  0170:3c                 dup 
  0171:35 18              ldi 18 
  0173:1a                 eq? 
  0174:30 006f            bnt code_01e6 
  0177:39 73            pushi 73 // $73 add
  0179:39 13            pushi 13 // $13 brTop
  017b:72 14a2          lofsa $14a2 // DataMan
  017e:36                push 
  017f:72 1548          lofsa $1548 // Reverse Biaz DataPak
  0182:36                push 
  0183:72 15ee          lofsa $15ee // P. C. Hammer DataPak
  0186:36                push 
  0187:72 19e4          lofsa $19e4 // Reverse Biaz Fax
  018a:36                push 
  018b:72 1a88          lofsa $1a88 // Champagne
  018e:36                push 
  018f:72 1b3e          lofsa $1b3e // Gold Record
  0192:36                push 
  0193:72 1be2          lofsa $1be2 // Cassette Tape
  0196:36                push 
  0197:72 204e          lofsa $204e // P. C. Hammer Fax
  019a:36                push 
  019b:72 20f2          lofsa $20f2 // Letter Opener
  019e:36                push 
  019f:72 2184          lofsa $2184 // Desk Key
  01a2:36                push 
  01a3:72 2256          lofsa $2256 // Folder Of Evidence
  01a6:36                push 
  01a7:72 22fa          lofsa $22fa // Photocopied Evidence
  01aa:36                push 
  01ab:72 23c0          lofsa $23c0 // Reel To Reel Tape
  01ae:36                push 
  01af:72 2468          lofsa $2468 // Hooter Shooter
  01b2:36                push 
  01b3:72 0316          lofsa $0316 // invLook
  01b6:36                push 
  01b7:72 036c          lofsa $036c // invHand
  01ba:36                push 
  01bb:72 0418          lofsa $0418 // invSelect
  01be:36                push 
  01bf:72 03c2          lofsa $03c2 // invHelp
  01c2:36                push 
  01c3:72 02c0          lofsa $02c0 // ok
  01c6:36                push 
  01c7:39 74            pushi 74 // $74 eachElementDo
  01c9:7a               push2 
  01ca:38 00c0          pushi c0 // $c0 highlightColor
  01cd:89 8d              lsg  
  01cf:39 74            pushi 74 // $74 eachElementDo
  01d1:7a               push2 
  01d2:38 00c1          pushi c1 // $c1 lowlightColor
  01d5:89 8b              lsg  
  01d7:39 74            pushi 74 // $74 eachElementDo
  01d9:78               push1 
  01da:39 6b            pushi 6b // $6b init
  01dc:39 20            pushi 20 // $20 state
  01de:78               push1 
  01df:38 0800          pushi 800 // $800 sel_2048
  01e2:51 40            class Inv 
  01e4:4a 46             send 46 


        code_01e6
  01e6:3a                toss 
  01e7:48                 ret 
    )

)

// 023a
(instance publicinvWin of InsetWindow
    (properties
        top $0
        left $0
        bottom $0
        right $0
        color $0
        back $5
        priority $ffff
        window $0
        type $0
        title $0
        brTop $0
        brLeft $0
        brBottom $be
        brRight $140
        eraseOnly $0
        underBits $0
        pUnderBits $0
        topBordColor $5
        lftBordColor $4
        rgtBordColor $2
        botBordColor $1
        bevelWid $3
        shadowWid $2
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        ck $3
        insideColor $2
        topBordColor2 $0
        lftBordColor2 $1
        botBordColor2 $5
        rgtBordColor2 $4
        topBordHgt $1c
        botBordHgt $5
        sideBordWid $2
        shadWid $0
        bevWid $2
        xOffset $0
        yOffset $0
    )
    (method (open) // method_020c
  020c:39 0a            pushi a // $a nsLeft
  020e:78               push1 
  020f:38 00ba          pushi ba // $ba right
  0212:76               push0 
  0213:54 04             self 4 

  0215:36                push 
  0216:38 00b8          pushi b8 // $b8 left
  0219:76               push0 
  021a:54 04             self 4 

  021c:04                 sub 
  021d:36                push 
  021e:35 02              ldi 2 
  0220:08                 div 
  0221:36                push 
  0222:35 44              ldi 44 
  0224:04                 sub 
  0225:36                push 
  0226:72 0316          lofsa $0316 // invLook
  0229:4a 06             send 6 

  022b:38 00b5          pushi b5 // $b5 open
  022e:76               push0 
  022f:57 3e 04         super InsetWindow 4 

  0232:48                 ret 
  0233:00                bnot 
    )

)

// 02ba
(instance ok of LLIconItem
    (properties
        view $3df
        loop $3
        cel $0
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $3e7
        type $4000
        message $ffff
        modifiers $0
        signal $43
        helpStr $251a
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (init) // method_02a4
  02a4:35 00              ldi 0 
  02a6:65 2a             aTop highlightColor 
  02a8:81 85              lag  
  02aa:65 2c             aTop lowlightColor 
  02ac:39 6b            pushi 6b // $6b init
  02ae:76               push0 
  02af:57 78 04         super LLIconItem 4 

  02b2:48                 ret 
  02b3:00                bnot 
    )

)

// 0310
(instance invLook of LLIconItem
    (properties
        view $3df
        loop $2
        cel $0
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $1
        type $4000
        message $2
        modifiers $0
        signal $81
        helpStr $2555
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (init) // method_02fa
  02fa:35 00              ldi 0 
  02fc:65 2a             aTop highlightColor 
  02fe:81 91              lag  
  0300:65 2c             aTop lowlightColor 
  0302:39 6b            pushi 6b // $6b init
  0304:76               push0 
  0305:57 78 04         super LLIconItem 4 

  0308:48                 ret 
  0309:00                bnot 
    )

)

// 0366
(instance invHand of LLIconItem
    (properties
        view $3df
        loop $0
        cel $0
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $2
        type $4000
        message $3
        modifiers $0
        signal $1
        helpStr $25bc
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (init) // method_0350
  0350:35 00              ldi 0 
  0352:65 2a             aTop highlightColor 
  0354:81 89              lag  
  0356:65 2c             aTop lowlightColor 
  0358:39 6b            pushi 6b // $6b init
  035a:76               push0 
  035b:57 78 04         super LLIconItem 4 

  035e:48                 ret 
  035f:00                bnot 
    )

)

// 03bc
(instance invHelp of LLIconItem
    (properties
        view $3df
        loop $1
        cel $0
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $9
        type $4000
        message $6
        modifiers $0
        signal $1
        helpStr $261e
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (init) // method_03a6
  03a6:35 00              ldi 0 
  03a8:65 2a             aTop highlightColor 
  03aa:81 82              lag  
  03ac:65 2c             aTop lowlightColor 
  03ae:39 6b            pushi 6b // $6b init
  03b0:76               push0 
  03b1:57 78 04         super LLIconItem 4 

  03b4:48                 ret 
  03b5:00                bnot 
    )

)

// 0412
(instance invSelect of LLIconItem
    (properties
        view $3df
        loop $4
        cel $0
        nsLeft $0
        nsTop $ffff
        nsRight $0
        nsBottom $0
        state $0
        cursor $3e7
        type $4000
        message $ffff
        modifiers $0
        signal $1
        helpStr $2699
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
    )
    (method (init) // method_03fc
  03fc:35 00              ldi 0 
  03fe:65 2a             aTop highlightColor 
  0400:81 90              lag  
  0402:65 2c             aTop lowlightColor 
  0404:39 6b            pushi 6b // $6b init
  0406:76               push0 
  0407:57 78 04         super LLIconItem 4 

  040a:48                 ret 
  040b:00                bnot 
    )

)

// 065a
(instance Camcorder of InvI
    (properties
        view $3a3
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a3
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2719
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0452
  0452:3f 34             link 34 // (var $34)
  0454:67 16             pTos state 
  0456:35 64              ldi 64 
  0458:0a                 mod 
  0459:a5 32              sat temp50 
  045b:8f 01              lsp param1 
  045d:3c                 dup 
  045e:35 02              ldi 2 
  0460:1a                 eq? 
  0461:30 0060            bnt code_04c4 
  0464:39 06            pushi 6 // $6 loop
  0466:39 13            pushi 13 // $13 brTop
  0468:76               push0 
  0469:39 46            pushi 46 // $46 width
  046b:38 00fa          pushi fa // $fa outOfTouch
  046e:39 50            pushi 50 // $50 title
  0470:67 06             pTos name 
  0472:45 0e 0c         callb procedure_000e c //  

  0475:39 06            pushi 6 // $6 loop
  0477:5b 04 00           lea 4 0 
  047a:36                push 
  047b:39 13            pushi 13 // $13 brTop
  047d:78               push1 
  047e:67 16             pTos state 
  0480:35 64              ldi 64 
  0482:20                 ge? 
  0483:30 0006            bnt code_048c 
  0486:72 2727          lofsa $2727 // On
  0489:32 0003            jmp code_048f 

        code_048c
  048c:72 272a          lofsa $272a // Off

        code_048f
  048f:36                push 
  0490:38 0085          pushi 85 // $85 seconds
  0493:76               push0 
  0494:81 b7              lag  
  0496:4a 04             send 4 

  0498:36                push 
  0499:35 3c              ldi 3c 
  049b:08                 div 
  049c:36                push 
  049d:38 0085          pushi 85 // $85 seconds
  04a0:76               push0 
  04a1:81 b7              lag  
  04a3:4a 04             send 4 

  04a5:36                push 
  04a6:35 3c              ldi 3c 
  04a8:0a                 mod 
  04a9:36                push 
  04aa:43 48 0c         callk Format c 

  04ad:39 07            pushi 7 // $7 cel
  04af:5b 04 00           lea 4 0 
  04b2:36                push 
  04b3:39 46            pushi 46 // $46 width
  04b5:39 7b            pushi 7b // $7b last
  04b7:39 1e            pushi 1e // $1e mode
  04b9:78               push1 
  04ba:39 50            pushi 50 // $50 title
  04bc:67 06             pTos name 
  04be:45 0e 0e         callb procedure_000e e //  

  04c1:32 018d            jmp code_0651 

        code_04c4
  04c4:3c                 dup 
  04c5:35 03              ldi 3 
  04c7:1a                 eq? 
  04c8:30 00bc            bnt code_0587 
  04cb:67 16             pTos state 
  04cd:35 64              ldi 64 
  04cf:20                 ge? 
  04d0:30 0040            bnt code_0513 
  04d3:67 16             pTos state 
  04d5:35 64              ldi 64 
  04d7:04                 sub 
  04d8:65 16             aTop state 
  04da:7a               push2 
  04db:39 13            pushi 13 // $13 brTop
  04dd:7a               push2 
  04de:45 0e 04         callb procedure_000e 4 //  

  04e1:39 05            pushi 5 // $5 view
  04e3:5b 04 00           lea 4 0 
  04e6:36                push 
  04e7:39 13            pushi 13 // $13 brTop
  04e9:39 03            pushi 3 // $3 y
  04eb:38 0085          pushi 85 // $85 seconds
  04ee:76               push0 
  04ef:81 b7              lag  
  04f1:4a 04             send 4 

  04f3:36                push 
  04f4:35 3c              ldi 3c 
  04f6:08                 div 
  04f7:36                push 
  04f8:38 0085          pushi 85 // $85 seconds
  04fb:76               push0 
  04fc:81 b7              lag  
  04fe:4a 04             send 4 

  0500:36                push 
  0501:35 3c              ldi 3c 
  0503:0a                 mod 
  0504:36                push 
  0505:43 48 0a         callk Format a 

  0508:78               push1 
  0509:5b 04 00           lea 4 0 
  050c:36                push 
  050d:45 0e 02         callb procedure_000e 2 //  

  0510:32 013e            jmp code_0651 

        code_0513
  0513:85 32              lat temp50 
  0515:30 0054            bnt code_056c 
  0518:38 0085          pushi 85 // $85 seconds
  051b:76               push0 
  051c:81 b7              lag  
  051e:4a 04             send 4 

  0520:30 0049            bnt code_056c 
  0523:67 16             pTos state 
  0525:35 64              ldi 64 
  0527:02                 add 
  0528:65 16             aTop state 
  052a:7a               push2 
  052b:39 04            pushi 4 // $4 x
  052d:39 48            pushi 48 // $48 syntaxFail
  052f:45 0a 04         callb procedure_000a 4 //  

  0532:7a               push2 
  0533:39 13            pushi 13 // $13 brTop
  0535:39 04            pushi 4 // $4 x
  0537:45 0e 04         callb procedure_000e 4 //  

  053a:39 05            pushi 5 // $5 view
  053c:5b 04 00           lea 4 0 
  053f:36                push 
  0540:39 13            pushi 13 // $13 brTop
  0542:39 03            pushi 3 // $3 y
  0544:38 0085          pushi 85 // $85 seconds
  0547:76               push0 
  0548:81 b7              lag  
  054a:4a 04             send 4 

  054c:36                push 
  054d:35 3c              ldi 3c 
  054f:08                 div 
  0550:36                push 
  0551:38 0085          pushi 85 // $85 seconds
  0554:76               push0 
  0555:81 b7              lag  
  0557:4a 04             send 4 

  0559:36                push 
  055a:35 3c              ldi 3c 
  055c:0a                 mod 
  055d:36                push 
  055e:43 48 0a         callk Format a 

  0561:78               push1 
  0562:5b 04 00           lea 4 0 
  0565:36                push 
  0566:45 0e 02         callb procedure_000e 2 //  

  0569:32 00e5            jmp code_0651 

        code_056c
  056c:85 32              lat temp50 
  056e:30 000b            bnt code_057c 
  0571:7a               push2 
  0572:39 13            pushi 13 // $13 brTop
  0574:39 05            pushi 5 // $5 view
  0576:45 0e 04         callb procedure_000e 4 //  

  0579:32 00d5            jmp code_0651 

        code_057c
  057c:7a               push2 
  057d:39 13            pushi 13 // $13 brTop
  057f:39 06            pushi 6 // $6 loop
  0581:45 0e 04         callb procedure_000e 4 //  

  0584:32 00ca            jmp code_0651 

        code_0587
  0587:3c                 dup 
  0588:35 04              ldi 4 
  058a:1a                 eq? 
  058b:30 00b6            bnt code_0644 
  058e:39 04            pushi 4 // $4 x
  0590:8f 02              lsp param2 
  0592:7a               push2 
  0593:39 03            pushi 3 // $3 y
  0595:39 04            pushi 4 // $4 x
  0597:46 03e7 0005 08  calle 3e7 procedure_0005 8 //  

  059d:30 0090            bnt code_0630 
  05a0:85 32              lat temp50 
  05a2:30 0019            bnt code_05be 
  05a5:7a               push2 
  05a6:39 13            pushi 13 // $13 brTop
  05a8:39 07            pushi 7 // $7 cel
  05aa:45 0e 04         callb procedure_000e 4 //  

  05ad:38 009b          pushi 9b // $9b owner
  05b0:78               push1 
  05b1:39 17            pushi 17 // $17 name
  05b3:39 43            pushi 43 // $43 at
  05b5:78               push1 
  05b6:8d 32              lst temp50 
  05b8:51 40            class Inv 
  05ba:4a 06             send 6 

  05bc:4a 06             send 6 


        code_05be
  05be:39 20            pushi 20 // $20 state
  05c0:76               push0 
  05c1:39 43            pushi 43 // $43 at
  05c3:78               push1 
  05c4:8f 02              lsp param2 
  05c6:51 40            class Inv 
  05c8:4a 06             send 6 

  05ca:4a 04             send 4 

  05cc:36                push 
  05cd:35 01              ldi 1 
  05cf:1c                 ne? 
  05d0:30 001f            bnt code_05f2 
  05d3:7a               push2 
  05d4:39 13            pushi 13 // $13 brTop
  05d6:39 08            pushi 8 // $8 underBits
  05d8:45 0e 04         callb procedure_000e 4 //  

  05db:39 05            pushi 5 // $5 view
  05dd:39 13            pushi 13 // $13 brTop
  05df:39 09            pushi 9 // $9 nsTop
  05e1:39 43            pushi 43 // $43 at
  05e3:39 ff            pushi ff // $ff syncNum
  05e5:38 00b9          pushi b9 // $b9 bottom
  05e8:45 0e 0a         callb procedure_000e a //  

  05eb:35 00              ldi 0 
  05ed:65 16             aTop state 
  05ef:32 005f            jmp code_0651 

        code_05f2
  05f2:7a               push2 
  05f3:39 04            pushi 4 // $4 x
  05f5:39 49            pushi 49 // $49 semanticFail
  05f7:45 0a 04         callb procedure_000a 4 //  

  05fa:7a               push2 
  05fb:39 13            pushi 13 // $13 brTop
  05fd:39 0a            pushi a // $a nsLeft
  05ff:45 0e 04         callb procedure_000e 4 //  

  0602:87 02              lap param2 
  0604:65 16             aTop state 
  0606:38 009b          pushi 9b // $9b owner
  0609:78               push1 
  060a:72 0660          lofsa $0660 // Camcorder
  060d:36                push 
  060e:39 43            pushi 43 // $43 at
  0610:78               push1 
  0611:8f 02              lsp param2 
  0613:51 40            class Inv 
  0615:4a 06             send 6 

  0617:4a 06             send 6 

  0619:38 00ce          pushi ce // $ce curIcon
  061c:78               push1 
  061d:76               push0 
  061e:39 69            pushi 69 // $69 hide
  0620:76               push0 
  0621:51 40            class Inv 
  0623:4a 0a             send a 

  0625:38 020c          pushi 20c // $20c showInv
  0628:76               push0 
  0629:81 00              lag  
  062b:4a 04             send 4 

  062d:32 0021            jmp code_0651 

        code_0630
  0630:7a               push2 
  0631:38 0080          pushi 80 // $80 indexOf
  0634:78               push1 
  0635:7c            pushSelf 
  0636:51 40            class Inv 
  0638:4a 06             send 6 

  063a:36                push 
  063b:8f 02              lsp param2 
  063d:40 fa49 04        call proc_008a 4 

  0641:32 000d            jmp code_0651 

        code_0644
  0644:38 010c          pushi 10c // $10c doVerb
  0647:7a               push2 
  0648:8f 01              lsp param1 
  064a:8f 02              lsp param2 
  064c:59 03            &rest 3 
  064e:57 3f 08         super InvI 8 


        code_0651
  0651:3a                toss 
  0652:48                 ret 
  0653:00                bnot 
    )

)

// 0712
(instance Battery Charger of InvI
    (properties
        view $3a4
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a4
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $273e
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_06a2
  06a2:8f 01              lsp param1 
  06a4:3c                 dup 
  06a5:35 02              ldi 2 
  06a7:1a                 eq? 
  06a8:30 0010            bnt code_06bb 
  06ab:39 04            pushi 4 // $4 x
  06ad:39 13            pushi 13 // $13 brTop
  06af:39 0b            pushi b // $b nsBottom
  06b1:39 50            pushi 50 // $50 title
  06b3:67 06             pTos name 
  06b5:45 0e 08         callb procedure_000e 8 //  

  06b8:32 004f            jmp code_070a 

        code_06bb
  06bb:3c                 dup 
  06bc:35 03              ldi 3 
  06be:1a                 eq? 
  06bf:30 000b            bnt code_06cd 
  06c2:7a               push2 
  06c3:39 13            pushi 13 // $13 brTop
  06c5:39 0c            pushi c // $c nsRight
  06c7:45 0e 04         callb procedure_000e 4 //  

  06ca:32 003d            jmp code_070a 

        code_06cd
  06cd:3c                 dup 
  06ce:35 04              ldi 4 
  06d0:1a                 eq? 
  06d1:30 0029            bnt code_06fd 
  06d4:8f 02              lsp param2 
  06d6:3c                 dup 
  06d7:35 00              ldi 0 
  06d9:1a                 eq? 
  06da:30 000b            bnt code_06e8 
  06dd:7a               push2 
  06de:39 13            pushi 13 // $13 brTop
  06e0:39 0d            pushi d // $d lsTop
  06e2:45 0e 04         callb procedure_000e 4 //  

  06e5:32 0011            jmp code_06f9 

        code_06e8
  06e8:7a               push2 
  06e9:38 0080          pushi 80 // $80 indexOf
  06ec:78               push1 
  06ed:7c            pushSelf 
  06ee:51 40            class Inv 
  06f0:4a 06             send 6 

  06f2:36                push 
  06f3:8f 02              lsp param2 
  06f5:40 f991 04        call proc_008a 4 


        code_06f9
  06f9:3a                toss 
  06fa:32 000d            jmp code_070a 

        code_06fd
  06fd:38 010c          pushi 10c // $10c doVerb
  0700:7a               push2 
  0701:8f 01              lsp param1 
  0703:8f 02              lsp param2 
  0705:59 03            &rest 3 
  0707:57 3f 08         super InvI 8 


        code_070a
  070a:3a                toss 
  070b:48                 ret 
    )

)

// 081e
(instance A Blank Videotape of InvI
    (properties
        view $3a6
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a6
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2764
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_075a
  075a:8f 01              lsp param1 
  075c:3c                 dup 
  075d:35 02              ldi 2 
  075f:1a                 eq? 
  0760:30 0079            bnt code_07dc 
  0763:67 16             pTos state 
  0765:3c                 dup 
  0766:35 00              ldi 0 
  0768:1a                 eq? 
  0769:30 0013            bnt code_077f 
  076c:39 06            pushi 6 // $6 loop
  076e:39 13            pushi 13 // $13 brTop
  0770:39 0e            pushi e // $e lsLeft
  0772:39 50            pushi 50 // $50 title
  0774:67 06             pTos name 
  0776:39 1e            pushi 1e // $1e mode
  0778:78               push1 
  0779:45 0e 0c         callb procedure_000e c //  

  077c:32 0059            jmp code_07d8 

        code_077f
  077f:3c                 dup 
  0780:35 01              ldi 1 
  0782:1a                 eq? 
  0783:30 0010            bnt code_0796 
  0786:39 04            pushi 4 // $4 x
  0788:39 13            pushi 13 // $13 brTop
  078a:39 0f            pushi f // $f lsBottom
  078c:39 50            pushi 50 // $50 title
  078e:67 06             pTos name 
  0790:45 0e 08         callb procedure_000e 8 //  

  0793:32 0042            jmp code_07d8 

        code_0796
  0796:3c                 dup 
  0797:35 02              ldi 2 
  0799:1a                 eq? 
  079a:30 0010            bnt code_07ad 
  079d:39 04            pushi 4 // $4 x
  079f:39 13            pushi 13 // $13 brTop
  07a1:39 10            pushi 10 // $10 lsRight
  07a3:39 50            pushi 50 // $50 title
  07a5:67 06             pTos name 
  07a7:45 0e 08         callb procedure_000e 8 //  

  07aa:32 002b            jmp code_07d8 

        code_07ad
  07ad:3c                 dup 
  07ae:35 03              ldi 3 
  07b0:1a                 eq? 
  07b1:30 0010            bnt code_07c4 
  07b4:39 04            pushi 4 // $4 x
  07b6:39 13            pushi 13 // $13 brTop
  07b8:39 11            pushi 11 // $11 signal
  07ba:39 50            pushi 50 // $50 title
  07bc:67 06             pTos name 
  07be:45 0e 08         callb procedure_000e 8 //  

  07c1:32 0014            jmp code_07d8 

        code_07c4
  07c4:3c                 dup 
  07c5:35 04              ldi 4 
  07c7:1a                 eq? 
  07c8:30 000d            bnt code_07d8 
  07cb:39 04            pushi 4 // $4 x
  07cd:39 13            pushi 13 // $13 brTop
  07cf:39 12            pushi 12 // $12 illegalBits
  07d1:39 50            pushi 50 // $50 title
  07d3:67 06             pTos name 
  07d5:45 0e 08         callb procedure_000e 8 //  


        code_07d8
  07d8:3a                toss 
  07d9:32 0039            jmp code_0815 

        code_07dc
  07dc:3c                 dup 
  07dd:35 03              ldi 3 
  07df:1a                 eq? 
  07e0:30 000a            bnt code_07ed 
  07e3:7a               push2 
  07e4:39 13            pushi 13 // $13 brTop
  07e6:3c                 dup 
  07e7:45 0e 04         callb procedure_000e 4 //  

  07ea:32 0028            jmp code_0815 

        code_07ed
  07ed:3c                 dup 
  07ee:35 04              ldi 4 
  07f0:1a                 eq? 
  07f1:30 0014            bnt code_0808 
  07f4:7a               push2 
  07f5:38 0080          pushi 80 // $80 indexOf
  07f8:78               push1 
  07f9:7c            pushSelf 
  07fa:51 40            class Inv 
  07fc:4a 06             send 6 

  07fe:36                push 
  07ff:8f 02              lsp param2 
  0801:40 f885 04        call proc_008a 4 

  0805:32 000d            jmp code_0815 

        code_0808
  0808:38 010c          pushi 10c // $10c doVerb
  080b:7a               push2 
  080c:8f 01              lsp param1 
  080e:8f 02              lsp param2 
  0810:59 03            &rest 3 
  0812:57 3f 08         super InvI 8 


        code_0815
  0815:3a                toss 
  0816:48                 ret 
  0817:00                bnot 
    )

)

// 0928
(instance A Blank Videotape of InvI
    (properties
        view $3a6
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a6
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2764
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0866
  0866:8f 01              lsp param1 
  0868:3c                 dup 
  0869:35 02              ldi 2 
  086b:1a                 eq? 
  086c:30 0079            bnt code_08e8 
  086f:67 16             pTos state 
  0871:3c                 dup 
  0872:35 00              ldi 0 
  0874:1a                 eq? 
  0875:30 0013            bnt code_088b 
  0878:39 06            pushi 6 // $6 loop
  087a:39 13            pushi 13 // $13 brTop
  087c:39 0e            pushi e // $e lsLeft
  087e:39 50            pushi 50 // $50 title
  0880:67 06             pTos name 
  0882:39 1e            pushi 1e // $1e mode
  0884:78               push1 
  0885:45 0e 0c         callb procedure_000e c //  

  0888:32 0059            jmp code_08e4 

        code_088b
  088b:3c                 dup 
  088c:35 01              ldi 1 
  088e:1a                 eq? 
  088f:30 0010            bnt code_08a2 
  0892:39 04            pushi 4 // $4 x
  0894:39 13            pushi 13 // $13 brTop
  0896:39 0f            pushi f // $f lsBottom
  0898:39 50            pushi 50 // $50 title
  089a:67 06             pTos name 
  089c:45 0e 08         callb procedure_000e 8 //  

  089f:32 0042            jmp code_08e4 

        code_08a2
  08a2:3c                 dup 
  08a3:35 02              ldi 2 
  08a5:1a                 eq? 
  08a6:30 0010            bnt code_08b9 
  08a9:39 04            pushi 4 // $4 x
  08ab:39 13            pushi 13 // $13 brTop
  08ad:39 10            pushi 10 // $10 lsRight
  08af:39 50            pushi 50 // $50 title
  08b1:67 06             pTos name 
  08b3:45 0e 08         callb procedure_000e 8 //  

  08b6:32 002b            jmp code_08e4 

        code_08b9
  08b9:3c                 dup 
  08ba:35 03              ldi 3 
  08bc:1a                 eq? 
  08bd:30 0010            bnt code_08d0 
  08c0:39 04            pushi 4 // $4 x
  08c2:39 13            pushi 13 // $13 brTop
  08c4:39 11            pushi 11 // $11 signal
  08c6:39 50            pushi 50 // $50 title
  08c8:67 06             pTos name 
  08ca:45 0e 08         callb procedure_000e 8 //  

  08cd:32 0014            jmp code_08e4 

        code_08d0
  08d0:3c                 dup 
  08d1:35 04              ldi 4 
  08d3:1a                 eq? 
  08d4:30 000d            bnt code_08e4 
  08d7:39 04            pushi 4 // $4 x
  08d9:39 13            pushi 13 // $13 brTop
  08db:39 12            pushi 12 // $12 illegalBits
  08dd:39 50            pushi 50 // $50 title
  08df:67 06             pTos name 
  08e1:45 0e 08         callb procedure_000e 8 //  


        code_08e4
  08e4:3a                toss 
  08e5:32 0038            jmp code_0920 

        code_08e8
  08e8:3c                 dup 
  08e9:35 03              ldi 3 
  08eb:1a                 eq? 
  08ec:30 000b            bnt code_08fa 
  08ef:7a               push2 
  08f0:39 13            pushi 13 // $13 brTop
  08f2:39 14            pushi 14 // $14 brLeft
  08f4:45 0e 04         callb procedure_000e 4 //  

  08f7:32 0026            jmp code_0920 

        code_08fa
  08fa:3c                 dup 
  08fb:35 04              ldi 4 
  08fd:1a                 eq? 
  08fe:30 0014            bnt code_0915 
  0901:7a               push2 
  0902:38 0080          pushi 80 // $80 indexOf
  0905:78               push1 
  0906:7c            pushSelf 
  0907:51 40            class Inv 
  0909:4a 06             send 6 

  090b:36                push 
  090c:8f 02              lsp param2 
  090e:40 f778 04        call proc_008a 4 

  0912:32 000b            jmp code_0920 

        code_0915
  0915:38 010c          pushi 10c // $10c doVerb
  0918:78               push1 
  0919:8f 01              lsp param1 
  091b:59 03            &rest 3 
  091d:57 3f 06         super InvI 6 


        code_0920
  0920:3a                toss 
  0921:48                 ret 
    )

)

// 0a32
(instance A Blank Videotape of InvI
    (properties
        view $3a6
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a6
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2764
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0970
  0970:8f 01              lsp param1 
  0972:3c                 dup 
  0973:35 02              ldi 2 
  0975:1a                 eq? 
  0976:30 0079            bnt code_09f2 
  0979:67 16             pTos state 
  097b:3c                 dup 
  097c:35 00              ldi 0 
  097e:1a                 eq? 
  097f:30 0013            bnt code_0995 
  0982:39 06            pushi 6 // $6 loop
  0984:39 13            pushi 13 // $13 brTop
  0986:39 0e            pushi e // $e lsLeft
  0988:39 50            pushi 50 // $50 title
  098a:67 06             pTos name 
  098c:39 1e            pushi 1e // $1e mode
  098e:78               push1 
  098f:45 0e 0c         callb procedure_000e c //  

  0992:32 0059            jmp code_09ee 

        code_0995
  0995:3c                 dup 
  0996:35 01              ldi 1 
  0998:1a                 eq? 
  0999:30 0010            bnt code_09ac 
  099c:39 04            pushi 4 // $4 x
  099e:39 13            pushi 13 // $13 brTop
  09a0:39 0f            pushi f // $f lsBottom
  09a2:39 50            pushi 50 // $50 title
  09a4:67 06             pTos name 
  09a6:45 0e 08         callb procedure_000e 8 //  

  09a9:32 0042            jmp code_09ee 

        code_09ac
  09ac:3c                 dup 
  09ad:35 02              ldi 2 
  09af:1a                 eq? 
  09b0:30 0010            bnt code_09c3 
  09b3:39 04            pushi 4 // $4 x
  09b5:39 13            pushi 13 // $13 brTop
  09b7:39 10            pushi 10 // $10 lsRight
  09b9:39 50            pushi 50 // $50 title
  09bb:67 06             pTos name 
  09bd:45 0e 08         callb procedure_000e 8 //  

  09c0:32 002b            jmp code_09ee 

        code_09c3
  09c3:3c                 dup 
  09c4:35 03              ldi 3 
  09c6:1a                 eq? 
  09c7:30 0010            bnt code_09da 
  09ca:39 04            pushi 4 // $4 x
  09cc:39 13            pushi 13 // $13 brTop
  09ce:39 11            pushi 11 // $11 signal
  09d0:39 50            pushi 50 // $50 title
  09d2:67 06             pTos name 
  09d4:45 0e 08         callb procedure_000e 8 //  

  09d7:32 0014            jmp code_09ee 

        code_09da
  09da:3c                 dup 
  09db:35 04              ldi 4 
  09dd:1a                 eq? 
  09de:30 000d            bnt code_09ee 
  09e1:39 04            pushi 4 // $4 x
  09e3:39 13            pushi 13 // $13 brTop
  09e5:39 12            pushi 12 // $12 illegalBits
  09e7:39 50            pushi 50 // $50 title
  09e9:67 06             pTos name 
  09eb:45 0e 08         callb procedure_000e 8 //  


        code_09ee
  09ee:3a                toss 
  09ef:32 0038            jmp code_0a2a 

        code_09f2
  09f2:3c                 dup 
  09f3:35 03              ldi 3 
  09f5:1a                 eq? 
  09f6:30 000b            bnt code_0a04 
  09f9:7a               push2 
  09fa:39 13            pushi 13 // $13 brTop
  09fc:39 15            pushi 15 // $15 brBottom
  09fe:45 0e 04         callb procedure_000e 4 //  

  0a01:32 0026            jmp code_0a2a 

        code_0a04
  0a04:3c                 dup 
  0a05:35 04              ldi 4 
  0a07:1a                 eq? 
  0a08:30 0014            bnt code_0a1f 
  0a0b:7a               push2 
  0a0c:38 0080          pushi 80 // $80 indexOf
  0a0f:78               push1 
  0a10:7c            pushSelf 
  0a11:51 40            class Inv 
  0a13:4a 06             send 6 

  0a15:36                push 
  0a16:8f 02              lsp param2 
  0a18:40 f66e 04        call proc_008a 4 

  0a1c:32 000b            jmp code_0a2a 

        code_0a1f
  0a1f:38 010c          pushi 10c // $10c doVerb
  0a22:78               push1 
  0a23:8f 01              lsp param1 
  0a25:59 03            &rest 3 
  0a27:57 3f 06         super InvI 6 


        code_0a2a
  0a2a:3a                toss 
  0a2b:48                 ret 
    )

)

// 0b46
(instance Michelle Milken's Resume of InvI
    (properties
        view $3a9
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a9
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $278b
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0a7a
  0a7a:8f 01              lsp param1 
  0a7c:3c                 dup 
  0a7d:35 02              ldi 2 
  0a7f:1a                 eq? 
  0a80:30 0079            bnt code_0afc 
  0a83:39 0a            pushi a // $a nsLeft
  0a85:39 13            pushi 13 // $13 brTop
  0a87:39 16            pushi 16 // $16 brRight
  0a89:39 21            pushi 21 // $21 font
  0a8b:89 ad              lsg  
  0a8d:39 52            pushi 52 // $52 icon
  0a8f:38 03a9          pushi 3a9 // $3a9 sel_937
  0a92:7a               push2 
  0a93:78               push1 
  0a94:39 50            pushi 50 // $50 title
  0a96:67 06             pTos name 
  0a98:45 0e 14         callb procedure_000e 14 //  

  0a9b:39 08            pushi 8 // $8 underBits
  0a9d:39 13            pushi 13 // $13 brTop
  0a9f:39 17            pushi 17 // $17 name
  0aa1:39 21            pushi 21 // $21 font
  0aa3:89 ad              lsg  
  0aa5:39 46            pushi 46 // $46 width
  0aa7:38 00de          pushi de // $de isStopped
  0aaa:39 50            pushi 50 // $50 title
  0aac:67 06             pTos name 
  0aae:45 0e 10         callb procedure_000e 10 //  

  0ab1:39 03            pushi 3 // $3 y
  0ab3:38 009b          pushi 9b // $9b owner
  0ab6:76               push0 
  0ab7:72 0bf8          lofsa $0bf8 // Hard Disk Cafe Napkin
  0aba:4a 04             send 4 

  0abc:36                push 
  0abd:39 17            pushi 17 // $17 name
  0abf:38 01fe          pushi 1fe // $1fe bust
  0ac2:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  0ac8:18                 not 
  0ac9:30 0071            bnt code_0b3d 
  0acc:7a               push2 
  0acd:78               push1 
  0ace:39 45            pushi 45 // $45 done
  0ad0:45 0a 04         callb procedure_000a 4 //  

  0ad3:7a               push2 
  0ad4:39 13            pushi 13 // $13 brTop
  0ad6:39 18            pushi 18 // $18 key
  0ad8:45 0e 04         callb procedure_000e 4 //  

  0adb:38 0147          pushi 147 // $147 get
  0ade:78               push1 
  0adf:39 06            pushi 6 // $6 loop
  0ae1:81 00              lag  
  0ae3:4a 06             send 6 

  0ae5:38 00ce          pushi ce // $ce curIcon
  0ae8:78               push1 
  0ae9:76               push0 
  0aea:39 69            pushi 69 // $69 hide
  0aec:76               push0 
  0aed:51 40            class Inv 
  0aef:4a 0a             send a 

  0af1:38 020c          pushi 20c // $20c showInv
  0af4:76               push0 
  0af5:81 00              lag  
  0af7:4a 04             send 4 

  0af9:32 0041            jmp code_0b3d 

        code_0afc
  0afc:3c                 dup 
  0afd:35 03              ldi 3 
  0aff:1a                 eq? 
  0b00:30 0012            bnt code_0b15 
  0b03:7a               push2 
  0b04:39 13            pushi 13 // $13 brTop
  0b06:39 19            pushi 19 // $19 time
  0b08:45 0e 04         callb procedure_000e 4 //  

  0b0b:38 010c          pushi 10c // $10c doVerb
  0b0e:78               push1 
  0b0f:7a               push2 
  0b10:54 06             self 6 

  0b12:32 0028            jmp code_0b3d 

        code_0b15
  0b15:3c                 dup 
  0b16:35 04              ldi 4 
  0b18:1a                 eq? 
  0b19:30 0014            bnt code_0b30 
  0b1c:7a               push2 
  0b1d:38 0080          pushi 80 // $80 indexOf
  0b20:78               push1 
  0b21:7c            pushSelf 
  0b22:51 40            class Inv 
  0b24:4a 06             send 6 

  0b26:36                push 
  0b27:8f 02              lsp param2 
  0b29:40 f55d 04        call proc_008a 4 

  0b2d:32 000d            jmp code_0b3d 

        code_0b30
  0b30:38 010c          pushi 10c // $10c doVerb
  0b33:7a               push2 
  0b34:8f 01              lsp param1 
  0b36:8f 02              lsp param2 
  0b38:59 03            &rest 3 
  0b3a:57 3f 08         super InvI 8 


        code_0b3d
  0b3d:3a                toss 
  0b3e:48                 ret 
  0b3f:00                bnot 
    )

)

// 0bf2
(instance Hard Disk Cafe Napkin of InvI
    (properties
        view $3aa
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3aa
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $27b3
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0b8e
  0b8e:8f 01              lsp param1 
  0b90:3c                 dup 
  0b91:35 02              ldi 2 
  0b93:1a                 eq? 
  0b94:30 0018            bnt code_0baf 
  0b97:39 08            pushi 8 // $8 underBits
  0b99:39 13            pushi 13 // $13 brTop
  0b9b:39 1a            pushi 1a // $1a text
  0b9d:39 50            pushi 50 // $50 title
  0b9f:67 06             pTos name 
  0ba1:39 46            pushi 46 // $46 width
  0ba3:38 00de          pushi de // $de isStopped
  0ba6:39 1e            pushi 1e // $1e mode
  0ba8:78               push1 
  0ba9:45 0e 10         callb procedure_000e 10 //  

  0bac:32 003a            jmp code_0be9 

        code_0baf
  0baf:3c                 dup 
  0bb0:35 03              ldi 3 
  0bb2:1a                 eq? 
  0bb3:30 000b            bnt code_0bc1 
  0bb6:7a               push2 
  0bb7:39 13            pushi 13 // $13 brTop
  0bb9:39 1b            pushi 1b // $1b elements
  0bbb:45 0e 04         callb procedure_000e 4 //  

  0bbe:32 0028            jmp code_0be9 

        code_0bc1
  0bc1:3c                 dup 
  0bc2:35 04              ldi 4 
  0bc4:1a                 eq? 
  0bc5:30 0014            bnt code_0bdc 
  0bc8:7a               push2 
  0bc9:38 0080          pushi 80 // $80 indexOf
  0bcc:78               push1 
  0bcd:7c            pushSelf 
  0bce:51 40            class Inv 
  0bd0:4a 06             send 6 

  0bd2:36                push 
  0bd3:8f 02              lsp param2 
  0bd5:40 f4b1 04        call proc_008a 4 

  0bd9:32 000d            jmp code_0be9 

        code_0bdc
  0bdc:38 010c          pushi 10c // $10c doVerb
  0bdf:7a               push2 
  0be0:8f 01              lsp param1 
  0be2:8f 02              lsp param2 
  0be4:59 03            &rest 3 
  0be6:57 3f 08         super InvI 8 


        code_0be9
  0be9:3a                toss 
  0bea:48                 ret 
  0beb:00                bnot 
    )

)

// 0c96
(instance AeroDork Gold Card of InvI
    (properties
        view $3ab
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3ab
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $27e0
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0c3a
  0c3a:8f 01              lsp param1 
  0c3c:3c                 dup 
  0c3d:35 02              ldi 2 
  0c3f:1a                 eq? 
  0c40:30 0010            bnt code_0c53 
  0c43:39 04            pushi 4 // $4 x
  0c45:39 13            pushi 13 // $13 brTop
  0c47:39 1c            pushi 1c // $1c color
  0c49:39 50            pushi 50 // $50 title
  0c4b:67 06             pTos name 
  0c4d:45 0e 08         callb procedure_000e 8 //  

  0c50:32 003a            jmp code_0c8d 

        code_0c53
  0c53:3c                 dup 
  0c54:35 03              ldi 3 
  0c56:1a                 eq? 
  0c57:30 000b            bnt code_0c65 
  0c5a:7a               push2 
  0c5b:39 13            pushi 13 // $13 brTop
  0c5d:39 1d            pushi 1d // $1d back
  0c5f:45 0e 04         callb procedure_000e 4 //  

  0c62:32 0028            jmp code_0c8d 

        code_0c65
  0c65:3c                 dup 
  0c66:35 04              ldi 4 
  0c68:1a                 eq? 
  0c69:30 0014            bnt code_0c80 
  0c6c:7a               push2 
  0c6d:38 0080          pushi 80 // $80 indexOf
  0c70:78               push1 
  0c71:7c            pushSelf 
  0c72:51 40            class Inv 
  0c74:4a 06             send 6 

  0c76:36                push 
  0c77:8f 02              lsp param2 
  0c79:40 f40d 04        call proc_008a 4 

  0c7d:32 000d            jmp code_0c8d 

        code_0c80
  0c80:38 010c          pushi 10c // $10c doVerb
  0c83:7a               push2 
  0c84:8f 01              lsp param1 
  0c86:8f 02              lsp param2 
  0c88:59 03            &rest 3 
  0c8a:57 3f 08         super InvI 8 


        code_0c8d
  0c8d:3a                toss 
  0c8e:48                 ret 
  0c8f:00                bnot 
    )

)

// 0dec
(instance Boarding Pass of InvI
    (properties
        view $3ac
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3ac
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2805
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0cde
  0cde:3f cc             link cc // (var $cc)
  0ce0:8f 01              lsp param1 
  0ce2:3c                 dup 
  0ce3:35 02              ldi 2 
  0ce5:1a                 eq? 
  0ce6:30 00c0            bnt code_0da9 
  0ce9:78               push1 
  0cea:39 03            pushi 3 // $3 y
  0cec:43 42 02         callk GetTime 2 

  0cef:a5 c8              sat temp200 
  0cf1:36                push 
  0cf2:35 1f              ldi 1f 
  0cf4:12                 and 
  0cf5:a5 ca              sat temp202 
  0cf7:8d c8              lst temp200 
  0cf9:35 05              ldi 5 
  0cfb:0c                 shr 
  0cfc:36                push 
  0cfd:35 0f              ldi f 
  0cff:12                 and 
  0d00:a5 c9              sat temp201 
  0d02:8d c8              lst temp200 
  0d04:35 09              ldi 9 
  0d06:0c                 shr 
  0d07:36                push 
  0d08:34 07bc            ldi 7bc 
  0d0b:02                 add 
  0d0c:a5 cb              sat temp203 
  0d0e:39 0a            pushi a // $a nsLeft
  0d10:5b 04 00           lea 4 0 
  0d13:36                push 
  0d14:39 13            pushi 13 // $13 brTop
  0d16:39 1e            pushi 1e // $1e mode
  0d18:89 a0              lsg  
  0d1a:3c                 dup 
  0d1b:35 00              ldi 0 
  0d1d:1a                 eq? 
  0d1e:30 0006            bnt code_0d27 
  0d21:72 2817          lofsa $2817 // L.A.
  0d24:32 0024            jmp code_0d4b 

        code_0d27
  0d27:3c                 dup 
  0d28:35 01              ldi 1 
  0d2a:1a                 eq? 
  0d2b:30 0006            bnt code_0d34 
  0d2e:72 281c          lofsa $281c // New York
  0d31:32 0017            jmp code_0d4b 

        code_0d34
  0d34:3c                 dup 
  0d35:35 02              ldi 2 
  0d37:1a                 eq? 
  0d38:30 0006            bnt code_0d41 
  0d3b:72 2825          lofsa $2825 // Atlantic City
  0d3e:32 000a            jmp code_0d4b 

        code_0d41
  0d41:3c                 dup 
  0d42:35 03              ldi 3 
  0d44:1a                 eq? 
  0d45:30 0003            bnt code_0d4b 
  0d48:72 2833          lofsa $2833 // Miami

        code_0d4b
  0d4b:3a                toss 
  0d4c:36                push 
  0d4d:67 16             pTos state 
  0d4f:3c                 dup 
  0d50:35 00              ldi 0 
  0d52:1a                 eq? 
  0d53:30 0006            bnt code_0d5c 
  0d56:72 2817          lofsa $2817 // L.A.
  0d59:32 0024            jmp code_0d80 

        code_0d5c
  0d5c:3c                 dup 
  0d5d:35 01              ldi 1 
  0d5f:1a                 eq? 
  0d60:30 0006            bnt code_0d69 
  0d63:72 281c          lofsa $281c // New York
  0d66:32 0017            jmp code_0d80 

        code_0d69
  0d69:3c                 dup 
  0d6a:35 02              ldi 2 
  0d6c:1a                 eq? 
  0d6d:30 0006            bnt code_0d76 
  0d70:72 2825          lofsa $2825 // Atlantic City
  0d73:32 000a            jmp code_0d80 

        code_0d76
  0d76:3c                 dup 
  0d77:35 03              ldi 3 
  0d79:1a                 eq? 
  0d7a:30 0003            bnt code_0d80 
  0d7d:72 2833          lofsa $2833 // Miami

        code_0d80
  0d80:3a                toss 
  0d81:36                push 
  0d82:89 b1              lsg  
  0d84:35 64              ldi 64 
  0d86:08                 div 
  0d87:36                push 
  0d88:89 b1              lsg  
  0d8a:35 64              ldi 64 
  0d8c:0a                 mod 
  0d8d:36                push 
  0d8e:85 c9              lat temp201 
  0d90:9b 00             lsli local0 
  0d92:8d ca              lst temp202 
  0d94:8d cb              lst temp203 
  0d96:43 48 14         callk Format 14 

  0d99:39 03            pushi 3 // $3 y
  0d9b:5b 04 00           lea 4 0 
  0d9e:36                push 
  0d9f:39 50            pushi 50 // $50 title
  0da1:67 06             pTos name 
  0da3:45 0e 06         callb procedure_000e 6 //  

  0da6:32 003a            jmp code_0de3 

        code_0da9
  0da9:3c                 dup 
  0daa:35 03              ldi 3 
  0dac:1a                 eq? 
  0dad:30 000b            bnt code_0dbb 
  0db0:7a               push2 
  0db1:39 13            pushi 13 // $13 brTop
  0db3:39 1f            pushi 1f // $1f style
  0db5:45 0e 04         callb procedure_000e 4 //  

  0db8:32 0028            jmp code_0de3 

        code_0dbb
  0dbb:3c                 dup 
  0dbc:35 04              ldi 4 
  0dbe:1a                 eq? 
  0dbf:30 0014            bnt code_0dd6 
  0dc2:7a               push2 
  0dc3:38 0080          pushi 80 // $80 indexOf
  0dc6:78               push1 
  0dc7:7c            pushSelf 
  0dc8:51 40            class Inv 
  0dca:4a 06             send 6 

  0dcc:36                push 
  0dcd:8f 02              lsp param2 
  0dcf:40 f2b7 04        call proc_008a 4 

  0dd3:32 000d            jmp code_0de3 

        code_0dd6
  0dd6:38 010c          pushi 10c // $10c doVerb
  0dd9:7a               push2 
  0dda:8f 01              lsp param1 
  0ddc:8f 02              lsp param2 
  0dde:59 03            &rest 3 
  0de0:57 3f 08         super InvI 8 


        code_0de3
  0de3:3a                toss 
  0de4:48                 ret 
  0de5:00                bnot 
    )

)

// 0ea0
(instance AeroDork's In-Flight Magazine of InvI
    (properties
        view $3ad
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3ad
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2857
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0e34
  0e34:8f 01              lsp param1 
  0e36:3c                 dup 
  0e37:35 02              ldi 2 
  0e39:1a                 eq? 
  0e3a:30 0010            bnt code_0e4d 
  0e3d:39 04            pushi 4 // $4 x
  0e3f:39 13            pushi 13 // $13 brTop
  0e41:39 20            pushi 20 // $20 state
  0e43:39 50            pushi 50 // $50 title
  0e45:67 06             pTos name 
  0e47:45 0e 08         callb procedure_000e 8 //  

  0e4a:32 004a            jmp code_0e97 

        code_0e4d
  0e4d:3c                 dup 
  0e4e:35 03              ldi 3 
  0e50:1a                 eq? 
  0e51:30 001b            bnt code_0e6f 
  0e54:7a               push2 
  0e55:39 13            pushi 13 // $13 brTop
  0e57:39 21            pushi 21 // $21 font
  0e59:45 0e 04         callb procedure_000e 4 //  

  0e5c:7a               push2 
  0e5d:39 05            pushi 5 // $5 view
  0e5f:39 44            pushi 44 // $44 next
  0e61:45 0a 04         callb procedure_000a 4 //  

  0e64:7a               push2 
  0e65:39 13            pushi 13 // $13 brTop
  0e67:39 22            pushi 22 // $22 type
  0e69:45 0e 04         callb procedure_000e 4 //  

  0e6c:32 0028            jmp code_0e97 

        code_0e6f
  0e6f:3c                 dup 
  0e70:35 04              ldi 4 
  0e72:1a                 eq? 
  0e73:30 0014            bnt code_0e8a 
  0e76:7a               push2 
  0e77:38 0080          pushi 80 // $80 indexOf
  0e7a:78               push1 
  0e7b:7c            pushSelf 
  0e7c:51 40            class Inv 
  0e7e:4a 06             send 6 

  0e80:36                push 
  0e81:8f 02              lsp param2 
  0e83:40 f203 04        call proc_008a 4 

  0e87:32 000d            jmp code_0e97 

        code_0e8a
  0e8a:38 010c          pushi 10c // $10c doVerb
  0e8d:7a               push2 
  0e8e:8f 01              lsp param1 
  0e90:8f 02              lsp param2 
  0e92:59 03            &rest 3 
  0e94:57 3f 08         super InvI 8 


        code_0e97
  0e97:3a                toss 
  0e98:48                 ret 
  0e99:00                bnot 
    )

)

// 0f78
(instance Some Change of InvI
    (properties
        view $3ae
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3ae
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2870
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0ee8
  0ee8:3f 28             link 28 // (var $28)
  0eea:8f 01              lsp param1 
  0eec:3c                 dup 
  0eed:35 02              ldi 2 
  0eef:1a                 eq? 
  0ef0:30 0023            bnt code_0f16 
  0ef3:39 04            pushi 4 // $4 x
  0ef5:5b 04 00           lea 4 0 
  0ef8:36                push 
  0ef9:39 13            pushi 13 // $13 brTop
  0efb:39 23            pushi 23 // $23 window
  0efd:89 a8              lsg  
  0eff:35 02              ldi 2 
  0f01:06                 mul 
  0f02:36                push 
  0f03:43 48 08         callk Format 8 

  0f06:39 03            pushi 3 // $3 y
  0f08:5b 04 00           lea 4 0 
  0f0b:36                push 
  0f0c:39 50            pushi 50 // $50 title
  0f0e:67 06             pTos name 
  0f10:45 0e 06         callb procedure_000e 6 //  

  0f13:32 005a            jmp code_0f70 

        code_0f16
  0f16:3c                 dup 
  0f17:35 03              ldi 3 
  0f19:1a                 eq? 
  0f1a:30 002b            bnt code_0f48 
  0f1d:39 04            pushi 4 // $4 x
  0f1f:5b 04 00           lea 4 0 
  0f22:36                push 
  0f23:39 13            pushi 13 // $13 brTop
  0f25:39 24            pushi 24 // $24 cursor
  0f27:7a               push2 
  0f28:76               push0 
  0f29:78               push1 
  0f2a:43 3c 04         callk Random 4 

  0f2d:30 0006            bnt code_0f36 
  0f30:72 287c          lofsa $287c // heads
  0f33:32 0003            jmp code_0f39 

        code_0f36
  0f36:72 2882          lofsa $2882 // tails

        code_0f39
  0f39:36                push 
  0f3a:43 48 08         callk Format 8 

  0f3d:78               push1 
  0f3e:5b 04 00           lea 4 0 
  0f41:36                push 
  0f42:45 0e 02         callb procedure_000e 2 //  

  0f45:32 0028            jmp code_0f70 

        code_0f48
  0f48:3c                 dup 
  0f49:35 04              ldi 4 
  0f4b:1a                 eq? 
  0f4c:30 0014            bnt code_0f63 
  0f4f:7a               push2 
  0f50:38 0080          pushi 80 // $80 indexOf
  0f53:78               push1 
  0f54:7c            pushSelf 
  0f55:51 40            class Inv 
  0f57:4a 06             send 6 

  0f59:36                push 
  0f5a:8f 02              lsp param2 
  0f5c:40 f12a 04        call proc_008a 4 

  0f60:32 000d            jmp code_0f70 

        code_0f63
  0f63:38 010c          pushi 10c // $10c doVerb
  0f66:7a               push2 
  0f67:8f 01              lsp param1 
  0f69:8f 02              lsp param2 
  0f6b:59 03            &rest 3 
  0f6d:57 3f 08         super InvI 8 


        code_0f70
  0f70:3a                toss 
  0f71:48                 ret 
    )

)

// 106a
(instance DayTrotter of InvI
    (properties
        view $3af
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3af
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2894
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_0fc0
  0fc0:8f 01              lsp param1 
  0fc2:3c                 dup 
  0fc3:35 02              ldi 2 
  0fc5:1a                 eq? 
  0fc6:30 004d            bnt code_1016 
  0fc9:63 16             pToa state 
  0fcb:30 0010            bnt code_0fde 
  0fce:39 04            pushi 4 // $4 x
  0fd0:39 13            pushi 13 // $13 brTop
  0fd2:39 25            pushi 25 // $25 max
  0fd4:39 50            pushi 50 // $50 title
  0fd6:67 06             pTos name 
  0fd8:45 0e 08         callb procedure_000e 8 //  

  0fdb:32 0084            jmp code_1062 

        code_0fde
  0fde:7a               push2 
  0fdf:39 0b            pushi b // $b nsBottom
  0fe1:39 4a            pushi 4a // $4a pragmaFail
  0fe3:45 0a 04         callb procedure_000a 4 //  

  0fe6:39 04            pushi 4 // $4 x
  0fe8:39 13            pushi 13 // $13 brTop
  0fea:39 26            pushi 26 // $26 mark
  0fec:39 50            pushi 50 // $50 title
  0fee:67 06             pTos name 
  0ff0:45 0e 08         callb procedure_000e 8 //  

  0ff3:38 00ce          pushi ce // $ce curIcon
  0ff6:78               push1 
  0ff7:76               push0 
  0ff8:39 69            pushi 69 // $69 hide
  0ffa:76               push0 
  0ffb:51 40            class Inv 
  0ffd:4a 0a             send a 

  0fff:35 01              ldi 1 
  1001:65 16             aTop state 
  1003:38 0147          pushi 147 // $147 get
  1006:7a               push2 
  1007:39 0c            pushi c // $c nsRight
  1009:39 0d            pushi d // $d lsTop
  100b:38 020c          pushi 20c // $20c showInv
  100e:76               push0 
  100f:81 00              lag  
  1011:4a 0c             send c 

  1013:32 004c            jmp code_1062 

        code_1016
  1016:3c                 dup 
  1017:35 03              ldi 3 
  1019:1a                 eq? 
  101a:30 001f            bnt code_103c 
  101d:63 16             pToa state 
  101f:30 0010            bnt code_1032 
  1022:39 04            pushi 4 // $4 x
  1024:39 13            pushi 13 // $13 brTop
  1026:39 27            pushi 27 // $27 who
  1028:39 50            pushi 50 // $50 title
  102a:67 06             pTos name 
  102c:45 0e 08         callb procedure_000e 8 //  

  102f:32 0030            jmp code_1062 

        code_1032
  1032:38 010c          pushi 10c // $10c doVerb
  1035:78               push1 
  1036:7a               push2 
  1037:54 06             self 6 

  1039:32 0026            jmp code_1062 

        code_103c
  103c:3c                 dup 
  103d:35 04              ldi 4 
  103f:1a                 eq? 
  1040:30 0014            bnt code_1057 
  1043:7a               push2 
  1044:38 0080          pushi 80 // $80 indexOf
  1047:78               push1 
  1048:7c            pushSelf 
  1049:51 40            class Inv 
  104b:4a 06             send 6 

  104d:36                push 
  104e:8f 02              lsp param2 
  1050:40 f036 04        call proc_008a 4 

  1054:32 000b            jmp code_1062 

        code_1057
  1057:38 010c          pushi 10c // $10c doVerb
  105a:78               push1 
  105b:8f 01              lsp param1 
  105d:59 03            &rest 3 
  105f:57 3f 06         super InvI 6 


        code_1062
  1062:3a                toss 
  1063:48                 ret 
    )

)

// 110e
(instance Money of InvI
    (properties
        view $3b0
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b0
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $28aa
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_10b2
  10b2:8f 01              lsp param1 
  10b4:3c                 dup 
  10b5:35 02              ldi 2 
  10b7:1a                 eq? 
  10b8:30 0010            bnt code_10cb 
  10bb:39 04            pushi 4 // $4 x
  10bd:39 13            pushi 13 // $13 brTop
  10bf:39 28            pushi 28 // $28 message
  10c1:39 50            pushi 50 // $50 title
  10c3:67 06             pTos name 
  10c5:45 0e 08         callb procedure_000e 8 //  

  10c8:32 003a            jmp code_1105 

        code_10cb
  10cb:3c                 dup 
  10cc:35 03              ldi 3 
  10ce:1a                 eq? 
  10cf:30 000b            bnt code_10dd 
  10d2:7a               push2 
  10d3:39 13            pushi 13 // $13 brTop
  10d5:39 29            pushi 29 // $29 edit
  10d7:45 0e 04         callb procedure_000e 4 //  

  10da:32 0028            jmp code_1105 

        code_10dd
  10dd:3c                 dup 
  10de:35 04              ldi 4 
  10e0:1a                 eq? 
  10e1:30 0014            bnt code_10f8 
  10e4:7a               push2 
  10e5:38 0080          pushi 80 // $80 indexOf
  10e8:78               push1 
  10e9:7c            pushSelf 
  10ea:51 40            class Inv 
  10ec:4a 06             send 6 

  10ee:36                push 
  10ef:8f 02              lsp param2 
  10f1:40 ef95 04        call proc_008a 4 

  10f5:32 000d            jmp code_1105 

        code_10f8
  10f8:38 010c          pushi 10c // $10c doVerb
  10fb:7a               push2 
  10fc:8f 01              lsp param1 
  10fe:8f 02              lsp param2 
  1100:59 03            &rest 3 
  1102:57 3f 08         super InvI 8 


        code_1105
  1105:3a                toss 
  1106:48                 ret 
  1107:00                bnot 
    )

)

// 11b2
(instance Credit Cards of InvI
    (properties
        view $3b1
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b1
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $28c1
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1156
  1156:8f 01              lsp param1 
  1158:3c                 dup 
  1159:35 02              ldi 2 
  115b:1a                 eq? 
  115c:30 0010            bnt code_116f 
  115f:39 04            pushi 4 // $4 x
  1161:39 13            pushi 13 // $13 brTop
  1163:39 2a            pushi 2a // $2a play
  1165:39 50            pushi 50 // $50 title
  1167:67 06             pTos name 
  1169:45 0e 08         callb procedure_000e 8 //  

  116c:32 003a            jmp code_11a9 

        code_116f
  116f:3c                 dup 
  1170:35 03              ldi 3 
  1172:1a                 eq? 
  1173:30 000b            bnt code_1181 
  1176:7a               push2 
  1177:39 13            pushi 13 // $13 brTop
  1179:39 2b            pushi 2b // $2b number
  117b:45 0e 04         callb procedure_000e 4 //  

  117e:32 0028            jmp code_11a9 

        code_1181
  1181:3c                 dup 
  1182:35 04              ldi 4 
  1184:1a                 eq? 
  1185:30 0014            bnt code_119c 
  1188:7a               push2 
  1189:38 0080          pushi 80 // $80 indexOf
  118c:78               push1 
  118d:7c            pushSelf 
  118e:51 40            class Inv 
  1190:4a 06             send 6 

  1192:36                push 
  1193:8f 02              lsp param2 
  1195:40 eef1 04        call proc_008a 4 

  1199:32 000d            jmp code_11a9 

        code_119c
  119c:38 010c          pushi 10c // $10c doVerb
  119f:7a               push2 
  11a0:8f 01              lsp param1 
  11a2:8f 02              lsp param2 
  11a4:59 03            &rest 3 
  11a6:57 3f 08         super InvI 8 


        code_11a9
  11a9:3a                toss 
  11aa:48                 ret 
  11ab:00                bnot 
    )

)

// 128c
(instance Membership Tape of InvI
    (properties
        view $3b2
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b2
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $28e2
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_11fa
  11fa:8f 01              lsp param1 
  11fc:3c                 dup 
  11fd:35 02              ldi 2 
  11ff:1a                 eq? 
  1200:30 0048            bnt code_124b 
  1203:67 16             pTos state 
  1205:3c                 dup 
  1206:35 01              ldi 1 
  1208:1a                 eq? 
  1209:30 0010            bnt code_121c 
  120c:39 04            pushi 4 // $4 x
  120e:39 13            pushi 13 // $13 brTop
  1210:39 2c            pushi 2c // $2c nodePtr
  1212:39 50            pushi 50 // $50 title
  1214:67 06             pTos name 
  1216:45 0e 08         callb procedure_000e 8 //  

  1219:32 002b            jmp code_1247 

        code_121c
  121c:3c                 dup 
  121d:35 02              ldi 2 
  121f:1a                 eq? 
  1220:30 0010            bnt code_1233 
  1223:39 04            pushi 4 // $4 x
  1225:39 13            pushi 13 // $13 brTop
  1227:39 2d            pushi 2d // $2d client
  1229:39 50            pushi 50 // $50 title
  122b:67 06             pTos name 
  122d:45 0e 08         callb procedure_000e 8 //  

  1230:32 0014            jmp code_1247 

        code_1233
  1233:3c                 dup 
  1234:35 03              ldi 3 
  1236:1a                 eq? 
  1237:30 000d            bnt code_1247 
  123a:39 04            pushi 4 // $4 x
  123c:39 13            pushi 13 // $13 brTop
  123e:39 2e            pushi 2e // $2e dx
  1240:39 50            pushi 50 // $50 title
  1242:67 06             pTos name 
  1244:45 0e 08         callb procedure_000e 8 //  


        code_1247
  1247:3a                toss 
  1248:32 0038            jmp code_1283 

        code_124b
  124b:3c                 dup 
  124c:35 03              ldi 3 
  124e:1a                 eq? 
  124f:30 000b            bnt code_125d 
  1252:7a               push2 
  1253:39 13            pushi 13 // $13 brTop
  1255:39 2f            pushi 2f // $2f dy
  1257:45 0e 04         callb procedure_000e 4 //  

  125a:32 0026            jmp code_1283 

        code_125d
  125d:3c                 dup 
  125e:35 04              ldi 4 
  1260:1a                 eq? 
  1261:30 0014            bnt code_1278 
  1264:7a               push2 
  1265:38 0080          pushi 80 // $80 indexOf
  1268:78               push1 
  1269:7c            pushSelf 
  126a:51 40            class Inv 
  126c:4a 06             send 6 

  126e:36                push 
  126f:8f 02              lsp param2 
  1271:40 ee15 04        call proc_008a 4 

  1275:32 000b            jmp code_1283 

        code_1278
  1278:38 010c          pushi 10c // $10c doVerb
  127b:78               push1 
  127c:8f 01              lsp param1 
  127e:59 03            &rest 3 
  1280:57 3f 06         super InvI 6 


        code_1283
  1283:3a                toss 
  1284:48                 ret 
  1285:00                bnot 
    )

)

// 149c
(instance DataMan of InvI
    (properties
        view $3b4
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b4
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $28fe
        owner $1bd
        script $0
        value $0
    )
    (method (doVerb) // method_12d4
  12d4:8f 01              lsp param1 
  12d6:3c                 dup 
  12d7:35 02              ldi 2 
  12d9:1a                 eq? 
  12da:30 005b            bnt code_1338 
  12dd:67 16             pTos state 
  12df:3c                 dup 
  12e0:35 00              ldi 0 
  12e2:1a                 eq? 
  12e3:30 0010            bnt code_12f6 
  12e6:39 04            pushi 4 // $4 x
  12e8:39 13            pushi 13 // $13 brTop
  12ea:39 30            pushi 30 // $30 b-moveCnt
  12ec:39 50            pushi 50 // $50 title
  12ee:67 06             pTos name 
  12f0:45 0e 08         callb procedure_000e 8 //  

  12f3:32 003e            jmp code_1334 

        code_12f6
  12f6:3c                 dup 
  12f7:35 01              ldi 1 
  12f9:1a                 eq? 
  12fa:30 0019            bnt code_1316 
  12fd:39 06            pushi 6 // $6 loop
  12ff:39 13            pushi 13 // $13 brTop
  1301:39 31            pushi 31 // $31 b-i1
  1303:39 50            pushi 50 // $50 title
  1305:67 06             pTos name 
  1307:39 1e            pushi 1e // $1e mode
  1309:78               push1 
  130a:45 0e 0c         callb procedure_000e c //  

  130d:78               push1 
  130e:39 11            pushi 11 // $11 signal
  1310:45 07 02         callb procedure_0007 2 //  

  1313:32 001e            jmp code_1334 

        code_1316
  1316:3c                 dup 
  1317:35 02              ldi 2 
  1319:1a                 eq? 
  131a:30 0017            bnt code_1334 
  131d:7a               push2 
  131e:78               push1 
  131f:39 4e            pushi 4e // $4e save
  1321:45 0a 04         callb procedure_000a 4 //  

  1324:39 06            pushi 6 // $6 loop
  1326:39 13            pushi 13 // $13 brTop
  1328:39 32            pushi 32 // $32 b-i2
  132a:39 50            pushi 50 // $50 title
  132c:67 06             pTos name 
  132e:39 1e            pushi 1e // $1e mode
  1330:78               push1 
  1331:45 0e 0c         callb procedure_000e c //  


        code_1334
  1334:3a                toss 
  1335:32 015b            jmp code_1493 

        code_1338
  1338:3c                 dup 
  1339:35 03              ldi 3 
  133b:1a                 eq? 
  133c:30 007f            bnt code_13be 
  133f:67 16             pTos state 
  1341:3c                 dup 
  1342:35 00              ldi 0 
  1344:1a                 eq? 
  1345:30 000b            bnt code_1353 
  1348:7a               push2 
  1349:39 13            pushi 13 // $13 brTop
  134b:39 33            pushi 33 // $33 b-di
  134d:45 0e 04         callb procedure_000e 4 //  

  1350:32 0067            jmp code_13ba 

        code_1353
  1353:3c                 dup 
  1354:35 01              ldi 1 
  1356:1a                 eq? 
  1357:30 002e            bnt code_1388 
  135a:35 00              ldi 0 
  135c:65 16             aTop state 
  135e:7a               push2 
  135f:39 13            pushi 13 // $13 brTop
  1361:39 34            pushi 34 // $34 b-xAxis
  1363:45 0e 04         callb procedure_000e 4 //  

  1366:38 009b          pushi 9b // $9b owner
  1369:78               push1 
  136a:39 18            pushi 18 // $18 key
  136c:72 1548          lofsa $1548 // Reverse Biaz DataPak
  136f:4a 06             send 6 

  1371:38 00ce          pushi ce // $ce curIcon
  1374:78               push1 
  1375:76               push0 
  1376:39 69            pushi 69 // $69 hide
  1378:76               push0 
  1379:51 40            class Inv 
  137b:4a 0a             send a 

  137d:38 020c          pushi 20c // $20c showInv
  1380:76               push0 
  1381:81 00              lag  
  1383:4a 04             send 4 

  1385:32 0032            jmp code_13ba 

        code_1388
  1388:3c                 dup 
  1389:35 02              ldi 2 
  138b:1a                 eq? 
  138c:30 002b            bnt code_13ba 
  138f:35 00              ldi 0 
  1391:65 16             aTop state 
  1393:7a               push2 
  1394:39 13            pushi 13 // $13 brTop
  1396:39 35            pushi 35 // $35 b-incr
  1398:45 0e 04         callb procedure_000e 4 //  

  139b:38 009b          pushi 9b // $9b owner
  139e:78               push1 
  139f:39 18            pushi 18 // $18 key
  13a1:72 15ee          lofsa $15ee // P. C. Hammer DataPak
  13a4:4a 06             send 6 

  13a6:38 00ce          pushi ce // $ce curIcon
  13a9:78               push1 
  13aa:76               push0 
  13ab:39 69            pushi 69 // $69 hide
  13ad:76               push0 
  13ae:51 40            class Inv 
  13b0:4a 0a             send a 

  13b2:38 020c          pushi 20c // $20c showInv
  13b5:76               push0 
  13b6:81 00              lag  
  13b8:4a 04             send 4 


        code_13ba
  13ba:3a                toss 
  13bb:32 00d5            jmp code_1493 

        code_13be
  13be:3c                 dup 
  13bf:35 04              ldi 4 
  13c1:1a                 eq? 
  13c2:30 00c3            bnt code_1488 
  13c5:8f 02              lsp param2 
  13c7:3c                 dup 
  13c8:35 01              ldi 1 
  13ca:1a                 eq? 
  13cb:30 004f            bnt code_141d 
  13ce:7a               push2 
  13cf:39 07            pushi 7 // $7 cel
  13d1:39 4b            pushi 4b // $4b said
  13d3:45 0a 04         callb procedure_000a 4 //  

  13d6:39 20            pushi 20 // $20 state
  13d8:76               push0 
  13d9:72 14a2          lofsa $14a2 // DataMan
  13dc:4a 04             send 4 

  13de:36                push 
  13df:35 00              ldi 0 
  13e1:1a                 eq? 
  13e2:30 002d            bnt code_1412 
  13e5:7a               push2 
  13e6:39 13            pushi 13 // $13 brTop
  13e8:39 36            pushi 36 // $36 xStep
  13ea:45 0e 04         callb procedure_000e 4 //  

  13ed:35 01              ldi 1 
  13ef:65 16             aTop state 
  13f1:38 009b          pushi 9b // $9b owner
  13f4:78               push1 
  13f5:7c            pushSelf 
  13f6:72 1548          lofsa $1548 // Reverse Biaz DataPak
  13f9:4a 06             send 6 

  13fb:38 00ce          pushi ce // $ce curIcon
  13fe:78               push1 
  13ff:76               push0 
  1400:39 69            pushi 69 // $69 hide
  1402:76               push0 
  1403:51 40            class Inv 
  1405:4a 0a             send a 

  1407:38 020c          pushi 20c // $20c showInv
  140a:76               push0 
  140b:81 00              lag  
  140d:4a 04             send 4 

  140f:32 0072            jmp code_1484 

        code_1412
  1412:7a               push2 
  1413:39 13            pushi 13 // $13 brTop
  1415:39 37            pushi 37 // $37 yStep
  1417:45 0e 04         callb procedure_000e 4 //  

  141a:32 0067            jmp code_1484 

        code_141d
  141d:3c                 dup 
  141e:35 02              ldi 2 
  1420:1a                 eq? 
  1421:30 004f            bnt code_1473 
  1424:7a               push2 
  1425:39 07            pushi 7 // $7 cel
  1427:39 4b            pushi 4b // $4b said
  1429:45 0a 04         callb procedure_000a 4 //  

  142c:39 20            pushi 20 // $20 state
  142e:76               push0 
  142f:72 14a2          lofsa $14a2 // DataMan
  1432:4a 04             send 4 

  1434:36                push 
  1435:35 00              ldi 0 
  1437:1a                 eq? 
  1438:30 002d            bnt code_1468 
  143b:7a               push2 
  143c:39 13            pushi 13 // $13 brTop
  143e:39 38            pushi 38 // $38 moveSpeed
  1440:45 0e 04         callb procedure_000e 4 //  

  1443:35 02              ldi 2 
  1445:65 16             aTop state 
  1447:38 009b          pushi 9b // $9b owner
  144a:78               push1 
  144b:7c            pushSelf 
  144c:72 15ee          lofsa $15ee // P. C. Hammer DataPak
  144f:4a 06             send 6 

  1451:38 00ce          pushi ce // $ce curIcon
  1454:78               push1 
  1455:76               push0 
  1456:39 69            pushi 69 // $69 hide
  1458:76               push0 
  1459:51 40            class Inv 
  145b:4a 0a             send a 

  145d:38 020c          pushi 20c // $20c showInv
  1460:76               push0 
  1461:81 00              lag  
  1463:4a 04             send 4 

  1465:32 001c            jmp code_1484 

        code_1468
  1468:7a               push2 
  1469:39 13            pushi 13 // $13 brTop
  146b:39 37            pushi 37 // $37 yStep
  146d:45 0e 04         callb procedure_000e 4 //  

  1470:32 0011            jmp code_1484 

        code_1473
  1473:7a               push2 
  1474:38 0080          pushi 80 // $80 indexOf
  1477:78               push1 
  1478:7c            pushSelf 
  1479:51 40            class Inv 
  147b:4a 06             send 6 

  147d:36                push 
  147e:8f 02              lsp param2 
  1480:40 ec06 04        call proc_008a 4 


        code_1484
  1484:3a                toss 
  1485:32 000b            jmp code_1493 

        code_1488
  1488:38 010c          pushi 10c // $10c doVerb
  148b:78               push1 
  148c:8f 01              lsp param1 
  148e:59 03            &rest 3 
  1490:57 3f 06         super InvI 6 


        code_1493
  1493:3a                toss 
  1494:48                 ret 
  1495:00                bnot 
    )

)

// 1542
(instance Reverse Biaz DataPak of InvI
    (properties
        view $3b5
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b5
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $291f
        owner $1bd
        script $0
        value $0
    )
    (method (doVerb) // method_14e4
  14e4:8f 01              lsp param1 
  14e6:3c                 dup 
  14e7:35 02              ldi 2 
  14e9:1a                 eq? 
  14ea:30 0013            bnt code_1500 
  14ed:39 06            pushi 6 // $6 loop
  14ef:39 13            pushi 13 // $13 brTop
  14f1:39 39            pushi 39 // $39 cantBeHere
  14f3:39 50            pushi 50 // $50 title
  14f5:67 06             pTos name 
  14f7:39 1e            pushi 1e // $1e mode
  14f9:78               push1 
  14fa:45 0e 0c         callb procedure_000e c //  

  14fd:32 003a            jmp code_153a 

        code_1500
  1500:3c                 dup 
  1501:35 03              ldi 3 
  1503:1a                 eq? 
  1504:30 000b            bnt code_1512 
  1507:7a               push2 
  1508:39 13            pushi 13 // $13 brTop
  150a:39 3a            pushi 3a // $3a heading
  150c:45 0e 04         callb procedure_000e 4 //  

  150f:32 0028            jmp code_153a 

        code_1512
  1512:3c                 dup 
  1513:35 04              ldi 4 
  1515:1a                 eq? 
  1516:30 0014            bnt code_152d 
  1519:7a               push2 
  151a:38 0080          pushi 80 // $80 indexOf
  151d:78               push1 
  151e:7c            pushSelf 
  151f:51 40            class Inv 
  1521:4a 06             send 6 

  1523:36                push 
  1524:8f 02              lsp param2 
  1526:40 eb60 04        call proc_008a 4 

  152a:32 000d            jmp code_153a 

        code_152d
  152d:38 010c          pushi 10c // $10c doVerb
  1530:7a               push2 
  1531:8f 01              lsp param1 
  1533:8f 02              lsp param2 
  1535:59 03            &rest 3 
  1537:57 3f 08         super InvI 8 


        code_153a
  153a:3a                toss 
  153b:48                 ret 
    )

)

// 15e8
(instance P. C. Hammer DataPak of InvI
    (properties
        view $3b5
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b5
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $294d
        owner $1bd
        script $0
        value $0
    )
    (method (doVerb) // method_158a
  158a:8f 01              lsp param1 
  158c:3c                 dup 
  158d:35 02              ldi 2 
  158f:1a                 eq? 
  1590:30 0013            bnt code_15a6 
  1593:39 06            pushi 6 // $6 loop
  1595:39 13            pushi 13 // $13 brTop
  1597:39 3b            pushi 3b // $3b mover
  1599:39 50            pushi 50 // $50 title
  159b:67 06             pTos name 
  159d:39 1e            pushi 1e // $1e mode
  159f:78               push1 
  15a0:45 0e 0c         callb procedure_000e c //  

  15a3:32 003a            jmp code_15e0 

        code_15a6
  15a6:3c                 dup 
  15a7:35 03              ldi 3 
  15a9:1a                 eq? 
  15aa:30 000b            bnt code_15b8 
  15ad:7a               push2 
  15ae:39 13            pushi 13 // $13 brTop
  15b0:39 3a            pushi 3a // $3a heading
  15b2:45 0e 04         callb procedure_000e 4 //  

  15b5:32 0028            jmp code_15e0 

        code_15b8
  15b8:3c                 dup 
  15b9:35 04              ldi 4 
  15bb:1a                 eq? 
  15bc:30 0014            bnt code_15d3 
  15bf:7a               push2 
  15c0:38 0080          pushi 80 // $80 indexOf
  15c3:78               push1 
  15c4:7c            pushSelf 
  15c5:51 40            class Inv 
  15c7:4a 06             send 6 

  15c9:36                push 
  15ca:8f 02              lsp param2 
  15cc:40 eaba 04        call proc_008a 4 

  15d0:32 000d            jmp code_15e0 

        code_15d3
  15d3:38 010c          pushi 10c // $10c doVerb
  15d6:7a               push2 
  15d7:8f 01              lsp param1 
  15d9:8f 02              lsp param2 
  15db:59 03            &rest 3 
  15dd:57 3f 08         super InvI 8 


        code_15e0
  15e0:3a                toss 
  15e1:48                 ret 
    )

)

// 16ee
(instance Lana Luscious' Resume of InvI
    (properties
        view $3a9
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a9
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $297c
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1630
  1630:8f 01              lsp param1 
  1632:3c                 dup 
  1633:35 02              ldi 2 
  1635:1a                 eq? 
  1636:30 006c            bnt code_16a5 
  1639:39 0a            pushi a // $a nsLeft
  163b:39 13            pushi 13 // $13 brTop
  163d:39 3c            pushi 3c // $3c doit
  163f:39 21            pushi 21 // $21 font
  1641:89 ad              lsg  
  1643:39 52            pushi 52 // $52 icon
  1645:38 03a9          pushi 3a9 // $3a9 sel_937
  1648:7a               push2 
  1649:7a               push2 
  164a:39 50            pushi 50 // $50 title
  164c:67 06             pTos name 
  164e:45 0e 14         callb procedure_000e 14 //  

  1651:39 08            pushi 8 // $8 underBits
  1653:39 13            pushi 13 // $13 brTop
  1655:39 3d            pushi 3d // $3d isBlocked
  1657:39 21            pushi 21 // $21 font
  1659:89 ad              lsg  
  165b:39 46            pushi 46 // $46 width
  165d:38 0115          pushi 115 // $115 lookStr
  1660:39 50            pushi 50 // $50 title
  1662:67 06             pTos name 
  1664:45 0e 10         callb procedure_000e 10 //  

  1667:38 00d5          pushi d5 // $d5 has
  166a:78               push1 
  166b:39 10            pushi 10 // $10 lsRight
  166d:81 00              lag  
  166f:4a 06             send 6 

  1671:18                 not 
  1672:30 0071            bnt code_16e6 
  1675:7a               push2 
  1676:78               push1 
  1677:39 46            pushi 46 // $46 width
  1679:45 0a 04         callb procedure_000a 4 //  

  167c:7a               push2 
  167d:39 13            pushi 13 // $13 brTop
  167f:39 3e            pushi 3e // $3e looper
  1681:45 0e 04         callb procedure_000e 4 //  

  1684:38 0147          pushi 147 // $147 get
  1687:78               push1 
  1688:39 10            pushi 10 // $10 lsRight
  168a:81 00              lag  
  168c:4a 06             send 6 

  168e:38 00ce          pushi ce // $ce curIcon
  1691:78               push1 
  1692:76               push0 
  1693:39 69            pushi 69 // $69 hide
  1695:76               push0 
  1696:51 40            class Inv 
  1698:4a 0a             send a 

  169a:38 020c          pushi 20c // $20c showInv
  169d:76               push0 
  169e:81 00              lag  
  16a0:4a 04             send 4 

  16a2:32 0041            jmp code_16e6 

        code_16a5
  16a5:3c                 dup 
  16a6:35 03              ldi 3 
  16a8:1a                 eq? 
  16a9:30 0012            bnt code_16be 
  16ac:7a               push2 
  16ad:39 13            pushi 13 // $13 brTop
  16af:39 3f            pushi 3f // $3f priority
  16b1:45 0e 04         callb procedure_000e 4 //  

  16b4:38 010c          pushi 10c // $10c doVerb
  16b7:78               push1 
  16b8:7a               push2 
  16b9:54 06             self 6 

  16bb:32 0028            jmp code_16e6 

        code_16be
  16be:3c                 dup 
  16bf:35 04              ldi 4 
  16c1:1a                 eq? 
  16c2:30 0014            bnt code_16d9 
  16c5:7a               push2 
  16c6:38 0080          pushi 80 // $80 indexOf
  16c9:78               push1 
  16ca:7c            pushSelf 
  16cb:51 40            class Inv 
  16cd:4a 06             send 6 

  16cf:36                push 
  16d0:8f 02              lsp param2 
  16d2:40 e9b4 04        call proc_008a 4 

  16d6:32 000d            jmp code_16e6 

        code_16d9
  16d9:38 010c          pushi 10c // $10c doVerb
  16dc:7a               push2 
  16dd:8f 01              lsp param1 
  16df:8f 02              lsp param2 
  16e1:59 03            &rest 3 
  16e3:57 3f 08         super InvI 8 


        code_16e6
  16e6:3a                toss 
  16e7:48                 ret 
    )

)

// 17a4
(instance Tramp Casino Matchbook of InvI
    (properties
        view $3b8
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b8
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $29a1
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1736
  1736:8f 01              lsp param1 
  1738:3c                 dup 
  1739:35 02              ldi 2 
  173b:1a                 eq? 
  173c:30 0013            bnt code_1752 
  173f:39 06            pushi 6 // $6 loop
  1741:39 13            pushi 13 // $13 brTop
  1743:39 40            pushi 40 // $40 modifiers
  1745:39 50            pushi 50 // $50 title
  1747:67 06             pTos name 
  1749:39 1e            pushi 1e // $1e mode
  174b:78               push1 
  174c:45 0e 0c         callb procedure_000e c //  

  174f:32 004a            jmp code_179c 

        code_1752
  1752:3c                 dup 
  1753:35 03              ldi 3 
  1755:1a                 eq? 
  1756:30 001b            bnt code_1774 
  1759:7a               push2 
  175a:39 13            pushi 13 // $13 brTop
  175c:39 41            pushi 41 // $41 replay
  175e:45 0e 04         callb procedure_000e 4 //  

  1761:39 05            pushi 5 // $5 view
  1763:39 13            pushi 13 // $13 brTop
  1765:39 42            pushi 42 // $42 setPri
  1767:39 43            pushi 43 // $43 at
  1769:39 ff            pushi ff // $ff syncNum
  176b:38 00b9          pushi b9 // $b9 bottom
  176e:45 0e 0a         callb procedure_000e a //  

  1771:32 0028            jmp code_179c 

        code_1774
  1774:3c                 dup 
  1775:35 04              ldi 4 
  1777:1a                 eq? 
  1778:30 0014            bnt code_178f 
  177b:7a               push2 
  177c:38 0080          pushi 80 // $80 indexOf
  177f:78               push1 
  1780:7c            pushSelf 
  1781:51 40            class Inv 
  1783:4a 06             send 6 

  1785:36                push 
  1786:8f 02              lsp param2 
  1788:40 e8fe 04        call proc_008a 4 

  178c:32 000d            jmp code_179c 

        code_178f
  178f:38 010c          pushi 10c // $10c doVerb
  1792:7a               push2 
  1793:8f 01              lsp param1 
  1795:8f 02              lsp param2 
  1797:59 03            &rest 3 
  1799:57 3f 08         super InvI 8 


        code_179c
  179c:3a                toss 
  179d:48                 ret 
    )

)

// 1870
(instance Silver Dollar of InvI
    (properties
        view $3b9
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3b9
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $29cc
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_17ec
  17ec:3f c8             link c8 // (var $c8)
  17ee:8f 01              lsp param1 
  17f0:3c                 dup 
  17f1:35 02              ldi 2 
  17f3:1a                 eq? 
  17f4:30 0038            bnt code_182f 
  17f7:39 05            pushi 5 // $5 view
  17f9:5b 04 00           lea 4 0 
  17fc:36                push 
  17fd:39 13            pushi 13 // $13 brTop
  17ff:39 43            pushi 43 // $43 at
  1801:89 99              lsg  
  1803:3c                 dup 
  1804:35 01              ldi 1 
  1806:1e                 gt? 
  1807:30 0006            bnt code_1810 
  180a:72 29de          lofsa $29de // s
  180d:32 0003            jmp code_1813 

        code_1810
  1810:72 29e0          lofsa $29e0 // 

        code_1813
  1813:36                push 
  1814:43 48 0a         callk Format a 

  1817:39 03            pushi 3 // $3 y
  1819:5b 04 00           lea 4 0 
  181c:36                push 
  181d:39 50            pushi 50 // $50 title
  181f:67 06             pTos name 
  1821:45 0e 06         callb procedure_000e 6 //  

  1824:7a               push2 
  1825:39 13            pushi 13 // $13 brTop
  1827:39 44            pushi 44 // $44 next
  1829:45 0e 04         callb procedure_000e 4 //  

  182c:32 0038            jmp code_1867 

        code_182f
  182f:3c                 dup 
  1830:35 03              ldi 3 
  1832:1a                 eq? 
  1833:30 000b            bnt code_1841 
  1836:7a               push2 
  1837:39 13            pushi 13 // $13 brTop
  1839:39 45            pushi 45 // $45 done
  183b:45 0e 04         callb procedure_000e 4 //  

  183e:32 0026            jmp code_1867 

        code_1841
  1841:3c                 dup 
  1842:35 04              ldi 4 
  1844:1a                 eq? 
  1845:30 0014            bnt code_185c 
  1848:7a               push2 
  1849:38 0080          pushi 80 // $80 indexOf
  184c:78               push1 
  184d:7c            pushSelf 
  184e:51 40            class Inv 
  1850:4a 06             send 6 

  1852:36                push 
  1853:8f 02              lsp param2 
  1855:40 e831 04        call proc_008a 4 

  1859:32 000b            jmp code_1867 

        code_185c
  185c:38 010c          pushi 10c // $10c doVerb
  185f:78               push1 
  1860:8f 01              lsp param1 
  1862:59 03            &rest 3 
  1864:57 3f 06         super InvI 6 


        code_1867
  1867:3a                toss 
  1868:48                 ret 
  1869:00                bnot 
    )

)

// 1932
(instance Roller-skates of InvI
    (properties
        view $3ba
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3ba
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $29f0
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_18b8
  18b8:8f 01              lsp param1 
  18ba:3c                 dup 
  18bb:35 02              ldi 2 
  18bd:1a                 eq? 
  18be:30 0010            bnt code_18d1 
  18c1:39 04            pushi 4 // $4 x
  18c3:39 13            pushi 13 // $13 brTop
  18c5:39 46            pushi 46 // $46 width
  18c7:39 50            pushi 50 // $50 title
  18c9:67 06             pTos name 
  18cb:45 0e 08         callb procedure_000e 8 //  

  18ce:32 0058            jmp code_1929 

        code_18d1
  18d1:3c                 dup 
  18d2:35 03              ldi 3 
  18d4:1a                 eq? 
  18d5:30 0029            bnt code_1901 
  18d8:89 0b              lsg  
  18da:34 02f8            ldi 2f8 
  18dd:1a                 eq? 
  18de:30 0015            bnt code_18f6 
  18e1:38 010c          pushi 10c // $10c doVerb
  18e4:7a               push2 
  18e5:39 04            pushi 4 // $4 x
  18e7:39 12            pushi 12 // $12 illegalBits
  18e9:7a               push2 
  18ea:38 02f8          pushi 2f8 // $2f8 sel_760
  18ed:78               push1 
  18ee:43 02 04         callk ScriptID 4 

  18f1:4a 08             send 8 

  18f3:32 0033            jmp code_1929 

        code_18f6
  18f6:7a               push2 
  18f7:39 13            pushi 13 // $13 brTop
  18f9:39 47            pushi 47 // $47 wordFail
  18fb:45 0e 04         callb procedure_000e 4 //  

  18fe:32 0028            jmp code_1929 

        code_1901
  1901:3c                 dup 
  1902:35 04              ldi 4 
  1904:1a                 eq? 
  1905:30 0014            bnt code_191c 
  1908:7a               push2 
  1909:38 0080          pushi 80 // $80 indexOf
  190c:78               push1 
  190d:7c            pushSelf 
  190e:51 40            class Inv 
  1910:4a 06             send 6 

  1912:36                push 
  1913:8f 02              lsp param2 
  1915:40 e771 04        call proc_008a 4 

  1919:32 000d            jmp code_1929 

        code_191c
  191c:38 010c          pushi 10c // $10c doVerb
  191f:7a               push2 
  1920:8f 01              lsp param1 
  1922:8f 02              lsp param2 
  1924:59 03            &rest 3 
  1926:57 3f 08         super InvI 8 


        code_1929
  1929:3a                toss 
  192a:48                 ret 
  192b:00                bnot 
    )

)

// 19de
(instance Reverse Biaz Fax of InvI
    (properties
        view $3bb
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3bb
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2a13
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_197a
  197a:8f 01              lsp param1 
  197c:3c                 dup 
  197d:35 02              ldi 2 
  197f:1a                 eq? 
  1980:30 0019            bnt code_199c 
  1983:39 06            pushi 6 // $6 loop
  1985:39 13            pushi 13 // $13 brTop
  1987:39 31            pushi 31 // $31 b-i1
  1989:39 50            pushi 50 // $50 title
  198b:67 06             pTos name 
  198d:39 1e            pushi 1e // $1e mode
  198f:78               push1 
  1990:45 0e 0c         callb procedure_000e c //  

  1993:78               push1 
  1994:39 11            pushi 11 // $11 signal
  1996:45 07 02         callb procedure_0007 2 //  

  1999:32 003a            jmp code_19d6 

        code_199c
  199c:3c                 dup 
  199d:35 03              ldi 3 
  199f:1a                 eq? 
  19a0:30 000b            bnt code_19ae 
  19a3:7a               push2 
  19a4:39 13            pushi 13 // $13 brTop
  19a6:39 48            pushi 48 // $48 syntaxFail
  19a8:45 0e 04         callb procedure_000e 4 //  

  19ab:32 0028            jmp code_19d6 

        code_19ae
  19ae:3c                 dup 
  19af:35 04              ldi 4 
  19b1:1a                 eq? 
  19b2:30 0014            bnt code_19c9 
  19b5:7a               push2 
  19b6:38 0080          pushi 80 // $80 indexOf
  19b9:78               push1 
  19ba:7c            pushSelf 
  19bb:51 40            class Inv 
  19bd:4a 06             send 6 

  19bf:36                push 
  19c0:8f 02              lsp param2 
  19c2:40 e6c4 04        call proc_008a 4 

  19c6:32 000d            jmp code_19d6 

        code_19c9
  19c9:38 010c          pushi 10c // $10c doVerb
  19cc:7a               push2 
  19cd:8f 01              lsp param1 
  19cf:8f 02              lsp param2 
  19d1:59 03            &rest 3 
  19d3:57 3f 08         super InvI 8 


        code_19d6
  19d6:3a                toss 
  19d7:48                 ret 
    )

)

// 1a82
(instance Champagne of InvI
    (properties
        view $3bc
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3bc
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2a35
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1a26
  1a26:8f 01              lsp param1 
  1a28:3c                 dup 
  1a29:35 02              ldi 2 
  1a2b:1a                 eq? 
  1a2c:30 0010            bnt code_1a3f 
  1a2f:39 04            pushi 4 // $4 x
  1a31:39 13            pushi 13 // $13 brTop
  1a33:39 49            pushi 49 // $49 semanticFail
  1a35:39 50            pushi 50 // $50 title
  1a37:67 06             pTos name 
  1a39:45 0e 08         callb procedure_000e 8 //  

  1a3c:32 003a            jmp code_1a79 

        code_1a3f
  1a3f:3c                 dup 
  1a40:35 03              ldi 3 
  1a42:1a                 eq? 
  1a43:30 000b            bnt code_1a51 
  1a46:7a               push2 
  1a47:39 13            pushi 13 // $13 brTop
  1a49:39 4a            pushi 4a // $4a pragmaFail
  1a4b:45 0e 04         callb procedure_000e 4 //  

  1a4e:32 0028            jmp code_1a79 

        code_1a51
  1a51:3c                 dup 
  1a52:35 04              ldi 4 
  1a54:1a                 eq? 
  1a55:30 0014            bnt code_1a6c 
  1a58:7a               push2 
  1a59:38 0080          pushi 80 // $80 indexOf
  1a5c:78               push1 
  1a5d:7c            pushSelf 
  1a5e:51 40            class Inv 
  1a60:4a 06             send 6 

  1a62:36                push 
  1a63:8f 02              lsp param2 
  1a65:40 e621 04        call proc_008a 4 

  1a69:32 000d            jmp code_1a79 

        code_1a6c
  1a6c:38 010c          pushi 10c // $10c doVerb
  1a6f:7a               push2 
  1a70:8f 01              lsp param1 
  1a72:8f 02              lsp param2 
  1a74:59 03            &rest 3 
  1a76:57 3f 08         super InvI 8 


        code_1a79
  1a79:3a                toss 
  1a7a:48                 ret 
  1a7b:00                bnot 
    )

)

// 1b38
(instance Gold Record of InvI
    (properties
        view $3bd
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3bd
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2a4f
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1aca
  1aca:8f 01              lsp param1 
  1acc:3c                 dup 
  1acd:35 02              ldi 2 
  1acf:1a                 eq? 
  1ad0:30 0025            bnt code_1af8 
  1ad3:63 16             pToa state 
  1ad5:30 0010            bnt code_1ae8 
  1ad8:39 04            pushi 4 // $4 x
  1ada:39 13            pushi 13 // $13 brTop
  1adc:39 4b            pushi 4b // $4b said
  1ade:39 50            pushi 50 // $50 title
  1ae0:67 06             pTos name 
  1ae2:45 0e 08         callb procedure_000e 8 //  

  1ae5:32 0048            jmp code_1b30 

        code_1ae8
  1ae8:39 04            pushi 4 // $4 x
  1aea:39 13            pushi 13 // $13 brTop
  1aec:39 4c            pushi 4c // $4c claimed
  1aee:39 50            pushi 50 // $50 title
  1af0:67 06             pTos name 
  1af2:45 0e 08         callb procedure_000e 8 //  

  1af5:32 0038            jmp code_1b30 

        code_1af8
  1af8:3c                 dup 
  1af9:35 03              ldi 3 
  1afb:1a                 eq? 
  1afc:30 000b            bnt code_1b0a 
  1aff:7a               push2 
  1b00:39 13            pushi 13 // $13 brTop
  1b02:39 4d            pushi 4d // $4d value
  1b04:45 0e 04         callb procedure_000e 4 //  

  1b07:32 0026            jmp code_1b30 

        code_1b0a
  1b0a:3c                 dup 
  1b0b:35 04              ldi 4 
  1b0d:1a                 eq? 
  1b0e:30 0014            bnt code_1b25 
  1b11:7a               push2 
  1b12:38 0080          pushi 80 // $80 indexOf
  1b15:78               push1 
  1b16:7c            pushSelf 
  1b17:51 40            class Inv 
  1b19:4a 06             send 6 

  1b1b:36                push 
  1b1c:8f 02              lsp param2 
  1b1e:40 e568 04        call proc_008a 4 

  1b22:32 000b            jmp code_1b30 

        code_1b25
  1b25:38 010c          pushi 10c // $10c doVerb
  1b28:78               push1 
  1b29:8f 01              lsp param1 
  1b2b:59 03            &rest 3 
  1b2d:57 3f 06         super InvI 6 


        code_1b30
  1b30:3a                toss 
  1b31:48                 ret 
    )

)

// 1bdc
(instance Cassette Tape of InvI
    (properties
        view $3be
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3be
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2a6d
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1b80
  1b80:8f 01              lsp param1 
  1b82:3c                 dup 
  1b83:35 02              ldi 2 
  1b85:1a                 eq? 
  1b86:30 0010            bnt code_1b99 
  1b89:39 04            pushi 4 // $4 x
  1b8b:39 13            pushi 13 // $13 brTop
  1b8d:39 4e            pushi 4e // $4e save
  1b8f:39 50            pushi 50 // $50 title
  1b91:67 06             pTos name 
  1b93:45 0e 08         callb procedure_000e 8 //  

  1b96:32 003a            jmp code_1bd3 

        code_1b99
  1b99:3c                 dup 
  1b9a:35 03              ldi 3 
  1b9c:1a                 eq? 
  1b9d:30 000b            bnt code_1bab 
  1ba0:7a               push2 
  1ba1:39 13            pushi 13 // $13 brTop
  1ba3:39 4f            pushi 4f // $4f restore
  1ba5:45 0e 04         callb procedure_000e 4 //  

  1ba8:32 0028            jmp code_1bd3 

        code_1bab
  1bab:3c                 dup 
  1bac:35 04              ldi 4 
  1bae:1a                 eq? 
  1baf:30 0014            bnt code_1bc6 
  1bb2:7a               push2 
  1bb3:38 0080          pushi 80 // $80 indexOf
  1bb6:78               push1 
  1bb7:7c            pushSelf 
  1bb8:51 40            class Inv 
  1bba:4a 06             send 6 

  1bbc:36                push 
  1bbd:8f 02              lsp param2 
  1bbf:40 e4c7 04        call proc_008a 4 

  1bc3:32 000d            jmp code_1bd3 

        code_1bc6
  1bc6:38 010c          pushi 10c // $10c doVerb
  1bc9:7a               push2 
  1bca:8f 01              lsp param1 
  1bcc:8f 02              lsp param2 
  1bce:59 03            &rest 3 
  1bd0:57 3f 08         super InvI 8 


        code_1bd3
  1bd3:3a                toss 
  1bd4:48                 ret 
  1bd5:00                bnot 
    )

)

// 1ce2
(instance Chi Chi Lambada's Resume of InvI
    (properties
        view $3a9
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3a9
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2a98
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1c24
  1c24:8f 01              lsp param1 
  1c26:3c                 dup 
  1c27:35 02              ldi 2 
  1c29:1a                 eq? 
  1c2a:30 006c            bnt code_1c99 
  1c2d:39 0a            pushi a // $a nsLeft
  1c2f:39 13            pushi 13 // $13 brTop
  1c31:39 50            pushi 50 // $50 title
  1c33:39 21            pushi 21 // $21 font
  1c35:89 ad              lsg  
  1c37:39 52            pushi 52 // $52 icon
  1c39:38 03a9          pushi 3a9 // $3a9 sel_937
  1c3c:7a               push2 
  1c3d:76               push0 
  1c3e:39 50            pushi 50 // $50 title
  1c40:67 06             pTos name 
  1c42:45 0e 14         callb procedure_000e 14 //  

  1c45:39 08            pushi 8 // $8 underBits
  1c47:39 13            pushi 13 // $13 brTop
  1c49:39 51            pushi 51 // $51 button
  1c4b:39 21            pushi 21 // $21 font
  1c4d:89 ad              lsg  
  1c4f:39 46            pushi 46 // $46 width
  1c51:38 00f0          pushi f0 // $f0 thisTurn
  1c54:39 50            pushi 50 // $50 title
  1c56:67 06             pTos name 
  1c58:45 0e 10         callb procedure_000e 10 //  

  1c5b:38 00d5          pushi d5 // $d5 has
  1c5e:78               push1 
  1c5f:39 14            pushi 14 // $14 brLeft
  1c61:81 00              lag  
  1c63:4a 06             send 6 

  1c65:18                 not 
  1c66:30 0071            bnt code_1cda 
  1c69:7a               push2 
  1c6a:78               push1 
  1c6b:39 47            pushi 47 // $47 wordFail
  1c6d:45 0a 04         callb procedure_000a 4 //  

  1c70:7a               push2 
  1c71:39 13            pushi 13 // $13 brTop
  1c73:39 52            pushi 52 // $52 icon
  1c75:45 0e 04         callb procedure_000e 4 //  

  1c78:38 0147          pushi 147 // $147 get
  1c7b:78               push1 
  1c7c:39 14            pushi 14 // $14 brLeft
  1c7e:81 00              lag  
  1c80:4a 06             send 6 

  1c82:38 00ce          pushi ce // $ce curIcon
  1c85:78               push1 
  1c86:76               push0 
  1c87:39 69            pushi 69 // $69 hide
  1c89:76               push0 
  1c8a:51 40            class Inv 
  1c8c:4a 0a             send a 

  1c8e:38 020c          pushi 20c // $20c showInv
  1c91:76               push0 
  1c92:81 00              lag  
  1c94:4a 04             send 4 

  1c96:32 0041            jmp code_1cda 

        code_1c99
  1c99:3c                 dup 
  1c9a:35 03              ldi 3 
  1c9c:1a                 eq? 
  1c9d:30 0012            bnt code_1cb2 
  1ca0:7a               push2 
  1ca1:39 13            pushi 13 // $13 brTop
  1ca3:39 53            pushi 53 // $53 draw
  1ca5:45 0e 04         callb procedure_000e 4 //  

  1ca8:38 010c          pushi 10c // $10c doVerb
  1cab:78               push1 
  1cac:7a               push2 
  1cad:54 06             self 6 

  1caf:32 0028            jmp code_1cda 

        code_1cb2
  1cb2:3c                 dup 
  1cb3:35 04              ldi 4 
  1cb5:1a                 eq? 
  1cb6:30 0014            bnt code_1ccd 
  1cb9:7a               push2 
  1cba:38 0080          pushi 80 // $80 indexOf
  1cbd:78               push1 
  1cbe:7c            pushSelf 
  1cbf:51 40            class Inv 
  1cc1:4a 06             send 6 

  1cc3:36                push 
  1cc4:8f 02              lsp param2 
  1cc6:40 e3c0 04        call proc_008a 4 

  1cca:32 000d            jmp code_1cda 

        code_1ccd
  1ccd:38 010c          pushi 10c // $10c doVerb
  1cd0:7a               push2 
  1cd1:8f 01              lsp param1 
  1cd3:8f 02              lsp param2 
  1cd5:59 03            &rest 3 
  1cd7:57 3f 08         super InvI 8 


        code_1cda
  1cda:3a                toss 
  1cdb:48                 ret 
    )

)

// 1d9c
(instance Doc Pulliam's Card of InvI
    (properties
        view $3c0
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c0
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2abc
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1d2a
  1d2a:8f 01              lsp param1 
  1d2c:3c                 dup 
  1d2d:35 02              ldi 2 
  1d2f:1a                 eq? 
  1d30:30 001f            bnt code_1d52 
  1d33:7a               push2 
  1d34:78               push1 
  1d35:39 4d            pushi 4d // $4d value
  1d37:45 0a 04         callb procedure_000a 4 //  

  1d3a:39 08            pushi 8 // $8 underBits
  1d3c:39 13            pushi 13 // $13 brTop
  1d3e:39 54            pushi 54 // $54 delete
  1d40:39 50            pushi 50 // $50 title
  1d42:67 06             pTos name 
  1d44:39 46            pushi 46 // $46 width
  1d46:38 00de          pushi de // $de isStopped
  1d49:39 1e            pushi 1e // $1e mode
  1d4b:78               push1 
  1d4c:45 0e 10         callb procedure_000e 10 //  

  1d4f:32 0042            jmp code_1d94 

        code_1d52
  1d52:3c                 dup 
  1d53:35 03              ldi 3 
  1d55:1a                 eq? 
  1d56:30 0013            bnt code_1d6c 
  1d59:7a               push2 
  1d5a:39 13            pushi 13 // $13 brTop
  1d5c:39 55            pushi 55 // $55 z
  1d5e:45 0e 04         callb procedure_000e 4 //  

  1d61:7a               push2 
  1d62:39 13            pushi 13 // $13 brTop
  1d64:39 56            pushi 56 // $56 parseLang
  1d66:45 0e 04         callb procedure_000e 4 //  

  1d69:32 0028            jmp code_1d94 

        code_1d6c
  1d6c:3c                 dup 
  1d6d:35 04              ldi 4 
  1d6f:1a                 eq? 
  1d70:30 0014            bnt code_1d87 
  1d73:7a               push2 
  1d74:38 0080          pushi 80 // $80 indexOf
  1d77:78               push1 
  1d78:7c            pushSelf 
  1d79:51 40            class Inv 
  1d7b:4a 06             send 6 

  1d7d:36                push 
  1d7e:8f 02              lsp param2 
  1d80:40 e306 04        call proc_008a 4 

  1d84:32 000d            jmp code_1d94 

        code_1d87
  1d87:38 010c          pushi 10c // $10c doVerb
  1d8a:7a               push2 
  1d8b:8f 01              lsp param1 
  1d8d:8f 02              lsp param2 
  1d8f:59 03            &rest 3 
  1d91:57 3f 08         super InvI 8 


        code_1d94
  1d94:3a                toss 
  1d95:48                 ret 
    )

)

// 1e40
(instance Green Card of InvI
    (properties
        view $3c1
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c1
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2ada
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1de4
  1de4:8f 01              lsp param1 
  1de6:3c                 dup 
  1de7:35 02              ldi 2 
  1de9:1a                 eq? 
  1dea:30 0010            bnt code_1dfd 
  1ded:39 04            pushi 4 // $4 x
  1def:39 13            pushi 13 // $13 brTop
  1df1:39 57            pushi 57 // $57 printLang
  1df3:39 50            pushi 50 // $50 title
  1df5:67 06             pTos name 
  1df7:45 0e 08         callb procedure_000e 8 //  

  1dfa:32 003a            jmp code_1e37 

        code_1dfd
  1dfd:3c                 dup 
  1dfe:35 03              ldi 3 
  1e00:1a                 eq? 
  1e01:30 000b            bnt code_1e0f 
  1e04:7a               push2 
  1e05:39 13            pushi 13 // $13 brTop
  1e07:39 58            pushi 58 // $58 subtitleLang
  1e09:45 0e 04         callb procedure_000e 4 //  

  1e0c:32 0028            jmp code_1e37 

        code_1e0f
  1e0f:3c                 dup 
  1e10:35 04              ldi 4 
  1e12:1a                 eq? 
  1e13:30 0014            bnt code_1e2a 
  1e16:7a               push2 
  1e17:38 0080          pushi 80 // $80 indexOf
  1e1a:78               push1 
  1e1b:7c            pushSelf 
  1e1c:51 40            class Inv 
  1e1e:4a 06             send 6 

  1e20:36                push 
  1e21:8f 02              lsp param2 
  1e23:40 e263 04        call proc_008a 4 

  1e27:32 000d            jmp code_1e37 

        code_1e2a
  1e2a:38 010c          pushi 10c // $10c doVerb
  1e2d:7a               push2 
  1e2e:8f 01              lsp param1 
  1e30:8f 02              lsp param2 
  1e32:59 03            &rest 3 
  1e34:57 3f 08         super InvI 8 


        code_1e37
  1e37:3a                toss 
  1e38:48                 ret 
  1e39:00                bnot 
    )

)

// 1f9c
(instance Doily of InvI
    (properties
        view $3c2
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c2
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2aef
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1e88
  1e88:8f 01              lsp param1 
  1e8a:3c                 dup 
  1e8b:35 02              ldi 2 
  1e8d:1a                 eq? 
  1e8e:30 0038            bnt code_1ec9 
  1e91:39 04            pushi 4 // $4 x
  1e93:39 13            pushi 13 // $13 brTop
  1e95:39 59            pushi 59 // $59 size
  1e97:39 50            pushi 50 // $50 title
  1e99:67 06             pTos name 
  1e9b:45 0e 08         callb procedure_000e 8 //  

  1e9e:39 07            pushi 7 // $7 cel
  1ea0:39 13            pushi 13 // $13 brTop
  1ea2:39 5a            pushi 5a // $5a points
  1ea4:39 43            pushi 43 // $43 at
  1ea6:39 ff            pushi ff // $ff syncNum
  1ea8:38 00b9          pushi b9 // $b9 bottom
  1eab:39 50            pushi 50 // $50 title
  1ead:67 06             pTos name 
  1eaf:45 0e 0e         callb procedure_000e e //  

  1eb2:39 07            pushi 7 // $7 cel
  1eb4:39 13            pushi 13 // $13 brTop
  1eb6:39 5b            pushi 5b // $5b palette
  1eb8:39 43            pushi 43 // $43 at
  1eba:39 ff            pushi ff // $ff syncNum
  1ebc:38 00b9          pushi b9 // $b9 bottom
  1ebf:39 50            pushi 50 // $50 title
  1ec1:67 06             pTos name 
  1ec3:45 0e 0e         callb procedure_000e e //  

  1ec6:32 00ca            jmp code_1f93 

        code_1ec9
  1ec9:3c                 dup 
  1eca:35 03              ldi 3 
  1ecc:1a                 eq? 
  1ecd:30 009d            bnt code_1f6d 
  1ed0:89 0b              lsg  
  1ed2:34 0389            ldi 389 
  1ed5:1c                 ne? 
  1ed6:30 000b            bnt code_1ee4 
  1ed9:7a               push2 
  1eda:39 13            pushi 13 // $13 brTop
  1edc:39 5c            pushi 5c // $5c dataInc
  1ede:45 0e 04         callb procedure_000e 4 //  

  1ee1:32 00af            jmp code_1f93 

        code_1ee4
  1ee4:38 0209          pushi 209 // $209 sitting
  1ee7:76               push0 
  1ee8:81 00              lag  
  1eea:4a 04             send 4 

  1eec:30 000b            bnt code_1efa 
  1eef:7a               push2 
  1ef0:39 13            pushi 13 // $13 brTop
  1ef2:39 5d            pushi 5d // $5d handle
  1ef4:45 0e 04         callb procedure_000e 4 //  

  1ef7:32 0099            jmp code_1f93 

        code_1efa
  1efa:63 16             pToa state 
  1efc:30 0031            bnt code_1f30 
  1eff:39 05            pushi 5 // $5 view
  1f01:78               push1 
  1f02:38 038b          pushi 38b // $38b sel_907
  1f05:38 00a2          pushi a2 // $a2 setLoop
  1f08:78               push1 
  1f09:39 04            pushi 4 // $4 x
  1f0b:38 0120          pushi 120 // $120 setCel
  1f0e:78               push1 
  1f0f:38 00ff          pushi ff // $ff syncNum
  1f12:38 00db          pushi db // $db cycleSpeed
  1f15:78               push1 
  1f16:39 0a            pushi a // $a nsLeft
  1f18:38 0096          pushi 96 // $96 setCycle
  1f1b:7a               push2 
  1f1c:51 1b            class Beg 
  1f1e:36                push 
  1f1f:89 02              lsg  
  1f21:81 00              lag  
  1f23:4a 20             send 20 

  1f25:7a               push2 
  1f26:39 13            pushi 13 // $13 brTop
  1f28:39 5e            pushi 5e // $5e min
  1f2a:45 0e 04         callb procedure_000e 4 //  

  1f2d:32 0035            jmp code_1f65 

        code_1f30
  1f30:39 05            pushi 5 // $5 view
  1f32:78               push1 
  1f33:38 038b          pushi 38b // $38b sel_907
  1f36:38 00a2          pushi a2 // $a2 setLoop
  1f39:78               push1 
  1f3a:39 04            pushi 4 // $4 x
  1f3c:38 0120          pushi 120 // $120 setCel
  1f3f:78               push1 
  1f40:76               push0 
  1f41:38 00db          pushi db // $db cycleSpeed
  1f44:78               push1 
  1f45:39 0a            pushi a // $a nsLeft
  1f47:38 0096          pushi 96 // $96 setCycle
  1f4a:7a               push2 
  1f4b:51 1a            class End 
  1f4d:36                push 
  1f4e:89 02              lsg  
  1f50:81 00              lag  
  1f52:4a 20             send 20 

  1f54:7a               push2 
  1f55:39 08            pushi 8 // $8 underBits
  1f57:38 009f          pushi 9f // $9f fade
  1f5a:45 0a 04         callb procedure_000a 4 //  

  1f5d:7a               push2 
  1f5e:39 13            pushi 13 // $13 brTop
  1f60:39 5f            pushi 5f // $5f sec
  1f62:45 0e 04         callb procedure_000e 4 //  


        code_1f65
  1f65:63 16             pToa state 
  1f67:18                 not 
  1f68:65 16             aTop state 
  1f6a:32 0026            jmp code_1f93 

        code_1f6d
  1f6d:3c                 dup 
  1f6e:35 04              ldi 4 
  1f70:1a                 eq? 
  1f71:30 0014            bnt code_1f88 
  1f74:7a               push2 
  1f75:38 0080          pushi 80 // $80 indexOf
  1f78:78               push1 
  1f79:7c            pushSelf 
  1f7a:51 40            class Inv 
  1f7c:4a 06             send 6 

  1f7e:36                push 
  1f7f:8f 02              lsp param2 
  1f81:40 e105 04        call proc_008a 4 

  1f85:32 000b            jmp code_1f93 

        code_1f88
  1f88:38 010c          pushi 10c // $10c doVerb
  1f8b:78               push1 
  1f8c:8f 01              lsp param1 
  1f8e:59 03            &rest 3 
  1f90:57 3f 06         super InvI 6 


        code_1f93
  1f93:3a                toss 
  1f94:48                 ret 
  1f95:00                bnot 
    )

)

// 2048
(instance P. C. Hammer Fax of InvI
    (properties
        view $3bb
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3bb
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2b0a
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_1fe4
  1fe4:8f 01              lsp param1 
  1fe6:3c                 dup 
  1fe7:35 02              ldi 2 
  1fe9:1a                 eq? 
  1fea:30 0018            bnt code_2005 
  1fed:39 08            pushi 8 // $8 underBits
  1fef:39 13            pushi 13 // $13 brTop
  1ff1:39 60            pushi 60 // $60 frame
  1ff3:39 50            pushi 50 // $50 title
  1ff5:67 06             pTos name 
  1ff7:39 46            pushi 46 // $46 width
  1ff9:38 00c8          pushi c8 // $c8 dispatchEvent
  1ffc:39 1e            pushi 1e // $1e mode
  1ffe:78               push1 
  1fff:45 0e 10         callb procedure_000e 10 //  

  2002:32 003a            jmp code_203f 

        code_2005
  2005:3c                 dup 
  2006:35 03              ldi 3 
  2008:1a                 eq? 
  2009:30 000b            bnt code_2017 
  200c:7a               push2 
  200d:39 13            pushi 13 // $13 brTop
  200f:39 48            pushi 48 // $48 syntaxFail
  2011:45 0e 04         callb procedure_000e 4 //  

  2014:32 0028            jmp code_203f 

        code_2017
  2017:3c                 dup 
  2018:35 04              ldi 4 
  201a:1a                 eq? 
  201b:30 0014            bnt code_2032 
  201e:7a               push2 
  201f:38 0080          pushi 80 // $80 indexOf
  2022:78               push1 
  2023:7c            pushSelf 
  2024:51 40            class Inv 
  2026:4a 06             send 6 

  2028:36                push 
  2029:8f 02              lsp param2 
  202b:40 e05b 04        call proc_008a 4 

  202f:32 000d            jmp code_203f 

        code_2032
  2032:38 010c          pushi 10c // $10c doVerb
  2035:7a               push2 
  2036:8f 01              lsp param1 
  2038:8f 02              lsp param2 
  203a:59 03            &rest 3 
  203c:57 3f 08         super InvI 8 


        code_203f
  203f:3a                toss 
  2040:48                 ret 
  2041:00                bnot 
    )

)

// 20ec
(instance Letter Opener of InvI
    (properties
        view $3c4
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c4
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2b30
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_2090
  2090:8f 01              lsp param1 
  2092:3c                 dup 
  2093:35 02              ldi 2 
  2095:1a                 eq? 
  2096:30 0010            bnt code_20a9 
  2099:39 04            pushi 4 // $4 x
  209b:39 13            pushi 13 // $13 brTop
  209d:39 61            pushi 61 // $61 vol
  209f:39 50            pushi 50 // $50 title
  20a1:67 06             pTos name 
  20a3:45 0e 08         callb procedure_000e 8 //  

  20a6:32 003a            jmp code_20e3 

        code_20a9
  20a9:3c                 dup 
  20aa:35 03              ldi 3 
  20ac:1a                 eq? 
  20ad:30 000b            bnt code_20bb 
  20b0:7a               push2 
  20b1:39 13            pushi 13 // $13 brTop
  20b3:39 62            pushi 62 // $62 pri
  20b5:45 0e 04         callb procedure_000e 4 //  

  20b8:32 0028            jmp code_20e3 

        code_20bb
  20bb:3c                 dup 
  20bc:35 04              ldi 4 
  20be:1a                 eq? 
  20bf:30 0014            bnt code_20d6 
  20c2:7a               push2 
  20c3:38 0080          pushi 80 // $80 indexOf
  20c6:78               push1 
  20c7:7c            pushSelf 
  20c8:51 40            class Inv 
  20ca:4a 06             send 6 

  20cc:36                push 
  20cd:8f 02              lsp param2 
  20cf:40 dfb7 04        call proc_008a 4 

  20d3:32 000d            jmp code_20e3 

        code_20d6
  20d6:38 010c          pushi 10c // $10c doVerb
  20d9:7a               push2 
  20da:8f 01              lsp param1 
  20dc:8f 02              lsp param2 
  20de:59 03            &rest 3 
  20e0:57 3f 08         super InvI 8 


        code_20e3
  20e3:3a                toss 
  20e4:48                 ret 
  20e5:00                bnot 
    )

)

// 217e
(instance Desk Key of InvI
    (properties
        view $3c5
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c5
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2b4b
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_2134
  2134:8f 01              lsp param1 
  2136:3c                 dup 
  2137:35 02              ldi 2 
  2139:1a                 eq? 
  213a:30 0010            bnt code_214d 
  213d:39 04            pushi 4 // $4 x
  213f:39 13            pushi 13 // $13 brTop
  2141:39 63            pushi 63 // $63 perform
  2143:39 50            pushi 50 // $50 title
  2145:67 06             pTos name 
  2147:45 0e 08         callb procedure_000e 8 //  

  214a:32 0028            jmp code_2175 

        code_214d
  214d:3c                 dup 
  214e:35 04              ldi 4 
  2150:1a                 eq? 
  2151:30 0014            bnt code_2168 
  2154:7a               push2 
  2155:38 0080          pushi 80 // $80 indexOf
  2158:78               push1 
  2159:7c            pushSelf 
  215a:51 40            class Inv 
  215c:4a 06             send 6 

  215e:36                push 
  215f:8f 02              lsp param2 
  2161:40 df25 04        call proc_008a 4 

  2165:32 000d            jmp code_2175 

        code_2168
  2168:38 010c          pushi 10c // $10c doVerb
  216b:7a               push2 
  216c:8f 01              lsp param1 
  216e:8f 02              lsp param2 
  2170:59 03            &rest 3 
  2172:57 3f 08         super InvI 8 


        code_2175
  2175:3a                toss 
  2176:48                 ret 
  2177:00                bnot 
    )

)

// 2250
(instance Folder Of Evidence of InvI
    (properties
        view $3c6
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c6
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2b6b
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_21c6
  21c6:8f 01              lsp param1 
  21c8:3c                 dup 
  21c9:35 02              ldi 2 
  21cb:1a                 eq? 
  21cc:30 0026            bnt code_21f5 
  21cf:7a               push2 
  21d0:39 04            pushi 4 // $4 x
  21d2:38 0092          pushi 92 // $92 cycleCnt
  21d5:45 0a 04         callb procedure_000a 4 //  

  21d8:39 04            pushi 4 // $4 x
  21da:39 13            pushi 13 // $13 brTop
  21dc:39 64            pushi 64 // $64 moveDone
  21de:39 50            pushi 50 // $50 title
  21e0:67 06             pTos name 
  21e2:45 0e 08         callb procedure_000e 8 //  

  21e5:39 04            pushi 4 // $4 x
  21e7:39 13            pushi 13 // $13 brTop
  21e9:39 65            pushi 65 // $65 topString
  21eb:39 50            pushi 50 // $50 title
  21ed:67 06             pTos name 
  21ef:45 0e 08         callb procedure_000e 8 //  

  21f2:32 0052            jmp code_2247 

        code_21f5
  21f5:3c                 dup 
  21f6:35 03              ldi 3 
  21f8:1a                 eq? 
  21f9:30 0023            bnt code_221f 
  21fc:38 00d5          pushi d5 // $d5 has
  21ff:78               push1 
  2200:39 0b            pushi b // $b nsBottom
  2202:81 00              lag  
  2204:4a 06             send 6 

  2206:30 000b            bnt code_2214 
  2209:7a               push2 
  220a:39 13            pushi 13 // $13 brTop
  220c:39 66            pushi 66 // $66 flags
  220e:45 0e 04         callb procedure_000e 4 //  

  2211:32 0033            jmp code_2247 

        code_2214
  2214:7a               push2 
  2215:39 13            pushi 13 // $13 brTop
  2217:39 67            pushi 67 // $67 quitGame
  2219:45 0e 04         callb procedure_000e 4 //  

  221c:32 0028            jmp code_2247 

        code_221f
  221f:3c                 dup 
  2220:35 04              ldi 4 
  2222:1a                 eq? 
  2223:30 0014            bnt code_223a 
  2226:7a               push2 
  2227:38 0080          pushi 80 // $80 indexOf
  222a:78               push1 
  222b:7c            pushSelf 
  222c:51 40            class Inv 
  222e:4a 06             send 6 

  2230:36                push 
  2231:8f 02              lsp param2 
  2233:40 de53 04        call proc_008a 4 

  2237:32 000d            jmp code_2247 

        code_223a
  223a:38 010c          pushi 10c // $10c doVerb
  223d:7a               push2 
  223e:8f 01              lsp param1 
  2240:8f 02              lsp param2 
  2242:59 03            &rest 3 
  2244:57 3f 08         super InvI 8 


        code_2247
  2247:3a                toss 
  2248:48                 ret 
  2249:00                bnot 
    )

)

// 22f4
(instance Photocopied Evidence of InvI
    (properties
        view $3c7
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c7
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2b97
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_2298
  2298:8f 01              lsp param1 
  229a:3c                 dup 
  229b:35 02              ldi 2 
  229d:1a                 eq? 
  229e:30 0010            bnt code_22b1 
  22a1:39 04            pushi 4 // $4 x
  22a3:39 13            pushi 13 // $13 brTop
  22a5:39 68            pushi 68 // $68 restart
  22a7:39 50            pushi 50 // $50 title
  22a9:67 06             pTos name 
  22ab:45 0e 08         callb procedure_000e 8 //  

  22ae:32 003a            jmp code_22eb 

        code_22b1
  22b1:3c                 dup 
  22b2:35 03              ldi 3 
  22b4:1a                 eq? 
  22b5:30 000b            bnt code_22c3 
  22b8:7a               push2 
  22b9:39 13            pushi 13 // $13 brTop
  22bb:39 69            pushi 69 // $69 hide
  22bd:45 0e 04         callb procedure_000e 4 //  

  22c0:32 0028            jmp code_22eb 

        code_22c3
  22c3:3c                 dup 
  22c4:35 04              ldi 4 
  22c6:1a                 eq? 
  22c7:30 0014            bnt code_22de 
  22ca:7a               push2 
  22cb:38 0080          pushi 80 // $80 indexOf
  22ce:78               push1 
  22cf:7c            pushSelf 
  22d0:51 40            class Inv 
  22d2:4a 06             send 6 

  22d4:36                push 
  22d5:8f 02              lsp param2 
  22d7:40 ddaf 04        call proc_008a 4 

  22db:32 000d            jmp code_22eb 

        code_22de
  22de:38 010c          pushi 10c // $10c doVerb
  22e1:7a               push2 
  22e2:8f 01              lsp param1 
  22e4:8f 02              lsp param2 
  22e6:59 03            &rest 3 
  22e8:57 3f 08         super InvI 8 


        code_22eb
  22eb:3a                toss 
  22ec:48                 ret 
  22ed:00                bnot 
    )

)

// 23ba
(instance Reel To Reel Tape of InvI
    (properties
        view $3c8
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c8
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2bb9
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_233c
  233c:8f 01              lsp param1 
  233e:3c                 dup 
  233f:35 02              ldi 2 
  2341:1a                 eq? 
  2342:30 0035            bnt code_237a 
  2345:63 16             pToa state 
  2347:30 0010            bnt code_235a 
  234a:39 04            pushi 4 // $4 x
  234c:39 13            pushi 13 // $13 brTop
  234e:39 6a            pushi 6a // $6a new
  2350:39 50            pushi 50 // $50 title
  2352:67 06             pTos name 
  2354:45 0e 08         callb procedure_000e 8 //  

  2357:32 0058            jmp code_23b2 

        code_235a
  235a:39 04            pushi 4 // $4 x
  235c:39 13            pushi 13 // $13 brTop
  235e:39 6b            pushi 6b // $6b init
  2360:39 50            pushi 50 // $50 title
  2362:67 06             pTos name 
  2364:45 0e 08         callb procedure_000e 8 //  

  2367:39 05            pushi 5 // $5 view
  2369:39 13            pushi 13 // $13 brTop
  236b:39 6c            pushi 6c // $6c dispose
  236d:39 43            pushi 43 // $43 at
  236f:39 ff            pushi ff // $ff syncNum
  2371:38 00b9          pushi b9 // $b9 bottom
  2374:45 0e 0a         callb procedure_000e a //  

  2377:32 0038            jmp code_23b2 

        code_237a
  237a:3c                 dup 
  237b:35 03              ldi 3 
  237d:1a                 eq? 
  237e:30 000b            bnt code_238c 
  2381:7a               push2 
  2382:39 13            pushi 13 // $13 brTop
  2384:39 6d            pushi 6d // $6d showStr
  2386:45 0e 04         callb procedure_000e 4 //  

  2389:32 0026            jmp code_23b2 

        code_238c
  238c:3c                 dup 
  238d:35 04              ldi 4 
  238f:1a                 eq? 
  2390:30 0014            bnt code_23a7 
  2393:7a               push2 
  2394:38 0080          pushi 80 // $80 indexOf
  2397:78               push1 
  2398:7c            pushSelf 
  2399:51 40            class Inv 
  239b:4a 06             send 6 

  239d:36                push 
  239e:8f 02              lsp param2 
  23a0:40 dce6 04        call proc_008a 4 

  23a4:32 000b            jmp code_23b2 

        code_23a7
  23a7:38 010c          pushi 10c // $10c doVerb
  23aa:78               push1 
  23ab:8f 01              lsp param1 
  23ad:59 03            &rest 3 
  23af:57 3f 06         super InvI 6 


        code_23b2
  23b2:3a                toss 
  23b3:48                 ret 
    )

)

// 2462
(instance Hooter Shooter of InvI
    (properties
        view $3c9
        loop $0
        cel $0
        nsLeft $0
        nsTop $0
        nsRight $0
        nsBottom $0
        state $0
        cursor $3c9
        type $4000
        message $4
        modifiers $0
        signal $2
        helpStr $0
        maskView $0
        maskLoop $0
        maskCel $0
        highlightColor $0
        lowlightColor $0
        description $2bde
        owner $0
        script $0
        value $0
    )
    (method (doVerb) // method_2402
  2402:8f 01              lsp param1 
  2404:3c                 dup 
  2405:35 02              ldi 2 
  2407:1a                 eq? 
  2408:30 0017            bnt code_2422 
  240b:7a               push2 
  240c:7a               push2 
  240d:39 4c            pushi 4c // $4c claimed
  240f:45 0a 04         callb procedure_000a 4 //  

  2412:39 04            pushi 4 // $4 x
  2414:39 13            pushi 13 // $13 brTop
  2416:39 6e            pushi 6e // $6e showSelf
  2418:39 50            pushi 50 // $50 title
  241a:67 06             pTos name 
  241c:45 0e 08         callb procedure_000e 8 //  

  241f:32 0037            jmp code_2459 

        code_2422
  2422:3c                 dup 
  2423:35 03              ldi 3 
  2425:1a                 eq? 
  2426:30 000a            bnt code_2433 
  2429:38 010c          pushi 10c // $10c doVerb
  242c:78               push1 
  242d:7a               push2 
  242e:54 06             self 6 

  2430:32 0026            jmp code_2459 

        code_2433
  2433:3c                 dup 
  2434:35 04              ldi 4 
  2436:1a                 eq? 
  2437:30 0014            bnt code_244e 
  243a:7a               push2 
  243b:38 0080          pushi 80 // $80 indexOf
  243e:78               push1 
  243f:7c            pushSelf 
  2440:51 40            class Inv 
  2442:4a 06             send 6 

  2444:36                push 
  2445:8f 02              lsp param2 
  2447:40 dc3f 04        call proc_008a 4 

  244b:32 000b            jmp code_2459 

        code_244e
  244e:38 010c          pushi 10c // $10c doVerb
  2451:78               push1 
  2452:8f 01              lsp param1 
  2454:59 03            &rest 3 
  2456:57 3f 06         super InvI 6 


        code_2459
  2459:3a                toss 
  245a:48                 ret 
  245b:00                bnot 
    )

)



(procedure proc_008a
  008a:3f 01             link 1 // (var $1)
  008c:7a               push2 
  008d:8f 02              lsp param2 
  008f:81 b3              lag  
  0091:30 0005            bnt code_0099 
  0094:35 32              ldi 32 
  0096:32 0002            jmp code_009b 

        code_0099
  0099:35 50              ldi 50 

        code_009b
  009b:02                 add 
  009c:36                push 
  009d:8f 01              lsp param1 
  009f:45 0e 04         callb procedure_000e 4 //  

  00a2:48                 ret 
)

