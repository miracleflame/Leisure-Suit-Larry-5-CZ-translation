(script 510)

(string
    string_2512 "The lobby of \"The Hard Disk Cafe\" is filled with a tremendously exciting (to nerds) display of ancient computer memorabilia. Your pulse quickens just looking around the place."
    string_25c2 "rm510"
    string_25c8 "sExitNorth"
    string_25d3 "sEnterSouth"
    string_25df "How much do you wish to bribe the Maitre d'."
    string_260c "Grease That Palm"
    string_261d "sBribe"
    string_2624 "sMouth"
    string_262b "sMusicBox"
    string_2635 "sPhone"
    string_263c "sExitSouth"
    string_2647 "sMD"
    string_264b "sDoubleTalk"
    string_2657 "sGetTape"
    string_2660 "the telephone"
    string_266e "phone"
    string_2674 "the computer terminal"
    string_268a "screen"
    string_2691 "Bertha"
    string_2698 "A large aggressive woman has been talking on the telephone for as long as you've been here."
    string_26f4 "woman"
    string_26fa "Bertha's head"
    string_2708 "womansMouth"
    string_2714 "the music box"
    string_2722 "musicBox"
    string_272b "musicBoxCloseUp"
    string_273b "your membership tape"
    string_2750 "The membership tape you wanted so badly now hangs limply from the side of the paper tape reader, twisting slowly, slowly, in the wind."
    string_27d7 "tape"
    string_27dc "the maitre d'"
    string_27ea "You are quite envious of those that can look stupid and snooty at the same time."
    string_283b "maitreD"
    string_2843 "the swinging doors"
    string_2856 "LDoor"
    string_285c "You presume these doors lead to the cafe proper."
    string_288d "door"
    string_2892 "talkerBust"
    string_289d "talkerEyes"
    string_28a8 "talkerMouth"
    string_28b4 "the paper tape machine"
    string_28cb "tapeReader"
    string_28d6 "the antique disk drive"
    string_28ed "This early disk drive was the size of a washing machine and held an enormous amount of data--over one megabyte."
    string_295d "diskDrive"
    string_2967 "the Pet Computer"
    string_2978 "You haven't seen a Pet Computer since the early days of \"InfoWorld!\""
    string_29bd "pet"
    string_29c1 "the Apple II computer"
    string_29d7 "You cut your first computer teeth on an old integer BASIC Apple II. It wasn't even a Plus!"
    string_2a32 "appleII"
    string_2a3a "the cash register"
    string_2a4c "This NCR baby was one of the first microprocessor-controlled point-of-sale cash registers."
    string_2aa7 "cashRegister"
    string_2ab4 "the green screen monitor"
    string_2acd "This ancient device could display text in any color you wanted, as long as it was green on black."
    string_2b2f "monitor"
    string_2b37 "the Atari 400 computer"
    string_2b4e "Boy, does that Atari 400 bring back fond memories of your misspent youth, playing \"Frogger\" when your classmates were dating!"
    string_2bcc "atari400"
    string_2bd5 "the antique tape drive"
    string_2bec "This is one of the world's first tape drives, revolutionary in its day, it seems incredibly quaint today. Why it couldn't even hold \"Space Quest\" let alone a \"King's Quest!\""
    string_2c9a "tapeDrive"
    string_2ca4 "the piano roll"
    string_2cb3 "The player piano was an early use of punched holes to control a mechanical device. A vacuum was applied to 88 holes in a metal bar, with each hole indicating a different musical pitch. Where holes occurred in the moving paper, the corresponding notes were played."
    string_2dbb "pianoRoll"
    string_2dc5 "the punch card machine"
    string_2ddc "This punch card reader dates from the 1890 U. S. Census. It could handle up to 80 characters or columns of data, a number which remains to this day as the width of most computer video display devices."
    string_2ea5 "punchCardMachine"
    string_2eb6 "the chair"
    string_2ec0 "This chair is for the exclusive use of the maitre d'."
    string_2ef6 "chair"
    string_2efc "the bulletin board"
    string_2f0f "The bulletin board is filled with photographs of famous nerds who frequent this place!"
    string_2f66 "bullBoard"
    string_2f70 "the maitre d's podium"
    string_2f86 "The maitre d's podium is just the right size for him to hide behind when the crowds here start throwing things!"
    string_2ff6 "podium"
    string_2ffd "the desk"
    string_3006 "You wish you had such a nice desk in your crummy office."
    string_303f "desk"
    string_3044 "the cactus"
    string_304f "The cactus is covered with needle-sharp needles. (Hence, the name \"Needlenose Cacti.\")"
    string_30a6 "cactus1"
    string_30ae "cactus2"
    string_30b6 "musicBoxFX"
    string_30c1 "typingFX"
    string_30ca "paperRip"
    string_30d3 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0000
)

// 0614
(instance publicrm510 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $2512
        picture $1fe
        style $ffff
        horizon $0
        controls $0
        north $20d
        east $0
        south $1f4
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 07            pushi 7 // $7 cel
  0010:38 0080          pushi 80 // $80 indexOf
  0013:38 0203          pushi 203 // $203 useFrame
  0016:38 0200          pushi 200 // $200 mouth
  0019:38 0201          pushi 201 // $201 disposeWhenDone
  001c:38 0202          pushi 202 // $202 viewInPrint
  001f:38 01ff          pushi 1ff // $1ff eyes
  0022:38 01fe          pushi 1fe // $1fe bust
  0025:46 03be 0000 0e  calle 3be procedure_0000 e //  

  002b:7a               push2 
  002c:38 0084          pushi 84 // $84 cycles
  002f:38 01fe          pushi 1fe // $1fe bust
  0032:43 00 04         callk Load 4 

  0035:39 6b            pushi 6b // $6b init
  0037:76               push0 
  0038:38 0119          pushi 119 // $119 approachVerbs
  003b:78               push1 
  003c:39 03            pushi 3 // $3 y
  003e:72 1ade          lofsa $1ade // LDoor
  0041:4a 0a             send a 

  0043:89 0c              lsg  
  0045:3c                 dup 
  0046:63 1c             pToa north 
  0048:1a                 eq? 
  0049:30 0013            bnt code_005f 
  004c:38 0146          pushi 146 // $146 edgeHit
  004f:78               push1 
  0050:76               push0 
  0051:39 6b            pushi 6b // $6b init
  0053:76               push0 
  0054:38 020a          pushi 20a // $20a normalize
  0057:76               push0 
  0058:81 00              lag  
  005a:4a 0e             send e 

  005c:32 011f            jmp code_017e 

        code_005f
  005f:3c                 dup 
  0060:34 0217            ldi 217 
  0063:1a                 eq? 
  0064:30 0047            bnt code_00ae 
  0067:76               push0 
  0068:45 03 00         callb procedure_0003 0 //  

  006b:78               push1 
  006c:39 10            pushi 10 // $10 lsRight
  006e:45 07 02         callb procedure_0007 2 //  

  0071:39 20            pushi 20 // $20 state
  0073:78               push1 
  0074:39 04            pushi 4 // $4 x
  0076:39 43            pushi 43 // $43 at
  0078:78               push1 
  0079:39 0e            pushi e // $e lsLeft
  007b:51 40            class Inv 
  007d:4a 06             send 6 

  007f:4a 06             send 6 

  0081:39 04            pushi 4 // $4 x
  0083:78               push1 
  0084:38 0111          pushi 111 // $111 approachX
  0087:76               push0 
  0088:72 1bc4          lofsa $1bc4 // door
  008b:4a 04             send 4 

  008d:36                push 
  008e:39 03            pushi 3 // $3 y
  0090:78               push1 
  0091:38 0112          pushi 112 // $112 approachY
  0094:76               push0 
  0095:72 1bc4          lofsa $1bc4 // door
  0098:4a 04             send 4 

  009a:36                push 
  009b:39 6b            pushi 6b // $6b init
  009d:76               push0 
  009e:38 020a          pushi 20a // $20a normalize
  00a1:76               push0 
  00a2:38 0146          pushi 146 // $146 edgeHit
  00a5:78               push1 
  00a6:76               push0 
  00a7:81 00              lag  
  00a9:4a 1a             send 1a 

  00ab:32 00d0            jmp code_017e 

        code_00ae
  00ae:3c                 dup 
  00af:34 0208            ldi 208 
  00b2:1a                 eq? 
  00b3:30 003b            bnt code_00f1 
  00b6:39 6b            pushi 6b // $6b init
  00b8:76               push0 
  00b9:38 020a          pushi 20a // $20a normalize
  00bc:76               push0 
  00bd:38 011c          pushi 11c // $11c posn
  00c0:7a               push2 
  00c1:38 0089          pushi 89 // $89 register
  00c4:39 4d            pushi 4d // $4d value
  00c6:81 00              lag  
  00c8:4a 10             send 10 

  00ca:38 00d5          pushi d5 // $d5 has
  00cd:78               push1 
  00ce:39 0e            pushi e // $e lsLeft
  00d0:81 00              lag  
  00d2:4a 06             send 6 

  00d4:30 0013            bnt code_00ea 
  00d7:76               push0 
  00d8:45 02 00         callb procedure_0002 0 //  

  00db:38 008e          pushi 8e // $8e setScript
  00de:78               push1 
  00df:72 06b8          lofsa $06b8 // sExitNorth
  00e2:36                push 
  00e3:81 02              lag  
  00e5:4a 06             send 6 

  00e7:32 0094            jmp code_017e 

        code_00ea
  00ea:76               push0 
  00eb:45 03 00         callb procedure_0003 0 //  

  00ee:32 008d            jmp code_017e 

        code_00f1
  00f1:3c                 dup 
  00f2:34 01f4            ldi 1f4 
  00f5:1a                 eq? 
  00f6:30 0031            bnt code_012a 
  00f9:39 6b            pushi 6b // $6b init
  00fb:76               push0 
  00fc:38 020a          pushi 20a // $20a normalize
  00ff:76               push0 
  0100:38 011c          pushi 11c // $11c posn
  0103:7a               push2 
  0104:38 014e          pushi 14e // $14e read
  0107:38 00db          pushi db // $db cycleSpeed
  010a:81 00              lag  
  010c:4a 10             send 10 

  010e:38 009f          pushi 9f // $9f fade
  0111:39 04            pushi 4 // $4 x
  0113:39 7f            pushi 7f // $7f addAfter
  0115:39 0a            pushi a // $a nsLeft
  0117:3c                 dup 
  0118:76               push0 
  0119:81 66              lag  
  011b:4a 0c             send c 

  011d:38 008e          pushi 8e // $8e setScript
  0120:78               push1 
  0121:72 0734          lofsa $0734 // sEnterSouth
  0124:36                push 
  0125:54 06             self 6 

  0127:32 0054            jmp code_017e 

        code_012a
  012a:35 01              ldi 1 
  012c:a1 a0              sag  
  012e:81 0c              lag  
  0130:18                 not 
  0131:30 002b            bnt code_015f 
  0134:38 0219          pushi 219 // $219 firstSound
  0137:78               push1 
  0138:38 01f4          pushi 1f4 // $1f4 selector
  013b:38 021a          pushi 21a // $21a lastSound
  013e:78               push1 
  013f:38 01f6          pushi 1f6 // $1f6 topValue
  0142:51 74            class WrapMusic 
  0144:4a 0c             send c 

  0146:39 2b            pushi 2b // $2b number
  0148:78               push1 
  0149:38 01f4          pushi 1f4 // $1f4 selector
  014c:39 2a            pushi 2a // $2a play
  014e:78               push1 
  014f:51 74            class WrapMusic 
  0151:36                push 
  0152:39 66            pushi 66 // $66 flags
  0154:78               push1 
  0155:78               push1 
  0156:38 00a2          pushi a2 // $a2 setLoop
  0159:78               push1 
  015a:78               push1 
  015b:81 66              lag  
  015d:4a 18             send 18 


        code_015f
  015f:39 6b            pushi 6b // $6b init
  0161:76               push0 
  0162:38 020a          pushi 20a // $20a normalize
  0165:76               push0 
  0166:38 011c          pushi 11c // $11c posn
  0169:7a               push2 
  016a:38 014e          pushi 14e // $14e read
  016d:38 00db          pushi db // $db cycleSpeed
  0170:81 00              lag  
  0172:4a 10             send 10 

  0174:38 008e          pushi 8e // $8e setScript
  0177:78               push1 
  0178:72 0734          lofsa $0734 // sEnterSouth
  017b:36                push 
  017c:54 06             self 6 


        code_017e
  017e:3a                toss 
  017f:39 6b            pushi 6b // $6b init
  0181:76               push0 
  0182:72 1bc4          lofsa $1bc4 // door
  0185:4a 04             send 4 

  0187:39 6b            pushi 6b // $6b init
  0189:76               push0 
  018a:57 72 04         super LLRoom 4 

  018d:89 0c              lsg  
  018f:34 0217            ldi 217 
  0192:1c                 ne? 
  0193:30 00e4            bnt code_027a 
  0196:78               push1 
  0197:39 10            pushi 10 // $10 lsRight
  0199:45 06 02         callb procedure_0006 2 //  

  019c:18                 not 
  019d:30 00da            bnt code_027a 
  01a0:38 0176          pushi 176 // $176 addObstacle
  01a3:78               push1 
  01a4:39 22            pushi 22 // $22 type
  01a6:78               push1 
  01a7:7a               push2 
  01a8:39 6b            pushi 6b // $6b init
  01aa:39 3c            pushi 3c // $3c doit
  01ac:76               push0 
  01ad:76               push0 
  01ae:38 013f          pushi 13f // $13f inputLineAddr
  01b1:76               push0 
  01b2:38 013f          pushi 13f // $13f inputLineAddr
  01b5:39 72            pushi 72 // $72 yourself
  01b7:38 010e          pushi 10e // $10e description
  01ba:39 63            pushi 63 // $63 perform
  01bc:38 0102          pushi 102 // $102 syncStop
  01bf:39 68            pushi 68 // $68 restart
  01c1:38 00f5          pushi f5 // $f5 counter
  01c4:39 64            pushi 64 // $64 moveDone
  01c6:38 00fb          pushi fb // $fb offScreenOK
  01c9:39 5a            pushi 5a // $5a points
  01cb:38 00ee          pushi ee // $ee bumpTurn
  01ce:39 57            pushi 57 // $57 printLang
  01d0:38 00da          pushi da // $da motionCue
  01d3:39 5e            pushi 5e // $5e min
  01d5:38 00d0          pushi d0 // $d0 prevIcon
  01d8:39 52            pushi 52 // $52 icon
  01da:38 00da          pushi da // $da motionCue
  01dd:39 47            pushi 47 // $47 wordFail
  01df:38 00d7          pushi d7 // $d7 completed
  01e2:39 46            pushi 46 // $46 width
  01e4:38 00d2          pushi d2 // $d2 useIconItem
  01e7:39 4b            pushi 4b // $4b said
  01e9:38 00ac          pushi ac // $ac moveTo
  01ec:39 41            pushi 41 // $41 replay
  01ee:38 00a9          pushi a9 // $a9 track
  01f1:39 3a            pushi 3a // $3a heading
  01f3:38 0092          pushi 92 // $92 cycleCnt
  01f6:39 3b            pushi 3b // $3b mover
  01f8:38 0093          pushi 93 // $93 ticksToDo
  01fb:39 46            pushi 46 // $46 width
  01fd:39 6a            pushi 6a // $6a new
  01ff:39 52            pushi 52 // $52 icon
  0201:39 51            pushi 51 // $51 button
  0203:39 60            pushi 60 // $60 frame
  0205:39 5c            pushi 5c // $5c dataInc
  0207:39 64            pushi 64 // $64 moveDone
  0209:39 62            pushi 62 // $62 pri
  020b:39 6c            pushi 6c // $6c dispose
  020d:39 54            pushi 54 // $54 delete
  020f:39 72            pushi 72 // $72 yourself
  0211:39 3e            pushi 3e // $3e looper
  0213:39 71            pushi 71 // $71 respondsTo
  0215:39 32            pushi 32 // $32 b-i2
  0217:39 6c            pushi 6c // $6c dispose
  0219:39 1d            pushi 1d // $1d back
  021b:39 6c            pushi 6c // $6c dispose
  021d:39 04            pushi 4 // $4 x
  021f:39 7d            pushi 7d // $7d addToFront
  0221:39 06            pushi 6 // $6 loop
  0223:38 00ba          pushi ba // $ba right
  0226:38 010e          pushi 10e // $10e description
  0229:38 00bb          pushi bb // $bb setCursor
  022c:38 0110          pushi 110 // $110 onMeCheck
  022f:38 00bd          pushi bd // $bd maskView
  0232:76               push0 
  0233:38 00bd          pushi bd // $bd maskView
  0236:39 72            pushi 72 // $72 yourself
  0238:76               push0 
  0239:39 6a            pushi 6a // $6a new
  023b:76               push0 
  023c:51 23            class Polygon 
  023e:4a 04             send 4 

  0240:4a 86             send 86 

  0242:36                push 
  0243:54 06             self 6 

  0245:39 6b            pushi 6b // $6b init
  0247:76               push0 
  0248:38 0122          pushi 122 // $122 addToPic
  024b:76               push0 
  024c:72 14ae          lofsa $14ae // woman
  024f:4a 08             send 8 

  0251:39 6b            pushi 6b // $6b init
  0253:76               push0 
  0254:38 0121          pushi 121 // $121 ignoreActors
  0257:78               push1 
  0258:78               push1 
  0259:38 008e          pushi 8e // $8e setScript
  025c:78               push1 
  025d:72 095c          lofsa $095c // sMouth
  0260:36                push 
  0261:72 150e          lofsa $150e // womansMouth
  0264:4a 10             send 10 

  0266:39 6b            pushi 6b // $6b init
  0268:76               push0 
  0269:38 0120          pushi 120 // $120 setCel
  026c:78               push1 
  026d:78               push1 
  026e:38 011d          pushi 11d // $11d stopUpd
  0271:76               push0 
  0272:72 1396          lofsa $1396 // phone
  0275:4a 0e             send e 

  0277:32 00f2            jmp code_036c 

        code_027a
  027a:89 0c              lsg  
  027c:34 0217            ldi 217 
  027f:1a                 eq? 
  0280:30 002b            bnt code_02ae 
  0283:38 0219          pushi 219 // $219 firstSound
  0286:78               push1 
  0287:38 01f4          pushi 1f4 // $1f4 selector
  028a:38 021a          pushi 21a // $21a lastSound
  028d:78               push1 
  028e:38 01f6          pushi 1f6 // $1f6 topValue
  0291:51 74            class WrapMusic 
  0293:4a 0c             send c 

  0295:39 2b            pushi 2b // $2b number
  0297:78               push1 
  0298:38 01f4          pushi 1f4 // $1f4 selector
  029b:39 2a            pushi 2a // $2a play
  029d:78               push1 
  029e:51 74            class WrapMusic 
  02a0:36                push 
  02a1:39 66            pushi 66 // $66 flags
  02a3:78               push1 
  02a4:78               push1 
  02a5:38 00a2          pushi a2 // $a2 setLoop
  02a8:78               push1 
  02a9:78               push1 
  02aa:81 66              lag  
  02ac:4a 18             send 18 


        code_02ae
  02ae:38 0176          pushi 176 // $176 addObstacle
  02b1:78               push1 
  02b2:39 22            pushi 22 // $22 type
  02b4:78               push1 
  02b5:7a               push2 
  02b6:39 6b            pushi 6b // $6b init
  02b8:39 3c            pushi 3c // $3c doit
  02ba:76               push0 
  02bb:76               push0 
  02bc:38 013f          pushi 13f // $13f inputLineAddr
  02bf:76               push0 
  02c0:38 013f          pushi 13f // $13f inputLineAddr
  02c3:39 72            pushi 72 // $72 yourself
  02c5:38 010e          pushi 10e // $10e description
  02c8:39 63            pushi 63 // $63 perform
  02ca:38 0102          pushi 102 // $102 syncStop
  02cd:39 68            pushi 68 // $68 restart
  02cf:38 00f5          pushi f5 // $f5 counter
  02d2:39 64            pushi 64 // $64 moveDone
  02d4:38 00fb          pushi fb // $fb offScreenOK
  02d7:39 5a            pushi 5a // $5a points
  02d9:38 00ee          pushi ee // $ee bumpTurn
  02dc:39 57            pushi 57 // $57 printLang
  02de:38 00da          pushi da // $da motionCue
  02e1:39 5e            pushi 5e // $5e min
  02e3:38 00d0          pushi d0 // $d0 prevIcon
  02e6:39 52            pushi 52 // $52 icon
  02e8:38 00da          pushi da // $da motionCue
  02eb:39 47            pushi 47 // $47 wordFail
  02ed:38 00d7          pushi d7 // $d7 completed
  02f0:39 46            pushi 46 // $46 width
  02f2:38 00d2          pushi d2 // $d2 useIconItem
  02f5:39 4b            pushi 4b // $4b said
  02f7:38 00ac          pushi ac // $ac moveTo
  02fa:39 41            pushi 41 // $41 replay
  02fc:38 00a9          pushi a9 // $a9 track
  02ff:39 3a            pushi 3a // $3a heading
  0301:38 0092          pushi 92 // $92 cycleCnt
  0304:39 3b            pushi 3b // $3b mover
  0306:38 0093          pushi 93 // $93 ticksToDo
  0309:39 46            pushi 46 // $46 width
  030b:39 6d            pushi 6d // $6d showStr
  030d:39 53            pushi 53 // $53 draw
  030f:39 51            pushi 51 // $51 button
  0311:39 60            pushi 60 // $60 frame
  0313:39 5c            pushi 5c // $5c dataInc
  0315:39 64            pushi 64 // $64 moveDone
  0317:39 62            pushi 62 // $62 pri
  0319:39 6c            pushi 6c // $6c dispose
  031b:39 54            pushi 54 // $54 delete
  031d:39 72            pushi 72 // $72 yourself
  031f:39 3e            pushi 3e // $3e looper
  0321:39 71            pushi 71 // $71 respondsTo
  0323:39 32            pushi 32 // $32 b-i2
  0325:39 6c            pushi 6c // $6c dispose
  0327:39 1d            pushi 1d // $1d back
  0329:39 6c            pushi 6c // $6c dispose
  032b:39 04            pushi 4 // $4 x
  032d:39 7d            pushi 7d // $7d addToFront
  032f:39 04            pushi 4 // $4 x
  0331:38 00bb          pushi bb // $bb setCursor
  0334:38 010e          pushi 10e // $10e description
  0337:38 00bb          pushi bb // $bb setCursor
  033a:38 0110          pushi 110 // $110 onMeCheck
  033d:38 00bd          pushi bd // $bd maskView
  0340:76               push0 
  0341:38 00bd          pushi bd // $bd maskView
  0344:39 72            pushi 72 // $72 yourself
  0346:76               push0 
  0347:39 6a            pushi 6a // $6a new
  0349:76               push0 
  034a:51 23            class Polygon 
  034c:4a 04             send 4 

  034e:4a 86             send 86 

  0350:36                push 
  0351:54 06             self 6 

  0353:39 6b            pushi 6b // $6b init
  0355:76               push0 
  0356:38 0120          pushi 120 // $120 setCel
  0359:78               push1 
  035a:76               push0 
  035b:38 0119          pushi 119 // $119 approachVerbs
  035e:7a               push2 
  035f:39 03            pushi 3 // $3 y
  0361:39 05            pushi 5 // $5 view
  0363:38 011d          pushi 11d // $11d stopUpd
  0366:76               push0 
  0367:72 1396          lofsa $1396 // phone
  036a:4a 16             send 16 


        code_036c
  036c:38 009b          pushi 9b // $9b owner
  036f:76               push0 
  0370:39 43            pushi 43 // $43 at
  0372:78               push1 
  0373:39 0e            pushi e // $e lsLeft
  0375:51 40            class Inv 
  0377:4a 06             send 6 

  0379:4a 04             send 4 

  037b:36                push 
  037c:34 01fe            ldi 1fe 
  037f:1a                 eq? 
  0380:30 000f            bnt code_0392 
  0383:39 6b            pushi 6b // $6b init
  0385:76               push0 
  0386:38 0120          pushi 120 // $120 setCel
  0389:78               push1 
  038a:38 00ff          pushi ff // $ff syncNum
  038d:72 17e4          lofsa $17e4 // tape
  0390:4a 0a             send a 


        code_0392
  0392:39 20            pushi 20 // $20 state
  0394:76               push0 
  0395:39 43            pushi 43 // $43 at
  0397:78               push1 
  0398:39 0e            pushi e // $e lsLeft
  039a:51 40            class Inv 
  039c:4a 06             send 6 

  039e:4a 04             send 4 

  03a0:36                push 
  03a1:35 00              ldi 0 
  03a3:1a                 eq? 
  03a4:30 000e            bnt code_03b5 
  03a7:39 03            pushi 3 // $3 y
  03a9:38 0084          pushi 84 // $84 cycles
  03ac:38 0200          pushi 200 // $200 mouth
  03af:38 01ba          pushi 1ba // $1ba vWalking
  03b2:43 00 06         callk Load 6 


        code_03b5
  03b5:38 0176          pushi 176 // $176 addObstacle
  03b8:39 04            pushi 4 // $4 x
  03ba:39 22            pushi 22 // $22 type
  03bc:78               push1 
  03bd:7a               push2 
  03be:39 6b            pushi 6b // $6b init
  03c0:39 0e            pushi e // $e lsLeft
  03c2:39 32            pushi 32 // $32 b-i2
  03c4:38 00a8          pushi a8 // $a8 select
  03c7:39 2c            pushi 2c // $2c nodePtr
  03c9:38 00a1          pushi a1 // $a1 setVol
  03cc:39 34            pushi 34 // $34 b-xAxis
  03ce:38 009c          pushi 9c // $9c stop
  03d1:38 0095          pushi 95 // $95 set
  03d4:38 009d          pushi 9d // $9d pause
  03d7:3c                 dup 
  03d8:38 00a3          pushi a3 // $a3 send
  03db:38 0091          pushi 91 // $91 globalize
  03de:38 00a9          pushi a9 // $a9 track
  03e1:39 4d            pushi 4d // $4d value
  03e3:38 00a9          pushi a9 // $a9 track
  03e6:39 72            pushi 72 // $72 yourself
  03e8:76               push0 
  03e9:39 6a            pushi 6a // $6a new
  03eb:76               push0 
  03ec:51 23            class Polygon 
  03ee:4a 04             send 4 

  03f0:4a 2a             send 2a 

  03f2:36                push 
  03f3:39 22            pushi 22 // $22 type
  03f5:78               push1 
  03f6:7a               push2 
  03f7:39 6b            pushi 6b // $6b init
  03f9:39 0c            pushi c // $c nsRight
  03fb:39 45            pushi 45 // $45 done
  03fd:38 0081          pushi 81 // $81 handleEvent
  0400:39 50            pushi 50 // $50 title
  0402:39 7c            pushi 7c // $7c prev
  0404:38 0083          pushi 83 // $83 timer
  0407:39 7c            pushi 7c // $7c prev
  0409:38 008d          pushi 8d // $8d cue
  040c:38 0082          pushi 82 // $82 start
  040f:3c                 dup 
  0410:38 0087          pushi 87 // $87 ticks
  0413:39 4f            pushi 4f // $4f restore
  0415:38 0087          pushi 87 // $87 ticks
  0418:39 72            pushi 72 // $72 yourself
  041a:76               push0 
  041b:39 6a            pushi 6a // $6a new
  041d:76               push0 
  041e:51 23            class Polygon 
  0420:4a 04             send 4 

  0422:4a 26             send 26 

  0424:36                push 
  0425:39 22            pushi 22 // $22 type
  0427:78               push1 
  0428:7a               push2 
  0429:39 6b            pushi 6b // $6b init
  042b:39 0e            pushi e // $e lsLeft
  042d:39 78            pushi 78 // $78 isEmpty
  042f:39 6e            pushi 6e // $6e showSelf
  0431:38 0081          pushi 81 // $81 handleEvent
  0434:39 67            pushi 67 // $67 quitGame
  0436:38 00ad          pushi ad // $ad setMark
  0439:39 67            pushi 67 // $67 quitGame
  043b:38 00ba          pushi ba // $ba right
  043e:39 6d            pushi 6d // $6d showStr
  0440:38 00b3          pushi b3 // $b3 theItem
  0443:39 72            pushi 72 // $72 yourself
  0445:38 00ad          pushi ad // $ad setMark
  0448:39 75            pushi 75 // $75 firstTrue
  044a:39 7e            pushi 7e // $7e addToEnd
  044c:39 75            pushi 75 // $75 firstTrue
  044e:39 72            pushi 72 // $72 yourself
  0450:76               push0 
  0451:39 6a            pushi 6a // $6a new
  0453:76               push0 
  0454:51 23            class Polygon 
  0456:4a 04             send 4 

  0458:4a 2a             send 2a 

  045a:36                push 
  045b:39 22            pushi 22 // $22 type
  045d:78               push1 
  045e:7a               push2 
  045f:39 6b            pushi 6b // $6b init
  0461:39 10            pushi 10 // $10 lsRight
  0463:38 008e          pushi 8e // $8e setScript
  0466:38 0093          pushi 93 // $93 ticksToDo
  0469:38 008c          pushi 8c // $8c changeState
  046c:38 008d          pushi 8d // $8d cue
  046f:38 0094          pushi 94 // $94 lastTime
  0472:38 0087          pushi 87 // $87 ticks
  0475:38 00c9          pushi c9 // $c9 disable
  0478:38 0087          pushi 87 // $87 ticks
  047b:38 00d5          pushi d5 // $d5 has
  047e:38 008f          pushi 8f // $8f port
  0481:38 00cc          pushi cc // $cc oldMouseX
  0484:38 0096          pushi 96 // $96 setCycle
  0487:38 00bc          pushi bc // $bc helpStr
  048a:38 0098          pushi 98 // $98 set60ths
  048d:38 009f          pushi 9f // $9f fade
  0490:38 0098          pushi 98 // $98 set60ths
  0493:39 72            pushi 72 // $72 yourself
  0495:76               push0 
  0496:39 6a            pushi 6a // $6a new
  0498:76               push0 
  0499:51 23            class Polygon 
  049b:4a 04             send 4 

  049d:4a 2e             send 2e 

  049f:36                push 
  04a0:54 0c             self c 

  04a2:39 6b            pushi 6b // $6b init
  04a4:76               push0 
  04a5:38 0119          pushi 119 // $119 approachVerbs
  04a8:7a               push2 
  04a9:39 03            pushi 3 // $3 y
  04ab:39 04            pushi 4 // $4 x
  04ad:38 011d          pushi 11d // $11d stopUpd
  04b0:76               push0 
  04b1:72 16a6          lofsa $16a6 // musicBox
  04b4:4a 10             send 10 

  04b6:39 6b            pushi 6b // $6b init
  04b8:76               push0 
  04b9:38 0119          pushi 119 // $119 approachVerbs
  04bc:39 03            pushi 3 // $3 y
  04be:39 05            pushi 5 // $5 view
  04c0:39 03            pushi 3 // $3 y
  04c2:39 04            pushi 4 // $4 x
  04c4:72 1a46          lofsa $1a46 // maitreD
  04c7:4a 0e             send e 

  04c9:39 6b            pushi 6b // $6b init
  04cb:76               push0 
  04cc:38 0119          pushi 119 // $119 approachVerbs
  04cf:7a               push2 
  04d0:39 03            pushi 3 // $3 y
  04d2:39 04            pushi 4 // $4 x
  04d4:72 1ed6          lofsa $1ed6 // tapeReader
  04d7:4a 0c             send c 

  04d9:39 6b            pushi 6b // $6b init
  04db:76               push0 
  04dc:72 1f3a          lofsa $1f3a // diskDrive
  04df:4a 04             send 4 

  04e1:39 6b            pushi 6b // $6b init
  04e3:76               push0 
  04e4:72 1f9e          lofsa $1f9e // pet
  04e7:4a 04             send 4 

  04e9:39 6b            pushi 6b // $6b init
  04eb:76               push0 
  04ec:72 2002          lofsa $2002 // appleII
  04ef:4a 04             send 4 

  04f1:39 6b            pushi 6b // $6b init
  04f3:76               push0 
  04f4:72 2066          lofsa $2066 // cashRegister
  04f7:4a 04             send 4 

  04f9:39 6b            pushi 6b // $6b init
  04fb:76               push0 
  04fc:72 20ca          lofsa $20ca // monitor
  04ff:4a 04             send 4 

  0501:39 6b            pushi 6b // $6b init
  0503:76               push0 
  0504:72 212e          lofsa $212e // atari400
  0507:4a 04             send 4 

  0509:39 6b            pushi 6b // $6b init
  050b:76               push0 
  050c:72 21b0          lofsa $21b0 // tapeDrive
  050f:4a 04             send 4 

  0511:39 6b            pushi 6b // $6b init
  0513:76               push0 
  0514:72 23e8          lofsa $23e8 // cactus1
  0517:4a 04             send 4 

  0519:39 6b            pushi 6b // $6b init
  051b:76               push0 
  051c:72 2438          lofsa $2438 // cactus2
  051f:4a 04             send 4 

  0521:39 6b            pushi 6b // $6b init
  0523:76               push0 
  0524:72 21fe          lofsa $21fe // pianoRoll
  0527:4a 04             send 4 

  0529:39 6b            pushi 6b // $6b init
  052b:76               push0 
  052c:72 224c          lofsa $224c // punchCardMachine
  052f:4a 04             send 4 

  0531:39 6b            pushi 6b // $6b init
  0533:76               push0 
  0534:72 2304          lofsa $2304 // podium
  0537:4a 04             send 4 

  0539:39 6b            pushi 6b // $6b init
  053b:76               push0 
  053c:72 2340          lofsa $2340 // desk
  053f:4a 04             send 4 

  0541:39 6b            pushi 6b // $6b init
  0543:76               push0 
  0544:72 22c8          lofsa $22c8 // bullBoard
  0547:4a 04             send 4 

  0549:39 6b            pushi 6b // $6b init
  054b:76               push0 
  054c:72 228c          lofsa $228c // chair
  054f:4a 04             send 4 

  0551:48                 ret 
    )

    (method (doit) // method_05d2
  05d2:39 3c            pushi 3c // $3c doit
  05d4:76               push0 
  05d5:57 72 04         super LLRoom 4 

  05d8:39 3b            pushi 3b // $3b mover
  05da:76               push0 
  05db:81 00              lag  
  05dd:4a 04             send 4 

  05df:30 000a            bnt code_05ec 
  05e2:81 19              lag  
  05e4:30 0005            bnt code_05ec 
  05e7:39 6c            pushi 6c // $6c dispose
  05e9:76               push0 
  05ea:4a 04             send 4 


        code_05ec
  05ec:63 08             pToa script 
  05ee:30 0003            bnt code_05f4 
  05f1:32 0019            jmp code_060d 

        code_05f4
  05f4:7a               push2 
  05f5:89 00              lsg  
  05f7:39 10            pushi 10 // $10 lsRight
  05f9:45 05 04         callb procedure_0005 4 //  

  05fc:30 000e            bnt code_060d 
  05ff:76               push0 
  0600:45 02 00         callb procedure_0002 0 //  

  0603:38 008e          pushi 8e // $8e setScript
  0606:78               push1 
  0607:72 0be0          lofsa $0be0 // sExitSouth
  060a:36                push 
  060b:54 06             self 6 


        code_060d
  060d:48                 ret 
    )

    (method (newRoom) // method_05b9
  05b9:38 009f          pushi 9f // $9f fade
  05bc:39 04            pushi 4 // $4 x
  05be:39 7f            pushi 7f // $7f addAfter
  05c0:39 0a            pushi a // $a nsLeft
  05c2:3c                 dup 
  05c3:76               push0 
  05c4:81 66              lag  
  05c6:4a 0c             send c 

  05c8:38 0179          pushi 179 // $179 newRoom
  05cb:78               push1 
  05cc:8f 01              lsp param1 
  05ce:57 72 06         super LLRoom 6 

  05d1:48                 ret 
    )

    (method (notify) // method_0552
  0552:8f 01              lsp param1 
  0554:3c                 dup 
  0555:35 ff              ldi ff 
  0557:1a                 eq? 
  0558:30 000b            bnt code_0566 
  055b:7a               push2 
  055c:38 01fe          pushi 1fe // $1fe bust
  055f:76               push0 
  0560:45 0e 04         callb procedure_000e 4 //  

  0563:32 0051            jmp code_05b7 

        code_0566
  0566:3c                 dup 
  0567:34 123c            ldi 123c 
  056a:1a                 eq? 
  056b:30 0040            bnt code_05ae 
  056e:78               push1 
  056f:78               push1 
  0570:45 06 02         callb procedure_0006 2 //  

  0573:18                 not 
  0574:30 002b            bnt code_05a2 
  0577:78               push1 
  0578:78               push1 
  0579:45 07 02         callb procedure_0007 2 //  

  057c:7a               push2 
  057d:7a               push2 
  057e:39 6e            pushi 6e // $6e showSelf
  0580:45 0a 04         callb procedure_000a 4 //  

  0583:7a               push2 
  0584:38 01fe          pushi 1fe // $1fe bust
  0587:78               push1 
  0588:45 0e 04         callb procedure_000e 4 //  

  058b:39 03            pushi 3 // $3 y
  058d:89 00              lsg  
  058f:38 01fe          pushi 1fe // $1fe bust
  0592:7a               push2 
  0593:45 12 06         callb procedure_0012 6 //  

  0596:7a               push2 
  0597:38 01fe          pushi 1fe // $1fe bust
  059a:39 03            pushi 3 // $3 y
  059c:45 0e 04         callb procedure_000e 4 //  

  059f:32 0015            jmp code_05b7 

        code_05a2
  05a2:7a               push2 
  05a3:38 01fe          pushi 1fe // $1fe bust
  05a6:39 04            pushi 4 // $4 x
  05a8:45 0e 04         callb procedure_000e 4 //  

  05ab:32 0009            jmp code_05b7 

        code_05ae
  05ae:7a               push2 
  05af:38 01fe          pushi 1fe // $1fe bust
  05b2:39 05            pushi 5 // $5 view
  05b4:45 0e 04         callb procedure_000e 4 //  


        code_05b7
  05b7:3a                toss 
  05b8:48                 ret 
    )

)

// 06b2
(instance sExitNorth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0660
  0660:87 01              lap param1 
  0662:65 0a             aTop state 
  0664:36                push 
  0665:3c                 dup 
  0666:35 00              ldi 0 
  0668:1a                 eq? 
  0669:30 0024            bnt code_0690 
  066c:38 011b          pushi 11b // $11b setMotion
  066f:39 04            pushi 4 // $4 x
  0671:51 24            class PolyPath 
  0673:36                push 
  0674:38 0111          pushi 111 // $111 approachX
  0677:76               push0 
  0678:72 1bc4          lofsa $1bc4 // door
  067b:4a 04             send 4 

  067d:36                push 
  067e:38 0112          pushi 112 // $112 approachY
  0681:76               push0 
  0682:72 1bc4          lofsa $1bc4 // door
  0685:4a 04             send 4 

  0687:36                push 
  0688:7c            pushSelf 
  0689:81 00              lag  
  068b:4a 0c             send c 

  068d:32 001a            jmp code_06aa 

        code_0690
  0690:3c                 dup 
  0691:35 01              ldi 1 
  0693:1a                 eq? 
  0694:30 0013            bnt code_06aa 
  0697:38 020e          pushi 20e // $20e locked
  069a:78               push1 
  069b:76               push0 
  069c:38 0216          pushi 216 // $216 exitType
  069f:78               push1 
  06a0:76               push0 
  06a1:38 00b5          pushi b5 // $b5 open
  06a4:76               push0 
  06a5:72 1bc4          lofsa $1bc4 // door
  06a8:4a 10             send 10 


        code_06aa
  06aa:3a                toss 
  06ab:48                 ret 
    )

)

// 072e
(instance sEnterSouth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_06e6
  06e6:3f 02             link 2 // (var $2)
  06e8:87 01              lap param1 
  06ea:65 0a             aTop state 
  06ec:36                push 
  06ed:3c                 dup 
  06ee:35 00              ldi 0 
  06f0:1a                 eq? 
  06f1:30 001a            bnt code_070e 
  06f4:76               push0 
  06f5:45 02 00         callb procedure_0002 0 //  

  06f8:38 011b          pushi 11b // $11b setMotion
  06fb:39 04            pushi 4 // $4 x
  06fd:51 1e            class MoveTo 
  06ff:36                push 
  0700:38 0125          pushi 125 // $125 detailLevel
  0703:38 00b7          pushi b7 // $b7 top
  0706:7c            pushSelf 
  0707:81 00              lag  
  0709:4a 0c             send c 

  070b:32 0018            jmp code_0726 

        code_070e
  070e:3c                 dup 
  070f:35 01              ldi 1 
  0711:1a                 eq? 
  0712:30 0011            bnt code_0726 
  0715:76               push0 
  0716:45 03 00         callb procedure_0003 0 //  

  0719:38 020a          pushi 20a // $20a normalize
  071c:76               push0 
  071d:81 00              lag  
  071f:4a 04             send 4 

  0721:39 6c            pushi 6c // $6c dispose
  0723:76               push0 
  0724:54 04             self 4 


        code_0726
  0726:3a                toss 
  0727:48                 ret 
    )

)

// 08bc
(instance sBribe of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0762
  0762:3f 1f             link 1f // (var $1f)
  0764:87 01              lap param1 
  0766:65 0a             aTop state 
  0768:36                push 
  0769:3c                 dup 
  076a:35 00              ldi 0 
  076c:1a                 eq? 
  076d:30 0013            bnt code_0783 
  0770:39 03            pushi 3 // $3 y
  0772:89 00              lsg  
  0774:38 01fe          pushi 1fe // $1fe bust
  0777:39 06            pushi 6 // $6 loop
  0779:45 12 06         callb procedure_0012 6 //  

  077c:35 3c              ldi 3c 
  077e:65 16             aTop ticks 
  0780:32 0131            jmp code_08b4 

        code_0783
  0783:3c                 dup 
  0784:35 01              ldi 1 
  0786:1a                 eq? 
  0787:30 0079            bnt code_0803 
  078a:39 20            pushi 20 // $20 state
  078c:76               push0 
  078d:39 43            pushi 43 // $43 at
  078f:78               push1 
  0790:39 0e            pushi e // $e lsLeft
  0792:51 40            class Inv 
  0794:4a 06             send 6 

  0796:4a 04             send 4 

  0798:36                push 
  0799:35 00              ldi 0 
  079b:1a                 eq? 
  079c:30 0017            bnt code_07b6 
  079f:39 06            pushi 6 // $6 loop
  07a1:72 1c68          lofsa $1c68 // the maitre d'
  07a4:36                push 
  07a5:38 01fe          pushi 1fe // $1fe bust
  07a8:39 07            pushi 7 // $7 cel
  07aa:39 6c            pushi 6c // $6c dispose
  07ac:38 008b          pushi 8b // $8b caller
  07af:7c            pushSelf 
  07b0:45 12 0c         callb procedure_0012 c //  

  07b3:32 00fe            jmp code_08b4 

        code_07b6
  07b6:39 20            pushi 20 // $20 state
  07b8:76               push0 
  07b9:39 43            pushi 43 // $43 at
  07bb:78               push1 
  07bc:39 0e            pushi e // $e lsLeft
  07be:51 40            class Inv 
  07c0:4a 06             send 6 

  07c2:4a 04             send 4 

  07c4:36                push 
  07c5:35 04              ldi 4 
  07c7:1a                 eq? 
  07c8:30 001c            bnt code_07e7 
  07cb:39 04            pushi 4 // $4 x
  07cd:72 1c68          lofsa $1c68 // the maitre d'
  07d0:36                push 
  07d1:38 01fe          pushi 1fe // $1fe bust
  07d4:39 08            pushi 8 // $8 underBits
  07d6:39 6c            pushi 6c // $6c dispose
  07d8:45 12 08         callb procedure_0012 8 //  

  07db:76               push0 
  07dc:45 03 00         callb procedure_0003 0 //  

  07df:39 6c            pushi 6c // $6c dispose
  07e1:76               push0 
  07e2:54 04             self 4 

  07e4:32 00cd            jmp code_08b4 

        code_07e7
  07e7:39 04            pushi 4 // $4 x
  07e9:72 1c68          lofsa $1c68 // the maitre d'
  07ec:36                push 
  07ed:38 01fe          pushi 1fe // $1fe bust
  07f0:39 09            pushi 9 // $9 nsTop
  07f2:39 6c            pushi 6c // $6c dispose
  07f4:45 12 08         callb procedure_0012 8 //  

  07f7:76               push0 
  07f8:45 03 00         callb procedure_0003 0 //  

  07fb:39 6c            pushi 6c // $6c dispose
  07fd:76               push0 
  07fe:54 04             self 4 

  0800:32 00b1            jmp code_08b4 

        code_0803
  0803:3c                 dup 
  0804:35 02              ldi 2 
  0806:1a                 eq? 
  0807:30 0007            bnt code_0811 
  080a:35 43              ldi 43 
  080c:65 16             aTop ticks 
  080e:32 00a3            jmp code_08b4 

        code_0811
  0811:3c                 dup 
  0812:35 03              ldi 3 
  0814:1a                 eq? 
  0815:30 009c            bnt code_08b4 
  0818:35 00              ldi 0 
  081a:a5 00              sat temp0 

        code_081c
  081c:8d 00              lst temp0 
  081e:35 01              ldi 1 
  0820:22                 lt? 
  0821:30 0027            bnt code_084b 
  0824:35 00              ldi 0 
  0826:a5 01              sat temp1 
  0828:39 05            pushi 5 // $5 view
  082a:5b 04 01           lea 4 1 
  082d:36                push 
  082e:39 06            pushi 6 // $6 loop
  0830:72 25df          lofsa $25df // How much do you wish to bribe the Maitre d'.
  0833:36                push 
  0834:39 50            pushi 50 // $50 title
  0836:72 260c          lofsa $260c // Grease That Palm
  0839:36                push 
  083a:47 ff 02 0a      calle ff procedure_0002 a //  

  083e:78               push1 
  083f:5b 04 01           lea 4 1 
  0842:36                push 
  0843:43 4a 02         callk ReadNumber 2 

  0846:a5 00              sat temp0 
  0848:32 ffd1            jmp code_081c 

        code_084b
  084b:8d 00              lst temp0 
  084d:35 63              ldi 63 
  084f:1e                 gt? 
  0850:30 0048            bnt code_089b 
  0853:76               push0 
  0854:45 02 00         callb procedure_0002 0 //  

  0857:7a               push2 
  0858:39 03            pushi 3 // $3 y
  085a:39 6a            pushi 6a // $6a new
  085c:45 0a 04         callb procedure_000a 4 //  

  085f:38 0148          pushi 148 // $148 put
  0862:78               push1 
  0863:39 0c            pushi c // $c nsRight
  0865:81 00              lag  
  0867:4a 06             send 6 

  0869:39 04            pushi 4 // $4 x
  086b:72 1c68          lofsa $1c68 // the maitre d'
  086e:36                push 
  086f:38 01fe          pushi 1fe // $1fe bust
  0872:39 0a            pushi a // $a nsLeft
  0874:39 6c            pushi 6c // $6c dispose
  0876:45 12 08         callb procedure_0012 8 //  

  0879:35 01              ldi 1 
  087b:a3 04              sal local4 
  087d:39 20            pushi 20 // $20 state
  087f:78               push1 
  0880:78               push1 
  0881:39 43            pushi 43 // $43 at
  0883:78               push1 
  0884:39 0e            pushi e // $e lsLeft
  0886:51 40            class Inv 
  0888:4a 06             send 6 

  088a:4a 06             send 6 

  088c:38 008e          pushi 8e // $8e setScript
  088f:78               push1 
  0890:72 1178          lofsa $1178 // sMD
  0893:36                push 
  0894:81 02              lag  
  0896:4a 06             send 6 

  0898:32 0019            jmp code_08b4 

        code_089b
  089b:39 04            pushi 4 // $4 x
  089d:72 1c68          lofsa $1c68 // the maitre d'
  08a0:36                push 
  08a1:38 01fe          pushi 1fe // $1fe bust
  08a4:39 0b            pushi b // $b nsBottom
  08a6:39 6c            pushi 6c // $6c dispose
  08a8:45 12 08         callb procedure_0012 8 //  

  08ab:76               push0 
  08ac:45 03 00         callb procedure_0003 0 //  

  08af:39 6c            pushi 6c // $6c dispose
  08b1:76               push0 
  08b2:54 04             self 4 


        code_08b4
  08b4:3a                toss 
  08b5:48                 ret 
    )

)

// 0956
(instance sMouth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_08f0
  08f0:3f 02             link 2 // (var $2)
  08f2:87 01              lap param1 
  08f4:65 0a             aTop state 
  08f6:36                push 
  08f7:3c                 dup 
  08f8:35 00              ldi 0 
  08fa:1a                 eq? 
  08fb:30 0026            bnt code_0924 
  08fe:38 0096          pushi 96 // $96 setCycle
  0901:78               push1 
  0902:51 17            class Fwd 
  0904:36                push 
  0905:38 00db          pushi db // $db cycleSpeed
  0908:78               push1 
  0909:7a               push2 
  090a:39 06            pushi 6 // $6 loop
  090c:39 0c            pushi c // $c nsRight
  090e:43 3c 04         callk Random 4 

  0911:36                push 
  0912:72 150e          lofsa $150e // womansMouth
  0915:4a 0c             send c 

  0917:7a               push2 
  0918:39 30            pushi 30 // $30 b-moveCnt
  091a:39 5a            pushi 5a // $5a points
  091c:43 3c 04         callk Random 4 

  091f:65 10             aTop cycles 
  0921:32 002a            jmp code_094e 

        code_0924
  0924:3c                 dup 
  0925:35 01              ldi 1 
  0927:1a                 eq? 
  0928:30 0017            bnt code_0942 
  092b:38 0120          pushi 120 // $120 setCel
  092e:78               push1 
  092f:76               push0 
  0930:72 150e          lofsa $150e // womansMouth
  0933:4a 06             send 6 

  0935:7a               push2 
  0936:39 1e            pushi 1e // $1e mode
  0938:39 3c            pushi 3c // $3c doit
  093a:43 3c 04         callk Random 4 

  093d:65 10             aTop cycles 
  093f:32 000c            jmp code_094e 

        code_0942
  0942:3c                 dup 
  0943:35 02              ldi 2 
  0945:1a                 eq? 
  0946:30 0005            bnt code_094e 
  0949:39 6b            pushi 6b // $6b init
  094b:76               push0 
  094c:54 04             self 4 


        code_094e
  094e:3a                toss 
  094f:48                 ret 
    )

)

// 0a1a
(instance sMusicBox of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_098a
  098a:3f 02             link 2 // (var $2)
  098c:87 01              lap param1 
  098e:65 0a             aTop state 
  0990:36                push 
  0991:3c                 dup 
  0992:35 00              ldi 0 
  0994:1a                 eq? 
  0995:30 0026            bnt code_09be 
  0998:76               push0 
  0999:45 02 00         callb procedure_0002 0 //  

  099c:38 0096          pushi 96 // $96 setCycle
  099f:78               push1 
  09a0:51 17            class Fwd 
  09a2:36                push 
  09a3:72 16a6          lofsa $16a6 // musicBox
  09a6:4a 06             send 6 

  09a8:39 6b            pushi 6b // $6b init
  09aa:76               push0 
  09ab:38 0096          pushi 96 // $96 setCycle
  09ae:78               push1 
  09af:51 17            class Fwd 
  09b1:36                push 
  09b2:72 1714          lofsa $1714 // musicBoxCloseUp
  09b5:4a 0a             send a 

  09b7:35 03              ldi 3 
  09b9:65 12             aTop seconds 
  09bb:32 0054            jmp code_0a12 

        code_09be
  09be:3c                 dup 
  09bf:35 01              ldi 1 
  09c1:1a                 eq? 
  09c2:30 001f            bnt code_09e4 
  09c5:7a               push2 
  09c6:39 0c            pushi c // $c nsRight
  09c8:39 6b            pushi 6b // $6b init
  09ca:45 0a 04         callb procedure_000a 4 //  

  09cd:39 05            pushi 5 // $5 view
  09cf:38 01fe          pushi 1fe // $1fe bust
  09d2:39 0c            pushi c // $c nsRight
  09d4:39 43            pushi 43 // $43 at
  09d6:39 64            pushi 64 // $64 moveDone
  09d8:39 0a            pushi a // $a nsLeft
  09da:45 0e 0a         callb procedure_000e a //  

  09dd:35 03              ldi 3 
  09df:65 12             aTop seconds 
  09e1:32 002e            jmp code_0a12 

        code_09e4
  09e4:3c                 dup 
  09e5:35 02              ldi 2 
  09e7:1a                 eq? 
  09e8:30 0027            bnt code_0a12 
  09eb:39 6c            pushi 6c // $6c dispose
  09ed:76               push0 
  09ee:72 1714          lofsa $1714 // musicBoxCloseUp
  09f1:4a 04             send 4 

  09f3:38 0120          pushi 120 // $120 setCel
  09f6:78               push1 
  09f7:76               push0 
  09f8:38 011d          pushi 11d // $11d stopUpd
  09fb:76               push0 
  09fc:72 16a6          lofsa $16a6 // musicBox
  09ff:4a 0a             send a 

  0a01:76               push0 
  0a02:45 03 00         callb procedure_0003 0 //  

  0a05:38 020a          pushi 20a // $20a normalize
  0a08:76               push0 
  0a09:81 00              lag  
  0a0b:4a 04             send 4 

  0a0d:39 6c            pushi 6c // $6c dispose
  0a0f:76               push0 
  0a10:54 04             self 4 


        code_0a12
  0a12:3a                toss 
  0a13:48                 ret 
    )

)

// 0b56
(instance sPhone of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0a4e
  0a4e:3f 02             link 2 // (var $2)
  0a50:87 01              lap param1 
  0a52:65 0a             aTop state 
  0a54:36                push 
  0a55:3c                 dup 
  0a56:35 00              ldi 0 
  0a58:1a                 eq? 
  0a59:30 003f            bnt code_0a9b 
  0a5c:76               push0 
  0a5d:45 02 00         callb procedure_0002 0 //  

  0a60:39 05            pushi 5 // $5 view
  0a62:78               push1 
  0a63:38 01ff          pushi 1ff // $1ff eyes
  0a66:38 011c          pushi 11c // $11c posn
  0a69:7a               push2 
  0a6a:39 04            pushi 4 // $4 x
  0a6c:76               push0 
  0a6d:81 00              lag  
  0a6f:4a 04             send 4 

  0a71:36                push 
  0a72:35 0a              ldi a 
  0a74:04                 sub 
  0a75:36                push 
  0a76:39 03            pushi 3 // $3 y
  0a78:76               push0 
  0a79:81 00              lag  
  0a7b:4a 04             send 4 

  0a7d:36                push 
  0a7e:38 00a2          pushi a2 // $a2 setLoop
  0a81:78               push1 
  0a82:7a               push2 
  0a83:38 0120          pushi 120 // $120 setCel
  0a86:78               push1 
  0a87:76               push0 
  0a88:38 0096          pushi 96 // $96 setCycle
  0a8b:39 04            pushi 4 // $4 x
  0a8d:51 19            class CT 
  0a8f:36                push 
  0a90:39 04            pushi 4 // $4 x
  0a92:78               push1 
  0a93:7c            pushSelf 
  0a94:81 00              lag  
  0a96:4a 26             send 26 

  0a98:32 00b3            jmp code_0b4e 

        code_0a9b
  0a9b:3c                 dup 
  0a9c:35 01              ldi 1 
  0a9e:1a                 eq? 
  0a9f:30 0019            bnt code_0abb 
  0aa2:38 0120          pushi 120 // $120 setCel
  0aa5:78               push1 
  0aa6:78               push1 
  0aa7:72 1396          lofsa $1396 // phone
  0aaa:4a 06             send 6 

  0aac:38 0096          pushi 96 // $96 setCycle
  0aaf:7a               push2 
  0ab0:51 1a            class End 
  0ab2:36                push 
  0ab3:7c            pushSelf 
  0ab4:81 00              lag  
  0ab6:4a 08             send 8 

  0ab8:32 0093            jmp code_0b4e 

        code_0abb
  0abb:3c                 dup 
  0abc:35 02              ldi 2 
  0abe:1a                 eq? 
  0abf:30 001a            bnt code_0adc 
  0ac2:38 0144          pushi 144 // $144 canInput
  0ac5:78               push1 
  0ac6:78               push1 
  0ac7:51 31            class User 
  0ac9:4a 06             send 6 

  0acb:39 6b            pushi 6b // $6b init
  0acd:7a               push2 
  0ace:78               push1 
  0acf:7c            pushSelf 
  0ad0:7a               push2 
  0ad1:39 14            pushi 14 // $14 brLeft
  0ad3:76               push0 
  0ad4:43 02 04         callk ScriptID 4 

  0ad7:4a 08             send 8 

  0ad9:32 0072            jmp code_0b4e 

        code_0adc
  0adc:3c                 dup 
  0add:35 03              ldi 3 
  0adf:1a                 eq? 
  0ae0:30 0014            bnt code_0af7 
  0ae3:38 0096          pushi 96 // $96 setCycle
  0ae6:39 04            pushi 4 // $4 x
  0ae8:51 19            class CT 
  0aea:36                push 
  0aeb:39 04            pushi 4 // $4 x
  0aed:39 ff            pushi ff // $ff syncNum
  0aef:7c            pushSelf 
  0af0:81 00              lag  
  0af2:4a 0c             send c 

  0af4:32 0057            jmp code_0b4e 

        code_0af7
  0af7:3c                 dup 
  0af8:35 04              ldi 4 
  0afa:1a                 eq? 
  0afb:30 001d            bnt code_0b1b 
  0afe:38 0120          pushi 120 // $120 setCel
  0b01:78               push1 
  0b02:76               push0 
  0b03:38 011d          pushi 11d // $11d stopUpd
  0b06:76               push0 
  0b07:72 1396          lofsa $1396 // phone
  0b0a:4a 0a             send a 

  0b0c:38 0096          pushi 96 // $96 setCycle
  0b0f:7a               push2 
  0b10:51 1b            class Beg 
  0b12:36                push 
  0b13:7c            pushSelf 
  0b14:81 00              lag  
  0b16:4a 08             send 8 

  0b18:32 0033            jmp code_0b4e 

        code_0b1b
  0b1b:3c                 dup 
  0b1c:35 05              ldi 5 
  0b1e:1a                 eq? 
  0b1f:30 002c            bnt code_0b4e 
  0b22:38 020a          pushi 20a // $20a normalize
  0b25:78               push1 
  0b26:38 0226          pushi 226 // $226 turn
  0b29:38 011c          pushi 11c // $11c posn
  0b2c:7a               push2 
  0b2d:39 04            pushi 4 // $4 x
  0b2f:76               push0 
  0b30:81 00              lag  
  0b32:4a 04             send 4 

  0b34:36                push 
  0b35:35 0a              ldi a 
  0b37:02                 add 
  0b38:36                push 
  0b39:39 03            pushi 3 // $3 y
  0b3b:76               push0 
  0b3c:81 00              lag  
  0b3e:4a 04             send 4 

  0b40:36                push 
  0b41:81 00              lag  
  0b43:4a 0e             send e 

  0b45:76               push0 
  0b46:45 03 00         callb procedure_0003 0 //  

  0b49:39 6c            pushi 6c // $6c dispose
  0b4b:76               push0 
  0b4c:54 04             self 4 


        code_0b4e
  0b4e:3a                toss 
  0b4f:48                 ret 
    )

)

// 0bda
(instance sExitSouth of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0b8a
  0b8a:3f 02             link 2 // (var $2)
  0b8c:87 01              lap param1 
  0b8e:65 0a             aTop state 
  0b90:36                push 
  0b91:3c                 dup 
  0b92:35 00              ldi 0 
  0b94:1a                 eq? 
  0b95:30 0028            bnt code_0bc0 
  0b98:38 011b          pushi 11b // $11b setMotion
  0b9b:39 04            pushi 4 // $4 x
  0b9d:51 1e            class MoveTo 
  0b9f:36                push 
  0ba0:39 04            pushi 4 // $4 x
  0ba2:76               push0 
  0ba3:81 00              lag  
  0ba5:4a 04             send 4 

  0ba7:36                push 
  0ba8:35 28              ldi 28 
  0baa:02                 add 
  0bab:36                push 
  0bac:39 03            pushi 3 // $3 y
  0bae:76               push0 
  0baf:81 00              lag  
  0bb1:4a 04             send 4 

  0bb3:36                push 
  0bb4:35 28              ldi 28 
  0bb6:02                 add 
  0bb7:36                push 
  0bb8:7c            pushSelf 
  0bb9:81 00              lag  
  0bbb:4a 0c             send c 

  0bbd:32 0012            jmp code_0bd2 

        code_0bc0
  0bc0:3c                 dup 
  0bc1:35 01              ldi 1 
  0bc3:1a                 eq? 
  0bc4:30 000b            bnt code_0bd2 
  0bc7:38 0179          pushi 179 // $179 newRoom
  0bca:78               push1 
  0bcb:38 01f4          pushi 1f4 // $1f4 selector
  0bce:81 02              lag  
  0bd0:4a 06             send 6 


        code_0bd2
  0bd2:3a                toss 
  0bd3:48                 ret 
    )

)

// 1172
(instance sMD of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0c0e
  0c0e:87 01              lap param1 
  0c10:65 0a             aTop state 
  0c12:36                push 
  0c13:3c                 dup 
  0c14:35 00              ldi 0 
  0c16:1a                 eq? 
  0c17:30 0013            bnt code_0c2d 
  0c1a:76               push0 
  0c1b:45 02 00         callb procedure_0002 0 //  

  0c1e:38 00e4          pushi e4 // $e4 setHeading
  0c21:7a               push2 
  0c22:38 010e          pushi 10e // $10e description
  0c25:7c            pushSelf 
  0c26:81 00              lag  
  0c28:4a 08             send 8 

  0c2a:32 053c            jmp code_1169 

        code_0c2d
  0c2d:3c                 dup 
  0c2e:35 01              ldi 1 
  0c30:1a                 eq? 
  0c31:30 0010            bnt code_0c44 
  0c34:83 04              lal local4 
  0c36:30 0004            bnt code_0c3d 
  0c39:35 13              ldi 13 
  0c3b:65 0a             aTop state 

        code_0c3d
  0c3d:35 02              ldi 2 
  0c3f:65 10             aTop cycles 
  0c41:32 0525            jmp code_1169 

        code_0c44
  0c44:3c                 dup 
  0c45:35 02              ldi 2 
  0c47:1a                 eq? 
  0c48:30 0177            bnt code_0dc2 
  0c4b:39 20            pushi 20 // $20 state
  0c4d:76               push0 
  0c4e:39 43            pushi 43 // $43 at
  0c50:78               push1 
  0c51:39 0e            pushi e // $e lsLeft
  0c53:51 40            class Inv 
  0c55:4a 06             send 6 

  0c57:4a 04             send 4 

  0c59:36                push 
  0c5a:35 00              ldi 0 
  0c5c:1a                 eq? 
  0c5d:30 00d9            bnt code_0d39 
  0c60:c3 00              +al local0 
  0c62:36                push 
  0c63:3c                 dup 
  0c64:35 01              ldi 1 
  0c66:1a                 eq? 
  0c67:30 000f            bnt code_0c79 
  0c6a:39 03            pushi 3 // $3 y
  0c6c:89 00              lsg  
  0c6e:38 01fe          pushi 1fe // $1fe bust
  0c71:39 0d            pushi d // $d lsTop
  0c73:45 12 06         callb procedure_0012 6 //  

  0c76:32 00bc            jmp code_0d35 

        code_0c79
  0c79:3c                 dup 
  0c7a:35 02              ldi 2 
  0c7c:1a                 eq? 
  0c7d:30 000f            bnt code_0c8f 
  0c80:39 03            pushi 3 // $3 y
  0c82:89 00              lsg  
  0c84:38 01fe          pushi 1fe // $1fe bust
  0c87:39 0e            pushi e // $e lsLeft
  0c89:45 12 06         callb procedure_0012 6 //  

  0c8c:32 00a6            jmp code_0d35 

        code_0c8f
  0c8f:3c                 dup 
  0c90:35 03              ldi 3 
  0c92:1a                 eq? 
  0c93:30 000f            bnt code_0ca5 
  0c96:39 03            pushi 3 // $3 y
  0c98:89 00              lsg  
  0c9a:38 01fe          pushi 1fe // $1fe bust
  0c9d:39 0f            pushi f // $f lsBottom
  0c9f:45 12 06         callb procedure_0012 6 //  

  0ca2:32 0090            jmp code_0d35 

        code_0ca5
  0ca5:3c                 dup 
  0ca6:35 04              ldi 4 
  0ca8:1a                 eq? 
  0ca9:30 000f            bnt code_0cbb 
  0cac:39 03            pushi 3 // $3 y
  0cae:89 00              lsg  
  0cb0:38 01fe          pushi 1fe // $1fe bust
  0cb3:39 10            pushi 10 // $10 lsRight
  0cb5:45 12 06         callb procedure_0012 6 //  

  0cb8:32 007a            jmp code_0d35 

        code_0cbb
  0cbb:3c                 dup 
  0cbc:35 05              ldi 5 
  0cbe:1a                 eq? 
  0cbf:30 000f            bnt code_0cd1 
  0cc2:39 03            pushi 3 // $3 y
  0cc4:89 00              lsg  
  0cc6:38 01fe          pushi 1fe // $1fe bust
  0cc9:39 11            pushi 11 // $11 signal
  0ccb:45 12 06         callb procedure_0012 6 //  

  0cce:32 0064            jmp code_0d35 

        code_0cd1
  0cd1:3c                 dup 
  0cd2:35 06              ldi 6 
  0cd4:1a                 eq? 
  0cd5:30 000f            bnt code_0ce7 
  0cd8:39 03            pushi 3 // $3 y
  0cda:89 00              lsg  
  0cdc:38 01fe          pushi 1fe // $1fe bust
  0cdf:39 12            pushi 12 // $12 illegalBits
  0ce1:45 12 06         callb procedure_0012 6 //  

  0ce4:32 004e            jmp code_0d35 

        code_0ce7
  0ce7:3c                 dup 
  0ce8:35 07              ldi 7 
  0cea:1a                 eq? 
  0ceb:30 000f            bnt code_0cfd 
  0cee:39 03            pushi 3 // $3 y
  0cf0:89 00              lsg  
  0cf2:38 01fe          pushi 1fe // $1fe bust
  0cf5:39 13            pushi 13 // $13 brTop
  0cf7:45 12 06         callb procedure_0012 6 //  

  0cfa:32 0038            jmp code_0d35 

        code_0cfd
  0cfd:3c                 dup 
  0cfe:35 08              ldi 8 
  0d00:1a                 eq? 
  0d01:30 000f            bnt code_0d13 
  0d04:39 03            pushi 3 // $3 y
  0d06:89 00              lsg  
  0d08:38 01fe          pushi 1fe // $1fe bust
  0d0b:39 14            pushi 14 // $14 brLeft
  0d0d:45 12 06         callb procedure_0012 6 //  

  0d10:32 0022            jmp code_0d35 

        code_0d13
  0d13:3c                 dup 
  0d14:35 09              ldi 9 
  0d16:1a                 eq? 
  0d17:30 000f            bnt code_0d29 
  0d1a:39 03            pushi 3 // $3 y
  0d1c:89 00              lsg  
  0d1e:38 01fe          pushi 1fe // $1fe bust
  0d21:39 15            pushi 15 // $15 brBottom
  0d23:45 12 06         callb procedure_0012 6 //  

  0d26:32 000c            jmp code_0d35 

        code_0d29
  0d29:39 03            pushi 3 // $3 y
  0d2b:89 00              lsg  
  0d2d:38 01fe          pushi 1fe // $1fe bust
  0d30:39 16            pushi 16 // $16 brRight
  0d32:45 12 06         callb procedure_0012 6 //  


        code_0d35
  0d35:3a                toss 
  0d36:32 0082            jmp code_0dbb 

        code_0d39
  0d39:38 009b          pushi 9b // $9b owner
  0d3c:76               push0 
  0d3d:39 43            pushi 43 // $43 at
  0d3f:78               push1 
  0d40:39 0e            pushi e // $e lsLeft
  0d42:51 40            class Inv 
  0d44:4a 06             send 6 

  0d46:4a 04             send 4 

  0d48:36                push 
  0d49:34 01fe            ldi 1fe 
  0d4c:1a                 eq? 
  0d4d:30 000f            bnt code_0d5f 
  0d50:39 03            pushi 3 // $3 y
  0d52:89 00              lsg  
  0d54:38 01fe          pushi 1fe // $1fe bust
  0d57:39 17            pushi 17 // $17 name
  0d59:45 12 06         callb procedure_0012 6 //  

  0d5c:32 005c            jmp code_0dbb 

        code_0d5f
  0d5f:39 20            pushi 20 // $20 state
  0d61:76               push0 
  0d62:39 43            pushi 43 // $43 at
  0d64:78               push1 
  0d65:39 0e            pushi e // $e lsLeft
  0d67:51 40            class Inv 
  0d69:4a 06             send 6 

  0d6b:4a 04             send 4 

  0d6d:36                push 
  0d6e:35 04              ldi 4 
  0d70:1a                 eq? 
  0d71:30 000f            bnt code_0d83 
  0d74:39 03            pushi 3 // $3 y
  0d76:89 00              lsg  
  0d78:38 01fe          pushi 1fe // $1fe bust
  0d7b:39 18            pushi 18 // $18 key
  0d7d:45 12 06         callb procedure_0012 6 //  

  0d80:32 0038            jmp code_0dbb 

        code_0d83
  0d83:78               push1 
  0d84:7a               push2 
  0d85:45 06 02         callb procedure_0006 2 //  

  0d88:30 000f            bnt code_0d9a 
  0d8b:39 03            pushi 3 // $3 y
  0d8d:89 00              lsg  
  0d8f:38 01fe          pushi 1fe // $1fe bust
  0d92:39 19            pushi 19 // $19 time
  0d94:45 12 06         callb procedure_0012 6 //  

  0d97:32 0021            jmp code_0dbb 

        code_0d9a
  0d9a:39 20            pushi 20 // $20 state
  0d9c:76               push0 
  0d9d:39 43            pushi 43 // $43 at
  0d9f:78               push1 
  0da0:39 0e            pushi e // $e lsLeft
  0da2:51 40            class Inv 
  0da4:4a 06             send 6 

  0da6:4a 04             send 4 

  0da8:36                push 
  0da9:35 01              ldi 1 
  0dab:1a                 eq? 
  0dac:30 000c            bnt code_0dbb 
  0daf:39 03            pushi 3 // $3 y
  0db1:89 00              lsg  
  0db3:38 01fe          pushi 1fe // $1fe bust
  0db6:39 1a            pushi 1a // $1a text
  0db8:45 12 06         callb procedure_0012 6 //  


        code_0dbb
  0dbb:35 03              ldi 3 
  0dbd:65 10             aTop cycles 
  0dbf:32 03a7            jmp code_1169 

        code_0dc2
  0dc2:3c                 dup 
  0dc3:35 03              ldi 3 
  0dc5:1a                 eq? 
  0dc6:30 01cc            bnt code_0f95 
  0dc9:39 20            pushi 20 // $20 state
  0dcb:76               push0 
  0dcc:39 43            pushi 43 // $43 at
  0dce:78               push1 
  0dcf:39 0e            pushi e // $e lsLeft
  0dd1:51 40            class Inv 
  0dd3:4a 06             send 6 

  0dd5:4a 04             send 4 

  0dd7:36                push 
  0dd8:35 00              ldi 0 
  0dda:1a                 eq? 
  0ddb:30 0117            bnt code_0ef5 
  0dde:8b 00              lsl local0 
  0de0:3c                 dup 
  0de1:35 01              ldi 1 
  0de3:1a                 eq? 
  0de4:30 0013            bnt code_0dfa 
  0de7:39 04            pushi 4 // $4 x
  0de9:72 1c68          lofsa $1c68 // the maitre d'
  0dec:36                push 
  0ded:38 01fe          pushi 1fe // $1fe bust
  0df0:39 1b            pushi 1b // $1b elements
  0df2:39 6c            pushi 6c // $6c dispose
  0df4:45 12 08         callb procedure_0012 8 //  

  0df7:32 00f7            jmp code_0ef1 

        code_0dfa
  0dfa:3c                 dup 
  0dfb:35 02              ldi 2 
  0dfd:1a                 eq? 
  0dfe:30 0013            bnt code_0e14 
  0e01:39 04            pushi 4 // $4 x
  0e03:72 1c68          lofsa $1c68 // the maitre d'
  0e06:36                push 
  0e07:38 01fe          pushi 1fe // $1fe bust
  0e0a:39 1b            pushi 1b // $1b elements
  0e0c:39 6c            pushi 6c // $6c dispose
  0e0e:45 12 08         callb procedure_0012 8 //  

  0e11:32 00dd            jmp code_0ef1 

        code_0e14
  0e14:3c                 dup 
  0e15:35 03              ldi 3 
  0e17:1a                 eq? 
  0e18:30 0013            bnt code_0e2e 
  0e1b:39 04            pushi 4 // $4 x
  0e1d:72 1c68          lofsa $1c68 // the maitre d'
  0e20:36                push 
  0e21:38 01fe          pushi 1fe // $1fe bust
  0e24:39 1b            pushi 1b // $1b elements
  0e26:39 6c            pushi 6c // $6c dispose
  0e28:45 12 08         callb procedure_0012 8 //  

  0e2b:32 00c3            jmp code_0ef1 

        code_0e2e
  0e2e:3c                 dup 
  0e2f:35 04              ldi 4 
  0e31:1a                 eq? 
  0e32:30 0013            bnt code_0e48 
  0e35:39 04            pushi 4 // $4 x
  0e37:72 1c68          lofsa $1c68 // the maitre d'
  0e3a:36                push 
  0e3b:38 01fe          pushi 1fe // $1fe bust
  0e3e:39 1b            pushi 1b // $1b elements
  0e40:39 6c            pushi 6c // $6c dispose
  0e42:45 12 08         callb procedure_0012 8 //  

  0e45:32 00a9            jmp code_0ef1 

        code_0e48
  0e48:3c                 dup 
  0e49:35 05              ldi 5 
  0e4b:1a                 eq? 
  0e4c:30 0013            bnt code_0e62 
  0e4f:39 04            pushi 4 // $4 x
  0e51:72 1c68          lofsa $1c68 // the maitre d'
  0e54:36                push 
  0e55:38 01fe          pushi 1fe // $1fe bust
  0e58:39 1c            pushi 1c // $1c color
  0e5a:39 6c            pushi 6c // $6c dispose
  0e5c:45 12 08         callb procedure_0012 8 //  

  0e5f:32 008f            jmp code_0ef1 

        code_0e62
  0e62:3c                 dup 
  0e63:35 06              ldi 6 
  0e65:1a                 eq? 
  0e66:30 0013            bnt code_0e7c 
  0e69:39 04            pushi 4 // $4 x
  0e6b:72 1c68          lofsa $1c68 // the maitre d'
  0e6e:36                push 
  0e6f:38 01fe          pushi 1fe // $1fe bust
  0e72:39 1d            pushi 1d // $1d back
  0e74:39 6c            pushi 6c // $6c dispose
  0e76:45 12 08         callb procedure_0012 8 //  

  0e79:32 0075            jmp code_0ef1 

        code_0e7c
  0e7c:3c                 dup 
  0e7d:35 07              ldi 7 
  0e7f:1a                 eq? 
  0e80:30 0013            bnt code_0e96 
  0e83:39 04            pushi 4 // $4 x
  0e85:72 1c68          lofsa $1c68 // the maitre d'
  0e88:36                push 
  0e89:38 01fe          pushi 1fe // $1fe bust
  0e8c:39 1e            pushi 1e // $1e mode
  0e8e:39 6c            pushi 6c // $6c dispose
  0e90:45 12 08         callb procedure_0012 8 //  

  0e93:32 005b            jmp code_0ef1 

        code_0e96
  0e96:3c                 dup 
  0e97:35 08              ldi 8 
  0e99:1a                 eq? 
  0e9a:30 0013            bnt code_0eb0 
  0e9d:39 04            pushi 4 // $4 x
  0e9f:72 1c68          lofsa $1c68 // the maitre d'
  0ea2:36                push 
  0ea3:38 01fe          pushi 1fe // $1fe bust
  0ea6:39 1f            pushi 1f // $1f style
  0ea8:39 6c            pushi 6c // $6c dispose
  0eaa:45 12 08         callb procedure_0012 8 //  

  0ead:32 0041            jmp code_0ef1 

        code_0eb0
  0eb0:3c                 dup 
  0eb1:35 09              ldi 9 
  0eb3:1a                 eq? 
  0eb4:30 002a            bnt code_0ee1 
  0eb7:39 06            pushi 6 // $6 loop
  0eb9:72 1c68          lofsa $1c68 // the maitre d'
  0ebc:36                push 
  0ebd:38 01fe          pushi 1fe // $1fe bust
  0ec0:39 20            pushi 20 // $20 state
  0ec2:39 6c            pushi 6c // $6c dispose
  0ec4:38 008b          pushi 8b // $8b caller
  0ec7:7c            pushSelf 
  0ec8:45 12 0c         callb procedure_0012 c //  

  0ecb:35 01              ldi 1 
  0ecd:a3 04              sal local4 
  0ecf:39 20            pushi 20 // $20 state
  0ed1:78               push1 
  0ed2:78               push1 
  0ed3:39 43            pushi 43 // $43 at
  0ed5:78               push1 
  0ed6:39 0e            pushi e // $e lsLeft
  0ed8:51 40            class Inv 
  0eda:4a 06             send 6 

  0edc:4a 06             send 6 

  0ede:32 0010            jmp code_0ef1 

        code_0ee1
  0ee1:39 04            pushi 4 // $4 x
  0ee3:72 1c68          lofsa $1c68 // the maitre d'
  0ee6:36                push 
  0ee7:38 01fe          pushi 1fe // $1fe bust
  0eea:39 21            pushi 21 // $21 font
  0eec:39 6c            pushi 6c // $6c dispose
  0eee:45 12 08         callb procedure_0012 8 //  


        code_0ef1
  0ef1:3a                toss 
  0ef2:32 008e            jmp code_0f83 

        code_0ef5
  0ef5:38 009b          pushi 9b // $9b owner
  0ef8:76               push0 
  0ef9:39 43            pushi 43 // $43 at
  0efb:78               push1 
  0efc:39 0e            pushi e // $e lsLeft
  0efe:51 40            class Inv 
  0f00:4a 06             send 6 

  0f02:4a 04             send 4 

  0f04:36                push 
  0f05:34 01fe            ldi 1fe 
  0f08:1a                 eq? 
  0f09:30 0013            bnt code_0f1f 
  0f0c:39 04            pushi 4 // $4 x
  0f0e:72 1c68          lofsa $1c68 // the maitre d'
  0f11:36                push 
  0f12:38 01fe          pushi 1fe // $1fe bust
  0f15:39 22            pushi 22 // $22 type
  0f17:39 6c            pushi 6c // $6c dispose
  0f19:45 12 08         callb procedure_0012 8 //  

  0f1c:32 0064            jmp code_0f83 

        code_0f1f
  0f1f:39 20            pushi 20 // $20 state
  0f21:76               push0 
  0f22:39 43            pushi 43 // $43 at
  0f24:78               push1 
  0f25:39 0e            pushi e // $e lsLeft
  0f27:51 40            class Inv 
  0f29:4a 06             send 6 

  0f2b:4a 04             send 4 

  0f2d:36                push 
  0f2e:35 04              ldi 4 
  0f30:1a                 eq? 
  0f31:30 0013            bnt code_0f47 
  0f34:39 04            pushi 4 // $4 x
  0f36:72 1c68          lofsa $1c68 // the maitre d'
  0f39:36                push 
  0f3a:38 01fe          pushi 1fe // $1fe bust
  0f3d:39 08            pushi 8 // $8 underBits
  0f3f:39 6c            pushi 6c // $6c dispose
  0f41:45 12 08         callb procedure_0012 8 //  

  0f44:32 003c            jmp code_0f83 

        code_0f47
  0f47:78               push1 
  0f48:7a               push2 
  0f49:45 06 02         callb procedure_0006 2 //  

  0f4c:30 000f            bnt code_0f5e 
  0f4f:38 008e          pushi 8e // $8e setScript
  0f52:78               push1 
  0f53:72 11f8          lofsa $11f8 // sDoubleTalk
  0f56:36                push 
  0f57:81 02              lag  
  0f59:4a 06             send 6 

  0f5b:32 0025            jmp code_0f83 

        code_0f5e
  0f5e:39 20            pushi 20 // $20 state
  0f60:76               push0 
  0f61:39 43            pushi 43 // $43 at
  0f63:78               push1 
  0f64:39 0e            pushi e // $e lsLeft
  0f66:51 40            class Inv 
  0f68:4a 06             send 6 

  0f6a:4a 04             send 4 

  0f6c:36                push 
  0f6d:35 01              ldi 1 
  0f6f:1a                 eq? 
  0f70:30 0010            bnt code_0f83 
  0f73:39 04            pushi 4 // $4 x
  0f75:72 1c68          lofsa $1c68 // the maitre d'
  0f78:36                push 
  0f79:38 01fe          pushi 1fe // $1fe bust
  0f7c:39 23            pushi 23 // $23 window
  0f7e:39 6c            pushi 6c // $6c dispose
  0f80:45 12 08         callb procedure_0012 8 //  


        code_0f83
  0f83:83 04              lal local4 
  0f85:18                 not 
  0f86:30 01e0            bnt code_1169 
  0f89:76               push0 
  0f8a:45 03 00         callb procedure_0003 0 //  

  0f8d:39 6c            pushi 6c // $6c dispose
  0f8f:76               push0 
  0f90:54 04             self 4 

  0f92:32 01d4            jmp code_1169 

        code_0f95
  0f95:3c                 dup 
  0f96:35 04              ldi 4 
  0f98:1a                 eq? 
  0f99:30 0024            bnt code_0fc0 
  0f9c:35 13              ldi 13 
  0f9e:65 0a             aTop state 
  0fa0:35 02              ldi 2 
  0fa2:65 10             aTop cycles 
  0fa4:7a               push2 
  0fa5:39 03            pushi 3 // $3 y
  0fa7:39 6a            pushi 6a // $6a new
  0fa9:45 0a 04         callb procedure_000a 4 //  

  0fac:39 05            pushi 5 // $5 view
  0fae:38 01fe          pushi 1fe // $1fe bust
  0fb1:39 24            pushi 24 // $24 cursor
  0fb3:39 43            pushi 43 // $43 at
  0fb5:39 ff            pushi ff // $ff syncNum
  0fb7:38 00b9          pushi b9 // $b9 bottom
  0fba:45 0e 0a         callb procedure_000e a //  

  0fbd:32 01a9            jmp code_1169 

        code_0fc0
  0fc0:3c                 dup 
  0fc1:35 14              ldi 14 
  0fc3:1a                 eq? 
  0fc4:30 0050            bnt code_1017 
  0fc7:39 6b            pushi 6b // $6b init
  0fc9:76               push0 
  0fca:39 05            pushi 5 // $5 view
  0fcc:78               push1 
  0fcd:38 0203          pushi 203 // $203 useFrame
  0fd0:38 0096          pushi 96 // $96 setCycle
  0fd3:78               push1 
  0fd4:51 18            class Walk 
  0fd6:36                push 
  0fd7:38 00a2          pushi a2 // $a2 setLoop
  0fda:78               push1 
  0fdb:39 ff            pushi ff // $ff syncNum
  0fdd:38 0121          pushi 121 // $121 ignoreActors
  0fe0:78               push1 
  0fe1:78               push1 
  0fe2:39 12            pushi 12 // $12 illegalBits
  0fe4:78               push1 
  0fe5:76               push0 
  0fe6:38 011b          pushi 11b // $11b setMotion
  0fe9:39 04            pushi 4 // $4 x
  0feb:51 1e            class MoveTo 
  0fed:36                push 
  0fee:38 0085          pushi 85 // $85 seconds
  0ff1:39 56            pushi 56 // $56 parseLang
  0ff3:7c            pushSelf 
  0ff4:72 1a46          lofsa $1a46 // maitreD
  0ff7:4a 2e             send 2e 

  0ff9:38 011b          pushi 11b // $11b setMotion
  0ffc:39 03            pushi 3 // $3 y
  0ffe:51 1e            class MoveTo 
  1000:36                push 
  1001:38 0099          pushi 99 // $99 timeLeft
  1004:39 03            pushi 3 // $3 y
  1006:76               push0 
  1007:81 00              lag  
  1009:4a 04             send 4 

  100b:36                push 
  100c:81 00              lag  
  100e:4a 0a             send a 

  1010:35 00              ldi 0 
  1012:a3 04              sal local4 
  1014:32 0152            jmp code_1169 

        code_1017
  1017:3c                 dup 
  1018:35 15              ldi 15 
  101a:1a                 eq? 
  101b:30 003e            bnt code_105c 
  101e:39 2a            pushi 2a // $2a play
  1020:76               push0 
  1021:72 24ae          lofsa $24ae // typingFX
  1024:4a 04             send 4 

  1026:39 05            pushi 5 // $5 view
  1028:78               push1 
  1029:38 0200          pushi 200 // $200 mouth
  102c:38 00a2          pushi a2 // $a2 setLoop
  102f:78               push1 
  1030:78               push1 
  1031:38 0096          pushi 96 // $96 setCycle
  1034:78               push1 
  1035:51 17            class Fwd 
  1037:36                push 
  1038:72 1a46          lofsa $1a46 // maitreD
  103b:4a 12             send 12 

  103d:39 6b            pushi 6b // $6b init
  103f:76               push0 
  1040:72 13f6          lofsa $13f6 // screen
  1043:4a 04             send 4 

  1045:38 011b          pushi 11b // $11b setMotion
  1048:78               push1 
  1049:76               push0 
  104a:38 00e4          pushi e4 // $e4 setHeading
  104d:78               push1 
  104e:38 013b          pushi 13b // $13b controls
  1051:81 00              lag  
  1053:4a 0c             send c 

  1055:35 03              ldi 3 
  1057:65 12             aTop seconds 
  1059:32 010d            jmp code_1169 

        code_105c
  105c:3c                 dup 
  105d:35 16              ldi 16 
  105f:1a                 eq? 
  1060:30 0026            bnt code_1089 
  1063:38 009c          pushi 9c // $9c stop
  1066:76               push0 
  1067:72 24ae          lofsa $24ae // typingFX
  106a:4a 04             send 4 

  106c:38 0120          pushi 120 // $120 setCel
  106f:78               push1 
  1070:76               push0 
  1071:72 1a46          lofsa $1a46 // maitreD
  1074:4a 06             send 6 

  1076:38 0096          pushi 96 // $96 setCycle
  1079:78               push1 
  107a:51 17            class Fwd 
  107c:36                push 
  107d:72 13f6          lofsa $13f6 // screen
  1080:4a 06             send 6 

  1082:35 03              ldi 3 
  1084:65 12             aTop seconds 
  1086:32 00e0            jmp code_1169 

        code_1089
  1089:3c                 dup 
  108a:35 17              ldi 17 
  108c:1a                 eq? 
  108d:30 0025            bnt code_10b5 
  1090:39 2a            pushi 2a // $2a play
  1092:76               push0 
  1093:72 24ae          lofsa $24ae // typingFX
  1096:4a 04             send 4 

  1098:38 0096          pushi 96 // $96 setCycle
  109b:78               push1 
  109c:51 17            class Fwd 
  109e:36                push 
  109f:72 1a46          lofsa $1a46 // maitreD
  10a2:4a 06             send 6 

  10a4:38 0120          pushi 120 // $120 setCel
  10a7:78               push1 
  10a8:76               push0 
  10a9:72 13f6          lofsa $13f6 // screen
  10ac:4a 06             send 6 

  10ae:35 03              ldi 3 
  10b0:65 12             aTop seconds 
  10b2:32 00b4            jmp code_1169 

        code_10b5
  10b5:3c                 dup 
  10b6:35 18              ldi 18 
  10b8:1a                 eq? 
  10b9:30 002e            bnt code_10ea 
  10bc:38 009c          pushi 9c // $9c stop
  10bf:76               push0 
  10c0:72 24ae          lofsa $24ae // typingFX
  10c3:4a 04             send 4 

  10c5:38 0120          pushi 120 // $120 setCel
  10c8:78               push1 
  10c9:76               push0 
  10ca:72 1a46          lofsa $1a46 // maitreD
  10cd:4a 06             send 6 

  10cf:39 6b            pushi 6b // $6b init
  10d1:76               push0 
  10d2:38 0096          pushi 96 // $96 setCycle
  10d5:7a               push2 
  10d6:51 1a            class End 
  10d8:36                push 
  10d9:7c            pushSelf 
  10da:72 17e4          lofsa $17e4 // tape
  10dd:4a 0c             send c 

  10df:39 6c            pushi 6c // $6c dispose
  10e1:76               push0 
  10e2:72 13f6          lofsa $13f6 // screen
  10e5:4a 04             send 4 

  10e7:32 007f            jmp code_1169 

        code_10ea
  10ea:3c                 dup 
  10eb:35 19              ldi 19 
  10ed:1a                 eq? 
  10ee:30 0017            bnt code_1108 
  10f1:39 06            pushi 6 // $6 loop
  10f3:72 1c68          lofsa $1c68 // the maitre d'
  10f6:36                push 
  10f7:38 01fe          pushi 1fe // $1fe bust
  10fa:39 25            pushi 25 // $25 max
  10fc:39 6c            pushi 6c // $6c dispose
  10fe:38 008b          pushi 8b // $8b caller
  1101:7c            pushSelf 
  1102:45 12 0c         callb procedure_0012 c //  

  1105:32 0061            jmp code_1169 

        code_1108
  1108:3c                 dup 
  1109:35 1a              ldi 1a 
  110b:1a                 eq? 
  110c:30 0028            bnt code_1137 
  110f:39 05            pushi 5 // $5 view
  1111:78               push1 
  1112:38 0203          pushi 203 // $203 useFrame
  1115:38 0096          pushi 96 // $96 setCycle
  1118:78               push1 
  1119:51 18            class Walk 
  111b:36                push 
  111c:38 00a2          pushi a2 // $a2 setLoop
  111f:78               push1 
  1120:39 ff            pushi ff // $ff syncNum
  1122:38 011b          pushi 11b // $11b setMotion
  1125:39 04            pushi 4 // $4 x
  1127:51 1e            class MoveTo 
  1129:36                push 
  112a:39 46            pushi 46 // $46 width
  112c:39 5a            pushi 5a // $5a points
  112e:7c            pushSelf 
  112f:72 1a46          lofsa $1a46 // maitreD
  1132:4a 1e             send 1e 

  1134:32 0032            jmp code_1169 

        code_1137
  1137:3c                 dup 
  1138:35 1b              ldi 1b 
  113a:1a                 eq? 
  113b:30 002b            bnt code_1169 
  113e:39 05            pushi 5 // $5 view
  1140:78               push1 
  1141:38 0200          pushi 200 // $200 mouth
  1144:38 00a2          pushi a2 // $a2 setLoop
  1147:78               push1 
  1148:76               push0 
  1149:72 1a46          lofsa $1a46 // maitreD
  114c:4a 0c             send c 

  114e:38 009b          pushi 9b // $9b owner
  1151:78               push1 
  1152:38 01fe          pushi 1fe // $1fe bust
  1155:39 43            pushi 43 // $43 at
  1157:78               push1 
  1158:39 0e            pushi e // $e lsLeft
  115a:51 40            class Inv 
  115c:4a 06             send 6 

  115e:4a 06             send 6 

  1160:76               push0 
  1161:45 03 00         callb procedure_0003 0 //  

  1164:39 6c            pushi 6c // $6c dispose
  1166:76               push0 
  1167:54 04             self 4 


        code_1169
  1169:3a                toss 
  116a:48                 ret 
  116b:00                bnot 
    )

)

// 11f2
(instance sDoubleTalk of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_11a6
  11a6:87 01              lap param1 
  11a8:65 0a             aTop state 
  11aa:36                push 
  11ab:3c                 dup 
  11ac:35 00              ldi 0 
  11ae:1a                 eq? 
  11af:30 0017            bnt code_11c9 
  11b2:39 06            pushi 6 // $6 loop
  11b4:72 1c68          lofsa $1c68 // the maitre d'
  11b7:36                push 
  11b8:38 01fe          pushi 1fe // $1fe bust
  11bb:39 26            pushi 26 // $26 mark
  11bd:39 6c            pushi 6c // $6c dispose
  11bf:38 008b          pushi 8b // $8b caller
  11c2:7c            pushSelf 
  11c3:45 12 0c         callb procedure_0012 c //  

  11c6:32 0020            jmp code_11e9 

        code_11c9
  11c9:3c                 dup 
  11ca:35 01              ldi 1 
  11cc:1a                 eq? 
  11cd:30 0019            bnt code_11e9 
  11d0:39 04            pushi 4 // $4 x
  11d2:72 1c68          lofsa $1c68 // the maitre d'
  11d5:36                push 
  11d6:38 01fe          pushi 1fe // $1fe bust
  11d9:39 27            pushi 27 // $27 who
  11db:39 6c            pushi 6c // $6c dispose
  11dd:45 12 08         callb procedure_0012 8 //  

  11e0:76               push0 
  11e1:45 03 00         callb procedure_0003 0 //  

  11e4:39 6c            pushi 6c // $6c dispose
  11e6:76               push0 
  11e7:54 04             self 4 


        code_11e9
  11e9:3a                toss 
  11ea:48                 ret 
  11eb:00                bnot 
    )

)

// 12be
(instance sGetTape of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1226
  1226:87 01              lap param1 
  1228:65 0a             aTop state 
  122a:36                push 
  122b:3c                 dup 
  122c:35 00              ldi 0 
  122e:1a                 eq? 
  122f:30 002f            bnt code_1261 
  1232:39 05            pushi 5 // $5 view
  1234:78               push1 
  1235:38 01ff          pushi 1ff // $1ff eyes
  1238:38 0120          pushi 120 // $120 setCel
  123b:78               push1 
  123c:76               push0 
  123d:38 00a2          pushi a2 // $a2 setLoop
  1240:78               push1 
  1241:76               push0 
  1242:38 00db          pushi db // $db cycleSpeed
  1245:78               push1 
  1246:39 06            pushi 6 // $6 loop
  1248:38 0096          pushi 96 // $96 setCycle
  124b:39 04            pushi 4 // $4 x
  124d:51 19            class CT 
  124f:36                push 
  1250:39 06            pushi 6 // $6 loop
  1252:78               push1 
  1253:7c            pushSelf 
  1254:38 0147          pushi 147 // $147 get
  1257:78               push1 
  1258:39 0e            pushi e // $e lsLeft
  125a:81 00              lag  
  125c:4a 2a             send 2a 

  125e:32 0054            jmp code_12b5 

        code_1261
  1261:3c                 dup 
  1262:35 01              ldi 1 
  1264:1a                 eq? 
  1265:30 001f            bnt code_1287 
  1268:39 2a            pushi 2a // $2a play
  126a:76               push0 
  126b:72 24e4          lofsa $24e4 // paperRip
  126e:4a 04             send 4 

  1270:38 0096          pushi 96 // $96 setCycle
  1273:7a               push2 
  1274:51 1a            class End 
  1276:36                push 
  1277:7c            pushSelf 
  1278:81 00              lag  
  127a:4a 08             send 8 

  127c:39 6c            pushi 6c // $6c dispose
  127e:76               push0 
  127f:72 17e4          lofsa $17e4 // tape
  1282:4a 04             send 4 

  1284:32 002e            jmp code_12b5 

        code_1287
  1287:3c                 dup 
  1288:35 02              ldi 2 
  128a:1a                 eq? 
  128b:30 0027            bnt code_12b5 
  128e:38 00a2          pushi a2 // $a2 setLoop
  1291:78               push1 
  1292:78               push1 
  1293:38 020a          pushi 20a // $20a normalize
  1296:76               push0 
  1297:81 00              lag  
  1299:4a 0a             send a 

  129b:7a               push2 
  129c:39 04            pushi 4 // $4 x
  129e:39 6d            pushi 6d // $6d showStr
  12a0:45 0a 04         callb procedure_000a 4 //  

  12a3:7a               push2 
  12a4:38 01fe          pushi 1fe // $1fe bust
  12a7:39 28            pushi 28 // $28 message
  12a9:45 0e 04         callb procedure_000e 4 //  

  12ac:76               push0 
  12ad:45 03 00         callb procedure_0003 0 //  

  12b0:39 6c            pushi 6c // $6c dispose
  12b2:76               push0 
  12b3:54 04             self 4 


        code_12b5
  12b5:3a                toss 
  12b6:48                 ret 
  12b7:00                bnot 
    )

)

// 1390
(instance phone of View
    (properties
        x $3b
        y $69
        z $14
        heading $0
        noun $0
        nsTop $47
        nsLeft $32
        nsBottom $55
        nsRight $48
        description $2660
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $51
        approachY $60
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $1fe
        loop $4
        cel $0
        priority $5
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_12f2
  12f2:8f 01              lsp param1 
  12f4:3c                 dup 
  12f5:35 02              ldi 2 
  12f7:1a                 eq? 
  12f8:30 0021            bnt code_131c 
  12fb:78               push1 
  12fc:39 10            pushi 10 // $10 lsRight
  12fe:45 06 02         callb procedure_0006 2 //  

  1301:30 000c            bnt code_1310 
  1304:7a               push2 
  1305:38 01fe          pushi 1fe // $1fe bust
  1308:39 29            pushi 29 // $29 edit
  130a:45 0e 04         callb procedure_000e 4 //  

  130d:32 0078            jmp code_1388 

        code_1310
  1310:7a               push2 
  1311:38 01fe          pushi 1fe // $1fe bust
  1314:39 2a            pushi 2a // $2a play
  1316:45 0e 04         callb procedure_000e 4 //  

  1319:32 006c            jmp code_1388 

        code_131c
  131c:3c                 dup 
  131d:35 05              ldi 5 
  131f:1a                 eq? 
  1320:30 000d            bnt code_1330 
  1323:38 010c          pushi 10c // $10c doVerb
  1326:78               push1 
  1327:39 03            pushi 3 // $3 y
  1329:59 03            &rest 3 
  132b:54 06             self 6 

  132d:32 0058            jmp code_1388 

        code_1330
  1330:3c                 dup 
  1331:35 03              ldi 3 
  1333:1a                 eq? 
  1334:30 0044            bnt code_137b 
  1337:78               push1 
  1338:78               push1 
  1339:45 06 02         callb procedure_0006 2 //  

  133c:30 000c            bnt code_134b 
  133f:7a               push2 
  1340:38 01fe          pushi 1fe // $1fe bust
  1343:39 2b            pushi 2b // $2b number
  1345:45 0e 04         callb procedure_000e 4 //  

  1348:32 003d            jmp code_1388 

        code_134b
  134b:78               push1 
  134c:39 10            pushi 10 // $10 lsRight
  134e:45 06 02         callb procedure_0006 2 //  

  1351:30 000f            bnt code_1363 
  1354:38 008e          pushi 8e // $8e setScript
  1357:78               push1 
  1358:72 0b5c          lofsa $0b5c // sPhone
  135b:36                push 
  135c:81 02              lag  
  135e:4a 06             send 6 

  1360:32 0025            jmp code_1388 

        code_1363
  1363:39 03            pushi 3 // $3 y
  1365:89 00              lsg  
  1367:38 01fe          pushi 1fe // $1fe bust
  136a:39 2c            pushi 2c // $2c nodePtr
  136c:45 12 06         callb procedure_0012 6 //  

  136f:7a               push2 
  1370:38 01fe          pushi 1fe // $1fe bust
  1373:39 2d            pushi 2d // $2d client
  1375:45 0e 04         callb procedure_000e 4 //  

  1378:32 000d            jmp code_1388 

        code_137b
  137b:38 010c          pushi 10c // $10c doVerb
  137e:7a               push2 
  137f:8f 01              lsp param1 
  1381:8f 02              lsp param2 
  1383:59 03            &rest 3 
  1385:57 2e 08         super View 8 


        code_1388
  1388:3a                toss 
  1389:48                 ret 
    )

)

// 13f0
(instance screen of Prop
    (properties
        x $7b
        y $2e
        z $0
        heading $0
        noun $0
        nsTop $28
        nsLeft $6e
        nsBottom $31
        nsRight $82
        description $2674
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $1fe
        loop $2
        cel $0
        priority $f
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 14a8
(instance woman of View
    (properties
        x $50
        y $6a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2691
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2698
        yStep $2
        view $201
        loop $0
        cel $0
        priority $7
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_1454
  1454:8f 01              lsp param1 
  1456:3c                 dup 
  1457:35 03              ldi 3 
  1459:1a                 eq? 
  145a:30 0018            bnt code_1475 
  145d:39 03            pushi 3 // $3 y
  145f:89 00              lsg  
  1461:38 01fe          pushi 1fe // $1fe bust
  1464:39 2c            pushi 2c // $2c nodePtr
  1466:45 12 06         callb procedure_0012 6 //  

  1469:7a               push2 
  146a:38 01fe          pushi 1fe // $1fe bust
  146d:39 2e            pushi 2e // $2e dx
  146f:45 0e 04         callb procedure_000e 4 //  

  1472:32 002a            jmp code_149f 

        code_1475
  1475:3c                 dup 
  1476:35 05              ldi 5 
  1478:1a                 eq? 
  1479:30 0018            bnt code_1494 
  147c:39 03            pushi 3 // $3 y
  147e:89 00              lsg  
  1480:38 01fe          pushi 1fe // $1fe bust
  1483:39 2f            pushi 2f // $2f dy
  1485:45 12 06         callb procedure_0012 6 //  

  1488:7a               push2 
  1489:38 01fe          pushi 1fe // $1fe bust
  148c:39 2e            pushi 2e // $2e dx
  148e:45 0e 04         callb procedure_000e 4 //  

  1491:32 000b            jmp code_149f 

        code_1494
  1494:38 010c          pushi 10c // $10c doVerb
  1497:78               push1 
  1498:8f 01              lsp param1 
  149a:59 02            &rest 2 
  149c:57 2e 06         super View 6 


        code_149f
  149f:3a                toss 
  14a0:48                 ret 
  14a1:00                bnot 
    )

)

// 1508
(instance womansMouth of Prop
    (properties
        x $4a
        y $4b
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $26fa
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $201
        loop $1
        cel $0
        priority $7
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 16a0
(instance musicBox of Prop
    (properties
        x $27
        y $bd
        z $0
        heading $0
        noun $0
        nsTop $ad
        nsLeft $13
        nsBottom $bd
        nsRight $48
        description $2714
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $3a
        approachY $ba
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $202
        loop $0
        cel $0
        priority $f
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1583
  1583:8f 01              lsp param1 
  1585:3c                 dup 
  1586:35 02              ldi 2 
  1588:1a                 eq? 
  1589:30 0036            bnt code_15c2 
  158c:7a               push2 
  158d:38 01fe          pushi 1fe // $1fe bust
  1590:39 30            pushi 30 // $30 b-moveCnt
  1592:45 0e 04         callb procedure_000e 4 //  

  1595:38 00d5          pushi d5 // $d5 has
  1598:78               push1 
  1599:39 0e            pushi e // $e lsLeft
  159b:81 00              lag  
  159d:4a 06             send 6 

  159f:30 0014            bnt code_15b6 
  15a2:39 05            pushi 5 // $5 view
  15a4:38 01fe          pushi 1fe // $1fe bust
  15a7:39 31            pushi 31 // $31 b-i1
  15a9:39 43            pushi 43 // $43 at
  15ab:39 ff            pushi ff // $ff syncNum
  15ad:38 00b9          pushi b9 // $b9 bottom
  15b0:45 0e 0a         callb procedure_000e a //  

  15b3:32 00e1            jmp code_1697 

        code_15b6
  15b6:7a               push2 
  15b7:38 01fe          pushi 1fe // $1fe bust
  15ba:39 32            pushi 32 // $32 b-i2
  15bc:45 0e 04         callb procedure_000e 4 //  

  15bf:32 00d5            jmp code_1697 

        code_15c2
  15c2:3c                 dup 
  15c3:35 03              ldi 3 
  15c5:1a                 eq? 
  15c6:30 002b            bnt code_15f4 
  15c9:39 2a            pushi 2a // $2a play
  15cb:78               push1 
  15cc:7c            pushSelf 
  15cd:72 2478          lofsa $2478 // musicBoxFX
  15d0:4a 06             send 6 

  15d2:38 009f          pushi 9f // $9f fade
  15d5:39 04            pushi 4 // $4 x
  15d7:39 50            pushi 50 // $50 title
  15d9:39 0a            pushi a // $a nsLeft
  15db:3c                 dup 
  15dc:76               push0 
  15dd:81 66              lag  
  15df:4a 0c             send c 

  15e1:39 05            pushi 5 // $5 view
  15e3:38 01fe          pushi 1fe // $1fe bust
  15e6:39 33            pushi 33 // $33 b-di
  15e8:39 43            pushi 43 // $43 at
  15ea:39 64            pushi 64 // $64 moveDone
  15ec:39 0a            pushi a // $a nsLeft
  15ee:45 0e 0a         callb procedure_000e a //  

  15f1:32 00a3            jmp code_1697 

        code_15f4
  15f4:3c                 dup 
  15f5:35 05              ldi 5 
  15f7:1a                 eq? 
  15f8:30 000c            bnt code_1607 
  15fb:7a               push2 
  15fc:38 01fe          pushi 1fe // $1fe bust
  15ff:39 34            pushi 34 // $34 b-xAxis
  1601:45 0e 04         callb procedure_000e 4 //  

  1604:32 0090            jmp code_1697 

        code_1607
  1607:3c                 dup 
  1608:35 04              ldi 4 
  160a:1a                 eq? 
  160b:30 007c            bnt code_168a 
  160e:8f 02              lsp param2 
  1610:3c                 dup 
  1611:35 0e              ldi e 
  1613:1a                 eq? 
  1614:30 0062            bnt code_1679 
  1617:39 20            pushi 20 // $20 state
  1619:76               push0 
  161a:39 43            pushi 43 // $43 at
  161c:78               push1 
  161d:39 0e            pushi e // $e lsLeft
  161f:51 40            class Inv 
  1621:4a 06             send 6 

  1623:4a 04             send 4 

  1625:36                push 
  1626:35 01              ldi 1 
  1628:1e                 gt? 
  1629:18                 not 
  162a:30 0040            bnt code_166d 
  162d:38 009f          pushi 9f // $9f fade
  1630:39 04            pushi 4 // $4 x
  1632:39 50            pushi 50 // $50 title
  1634:39 0a            pushi a // $a nsLeft
  1636:3c                 dup 
  1637:76               push0 
  1638:81 66              lag  
  163a:4a 0c             send c 

  163c:39 2a            pushi 2a // $2a play
  163e:78               push1 
  163f:7c            pushSelf 
  1640:72 2478          lofsa $2478 // musicBoxFX
  1643:4a 06             send 6 

  1645:39 20            pushi 20 // $20 state
  1647:78               push1 
  1648:39 03            pushi 3 // $3 y
  164a:39 43            pushi 43 // $43 at
  164c:78               push1 
  164d:39 0e            pushi e // $e lsLeft
  164f:51 40            class Inv 
  1651:4a 06             send 6 

  1653:4a 06             send 6 

  1655:7a               push2 
  1656:38 01fe          pushi 1fe // $1fe bust
  1659:39 35            pushi 35 // $35 b-incr
  165b:45 0e 04         callb procedure_000e 4 //  

  165e:38 008e          pushi 8e // $8e setScript
  1661:78               push1 
  1662:72 0a20          lofsa $0a20 // sMusicBox
  1665:36                push 
  1666:81 02              lag  
  1668:4a 06             send 6 

  166a:32 0019            jmp code_1686 

        code_166d
  166d:7a               push2 
  166e:38 01fe          pushi 1fe // $1fe bust
  1671:39 36            pushi 36 // $36 xStep
  1673:45 0e 04         callb procedure_000e 4 //  

  1676:32 000d            jmp code_1686 

        code_1679
  1679:38 010c          pushi 10c // $10c doVerb
  167c:7a               push2 
  167d:8f 01              lsp param1 
  167f:8f 02              lsp param2 
  1681:59 03            &rest 3 
  1683:57 2f 08         super Prop 8 


        code_1686
  1686:3a                toss 
  1687:32 000d            jmp code_1697 

        code_168a
  168a:38 010c          pushi 10c // $10c doVerb
  168d:7a               push2 
  168e:8f 01              lsp param1 
  1690:8f 02              lsp param2 
  1692:59 03            &rest 3 
  1694:57 2f 08         super Prop 8 


        code_1697
  1697:3a                toss 
  1698:48                 ret 
  1699:00                bnot 
    )

    (method (cue) // method_156c
  156c:38 008d          pushi 8d // $8d cue
  156f:76               push0 
  1570:57 2f 04         super Prop 4 

  1573:38 009f          pushi 9f // $9f fade
  1576:39 04            pushi 4 // $4 x
  1578:39 7f            pushi 7f // $7f addAfter
  157a:39 0a            pushi a // $a nsLeft
  157c:3c                 dup 
  157d:76               push0 
  157e:81 66              lag  
  1580:4a 0c             send c 

  1582:48                 ret 
    )

)

// 170e
(instance musicBoxCloseUp of Prop
    (properties
        x $47
        y $ae
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $1ff
        loop $1
        cel $0
        priority $f
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 17de
(instance tape of Prop
    (properties
        x $70
        y $3b
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $273b
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $75
        approachY $52
        approachDist $0
        _approachVerbs $6789
        lookStr $2750
        yStep $2
        view $1fe
        loop $3
        cel $0
        priority $3
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (init) // method_1772
  1772:39 6b            pushi 6b // $6b init
  1774:76               push0 
  1775:57 2f 04         super Prop 4 

  1778:38 0119          pushi 119 // $119 approachVerbs
  177b:7a               push2 
  177c:39 03            pushi 3 // $3 y
  177e:39 04            pushi 4 // $4 x
  1780:54 08             self 8 

  1782:38 0111          pushi 111 // $111 approachX
  1785:78               push1 
  1786:67 22             pTos approachX 
  1788:38 0112          pushi 112 // $112 approachY
  178b:78               push1 
  178c:67 24             pTos approachY 
  178e:72 1ed6          lofsa $1ed6 // tapeReader
  1791:4a 0c             send c 

  1793:48                 ret 
    )

    (method (dispose) // method_1794
  1794:39 6c            pushi 6c // $6c dispose
  1796:76               push0 
  1797:57 2f 04         super Prop 4 

  179a:38 0111          pushi 111 // $111 approachX
  179d:78               push1 
  179e:38 008b          pushi 8b // $8b caller
  17a1:38 0112          pushi 112 // $112 approachY
  17a4:78               push1 
  17a5:39 4d            pushi 4d // $4d value
  17a7:72 1ed6          lofsa $1ed6 // tapeReader
  17aa:4a 0c             send c 

  17ac:48                 ret 
    )

    (method (doVerb) // method_17ad
  17ad:8f 01              lsp param1 
  17af:3c                 dup 
  17b0:35 03              ldi 3 
  17b2:1a                 eq? 
  17b3:30 0013            bnt code_17c9 
  17b6:76               push0 
  17b7:45 02 00         callb procedure_0002 0 //  

  17ba:38 008e          pushi 8e // $8e setScript
  17bd:78               push1 
  17be:72 12c4          lofsa $12c4 // sGetTape
  17c1:36                push 
  17c2:81 02              lag  
  17c4:4a 06             send 6 

  17c6:32 000d            jmp code_17d6 

        code_17c9
  17c9:38 010c          pushi 10c // $10c doVerb
  17cc:7a               push2 
  17cd:8f 01              lsp param1 
  17cf:8f 02              lsp param2 
  17d1:59 03            &rest 3 
  17d3:57 2f 08         super Prop 8 


        code_17d6
  17d6:3a                toss 
  17d7:48                 ret 
    )

)

// 1a40
(instance maitreD of Actor
    (properties
        x $46
        y $5a
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $27dc
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $67
        approachY $59
        approachDist $0
        _approachVerbs $6789
        lookStr $27ea
        yStep $2
        view $200
        loop $0
        cel $0
        priority $4
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (doVerb) // method_1867
  1867:8f 01              lsp param1 
  1869:3c                 dup 
  186a:35 03              ldi 3 
  186c:1a                 eq? 
  186d:30 003f            bnt code_18af 
  1870:39 03            pushi 3 // $3 y
  1872:89 00              lsg  
  1874:38 01fe          pushi 1fe // $1fe bust
  1877:39 38            pushi 38 // $38 moveSpeed
  1879:45 12 06         callb procedure_0012 6 //  

  187c:38 00d5          pushi d5 // $d5 has
  187f:78               push1 
  1880:39 0e            pushi e // $e lsLeft
  1882:81 00              lag  
  1884:4a 06             send 6 

  1886:30 0013            bnt code_189c 
  1889:39 04            pushi 4 // $4 x
  188b:72 1c68          lofsa $1c68 // the maitre d'
  188e:36                push 
  188f:38 01fe          pushi 1fe // $1fe bust
  1892:39 39            pushi 39 // $39 cantBeHere
  1894:39 6c            pushi 6c // $6c dispose
  1896:45 12 08         callb procedure_0012 8 //  

  1899:32 019c            jmp code_1a38 

        code_189c
  189c:39 04            pushi 4 // $4 x
  189e:72 1c68          lofsa $1c68 // the maitre d'
  18a1:36                push 
  18a2:38 01fe          pushi 1fe // $1fe bust
  18a5:39 3a            pushi 3a // $3a heading
  18a7:39 6c            pushi 6c // $6c dispose
  18a9:45 12 08         callb procedure_0012 8 //  

  18ac:32 0189            jmp code_1a38 

        code_18af
  18af:3c                 dup 
  18b0:35 05              ldi 5 
  18b2:1a                 eq? 
  18b3:30 000f            bnt code_18c5 
  18b6:38 008e          pushi 8e // $8e setScript
  18b9:78               push1 
  18ba:72 1178          lofsa $1178 // sMD
  18bd:36                push 
  18be:81 02              lag  
  18c0:4a 06             send 6 

  18c2:32 0173            jmp code_1a38 

        code_18c5
  18c5:3c                 dup 
  18c6:35 04              ldi 4 
  18c8:1a                 eq? 
  18c9:30 015f            bnt code_1a2b 
  18cc:38 009b          pushi 9b // $9b owner
  18cf:76               push0 
  18d0:39 43            pushi 43 // $43 at
  18d2:78               push1 
  18d3:39 0e            pushi e // $e lsLeft
  18d5:51 40            class Inv 
  18d7:4a 06             send 6 

  18d9:4a 04             send 4 

  18db:36                push 
  18dc:34 01fe            ldi 1fe 
  18df:1a                 eq? 
  18e0:30 0013            bnt code_18f6 
  18e3:39 04            pushi 4 // $4 x
  18e5:72 1c68          lofsa $1c68 // the maitre d'
  18e8:36                push 
  18e9:38 01fe          pushi 1fe // $1fe bust
  18ec:39 3b            pushi 3b // $3b mover
  18ee:39 6c            pushi 6c // $6c dispose
  18f0:45 12 08         callb procedure_0012 8 //  

  18f3:32 0142            jmp code_1a38 

        code_18f6
  18f6:8f 02              lsp param2 
  18f8:3c                 dup 
  18f9:35 0c              ldi c 
  18fb:1a                 eq? 
  18fc:30 0013            bnt code_1912 
  18ff:76               push0 
  1900:45 02 00         callb procedure_0002 0 //  

  1903:38 008e          pushi 8e // $8e setScript
  1906:78               push1 
  1907:72 08c2          lofsa $08c2 // sBribe
  190a:36                push 
  190b:81 02              lag  
  190d:4a 06             send 6 

  190f:32 0115            jmp code_1a27 

        code_1912
  1912:3c                 dup 
  1913:35 0d              ldi d 
  1915:1a                 eq? 
  1916:30 0078            bnt code_1991 
  1919:39 20            pushi 20 // $20 state
  191b:76               push0 
  191c:39 43            pushi 43 // $43 at
  191e:78               push1 
  191f:39 0e            pushi e // $e lsLeft
  1921:51 40            class Inv 
  1923:4a 06             send 6 

  1925:4a 04             send 4 

  1927:36                push 
  1928:35 01              ldi 1 
  192a:1a                 eq? 
  192b:30 0050            bnt code_197e 
  192e:39 03            pushi 3 // $3 y
  1930:89 00              lsg  
  1932:38 01fe          pushi 1fe // $1fe bust
  1935:39 3c            pushi 3c // $3c doit
  1937:45 12 06         callb procedure_0012 6 //  

  193a:39 04            pushi 4 // $4 x
  193c:72 1c68          lofsa $1c68 // the maitre d'
  193f:36                push 
  1940:38 01fe          pushi 1fe // $1fe bust
  1943:39 3d            pushi 3d // $3d isBlocked
  1945:39 6c            pushi 6c // $6c dispose
  1947:45 12 08         callb procedure_0012 8 //  

  194a:7a               push2 
  194b:39 05            pushi 5 // $5 view
  194d:39 6c            pushi 6c // $6c dispose
  194f:45 0a 04         callb procedure_000a 4 //  

  1952:39 20            pushi 20 // $20 state
  1954:78               push1 
  1955:7a               push2 
  1956:39 43            pushi 43 // $43 at
  1958:78               push1 
  1959:39 0e            pushi e // $e lsLeft
  195b:51 40            class Inv 
  195d:4a 06             send 6 

  195f:4a 06             send 6 

  1961:38 0148          pushi 148 // $148 put
  1964:78               push1 
  1965:39 0d            pushi d // $d lsTop
  1967:81 00              lag  
  1969:4a 06             send 6 

  196b:35 01              ldi 1 
  196d:a3 04              sal local4 
  196f:38 008e          pushi 8e // $8e setScript
  1972:78               push1 
  1973:72 1178          lofsa $1178 // sMD
  1976:36                push 
  1977:81 02              lag  
  1979:4a 06             send 6 

  197b:32 00a9            jmp code_1a27 

        code_197e
  197e:39 04            pushi 4 // $4 x
  1980:72 1c68          lofsa $1c68 // the maitre d'
  1983:36                push 
  1984:38 01fe          pushi 1fe // $1fe bust
  1987:39 3e            pushi 3e // $3e looper
  1989:39 6c            pushi 6c // $6c dispose
  198b:45 12 08         callb procedure_0012 8 //  

  198e:32 0096            jmp code_1a27 

        code_1991
  1991:3c                 dup 
  1992:35 06              ldi 6 
  1994:1a                 eq? 
  1995:30 005c            bnt code_19f4 
  1998:39 03            pushi 3 // $3 y
  199a:89 00              lsg  
  199c:38 01fe          pushi 1fe // $1fe bust
  199f:39 3f            pushi 3f // $3f priority
  19a1:45 12 06         callb procedure_0012 6 //  

  19a4:39 06            pushi 6 // $6 loop
  19a6:72 1c68          lofsa $1c68 // the maitre d'
  19a9:36                push 
  19aa:38 01fe          pushi 1fe // $1fe bust
  19ad:39 40            pushi 40 // $40 modifiers
  19af:39 6c            pushi 6c // $6c dispose
  19b1:38 008b          pushi 8b // $8b caller
  19b4:7c            pushSelf 
  19b5:45 12 0c         callb procedure_0012 c //  

  19b8:38 0148          pushi 148 // $148 put
  19bb:7a               push2 
  19bc:39 06            pushi 6 // $6 loop
  19be:89 0b              lsg  
  19c0:81 00              lag  
  19c2:4a 08             send 8 

  19c4:38 00c9          pushi c9 // $c9 disable
  19c7:78               push1 
  19c8:39 06            pushi 6 // $6 loop
  19ca:38 00ce          pushi ce // $ce curIcon
  19cd:78               push1 
  19ce:39 43            pushi 43 // $43 at
  19d0:78               push1 
  19d1:76               push0 
  19d2:81 45              lag  
  19d4:4a 06             send 6 

  19d6:36                push 
  19d7:81 45              lag  
  19d9:4a 0c             send c 

  19db:38 00bb          pushi bb // $bb setCursor
  19de:78               push1 
  19df:39 24            pushi 24 // $24 cursor
  19e1:76               push0 
  19e2:38 00ce          pushi ce // $ce curIcon
  19e5:76               push0 
  19e6:81 45              lag  
  19e8:4a 04             send 4 

  19ea:4a 04             send 4 

  19ec:36                push 
  19ed:81 01              lag  
  19ef:4a 06             send 6 

  19f1:32 0033            jmp code_1a27 

        code_19f4
  19f4:3c                 dup 
  19f5:35 0b              ldi b 
  19f7:1a                 eq? 
  19f8:30 001f            bnt code_1a1a 
  19fb:39 03            pushi 3 // $3 y
  19fd:89 00              lsg  
  19ff:38 01fe          pushi 1fe // $1fe bust
  1a02:39 41            pushi 41 // $41 replay
  1a04:45 12 06         callb procedure_0012 6 //  

  1a07:39 04            pushi 4 // $4 x
  1a09:72 1c68          lofsa $1c68 // the maitre d'
  1a0c:36                push 
  1a0d:38 01fe          pushi 1fe // $1fe bust
  1a10:39 42            pushi 42 // $42 setPri
  1a12:39 6c            pushi 6c // $6c dispose
  1a14:45 12 08         callb procedure_0012 8 //  

  1a17:32 000d            jmp code_1a27 

        code_1a1a
  1a1a:38 010c          pushi 10c // $10c doVerb
  1a1d:7a               push2 
  1a1e:8f 01              lsp param1 
  1a20:8f 02              lsp param2 
  1a22:59 03            &rest 3 
  1a24:57 30 08         super Actor 8 


        code_1a27
  1a27:3a                toss 
  1a28:32 000d            jmp code_1a38 

        code_1a2b
  1a2b:38 010c          pushi 10c // $10c doVerb
  1a2e:7a               push2 
  1a2f:8f 01              lsp param1 
  1a31:8f 02              lsp param2 
  1a33:59 03            &rest 3 
  1a35:57 30 08         super Actor 8 


        code_1a38
  1a38:3a                toss 
  1a39:48                 ret 
    )

    (method (cue) // method_184e
  184e:38 008d          pushi 8d // $8d cue
  1851:76               push0 
  1852:57 30 04         super Actor 4 

  1855:39 05            pushi 5 // $5 view
  1857:38 01fe          pushi 1fe // $1fe bust
  185a:39 37            pushi 37 // $37 yStep
  185c:39 43            pushi 43 // $43 at
  185e:39 ff            pushi ff // $ff syncNum
  1860:38 00b9          pushi b9 // $b9 bottom
  1863:45 0e 0a         callb procedure_000e a //  

  1866:48                 ret 
    )

)

// 1ad8
(instance LDoor of Prop
    (properties
        x $8b
        y $42
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2843
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $a5
        approachY $46
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $1fe
        loop $0
        cel $0
        priority $2
        underBits $0
        signal $810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1ac4
  1ac4:38 010c          pushi 10c // $10c doVerb
  1ac7:7a               push2 
  1ac8:8f 01              lsp param1 
  1aca:8f 02              lsp param2 
  1acc:72 1bc4          lofsa $1bc4 // door
  1acf:4a 08             send 8 

  1ad1:48                 ret 
    )

)

// 1bbe
(instance door of Door
    (properties
        x $b3
        y $3f
        z $0
        heading $b4
        noun $0
        nsTop $8
        nsLeft $8d
        nsBottom $3f
        nsRight $b1
        description $2843
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $a5
        approachY $46
        approachDist $0
        _approachVerbs $6789
        lookStr $285c
        yStep $2
        view $1fe
        loop $1
        cel $0
        priority $2
        underBits $0
        signal $10
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $20d
        locked $1
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $9c
        moveToY $3c
        enterType $0
        exitType $0
        closeScript $0
        openScript $0
    )
    (method (init) // method_1b40
  1b40:72 1ade          lofsa $1ade // LDoor
  1b43:65 60             aTop doubleDoor 
  1b45:39 6b            pushi 6b // $6b init
  1b47:76               push0 
  1b48:57 73 04         super Door 4 

  1b4b:38 0119          pushi 119 // $119 approachVerbs
  1b4e:78               push1 
  1b4f:39 03            pushi 3 // $3 y
  1b51:54 06             self 6 

  1b53:48                 ret 
    )

    (method (doVerb) // method_1b54
  1b54:8f 01              lsp param1 
  1b56:3c                 dup 
  1b57:35 03              ldi 3 
  1b59:1a                 eq? 
  1b5a:30 000c            bnt code_1b69 
  1b5d:7a               push2 
  1b5e:38 01fe          pushi 1fe // $1fe bust
  1b61:39 43            pushi 43 // $43 at
  1b63:45 0e 04         callb procedure_000e 4 //  

  1b66:32 004d            jmp code_1bb6 

        code_1b69
  1b69:3c                 dup 
  1b6a:35 04              ldi 4 
  1b6c:1a                 eq? 
  1b6d:30 0039            bnt code_1ba9 
  1b70:8f 02              lsp param2 
  1b72:3c                 dup 
  1b73:35 0e              ldi e 
  1b75:1a                 eq? 
  1b76:30 000c            bnt code_1b85 
  1b79:7a               push2 
  1b7a:38 01fe          pushi 1fe // $1fe bust
  1b7d:39 44            pushi 44 // $44 next
  1b7f:45 0e 04         callb procedure_000e 4 //  

  1b82:32 0020            jmp code_1ba5 

        code_1b85
  1b85:3c                 dup 
  1b86:35 07              ldi 7 
  1b88:1a                 eq? 
  1b89:30 000c            bnt code_1b98 
  1b8c:7a               push2 
  1b8d:38 01fe          pushi 1fe // $1fe bust
  1b90:39 45            pushi 45 // $45 done
  1b92:45 0e 04         callb procedure_000e 4 //  

  1b95:32 000d            jmp code_1ba5 

        code_1b98
  1b98:38 010c          pushi 10c // $10c doVerb
  1b9b:7a               push2 
  1b9c:8f 01              lsp param1 
  1b9e:8f 02              lsp param2 
  1ba0:59 03            &rest 3 
  1ba2:57 73 08         super Door 8 


        code_1ba5
  1ba5:3a                toss 
  1ba6:32 000d            jmp code_1bb6 

        code_1ba9
  1ba9:38 010c          pushi 10c // $10c doVerb
  1bac:7a               push2 
  1bad:8f 01              lsp param1 
  1baf:8f 02              lsp param2 
  1bb1:59 03            &rest 3 
  1bb3:57 73 08         super Door 8 


        code_1bb6
  1bb6:3a                toss 
  1bb7:48                 ret 
    )

)

// 1c62
(instance the maitre d' of Talker
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $21
        nsLeft $16
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5e8
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        bust $0
        eyes $0
        mouth $0
        ticks $0
        disposeWhenDone $1
        caller $0
        viewInPrint $1
        useFrame $0
        talkWidth $13e
    )
    (method (init) // method_1c46
  1c46:72 1ce4          lofsa $1ce4 // talkerBust
  1c49:65 56             aTop bust 
  1c4b:72 1d40          lofsa $1d40 // talkerEyes
  1c4e:65 58             aTop eyes 
  1c50:72 1da6          lofsa $1da6 // talkerMouth
  1c53:65 5a             aTop mouth 
  1c55:39 6b            pushi 6b // $6b init
  1c57:76               push0 
  1c58:57 6f 04         super Talker 4 

  1c5b:48                 ret 
    )

)

// 1cde
(instance talkerBust of View
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5e8
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $101
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
)

// 1d3a
(instance talkerEyes of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $b
        nsLeft $1a
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5e8
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $1e
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1da0
(instance talkerMouth of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $18
        nsLeft $c
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5e8
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1ed0
(instance tapeReader of Feature
    (properties
        x $70
        y $41
        z $0
        heading $0
        noun $0
        nsTop $26
        nsLeft $65
        nsBottom $49
        nsRight $8b
        description $28b4
        sightAngle $b4
        actions $0
        onMeCheck $6789
        approachX $8b
        approachY $4d
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1e04
  1e04:8f 01              lsp param1 
  1e06:3c                 dup 
  1e07:35 02              ldi 2 
  1e09:1a                 eq? 
  1e0a:30 002c            bnt code_1e39 
  1e0d:7a               push2 
  1e0e:38 01fe          pushi 1fe // $1fe bust
  1e11:39 46            pushi 46 // $46 width
  1e13:45 0e 04         callb procedure_000e 4 //  

  1e16:38 009b          pushi 9b // $9b owner
  1e19:76               push0 
  1e1a:39 43            pushi 43 // $43 at
  1e1c:78               push1 
  1e1d:39 0e            pushi e // $e lsLeft
  1e1f:51 40            class Inv 
  1e21:4a 06             send 6 

  1e23:4a 04             send 4 

  1e25:36                push 
  1e26:34 01fe            ldi 1fe 
  1e29:1a                 eq? 
  1e2a:30 009b            bnt code_1ec8 
  1e2d:7a               push2 
  1e2e:38 01fe          pushi 1fe // $1fe bust
  1e31:39 47            pushi 47 // $47 wordFail
  1e33:45 0e 04         callb procedure_000e 4 //  

  1e36:32 008f            jmp code_1ec8 

        code_1e39
  1e39:3c                 dup 
  1e3a:35 03              ldi 3 
  1e3c:1a                 eq? 
  1e3d:30 0033            bnt code_1e73 
  1e40:38 009b          pushi 9b // $9b owner
  1e43:76               push0 
  1e44:39 43            pushi 43 // $43 at
  1e46:78               push1 
  1e47:39 0e            pushi e // $e lsLeft
  1e49:51 40            class Inv 
  1e4b:4a 06             send 6 

  1e4d:4a 04             send 4 

  1e4f:36                push 
  1e50:34 01fe            ldi 1fe 
  1e53:1a                 eq? 
  1e54:30 000e            bnt code_1e65 
  1e57:38 010c          pushi 10c // $10c doVerb
  1e5a:78               push1 
  1e5b:39 03            pushi 3 // $3 y
  1e5d:72 17e4          lofsa $17e4 // tape
  1e60:4a 06             send 6 

  1e62:32 0063            jmp code_1ec8 

        code_1e65
  1e65:38 0179          pushi 179 // $179 newRoom
  1e68:78               push1 
  1e69:38 0208          pushi 208 // $208 skating
  1e6c:81 02              lag  
  1e6e:4a 06             send 6 

  1e70:32 0055            jmp code_1ec8 

        code_1e73
  1e73:3c                 dup 
  1e74:35 05              ldi 5 
  1e76:1a                 eq? 
  1e77:30 000c            bnt code_1e86 
  1e7a:7a               push2 
  1e7b:38 01fe          pushi 1fe // $1fe bust
  1e7e:39 48            pushi 48 // $48 syntaxFail
  1e80:45 0e 04         callb procedure_000e 4 //  

  1e83:32 0042            jmp code_1ec8 

        code_1e86
  1e86:3c                 dup 
  1e87:35 04              ldi 4 
  1e89:1a                 eq? 
  1e8a:30 002e            bnt code_1ebb 
  1e8d:8f 02              lsp param2 
  1e8f:3c                 dup 
  1e90:35 0e              ldi e 
  1e92:1a                 eq? 
  1e93:30 0014            bnt code_1eaa 
  1e96:78               push1 
  1e97:39 0e            pushi e // $e lsLeft
  1e99:45 07 02         callb procedure_0007 2 //  

  1e9c:38 0179          pushi 179 // $179 newRoom
  1e9f:78               push1 
  1ea0:38 0208          pushi 208 // $208 skating
  1ea3:81 02              lag  
  1ea5:4a 06             send 6 

  1ea7:32 000d            jmp code_1eb7 

        code_1eaa
  1eaa:38 010c          pushi 10c // $10c doVerb
  1ead:7a               push2 
  1eae:8f 01              lsp param1 
  1eb0:8f 02              lsp param2 
  1eb2:59 03            &rest 3 
  1eb4:57 2c 08         super Feature 8 


        code_1eb7
  1eb7:3a                toss 
  1eb8:32 000d            jmp code_1ec8 

        code_1ebb
  1ebb:38 010c          pushi 10c // $10c doVerb
  1ebe:7a               push2 
  1ebf:8f 01              lsp param1 
  1ec1:8f 02              lsp param2 
  1ec3:59 03            &rest 3 
  1ec5:57 2c 08         super Feature 8 


        code_1ec8
  1ec8:3a                toss 
  1ec9:48                 ret 
    )

)

// 1f34
(instance diskDrive of Feature
    (properties
        x $12d
        y $52
        z $0
        heading $0
        noun $0
        nsTop $38
        nsLeft $11b
        nsBottom $6c
        nsRight $13f
        description $28d6
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $28ed
    )
    (method (doVerb) // method_1f0e
  1f0e:8f 01              lsp param1 
  1f10:35 02              ldi 2 
  1f12:1c                 ne? 
  1f13:30 000c            bnt code_1f22 
  1f16:7a               push2 
  1f17:38 01fe          pushi 1fe // $1fe bust
  1f1a:39 49            pushi 49 // $49 semanticFail
  1f1c:45 0e 04         callb procedure_000e 4 //  

  1f1f:32 000b            jmp code_1f2d 

        code_1f22
  1f22:38 010c          pushi 10c // $10c doVerb
  1f25:7a               push2 
  1f26:8f 01              lsp param1 
  1f28:8f 02              lsp param2 
  1f2a:57 2c 08         super Feature 8 


        code_1f2d
  1f2d:48                 ret 
    )

)

// 1f98
(instance pet of Feature
    (properties
        x $6c
        y $66
        z $0
        heading $0
        noun $0
        nsTop $5c
        nsLeft $59
        nsBottom $71
        nsRight $80
        description $2967
        sightAngle $5a
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2978
    )
    (method (doVerb) // method_1f72
  1f72:8f 01              lsp param1 
  1f74:35 02              ldi 2 
  1f76:1c                 ne? 
  1f77:30 000c            bnt code_1f86 
  1f7a:7a               push2 
  1f7b:38 01fe          pushi 1fe // $1fe bust
  1f7e:39 4a            pushi 4a // $4a pragmaFail
  1f80:45 0e 04         callb procedure_000e 4 //  

  1f83:32 000b            jmp code_1f91 

        code_1f86
  1f86:38 010c          pushi 10c // $10c doVerb
  1f89:7a               push2 
  1f8a:8f 01              lsp param1 
  1f8c:8f 02              lsp param2 
  1f8e:57 2c 08         super Feature 8 


        code_1f91
  1f91:48                 ret 
    )

)

// 1ffc
(instance appleII of Feature
    (properties
        x $ad
        y $70
        z $0
        heading $0
        noun $0
        nsTop $65
        nsLeft $9a
        nsBottom $7c
        nsRight $c0
        description $29c1
        sightAngle $5a
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $29d7
    )
    (method (doVerb) // method_1fd6
  1fd6:8f 01              lsp param1 
  1fd8:35 02              ldi 2 
  1fda:1c                 ne? 
  1fdb:30 000c            bnt code_1fea 
  1fde:7a               push2 
  1fdf:38 01fe          pushi 1fe // $1fe bust
  1fe2:39 4a            pushi 4a // $4a pragmaFail
  1fe4:45 0e 04         callb procedure_000e 4 //  

  1fe7:32 000b            jmp code_1ff5 

        code_1fea
  1fea:38 010c          pushi 10c // $10c doVerb
  1fed:7a               push2 
  1fee:8f 01              lsp param1 
  1ff0:8f 02              lsp param2 
  1ff2:57 2c 08         super Feature 8 


        code_1ff5
  1ff5:48                 ret 
    )

)

// 2060
(instance cashRegister of Feature
    (properties
        x $94
        y $59
        z $0
        heading $0
        noun $0
        nsTop $4e
        nsLeft $80
        nsBottom $64
        nsRight $a9
        description $2a3a
        sightAngle $5a
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2a4c
    )
    (method (doVerb) // method_203a
  203a:8f 01              lsp param1 
  203c:35 02              ldi 2 
  203e:1c                 ne? 
  203f:30 000c            bnt code_204e 
  2042:7a               push2 
  2043:38 01fe          pushi 1fe // $1fe bust
  2046:39 4a            pushi 4a // $4a pragmaFail
  2048:45 0e 04         callb procedure_000e 4 //  

  204b:32 000b            jmp code_2059 

        code_204e
  204e:38 010c          pushi 10c // $10c doVerb
  2051:7a               push2 
  2052:8f 01              lsp param1 
  2054:8f 02              lsp param2 
  2056:57 2c 08         super Feature 8 


        code_2059
  2059:48                 ret 
    )

)

// 20c4
(instance monitor of Feature
    (properties
        x $7c
        y $87
        z $0
        heading $0
        noun $0
        nsTop $7e
        nsLeft $6f
        nsBottom $90
        nsRight $8a
        description $2ab4
        sightAngle $5a
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2acd
    )
    (method (doVerb) // method_209e
  209e:8f 01              lsp param1 
  20a0:35 02              ldi 2 
  20a2:1c                 ne? 
  20a3:30 000c            bnt code_20b2 
  20a6:7a               push2 
  20a7:38 01fe          pushi 1fe // $1fe bust
  20aa:39 4a            pushi 4a // $4a pragmaFail
  20ac:45 0e 04         callb procedure_000e 4 //  

  20af:32 000b            jmp code_20bd 

        code_20b2
  20b2:38 010c          pushi 10c // $10c doVerb
  20b5:7a               push2 
  20b6:8f 01              lsp param1 
  20b8:8f 02              lsp param2 
  20ba:57 2c 08         super Feature 8 


        code_20bd
  20bd:48                 ret 
    )

)

// 2128
(instance atari400 of Feature
    (properties
        x $4e
        y $90
        z $0
        heading $0
        noun $0
        nsTop $89
        nsLeft $3a
        nsBottom $98
        nsRight $63
        description $2b37
        sightAngle $5a
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2b4e
    )
    (method (doVerb) // method_2102
  2102:8f 01              lsp param1 
  2104:35 02              ldi 2 
  2106:1c                 ne? 
  2107:30 000c            bnt code_2116 
  210a:7a               push2 
  210b:38 01fe          pushi 1fe // $1fe bust
  210e:39 4a            pushi 4a // $4a pragmaFail
  2110:45 0e 04         callb procedure_000e 4 //  

  2113:32 000b            jmp code_2121 

        code_2116
  2116:38 010c          pushi 10c // $10c doVerb
  2119:7a               push2 
  211a:8f 01              lsp param1 
  211c:8f 02              lsp param2 
  211e:57 2c 08         super Feature 8 


        code_2121
  2121:48                 ret 
    )

)

// 21aa
(instance tapeDrive of Feature
    (properties
        x $10
        y $47
        z $0
        heading $0
        noun $0
        nsTop $28
        nsLeft $0
        nsBottom $67
        nsRight $20
        description $2bd5
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2bec
    )
    (method (doVerb) // method_2166
  2166:8f 01              lsp param1 
  2168:3c                 dup 
  2169:35 04              ldi 4 
  216b:1a                 eq? 
  216c:30 0026            bnt code_2195 
  216f:8f 02              lsp param2 
  2171:3c                 dup 
  2172:35 0e              ldi e 
  2174:1a                 eq? 
  2175:30 000c            bnt code_2184 
  2178:7a               push2 
  2179:38 01fe          pushi 1fe // $1fe bust
  217c:39 4b            pushi 4b // $4b said
  217e:45 0e 04         callb procedure_000e 4 //  

  2181:32 000d            jmp code_2191 

        code_2184
  2184:38 010c          pushi 10c // $10c doVerb
  2187:7a               push2 
  2188:8f 01              lsp param1 
  218a:8f 02              lsp param2 
  218c:59 03            &rest 3 
  218e:57 2c 08         super Feature 8 


        code_2191
  2191:3a                toss 
  2192:32 000d            jmp code_21a2 

        code_2195
  2195:38 010c          pushi 10c // $10c doVerb
  2198:7a               push2 
  2199:8f 01              lsp param1 
  219b:8f 02              lsp param2 
  219d:59 03            &rest 3 
  219f:57 2c 08         super Feature 8 


        code_21a2
  21a2:3a                toss 
  21a3:48                 ret 
    )

)

// 21f8
(instance pianoRoll of Feature
    (properties
        x $f3
        y $11
        z $0
        heading $0
        noun $0
        nsTop $9
        nsLeft $dc
        nsBottom $1a
        nsRight $10a
        description $2ca4
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2cb3
    )
    (method (doVerb) // method_21e8
  21e8:7a               push2 
  21e9:38 01fe          pushi 1fe // $1fe bust
  21ec:39 4c            pushi 4c // $4c claimed
  21ee:45 0e 04         callb procedure_000e 4 //  

  21f1:48                 ret 
    )

)

// 2246
(instance punchCardMachine of Feature
    (properties
        x $fd
        y $3d
        z $0
        heading $0
        noun $0
        nsTop $22
        nsLeft $de
        nsBottom $58
        nsRight $11c
        description $2dc5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2ddc
    )
    (method (doVerb) // method_2236
  2236:7a               push2 
  2237:38 01fe          pushi 1fe // $1fe bust
  223a:39 4d            pushi 4d // $4d value
  223c:45 0e 04         callb procedure_000e 4 //  

  223f:48                 ret 
    )

)

// 2286
(instance chair of Feature
    (properties
        x $27
        y $54
        z $0
        heading $0
        noun $0
        nsTop $41
        nsLeft $1c
        nsBottom $67
        nsRight $33
        description $2eb6
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2ec0
    )
)

// 22c2
(instance bullBoard of Feature
    (properties
        x $19
        y $1f
        z $0
        heading $0
        noun $0
        nsTop $6
        nsLeft $0
        nsBottom $38
        nsRight $33
        description $2efc
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2f0f
    )
)

// 22fe
(instance podium of Feature
    (properties
        x $4e
        y $5f
        z $0
        heading $0
        noun $0
        nsTop $32
        nsLeft $37
        nsBottom $5f
        nsRight $66
        description $2f70
        sightAngle $28
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2f86
    )
)

// 233a
(instance desk of Feature
    (properties
        x $3d
        y $63
        z $0
        heading $0
        noun $0
        nsTop $4f
        nsLeft $2e
        nsBottom $6a
        nsRight $4c
        description $2ffd
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $3006
    )
)

// 23e2
(instance cactus1 of Feature
    (properties
        x $cb
        y $28
        z $0
        heading $0
        noun $0
        nsTop $10
        nsLeft $be
        nsBottom $41
        nsRight $d9
        description $3044
        sightAngle $28
        actions $0
        onMeCheck $4
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $304f
    )
    (method (doVerb) // method_2374
  2374:8f 01              lsp param1 
  2376:3c                 dup 
  2377:35 03              ldi 3 
  2379:1a                 eq? 
  237a:30 000f            bnt code_238c 
  237d:39 03            pushi 3 // $3 y
  237f:89 00              lsg  
  2381:38 01fe          pushi 1fe // $1fe bust
  2384:39 4e            pushi 4e // $4e save
  2386:45 12 06         callb procedure_0012 6 //  

  2389:32 004d            jmp code_23d9 

        code_238c
  238c:3c                 dup 
  238d:35 05              ldi 5 
  238f:1a                 eq? 
  2390:30 000c            bnt code_239f 
  2393:7a               push2 
  2394:38 01fe          pushi 1fe // $1fe bust
  2397:39 4f            pushi 4f // $4f restore
  2399:45 0e 04         callb procedure_000e 4 //  

  239c:32 003a            jmp code_23d9 

        code_239f
  239f:3c                 dup 
  23a0:35 04              ldi 4 
  23a2:1a                 eq? 
  23a3:30 0026            bnt code_23cc 
  23a6:8f 02              lsp param2 
  23a8:3c                 dup 
  23a9:35 0e              ldi e 
  23ab:1a                 eq? 
  23ac:30 000c            bnt code_23bb 
  23af:7a               push2 
  23b0:38 01fe          pushi 1fe // $1fe bust
  23b3:39 50            pushi 50 // $50 title
  23b5:45 0e 04         callb procedure_000e 4 //  

  23b8:32 000d            jmp code_23c8 

        code_23bb
  23bb:38 010c          pushi 10c // $10c doVerb
  23be:7a               push2 
  23bf:8f 01              lsp param1 
  23c1:8f 02              lsp param2 
  23c3:59 03            &rest 3 
  23c5:57 2c 08         super Feature 8 


        code_23c8
  23c8:3a                toss 
  23c9:32 000d            jmp code_23d9 

        code_23cc
  23cc:38 010c          pushi 10c // $10c doVerb
  23cf:7a               push2 
  23d0:8f 01              lsp param1 
  23d2:8f 02              lsp param2 
  23d4:59 03            &rest 3 
  23d6:57 2c 08         super Feature 8 


        code_23d9
  23d9:3a                toss 
  23da:48                 ret 
  23db:00                bnot 
    )

)

// 2432
(instance cactus2 of Feature
    (properties
        x $74
        y $9d
        z $0
        heading $0
        noun $0
        nsTop $7d
        nsLeft $4f
        nsBottom $bd
        nsRight $9a
        description $3044
        sightAngle $28
        actions $0
        onMeCheck $4
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_2420
  2420:38 010c          pushi 10c // $10c doVerb
  2423:76               push0 
  2424:59 01            &rest 1 
  2426:72 23e8          lofsa $23e8 // cactus1
  2429:4a 04             send 4 

  242b:48                 ret 
    )

)

// 2472
(instance musicBoxFX of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $1fe
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 24a8
(instance typingFX of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $1ba
        vol $7f
        priority $0
        loop $ffff
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 24de
(instance paperRip of Sound
    (properties
        nodePtr $0
        handle $0
        flags $1
        number $200
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)



