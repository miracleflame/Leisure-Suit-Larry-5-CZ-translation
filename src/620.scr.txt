(script 620)

(string
    string_1b3c "rm620"
    string_1b42 "sExitElevator"
    string_1b50 "sGuardWakes"
    string_1b5c "sGuardSleeps"
    string_1b69 "sGuardApproves"
    string_1b78 "sUsesBoard"
    string_1b83 "sReturnsFromBoard"
    string_1b95 "sBackToSleep"
    string_1ba2 "sSleeping"
    string_1bac "the guard"
    string_1bb6 "guard"
    string_1bbc "the elevator"
    string_1bc9 "elevator"
    string_1bd2 "elevatorLeft"
    string_1bdf "elevatorDing"
    string_1bec "elevatorDoor"
    string_1bf9 "the Shill Building's directory"
    string_1c18 "board"
    string_1c1e "the directory"
    string_1c2c "businessOne"
    string_1c38 "businessTwo"
    string_1c44 "businessThree"
    string_1c52 "businessFour"
    string_1c5f "businessFive"
    string_1c6c "businessSix"
    string_1c78 "businessSeven"
    string_1c86 "businessEight"
    string_1c94 "the plant"
    string_1c9e "This plant is obviously well-maintained, but superfluous to your mission."
    string_1ce8 "plant"
    string_1cee "the mural"
    string_1cf8 "It is quite an interesting mural."
    string_1d1a "mural"
    string_1d20 "the staircase"
    string_1d2e "A staircase winds its way upwards, but a velvet rope across the bottom indicates it's not to be used under penalty of law. It looks like the elevator is your only hope, Patti."
    string_1dde "fStairs"
    string_1de6 "the lamp"
    string_1def "A lovely Art Deco lamp rises above the staircase."
    string_1e21 "fLamp1"
    string_1e28 "fLamp2"
    string_1e2f "the ashtray"
    string_1e3b "Carefully examining the ashtray for a disco pass, for a brief moment you think you're playing \"Leisure Suit Larry 1: In the Land of the Lounge Lizards.\" Of course, you're not."
    string_1eeb "fAshtray"
    string_1ef4 "the sconce"
    string_1eff "My, the Shill Building has tasteful sconces."
    string_1f2c "sconceA"
    string_1f34 "sconceB"
    string_1f3c "the clock"
    string_1f46 "A lovely Deco time clock is built into the end of the Security Guard's counter for those employees still paid by the hour."
    string_1fc1 "clock"
    string_1fc7 "What? Patti! When did you develop an interest in other women?"
    string_2005 "breasts"
    string_200d "The Guard"
    string_2017 "guardBust"
    string_2021 "guardEyes"
    string_202b "guardMouth"
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
)

// 02b6
(instance publicrm620 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $26c
        style $ffff
        horizon $0
        controls $0
        north $280
        east $0
        south $258
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 6b            pushi 6b // $6b init
  0010:76               push0 
  0011:38 020a          pushi 20a // $20a normalize
  0014:78               push1 
  0015:38 023a          pushi 23a // $23a sel_570
  0018:81 00              lag  
  001a:4a 0a             send a 

  001c:76               push0 
  001d:45 03 00         callb procedure_0003 0 //  

  0020:89 0c              lsg  
  0022:3c                 dup 
  0023:63 20             pToa south 
  0025:1a                 eq? 
  0026:30 0023            bnt code_004c 
  0029:39 04            pushi 4 // $4 x
  002b:78               push1 
  002c:39 5c            pushi 5c // $5c dataInc
  002e:81 00              lag  
  0030:4a 06             send 6 

  0032:39 2b            pushi 2b // $2b number
  0034:78               push1 
  0035:38 026c          pushi 26c // $26c sel_620
  0038:39 66            pushi 66 // $66 flags
  003a:78               push1 
  003b:78               push1 
  003c:38 00a2          pushi a2 // $a2 setLoop
  003f:78               push1 
  0040:39 ff            pushi ff // $ff syncNum
  0042:39 2a            pushi 2a // $2a play
  0044:76               push0 
  0045:81 66              lag  
  0047:4a 16             send 16 

  0049:32 0050            jmp code_009c 

        code_004c
  004c:3c                 dup 
  004d:63 1c             pToa north 
  004f:1a                 eq? 
  0050:30 0021            bnt code_0074 
  0053:39 42            pushi 42 // $42 setPri
  0055:78               push1 
  0056:39 09            pushi 9 // $9 nsTop
  0058:38 011c          pushi 11c // $11c posn
  005b:7a               push2 
  005c:39 39            pushi 39 // $39 cantBeHere
  005e:38 008d          pushi 8d // $8d cue
  0061:81 00              lag  
  0063:4a 0e             send e 

  0065:38 008e          pushi 8e // $8e setScript
  0068:78               push1 
  0069:72 03f2          lofsa $03f2 // sExitElevator
  006c:36                push 
  006d:81 02              lag  
  006f:4a 06             send 6 

  0071:32 0028            jmp code_009c 

        code_0074
  0074:38 011c          pushi 11c // $11c posn
  0077:7a               push2 
  0078:38 00a0          pushi a0 // $a0 mute
  007b:3c                 dup 
  007c:38 0146          pushi 146 // $146 edgeHit
  007f:78               push1 
  0080:76               push0 
  0081:81 00              lag  
  0083:4a 0e             send e 

  0085:39 2b            pushi 2b // $2b number
  0087:78               push1 
  0088:38 026c          pushi 26c // $26c sel_620
  008b:39 66            pushi 66 // $66 flags
  008d:78               push1 
  008e:78               push1 
  008f:38 00a2          pushi a2 // $a2 setLoop
  0092:78               push1 
  0093:39 ff            pushi ff // $ff syncNum
  0095:39 2a            pushi 2a // $2a play
  0097:76               push0 
  0098:81 66              lag  
  009a:4a 16             send 16 


        code_009c
  009c:3a                toss 
  009d:7a               push2 
  009e:38 0081          pushi 81 // $81 handleEvent
  00a1:38 0276          pushi 276 // $276 sel_630
  00a4:46 03be 0000 04  calle 3be procedure_0000 4 //  

  00aa:39 03            pushi 3 // $3 y
  00ac:38 0084          pushi 84 // $84 cycles
  00af:38 026d          pushi 26d // $26d sel_621
  00b2:38 026e          pushi 26e // $26e sel_622
  00b5:46 03be 0000 06  calle 3be procedure_0000 6 //  

  00bb:39 6b            pushi 6b // $6b init
  00bd:76               push0 
  00be:57 72 04         super LLRoom 4 

  00c1:39 6b            pushi 6b // $6b init
  00c3:76               push0 
  00c4:38 0119          pushi 119 // $119 approachVerbs
  00c7:39 03            pushi 3 // $3 y
  00c9:7a               push2 
  00ca:39 03            pushi 3 // $3 y
  00cc:39 04            pushi 4 // $4 x
  00ce:72 11e8          lofsa $11e8 // board
  00d1:4a 0e             send e 

  00d3:39 6b            pushi 6b // $6b init
  00d5:76               push0 
  00d6:38 0119          pushi 119 // $119 approachVerbs
  00d9:39 03            pushi 3 // $3 y
  00db:39 05            pushi 5 // $5 view
  00dd:39 04            pushi 4 // $4 x
  00df:39 03            pushi 3 // $3 y
  00e1:72 0fa8          lofsa $0fa8 // guard
  00e4:4a 0e             send e 

  00e6:39 6b            pushi 6b // $6b init
  00e8:76               push0 
  00e9:38 0119          pushi 119 // $119 approachVerbs
  00ec:7a               push2 
  00ed:39 03            pushi 3 // $3 y
  00ef:39 04            pushi 4 // $4 x
  00f1:72 1052          lofsa $1052 // elevator
  00f4:4a 0c             send c 

  00f6:39 6b            pushi 6b // $6b init
  00f8:76               push0 
  00f9:38 0119          pushi 119 // $119 approachVerbs
  00fc:7a               push2 
  00fd:39 03            pushi 3 // $3 y
  00ff:39 04            pushi 4 // $4 x
  0101:72 10d0          lofsa $10d0 // elevatorLeft
  0104:4a 0c             send c 

  0106:39 6b            pushi 6b // $6b init
  0108:76               push0 
  0109:72 169e          lofsa $169e // plant
  010c:4a 04             send 4 

  010e:39 6b            pushi 6b // $6b init
  0110:76               push0 
  0111:72 16da          lofsa $16da // mural
  0114:4a 04             send 4 

  0116:39 6b            pushi 6b // $6b init
  0118:76               push0 
  0119:72 173e          lofsa $173e // fStairs
  011c:4a 04             send 4 

  011e:39 6b            pushi 6b // $6b init
  0120:76               push0 
  0121:72 177e          lofsa $177e // fLamp1
  0124:4a 04             send 4 

  0126:39 6b            pushi 6b // $6b init
  0128:76               push0 
  0129:72 17ba          lofsa $17ba // fLamp2
  012c:4a 04             send 4 

  012e:39 6b            pushi 6b // $6b init
  0130:76               push0 
  0131:38 0119          pushi 119 // $119 approachVerbs
  0134:7a               push2 
  0135:7a               push2 
  0136:39 03            pushi 3 // $3 y
  0138:72 181e          lofsa $181e // fAshtray
  013b:4a 0c             send c 

  013d:39 6b            pushi 6b // $6b init
  013f:76               push0 
  0140:72 185e          lofsa $185e // sconceA
  0143:4a 04             send 4 

  0145:39 6b            pushi 6b // $6b init
  0147:76               push0 
  0148:72 189a          lofsa $189a // sconceB
  014b:4a 04             send 4 

  014d:39 6b            pushi 6b // $6b init
  014f:76               push0 
  0150:72 18d6          lofsa $18d6 // clock
  0153:4a 04             send 4 

  0155:39 6b            pushi 6b // $6b init
  0157:76               push0 
  0158:72 193a          lofsa $193a // breasts
  015b:4a 04             send 4 

  015d:38 0176          pushi 176 // $176 addObstacle
  0160:78               push1 
  0161:39 22            pushi 22 // $22 type
  0163:78               push1 
  0164:7a               push2 
  0165:39 6b            pushi 6b // $6b init
  0167:39 32            pushi 32 // $32 b-i2
  0169:76               push0 
  016a:76               push0 
  016b:38 013f          pushi 13f // $13f inputLineAddr
  016e:76               push0 
  016f:38 013f          pushi 13f // $13f inputLineAddr
  0172:38 00bd          pushi bd // $bd maskView
  0175:39 7b            pushi 7b // $7b last
  0177:38 00bd          pushi bd // $bd maskView
  017a:39 7b            pushi 7b // $7b last
  017c:38 00bb          pushi bb // $bb setCursor
  017f:38 0139          pushi 139 // $139 alterEgo
  0182:38 00bb          pushi bb // $bb setCursor
  0185:38 0139          pushi 139 // $139 alterEgo
  0188:38 009f          pushi 9f // $9f fade
  018b:38 00e0          pushi e0 // $e0 xLast
  018e:38 009f          pushi 9f // $9f fade
  0191:38 00cb          pushi cb // $cb height
  0194:38 009b          pushi 9b // $9b owner
  0197:38 00c6          pushi c6 // $c6 swapCurIcon
  019a:38 0091          pushi 91 // $91 globalize
  019d:38 00c5          pushi c5 // $c5 mask
  01a0:38 0089          pushi 89 // $89 register
  01a3:38 00d1          pushi d1 // $d1 curInvIcon
  01a6:38 0082          pushi 82 // $82 start
  01a9:38 0139          pushi 139 // $139 alterEgo
  01ac:38 0082          pushi 82 // $82 start
  01af:38 0139          pushi 139 // $139 alterEgo
  01b2:39 74            pushi 74 // $74 eachElementDo
  01b4:38 0088          pushi 88 // $88 lastTicks
  01b7:39 74            pushi 74 // $74 eachElementDo
  01b9:38 0084          pushi 84 // $84 cycles
  01bc:39 77            pushi 77 // $77 contains
  01be:39 7a            pushi 7a // $7a release
  01c0:39 78            pushi 78 // $78 isEmpty
  01c2:39 72            pushi 72 // $72 yourself
  01c4:39 78            pushi 78 // $78 isEmpty
  01c6:39 3d            pushi 3d // $3d isBlocked
  01c8:38 0096          pushi 96 // $96 setCycle
  01cb:39 3d            pushi 3d // $3d isBlocked
  01cd:38 0097          pushi 97 // $97 setReal
  01d0:39 3e            pushi 3e // $3e looper
  01d2:38 009e          pushi 9e // $9e hold
  01d5:39 3a            pushi 3a // $3a heading
  01d7:38 00a3          pushi a3 // $a3 send
  01da:39 33            pushi 33 // $33 b-di
  01dc:38 00a4          pushi a4 // $a4 check
  01df:39 10            pushi 10 // $10 lsRight
  01e1:38 00bd          pushi bd // $bd maskView
  01e4:76               push0 
  01e5:38 00bd          pushi bd // $bd maskView
  01e8:39 72            pushi 72 // $72 yourself
  01ea:76               push0 
  01eb:39 6a            pushi 6a // $6a new
  01ed:76               push0 
  01ee:51 23            class Polygon 
  01f0:4a 04             send 4 

  01f2:4a 72             send 72 

  01f4:36                push 
  01f5:81 02              lag  
  01f7:4a 06             send 6 

  01f9:48                 ret 
    )

    (method (doit) // method_01fa
  01fa:38 0146          pushi 146 // $146 edgeHit
  01fd:76               push0 
  01fe:81 00              lag  
  0200:4a 04             send 4 

  0202:30 0029            bnt code_022e 
  0205:8b 00              lsl local0 
  0207:35 01              ldi 1 
  0209:1a                 eq? 
  020a:30 0021            bnt code_022e 
  020d:35 00              ldi 0 
  020f:a3 00              sal local0 
  0211:38 00a2          pushi a2 // $a2 setLoop
  0214:78               push1 
  0215:76               push0 
  0216:38 0120          pushi 120 // $120 setCel
  0219:78               push1 
  021a:76               push0 
  021b:38 00db          pushi db // $db cycleSpeed
  021e:78               push1 
  021f:39 1e            pushi 1e // $1e mode
  0221:38 0096          pushi 96 // $96 setCycle
  0224:7a               push2 
  0225:51 1a            class End 
  0227:36                push 
  0228:7c            pushSelf 
  0229:72 0fa8          lofsa $0fa8 // guard
  022c:4a 1a             send 1a 


        code_022e
  022e:39 3c            pushi 3c // $3c doit
  0230:76               push0 
  0231:57 72 04         super LLRoom 4 

  0234:48                 ret 
    )

    (method (doVerb) // method_0235
  0235:8f 01              lsp param1 
  0237:3c                 dup 
  0238:35 01              ldi 1 
  023a:1a                 eq? 
  023b:30 001a            bnt code_0258 
  023e:67 24             pTos curPic 
  0240:34 0276            ldi 276 
  0243:1a                 eq? 
  0244:30 0044            bnt code_028b 
  0247:38 008e          pushi 8e // $8e setScript
  024a:78               push1 
  024b:72 0c70          lofsa $0c70 // sReturnsFromBoard
  024e:36                push 
  024f:81 02              lag  
  0251:4a 06             send 6 

  0253:35 01              ldi 1 
  0255:32 0033            jmp code_028b 

        code_0258
  0258:3c                 dup 
  0259:35 02              ldi 2 
  025b:1a                 eq? 
  025c:30 001f            bnt code_027e 
  025f:67 24             pTos curPic 
  0261:34 0276            ldi 276 
  0264:1a                 eq? 
  0265:30 000b            bnt code_0273 
  0268:7a               push2 
  0269:38 026c          pushi 26c // $26c sel_620
  026c:76               push0 
  026d:45 0e 04         callb procedure_000e 4 //  

  0270:32 0018            jmp code_028b 

        code_0273
  0273:7a               push2 
  0274:38 026c          pushi 26c // $26c sel_620
  0277:78               push1 
  0278:45 0e 04         callb procedure_000e 4 //  

  027b:32 000d            jmp code_028b 

        code_027e
  027e:38 010c          pushi 10c // $10c doVerb
  0281:7a               push2 
  0282:8f 01              lsp param1 
  0284:8f 02              lsp param2 
  0286:59 03            &rest 3 
  0288:57 72 08         super LLRoom 8 


        code_028b
  028b:3a                toss 
  028c:48                 ret 
    )

    (method (newRoom) // method_028d
  028d:38 0179          pushi 179 // $179 newRoom
  0290:78               push1 
  0291:8f 01              lsp param1 
  0293:57 72 06         super LLRoom 6 

  0296:8f 01              lsp param1 
  0298:34 0280            ldi 280 
  029b:1a                 eq? 
  029c:18                 not 
  029d:30 000f            bnt code_02af 
  02a0:38 009f          pushi 9f // $9f fade
  02a3:39 04            pushi 4 // $4 x
  02a5:76               push0 
  02a6:39 0f            pushi f // $f lsBottom
  02a8:39 0c            pushi c // $c nsRight
  02aa:78               push1 
  02ab:81 66              lag  
  02ad:4a 0c             send c 


        code_02af
  02af:48                 ret 
    )

)

// 03ec
(instance sExitElevator of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0302
  0302:87 01              lap param1 
  0304:65 0a             aTop state 
  0306:36                push 
  0307:3c                 dup 
  0308:35 00              ldi 0 
  030a:1a                 eq? 
  030b:30 000b            bnt code_0319 
  030e:76               push0 
  030f:45 02 00         callb procedure_0002 0 //  

  0312:35 02              ldi 2 
  0314:65 12             aTop seconds 
  0316:32 00cb            jmp code_03e4 

        code_0319
  0319:3c                 dup 
  031a:35 01              ldi 1 
  031c:1a                 eq? 
  031d:30 000f            bnt code_032f 
  0320:39 2a            pushi 2a // $2a play
  0322:76               push0 
  0323:72 113a          lofsa $113a // elevatorDing
  0326:4a 04             send 4 

  0328:35 0a              ldi a 
  032a:65 10             aTop cycles 
  032c:32 00b5            jmp code_03e4 

        code_032f
  032f:3c                 dup 
  0330:35 02              ldi 2 
  0332:1a                 eq? 
  0333:30 0024            bnt code_035a 
  0336:39 2a            pushi 2a // $2a play
  0338:76               push0 
  0339:72 1170          lofsa $1170 // elevatorDoor
  033c:4a 04             send 4 

  033e:38 0096          pushi 96 // $96 setCycle
  0341:78               push1 
  0342:51 1a            class End 
  0344:36                push 
  0345:72 10d0          lofsa $10d0 // elevatorLeft
  0348:4a 06             send 6 

  034a:38 0096          pushi 96 // $96 setCycle
  034d:7a               push2 
  034e:51 1a            class End 
  0350:36                push 
  0351:7c            pushSelf 
  0352:72 1052          lofsa $1052 // elevator
  0355:4a 08             send 8 

  0357:32 008a            jmp code_03e4 

        code_035a
  035a:3c                 dup 
  035b:35 03              ldi 3 
  035d:1a                 eq? 
  035e:30 001e            bnt code_037f 
  0361:38 009c          pushi 9c // $9c stop
  0364:76               push0 
  0365:72 1170          lofsa $1170 // elevatorDoor
  0368:4a 04             send 4 

  036a:38 011b          pushi 11b // $11b setMotion
  036d:39 04            pushi 4 // $4 x
  036f:51 1e            class MoveTo 
  0371:36                push 
  0372:39 59            pushi 59 // $59 size
  0374:38 0096          pushi 96 // $96 setCycle
  0377:7c            pushSelf 
  0378:81 00              lag  
  037a:4a 0c             send c 

  037c:32 0065            jmp code_03e4 

        code_037f
  037f:3c                 dup 
  0380:35 04              ldi 4 
  0382:1a                 eq? 
  0383:30 0007            bnt code_038d 
  0386:35 02              ldi 2 
  0388:65 12             aTop seconds 
  038a:32 0057            jmp code_03e4 

        code_038d
  038d:3c                 dup 
  038e:35 05              ldi 5 
  0390:1a                 eq? 
  0391:30 002d            bnt code_03c1 
  0394:39 42            pushi 42 // $42 setPri
  0396:78               push1 
  0397:39 ff            pushi ff // $ff syncNum
  0399:81 00              lag  
  039b:4a 06             send 6 

  039d:39 2a            pushi 2a // $2a play
  039f:76               push0 
  03a0:72 1170          lofsa $1170 // elevatorDoor
  03a3:4a 04             send 4 

  03a5:38 0096          pushi 96 // $96 setCycle
  03a8:78               push1 
  03a9:51 1b            class Beg 
  03ab:36                push 
  03ac:72 10d0          lofsa $10d0 // elevatorLeft
  03af:4a 06             send 6 

  03b1:38 0096          pushi 96 // $96 setCycle
  03b4:7a               push2 
  03b5:51 1b            class Beg 
  03b7:36                push 
  03b8:7c            pushSelf 
  03b9:72 1052          lofsa $1052 // elevator
  03bc:4a 08             send 8 

  03be:32 0023            jmp code_03e4 

        code_03c1
  03c1:3c                 dup 
  03c2:35 06              ldi 6 
  03c4:1a                 eq? 
  03c5:30 001c            bnt code_03e4 
  03c8:38 009c          pushi 9c // $9c stop
  03cb:76               push0 
  03cc:72 1170          lofsa $1170 // elevatorDoor
  03cf:4a 04             send 4 

  03d1:38 011d          pushi 11d // $11d stopUpd
  03d4:78               push1 
  03d5:78               push1 
  03d6:72 1052          lofsa $1052 // elevator
  03d9:4a 06             send 6 

  03db:76               push0 
  03dc:45 03 00         callb procedure_0003 0 //  

  03df:39 6c            pushi 6c // $6c dispose
  03e1:76               push0 
  03e2:54 04             self 4 


        code_03e4
  03e4:3a                toss 
  03e5:48                 ret 
    )

)

// 04d2
(instance sGuardWakes of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0420
  0420:87 01              lap param1 
  0422:65 0a             aTop state 
  0424:36                push 
  0425:3c                 dup 
  0426:35 00              ldi 0 
  0428:1a                 eq? 
  0429:30 002d            bnt code_0459 
  042c:76               push0 
  042d:45 02 00         callb procedure_0002 0 //  

  0430:38 00a2          pushi a2 // $a2 setLoop
  0433:78               push1 
  0434:76               push0 
  0435:38 0120          pushi 120 // $120 setCel
  0438:78               push1 
  0439:38 00dd          pushi dd // $dd lastCel
  043c:76               push0 
  043d:72 0fa8          lofsa $0fa8 // guard
  0440:4a 04             send 4 

  0442:36                push 
  0443:38 00db          pushi db // $db cycleSpeed
  0446:78               push1 
  0447:39 0c            pushi c // $c nsRight
  0449:38 0096          pushi 96 // $96 setCycle
  044c:7a               push2 
  044d:51 1b            class Beg 
  044f:36                push 
  0450:7c            pushSelf 
  0451:72 0fa8          lofsa $0fa8 // guard
  0454:4a 1a             send 1a 

  0456:32 0070            jmp code_04c9 

        code_0459
  0459:3c                 dup 
  045a:35 01              ldi 1 
  045c:1a                 eq? 
  045d:30 0023            bnt code_0483 
  0460:35 01              ldi 1 
  0462:a3 00              sal local0 
  0464:39 04            pushi 4 // $4 x
  0466:72 1996          lofsa $1996 // The Guard
  0469:36                push 
  046a:38 026c          pushi 26c // $26c sel_620
  046d:7a               push2 
  046e:39 6c            pushi 6c // $6c dispose
  0470:45 12 08         callb procedure_0012 8 //  

  0473:76               push0 
  0474:45 03 00         callb procedure_0003 0 //  

  0477:39 03            pushi 3 // $3 y
  0479:39 06            pushi 6 // $6 loop
  047b:7a               push2 
  047c:7c            pushSelf 
  047d:45 11 06         callb procedure_0011 6 //  

  0480:32 0046            jmp code_04c9 

        code_0483
  0483:3c                 dup 
  0484:35 02              ldi 2 
  0486:1a                 eq? 
  0487:30 001e            bnt code_04a8 
  048a:76               push0 
  048b:45 02 00         callb procedure_0002 0 //  

  048e:38 00a2          pushi a2 // $a2 setLoop
  0491:78               push1 
  0492:76               push0 
  0493:38 0120          pushi 120 // $120 setCel
  0496:78               push1 
  0497:76               push0 
  0498:38 0096          pushi 96 // $96 setCycle
  049b:7a               push2 
  049c:51 1a            class End 
  049e:36                push 
  049f:7c            pushSelf 
  04a0:72 0fa8          lofsa $0fa8 // guard
  04a3:4a 14             send 14 

  04a5:32 0021            jmp code_04c9 

        code_04a8
  04a8:3c                 dup 
  04a9:35 03              ldi 3 
  04ab:1a                 eq? 
  04ac:30 001a            bnt code_04c9 
  04af:76               push0 
  04b0:45 03 00         callb procedure_0003 0 //  

  04b3:38 008e          pushi 8e // $8e setScript
  04b6:78               push1 
  04b7:72 0da4          lofsa $0da4 // sSleeping
  04ba:36                push 
  04bb:72 0fa8          lofsa $0fa8 // guard
  04be:4a 06             send 6 

  04c0:35 00              ldi 0 
  04c2:a3 00              sal local0 
  04c4:39 6c            pushi 6c // $6c dispose
  04c6:76               push0 
  04c7:54 04             self 4 


        code_04c9
  04c9:3a                toss 
  04ca:48                 ret 
  04cb:00                bnot 
    )

)

// 0592
(instance sGuardSleeps of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0506
  0506:87 01              lap param1 
  0508:65 0a             aTop state 
  050a:36                push 
  050b:3c                 dup 
  050c:35 00              ldi 0 
  050e:1a                 eq? 
  050f:30 0026            bnt code_0538 
  0512:76               push0 
  0513:45 02 00         callb procedure_0002 0 //  

  0516:35 00              ldi 0 
  0518:a3 00              sal local0 
  051a:7a               push2 
  051b:38 026c          pushi 26c // $26c sel_620
  051e:39 03            pushi 3 // $3 y
  0520:45 0e 04         callb procedure_000e 4 //  

  0523:39 03            pushi 3 // $3 y
  0525:89 00              lsg  
  0527:38 026c          pushi 26c // $26c sel_620
  052a:39 04            pushi 4 // $4 x
  052c:45 12 06         callb procedure_0012 6 //  

  052f:38 008d          pushi 8d // $8d cue
  0532:76               push0 
  0533:54 04             self 4 

  0535:32 0052            jmp code_058a 

        code_0538
  0538:3c                 dup 
  0539:35 01              ldi 1 
  053b:1a                 eq? 
  053c:30 002a            bnt code_0569 
  053f:39 04            pushi 4 // $4 x
  0541:72 1996          lofsa $1996 // The Guard
  0544:36                push 
  0545:38 026c          pushi 26c // $26c sel_620
  0548:39 05            pushi 5 // $5 view
  054a:39 6c            pushi 6c // $6c dispose
  054c:45 12 08         callb procedure_0012 8 //  

  054f:38 00a2          pushi a2 // $a2 setLoop
  0552:78               push1 
  0553:76               push0 
  0554:38 0120          pushi 120 // $120 setCel
  0557:78               push1 
  0558:76               push0 
  0559:38 0096          pushi 96 // $96 setCycle
  055c:7a               push2 
  055d:51 1a            class End 
  055f:36                push 
  0560:7c            pushSelf 
  0561:72 0fa8          lofsa $0fa8 // guard
  0564:4a 14             send 14 

  0566:32 0021            jmp code_058a 

        code_0569
  0569:3c                 dup 
  056a:35 02              ldi 2 
  056c:1a                 eq? 
  056d:30 001a            bnt code_058a 
  0570:38 008e          pushi 8e // $8e setScript
  0573:78               push1 
  0574:72 0da4          lofsa $0da4 // sSleeping
  0577:36                push 
  0578:72 0fa8          lofsa $0fa8 // guard
  057b:4a 06             send 6 

  057d:35 00              ldi 0 
  057f:a3 00              sal local0 
  0581:76               push0 
  0582:45 03 00         callb procedure_0003 0 //  

  0585:39 6c            pushi 6c // $6c dispose
  0587:76               push0 
  0588:54 04             self 4 


        code_058a
  058a:3a                toss 
  058b:48                 ret 
    )

)

// 097e
(instance sGuardApproves of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_05c6
  05c6:87 01              lap param1 
  05c8:65 0a             aTop state 
  05ca:36                push 
  05cb:3c                 dup 
  05cc:35 00              ldi 0 
  05ce:1a                 eq? 
  05cf:30 0069            bnt code_063b 
  05d2:76               push0 
  05d3:45 02 00         callb procedure_0002 0 //  

  05d6:83 01              lal local1 
  05d8:30 000f            bnt code_05ea 
  05db:39 03            pushi 3 // $3 y
  05dd:89 00              lsg  
  05df:38 026c          pushi 26c // $26c sel_620
  05e2:39 06            pushi 6 // $6 loop
  05e4:45 12 06         callb procedure_0012 6 //  

  05e7:32 0048            jmp code_0632 

        code_05ea
  05ea:83 02              lal local2 
  05ec:30 000f            bnt code_05fe 
  05ef:39 03            pushi 3 // $3 y
  05f1:89 00              lsg  
  05f3:38 026c          pushi 26c // $26c sel_620
  05f6:39 07            pushi 7 // $7 cel
  05f8:45 12 06         callb procedure_0012 6 //  

  05fb:32 0034            jmp code_0632 

        code_05fe
  05fe:83 03              lal local3 
  0600:30 000f            bnt code_0612 
  0603:39 03            pushi 3 // $3 y
  0605:89 00              lsg  
  0607:38 026c          pushi 26c // $26c sel_620
  060a:39 08            pushi 8 // $8 underBits
  060c:45 12 06         callb procedure_0012 6 //  

  060f:32 0020            jmp code_0632 

        code_0612
  0612:83 04              lal local4 
  0614:30 000f            bnt code_0626 
  0617:39 03            pushi 3 // $3 y
  0619:89 00              lsg  
  061b:38 026c          pushi 26c // $26c sel_620
  061e:39 09            pushi 9 // $9 nsTop
  0620:45 12 06         callb procedure_0012 6 //  

  0623:32 000c            jmp code_0632 

        code_0626
  0626:39 03            pushi 3 // $3 y
  0628:89 00              lsg  
  062a:38 026c          pushi 26c // $26c sel_620
  062d:39 0a            pushi a // $a nsLeft
  062f:45 12 06         callb procedure_0012 6 //  


        code_0632
  0632:38 008d          pushi 8d // $8d cue
  0635:76               push0 
  0636:54 04             self 4 

  0638:32 033a            jmp code_0975 

        code_063b
  063b:3c                 dup 
  063c:35 01              ldi 1 
  063e:1a                 eq? 
  063f:30 00fd            bnt code_073f 
  0642:78               push1 
  0643:39 2d            pushi 2d // $2d client
  0645:45 06 02         callb procedure_0006 2 //  

  0648:30 0029            bnt code_0674 
  064b:39 04            pushi 4 // $4 x
  064d:72 1996          lofsa $1996 // The Guard
  0650:36                push 
  0651:38 026c          pushi 26c // $26c sel_620
  0654:39 0b            pushi b // $b nsBottom
  0656:39 6c            pushi 6c // $6c dispose
  0658:45 12 08         callb procedure_0012 8 //  

  065b:76               push0 
  065c:45 03 00         callb procedure_0003 0 //  

  065f:38 008e          pushi 8e // $8e setScript
  0662:78               push1 
  0663:72 0cfa          lofsa $0cfa // sBackToSleep
  0666:36                push 
  0667:72 0fa8          lofsa $0fa8 // guard
  066a:4a 06             send 6 

  066c:39 6c            pushi 6c // $6c dispose
  066e:76               push0 
  066f:54 04             self 4 

  0671:32 00c2            jmp code_0736 

        code_0674
  0674:83 01              lal local1 
  0676:30 001f            bnt code_0698 
  0679:39 04            pushi 4 // $4 x
  067b:72 1996          lofsa $1996 // The Guard
  067e:36                push 
  067f:38 026c          pushi 26c // $26c sel_620
  0682:39 0c            pushi c // $c nsRight
  0684:39 6c            pushi 6c // $6c dispose
  0686:45 12 08         callb procedure_0012 8 //  

  0689:35 00              ldi 0 
  068b:a3 01              sal local1 
  068d:7a               push2 
  068e:39 06            pushi 6 // $6 loop
  0690:39 76            pushi 76 // $76 allTrue
  0692:45 0a 04         callb procedure_000a 4 //  

  0695:32 009e            jmp code_0736 

        code_0698
  0698:83 03              lal local3 
  069a:30 002d            bnt code_06ca 
  069d:39 04            pushi 4 // $4 x
  069f:72 1996          lofsa $1996 // The Guard
  06a2:36                push 
  06a3:38 026c          pushi 26c // $26c sel_620
  06a6:39 0d            pushi d // $d lsTop
  06a8:39 6c            pushi 6c // $6c dispose
  06aa:45 12 08         callb procedure_0012 8 //  

  06ad:35 00              ldi 0 
  06af:a3 03              sal local3 
  06b1:76               push0 
  06b2:45 03 00         callb procedure_0003 0 //  

  06b5:38 008e          pushi 8e // $8e setScript
  06b8:78               push1 
  06b9:72 0cfa          lofsa $0cfa // sBackToSleep
  06bc:36                push 
  06bd:72 0fa8          lofsa $0fa8 // guard
  06c0:4a 06             send 6 

  06c2:39 6c            pushi 6c // $6c dispose
  06c4:76               push0 
  06c5:54 04             self 4 

  06c7:32 006c            jmp code_0736 

        code_06ca
  06ca:83 02              lal local2 
  06cc:30 001f            bnt code_06ee 
  06cf:39 04            pushi 4 // $4 x
  06d1:72 1996          lofsa $1996 // The Guard
  06d4:36                push 
  06d5:38 026c          pushi 26c // $26c sel_620
  06d8:39 0e            pushi e // $e lsLeft
  06da:39 6c            pushi 6c // $6c dispose
  06dc:45 12 08         callb procedure_0012 8 //  

  06df:35 00              ldi 0 
  06e1:a3 02              sal local2 
  06e3:7a               push2 
  06e4:39 06            pushi 6 // $6 loop
  06e6:39 77            pushi 77 // $77 contains
  06e8:45 0a 04         callb procedure_000a 4 //  

  06eb:32 0048            jmp code_0736 

        code_06ee
  06ee:83 04              lal local4 
  06f0:30 002d            bnt code_0720 
  06f3:39 04            pushi 4 // $4 x
  06f5:72 1996          lofsa $1996 // The Guard
  06f8:36                push 
  06f9:38 026c          pushi 26c // $26c sel_620
  06fc:39 0f            pushi f // $f lsBottom
  06fe:39 6c            pushi 6c // $6c dispose
  0700:45 12 08         callb procedure_0012 8 //  

  0703:35 00              ldi 0 
  0705:a3 04              sal local4 
  0707:76               push0 
  0708:45 03 00         callb procedure_0003 0 //  

  070b:38 008e          pushi 8e // $8e setScript
  070e:78               push1 
  070f:72 0cfa          lofsa $0cfa // sBackToSleep
  0712:36                push 
  0713:72 0fa8          lofsa $0fa8 // guard
  0716:4a 06             send 6 

  0718:39 6c            pushi 6c // $6c dispose
  071a:76               push0 
  071b:54 04             self 4 

  071d:32 0016            jmp code_0736 

        code_0720
  0720:39 04            pushi 4 // $4 x
  0722:72 1996          lofsa $1996 // The Guard
  0725:36                push 
  0726:38 026c          pushi 26c // $26c sel_620
  0729:39 10            pushi 10 // $10 lsRight
  072b:39 6c            pushi 6c // $6c dispose
  072d:45 12 08         callb procedure_0012 8 //  

  0730:78               push1 
  0731:39 30            pushi 30 // $30 b-moveCnt
  0733:45 07 02         callb procedure_0007 2 //  


        code_0736
  0736:38 008d          pushi 8d // $8d cue
  0739:76               push0 
  073a:54 04             self 4 

  073c:32 0236            jmp code_0975 

        code_073f
  073f:3c                 dup 
  0740:35 02              ldi 2 
  0742:1a                 eq? 
  0743:30 0021            bnt code_0767 
  0746:38 00db          pushi db // $db cycleSpeed
  0749:78               push1 
  074a:39 0c            pushi c // $c nsRight
  074c:38 00a2          pushi a2 // $a2 setLoop
  074f:78               push1 
  0750:39 05            pushi 5 // $5 view
  0752:38 0120          pushi 120 // $120 setCel
  0755:78               push1 
  0756:76               push0 
  0757:38 0096          pushi 96 // $96 setCycle
  075a:7a               push2 
  075b:51 1a            class End 
  075d:36                push 
  075e:7c            pushSelf 
  075f:72 0fa8          lofsa $0fa8 // guard
  0762:4a 1a             send 1a 

  0764:32 020e            jmp code_0975 

        code_0767
  0767:3c                 dup 
  0768:35 03              ldi 3 
  076a:1a                 eq? 
  076b:30 001b            bnt code_0789 
  076e:38 00a2          pushi a2 // $a2 setLoop
  0771:78               push1 
  0772:39 03            pushi 3 // $3 y
  0774:38 0120          pushi 120 // $120 setCel
  0777:78               push1 
  0778:76               push0 
  0779:38 0096          pushi 96 // $96 setCycle
  077c:7a               push2 
  077d:51 1a            class End 
  077f:36                push 
  0780:7c            pushSelf 
  0781:72 0fa8          lofsa $0fa8 // guard
  0784:4a 14             send 14 

  0786:32 01ec            jmp code_0975 

        code_0789
  0789:3c                 dup 
  078a:35 04              ldi 4 
  078c:1a                 eq? 
  078d:30 001d            bnt code_07ad 
  0790:38 00a2          pushi a2 // $a2 setLoop
  0793:78               push1 
  0794:39 04            pushi 4 // $4 x
  0796:38 0120          pushi 120 // $120 setCel
  0799:78               push1 
  079a:76               push0 
  079b:38 0096          pushi 96 // $96 setCycle
  079e:39 03            pushi 3 // $3 y
  07a0:51 59            class ForwardCounter 
  07a2:36                push 
  07a3:7a               push2 
  07a4:7c            pushSelf 
  07a5:72 0fa8          lofsa $0fa8 // guard
  07a8:4a 16             send 16 

  07aa:32 01c8            jmp code_0975 

        code_07ad
  07ad:3c                 dup 
  07ae:35 05              ldi 5 
  07b0:1a                 eq? 
  07b1:30 0007            bnt code_07bb 
  07b4:35 02              ldi 2 
  07b6:65 12             aTop seconds 
  07b8:32 01ba            jmp code_0975 

        code_07bb
  07bb:3c                 dup 
  07bc:35 06              ldi 6 
  07be:1a                 eq? 
  07bf:30 0024            bnt code_07e6 
  07c2:38 00a2          pushi a2 // $a2 setLoop
  07c5:78               push1 
  07c6:39 03            pushi 3 // $3 y
  07c8:38 0120          pushi 120 // $120 setCel
  07cb:78               push1 
  07cc:38 00dd          pushi dd // $dd lastCel
  07cf:76               push0 
  07d0:72 0fa8          lofsa $0fa8 // guard
  07d3:4a 04             send 4 

  07d5:36                push 
  07d6:38 0096          pushi 96 // $96 setCycle
  07d9:7a               push2 
  07da:51 1b            class Beg 
  07dc:36                push 
  07dd:7c            pushSelf 
  07de:72 0fa8          lofsa $0fa8 // guard
  07e1:4a 14             send 14 

  07e3:32 018f            jmp code_0975 

        code_07e6
  07e6:3c                 dup 
  07e7:35 07              ldi 7 
  07e9:1a                 eq? 
  07ea:30 0016            bnt code_0803 
  07ed:38 00a2          pushi a2 // $a2 setLoop
  07f0:78               push1 
  07f1:39 05            pushi 5 // $5 view
  07f3:38 0096          pushi 96 // $96 setCycle
  07f6:7a               push2 
  07f7:51 1a            class End 
  07f9:36                push 
  07fa:7c            pushSelf 
  07fb:72 0fa8          lofsa $0fa8 // guard
  07fe:4a 0e             send e 

  0800:32 0172            jmp code_0975 

        code_0803
  0803:3c                 dup 
  0804:35 08              ldi 8 
  0806:1a                 eq? 
  0807:30 0068            bnt code_0872 
  080a:78               push1 
  080b:39 15            pushi 15 // $15 brBottom
  080d:45 06 02         callb procedure_0006 2 //  

  0810:30 002f            bnt code_0842 
  0813:39 04            pushi 4 // $4 x
  0815:72 1996          lofsa $1996 // The Guard
  0818:36                push 
  0819:38 026c          pushi 26c // $26c sel_620
  081c:39 11            pushi 11 // $11 signal
  081e:39 6c            pushi 6c // $6c dispose
  0820:45 12 08         callb procedure_0012 8 //  

  0823:78               push1 
  0824:39 2d            pushi 2d // $2d client
  0826:45 07 02         callb procedure_0007 2 //  

  0829:76               push0 
  082a:45 03 00         callb procedure_0003 0 //  

  082d:38 008e          pushi 8e // $8e setScript
  0830:78               push1 
  0831:72 0cfa          lofsa $0cfa // sBackToSleep
  0834:36                push 
  0835:72 0fa8          lofsa $0fa8 // guard
  0838:4a 06             send 6 

  083a:39 6c            pushi 6c // $6c dispose
  083c:76               push0 
  083d:54 04             self 4 

  083f:32 0133            jmp code_0975 

        code_0842
  0842:39 04            pushi 4 // $4 x
  0844:72 1996          lofsa $1996 // The Guard
  0847:36                push 
  0848:38 026c          pushi 26c // $26c sel_620
  084b:39 12            pushi 12 // $12 illegalBits
  084d:39 6c            pushi 6c // $6c dispose
  084f:45 12 08         callb procedure_0012 8 //  

  0852:38 00db          pushi db // $db cycleSpeed
  0855:78               push1 
  0856:39 12            pushi 12 // $12 illegalBits
  0858:38 00a2          pushi a2 // $a2 setLoop
  085b:78               push1 
  085c:76               push0 
  085d:38 0120          pushi 120 // $120 setCel
  0860:78               push1 
  0861:76               push0 
  0862:38 0096          pushi 96 // $96 setCycle
  0865:7a               push2 
  0866:51 1a            class End 
  0868:36                push 
  0869:7c            pushSelf 
  086a:72 0fa8          lofsa $0fa8 // guard
  086d:4a 1a             send 1a 

  086f:32 0103            jmp code_0975 

        code_0872
  0872:3c                 dup 
  0873:35 09              ldi 9 
  0875:1a                 eq? 
  0876:30 0014            bnt code_088d 
  0879:38 008e          pushi 8e // $8e setScript
  087c:78               push1 
  087d:72 0da4          lofsa $0da4 // sSleeping
  0880:36                push 
  0881:72 0fa8          lofsa $0fa8 // guard
  0884:4a 06             send 6 

  0886:35 03              ldi 3 
  0888:65 12             aTop seconds 
  088a:32 00e8            jmp code_0975 

        code_088d
  088d:3c                 dup 
  088e:35 0a              ldi a 
  0890:1a                 eq? 
  0891:30 000f            bnt code_08a3 
  0894:39 2a            pushi 2a // $2a play
  0896:76               push0 
  0897:72 113a          lofsa $113a // elevatorDing
  089a:4a 04             send 4 

  089c:35 0a              ldi a 
  089e:65 10             aTop cycles 
  08a0:32 00d2            jmp code_0975 

        code_08a3
  08a3:3c                 dup 
  08a4:35 0b              ldi b 
  08a6:1a                 eq? 
  08a7:30 0024            bnt code_08ce 
  08aa:38 0096          pushi 96 // $96 setCycle
  08ad:7a               push2 
  08ae:51 1a            class End 
  08b0:36                push 
  08b1:7c            pushSelf 
  08b2:72 1052          lofsa $1052 // elevator
  08b5:4a 08             send 8 

  08b7:38 0096          pushi 96 // $96 setCycle
  08ba:78               push1 
  08bb:51 1a            class End 
  08bd:36                push 
  08be:72 10d0          lofsa $10d0 // elevatorLeft
  08c1:4a 06             send 6 

  08c3:39 2a            pushi 2a // $2a play
  08c5:76               push0 
  08c6:72 1170          lofsa $1170 // elevatorDoor
  08c9:4a 04             send 4 

  08cb:32 00a7            jmp code_0975 

        code_08ce
  08ce:3c                 dup 
  08cf:35 0c              ldi c 
  08d1:1a                 eq? 
  08d2:30 001e            bnt code_08f3 
  08d5:38 009c          pushi 9c // $9c stop
  08d8:76               push0 
  08d9:72 1170          lofsa $1170 // elevatorDoor
  08dc:4a 04             send 4 

  08de:38 011b          pushi 11b // $11b setMotion
  08e1:39 04            pushi 4 // $4 x
  08e3:51 1e            class MoveTo 
  08e5:36                push 
  08e6:39 60            pushi 60 // $60 frame
  08e8:38 0092          pushi 92 // $92 cycleCnt
  08eb:7c            pushSelf 
  08ec:81 00              lag  
  08ee:4a 0c             send c 

  08f0:32 0082            jmp code_0975 

        code_08f3
  08f3:3c                 dup 
  08f4:35 0d              ldi d 
  08f6:1a                 eq? 
  08f7:30 001a            bnt code_0914 
  08fa:39 42            pushi 42 // $42 setPri
  08fc:78               push1 
  08fd:39 09            pushi 9 // $9 nsTop
  08ff:38 011b          pushi 11b // $11b setMotion
  0902:39 04            pushi 4 // $4 x
  0904:51 1e            class MoveTo 
  0906:36                push 
  0907:39 3a            pushi 3a // $3a heading
  0909:38 0088          pushi 88 // $88 lastTicks
  090c:7c            pushSelf 
  090d:81 00              lag  
  090f:4a 12             send 12 

  0911:32 0061            jmp code_0975 

        code_0914
  0914:3c                 dup 
  0915:35 0e              ldi e 
  0917:1a                 eq? 
  0918:30 000f            bnt code_092a 
  091b:38 00e4          pushi e4 // $e4 setHeading
  091e:7a               push2 
  091f:38 00b4          pushi b4 // $b4 busy
  0922:7c            pushSelf 
  0923:81 00              lag  
  0925:4a 08             send 8 

  0927:32 004b            jmp code_0975 

        code_092a
  092a:3c                 dup 
  092b:35 0f              ldi f 
  092d:1a                 eq? 
  092e:30 0024            bnt code_0955 
  0931:39 2a            pushi 2a // $2a play
  0933:76               push0 
  0934:72 1170          lofsa $1170 // elevatorDoor
  0937:4a 04             send 4 

  0939:38 0096          pushi 96 // $96 setCycle
  093c:7a               push2 
  093d:51 1b            class Beg 
  093f:36                push 
  0940:7c            pushSelf 
  0941:72 1052          lofsa $1052 // elevator
  0944:4a 08             send 8 

  0946:38 0096          pushi 96 // $96 setCycle
  0949:78               push1 
  094a:51 1b            class Beg 
  094c:36                push 
  094d:72 10d0          lofsa $10d0 // elevatorLeft
  0950:4a 06             send 6 

  0952:32 0020            jmp code_0975 

        code_0955
  0955:3c                 dup 
  0956:35 10              ldi 10 
  0958:1a                 eq? 
  0959:30 0019            bnt code_0975 
  095c:38 009c          pushi 9c // $9c stop
  095f:76               push0 
  0960:72 1170          lofsa $1170 // elevatorDoor
  0963:4a 04             send 4 

  0965:38 0179          pushi 179 // $179 newRoom
  0968:78               push1 
  0969:38 0280          pushi 280 // $280 sel_640
  096c:81 02              lag  
  096e:4a 06             send 6 

  0970:39 6c            pushi 6c // $6c dispose
  0972:76               push0 
  0973:54 04             self 4 


        code_0975
  0975:3a                toss 
  0976:48                 ret 
  0977:00                bnot 
    )

)

// 0b52
(instance sUsesBoard of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_09b2
  09b2:87 01              lap param1 
  09b4:65 0a             aTop state 
  09b6:36                push 
  09b7:3c                 dup 
  09b8:35 00              ldi 0 
  09ba:1a                 eq? 
  09bb:30 018b            bnt code_0b49 
  09be:38 011a          pushi 11a // $11a canControl
  09c1:78               push1 
  09c2:76               push0 
  09c3:51 31            class User 
  09c5:4a 06             send 6 

  09c7:38 00c9          pushi c9 // $c9 disable
  09ca:78               push1 
  09cb:39 08            pushi 8 // $8 underBits
  09cd:81 45              lag  
  09cf:4a 06             send 6 

  09d1:39 74            pushi 74 // $74 eachElementDo
  09d3:78               push1 
  09d4:39 69            pushi 69 // $69 hide
  09d6:81 05              lag  
  09d8:4a 06             send 6 

  09da:39 6c            pushi 6c // $6c dispose
  09dc:76               push0 
  09dd:72 169e          lofsa $169e // plant
  09e0:4a 04             send 4 

  09e2:39 6c            pushi 6c // $6c dispose
  09e4:76               push0 
  09e5:72 16da          lofsa $16da // mural
  09e8:4a 04             send 4 

  09ea:39 6c            pushi 6c // $6c dispose
  09ec:76               push0 
  09ed:72 173e          lofsa $173e // fStairs
  09f0:4a 04             send 4 

  09f2:39 6c            pushi 6c // $6c dispose
  09f4:76               push0 
  09f5:72 177e          lofsa $177e // fLamp1
  09f8:4a 04             send 4 

  09fa:39 6c            pushi 6c // $6c dispose
  09fc:76               push0 
  09fd:72 17ba          lofsa $17ba // fLamp2
  0a00:4a 04             send 4 

  0a02:39 6c            pushi 6c // $6c dispose
  0a04:76               push0 
  0a05:72 181e          lofsa $181e // fAshtray
  0a08:4a 04             send 4 

  0a0a:39 6c            pushi 6c // $6c dispose
  0a0c:76               push0 
  0a0d:72 185e          lofsa $185e // sconceA
  0a10:4a 04             send 4 

  0a12:39 6c            pushi 6c // $6c dispose
  0a14:76               push0 
  0a15:72 189a          lofsa $189a // sconceB
  0a18:4a 04             send 4 

  0a1a:39 6c            pushi 6c // $6c dispose
  0a1c:76               push0 
  0a1d:72 18d6          lofsa $18d6 // clock
  0a20:4a 04             send 4 

  0a22:39 6c            pushi 6c // $6c dispose
  0a24:76               push0 
  0a25:72 193a          lofsa $193a // breasts
  0a28:4a 04             send 4 

  0a2a:39 6b            pushi 6b // $6b init
  0a2c:76               push0 
  0a2d:72 1270          lofsa $1270 // businessOne
  0a30:4a 04             send 4 

  0a32:39 6b            pushi 6b // $6b init
  0a34:76               push0 
  0a35:72 12f8          lofsa $12f8 // businessTwo
  0a38:4a 04             send 4 

  0a3a:39 6b            pushi 6b // $6b init
  0a3c:76               push0 
  0a3d:72 1380          lofsa $1380 // businessThree
  0a40:4a 04             send 4 

  0a42:39 6b            pushi 6b // $6b init
  0a44:76               push0 
  0a45:72 143e          lofsa $143e // businessFour
  0a48:4a 04             send 4 

  0a4a:39 6b            pushi 6b // $6b init
  0a4c:76               push0 
  0a4d:72 14c6          lofsa $14c6 // businessFive
  0a50:4a 04             send 4 

  0a52:39 6b            pushi 6b // $6b init
  0a54:76               push0 
  0a55:72 154e          lofsa $154e // businessSix
  0a58:4a 04             send 4 

  0a5a:39 6b            pushi 6b // $6b init
  0a5c:76               push0 
  0a5d:72 15d6          lofsa $15d6 // businessSeven
  0a60:4a 04             send 4 

  0a62:39 6b            pushi 6b // $6b init
  0a64:76               push0 
  0a65:72 165e          lofsa $165e // businessEight
  0a68:4a 04             send 4 

  0a6a:38 018c          pushi 18c // $18c drawPic
  0a6d:78               push1 
  0a6e:38 0276          pushi 276 // $276 sel_630
  0a71:81 02              lag  
  0a73:4a 06             send 6 

  0a75:78               push1 
  0a76:78               push1 
  0a77:45 16 02         callb procedure_0016 2 //  

  0a7a:39 09            pushi 9 // $9 nsTop
  0a7c:38 026c          pushi 26c // $26c sel_620
  0a7f:39 13            pushi 13 // $13 brTop
  0a81:39 64            pushi 64 // $64 moveDone
  0a83:39 56            pushi 56 // $56 parseLang
  0a85:39 43            pushi 43 // $43 at
  0a87:39 66            pushi 66 // $66 flags
  0a89:89 80              lsg  
  0a8b:39 69            pushi 69 // $69 hide
  0a8d:89 17              lsg  
  0a8f:43 1b 12         callk Display 12 

  0a92:39 09            pushi 9 // $9 nsTop
  0a94:38 026c          pushi 26c // $26c sel_620
  0a97:39 14            pushi 14 // $14 brLeft
  0a99:39 64            pushi 64 // $64 moveDone
  0a9b:39 58            pushi 58 // $58 subtitleLang
  0a9d:39 4f            pushi 4f // $4f restore
  0a9f:39 66            pushi 66 // $66 flags
  0aa1:89 80              lsg  
  0aa3:39 69            pushi 69 // $69 hide
  0aa5:89 17              lsg  
  0aa7:43 1b 12         callk Display 12 

  0aaa:39 09            pushi 9 // $9 nsTop
  0aac:38 026c          pushi 26c // $26c sel_620
  0aaf:39 15            pushi 15 // $15 brBottom
  0ab1:39 64            pushi 64 // $64 moveDone
  0ab3:39 58            pushi 58 // $58 subtitleLang
  0ab5:39 5b            pushi 5b // $5b palette
  0ab7:39 66            pushi 66 // $66 flags
  0ab9:89 80              lsg  
  0abb:39 69            pushi 69 // $69 hide
  0abd:89 17              lsg  
  0abf:43 1b 12         callk Display 12 

  0ac2:39 09            pushi 9 // $9 nsTop
  0ac4:38 026c          pushi 26c // $26c sel_620
  0ac7:39 16            pushi 16 // $16 brRight
  0ac9:39 64            pushi 64 // $64 moveDone
  0acb:39 59            pushi 59 // $59 size
  0acd:39 67            pushi 67 // $67 quitGame
  0acf:39 66            pushi 66 // $66 flags
  0ad1:89 80              lsg  
  0ad3:39 69            pushi 69 // $69 hide
  0ad5:89 17              lsg  
  0ad7:43 1b 12         callk Display 12 

  0ada:39 09            pushi 9 // $9 nsTop
  0adc:38 026c          pushi 26c // $26c sel_620
  0adf:39 17            pushi 17 // $17 name
  0ae1:39 64            pushi 64 // $64 moveDone
  0ae3:39 5a            pushi 5a // $5a points
  0ae5:39 73            pushi 73 // $73 add
  0ae7:39 66            pushi 66 // $66 flags
  0ae9:89 80              lsg  
  0aeb:39 69            pushi 69 // $69 hide
  0aed:89 17              lsg  
  0aef:43 1b 12         callk Display 12 

  0af2:39 09            pushi 9 // $9 nsTop
  0af4:38 026c          pushi 26c // $26c sel_620
  0af7:39 18            pushi 18 // $18 key
  0af9:39 64            pushi 64 // $64 moveDone
  0afb:39 5a            pushi 5a // $5a points
  0afd:39 7f            pushi 7f // $7f addAfter
  0aff:39 66            pushi 66 // $66 flags
  0b01:89 80              lsg  
  0b03:39 69            pushi 69 // $69 hide
  0b05:89 17              lsg  
  0b07:43 1b 12         callk Display 12 

  0b0a:39 09            pushi 9 // $9 nsTop
  0b0c:38 026c          pushi 26c // $26c sel_620
  0b0f:39 19            pushi 19 // $19 time
  0b11:39 64            pushi 64 // $64 moveDone
  0b13:39 5c            pushi 5c // $5c dataInc
  0b15:38 008b          pushi 8b // $8b caller
  0b18:39 66            pushi 66 // $66 flags
  0b1a:89 80              lsg  
  0b1c:39 69            pushi 69 // $69 hide
  0b1e:89 17              lsg  
  0b20:43 1b 12         callk Display 12 

  0b23:39 09            pushi 9 // $9 nsTop
  0b25:38 026c          pushi 26c // $26c sel_620
  0b28:39 1a            pushi 1a // $1a text
  0b2a:39 64            pushi 64 // $64 moveDone
  0b2c:39 5d            pushi 5d // $5d handle
  0b2e:38 0097          pushi 97 // $97 setReal
  0b31:39 66            pushi 66 // $66 flags
  0b33:89 80              lsg  
  0b35:39 69            pushi 69 // $69 hide
  0b37:89 17              lsg  
  0b39:43 1b 12         callk Display 12 

  0b3c:39 6c            pushi 6c // $6c dispose
  0b3e:76               push0 
  0b3f:72 11e8          lofsa $11e8 // board
  0b42:4a 04             send 4 

  0b44:39 6c            pushi 6c // $6c dispose
  0b46:76               push0 
  0b47:54 04             self 4 


        code_0b49
  0b49:3a                toss 
  0b4a:48                 ret 
  0b4b:00                bnot 
    )

)

// 0c6a
(instance sReturnsFromBoard of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0b86
  0b86:87 01              lap param1 
  0b88:65 0a             aTop state 
  0b8a:36                push 
  0b8b:3c                 dup 
  0b8c:35 00              ldi 0 
  0b8e:1a                 eq? 
  0b8f:30 00d0            bnt code_0c62 
  0b92:76               push0 
  0b93:45 03 00         callb procedure_0003 0 //  

  0b96:38 00a7          pushi a7 // $a7 enable
  0b99:78               push1 
  0b9a:39 08            pushi 8 // $8 underBits
  0b9c:81 45              lag  
  0b9e:4a 06             send 6 

  0ba0:38 018c          pushi 18c // $18c drawPic
  0ba3:78               push1 
  0ba4:38 0183          pushi 183 // $183 picture
  0ba7:76               push0 
  0ba8:81 02              lag  
  0baa:4a 04             send 4 

  0bac:36                push 
  0bad:81 02              lag  
  0baf:4a 06             send 6 

  0bb1:39 74            pushi 74 // $74 eachElementDo
  0bb3:78               push1 
  0bb4:38 00c2          pushi c2 // $c2 show
  0bb7:81 05              lag  
  0bb9:4a 06             send 6 

  0bbb:39 6c            pushi 6c // $6c dispose
  0bbd:76               push0 
  0bbe:72 1270          lofsa $1270 // businessOne
  0bc1:4a 04             send 4 

  0bc3:39 6c            pushi 6c // $6c dispose
  0bc5:76               push0 
  0bc6:72 12f8          lofsa $12f8 // businessTwo
  0bc9:4a 04             send 4 

  0bcb:39 6c            pushi 6c // $6c dispose
  0bcd:76               push0 
  0bce:72 1380          lofsa $1380 // businessThree
  0bd1:4a 04             send 4 

  0bd3:39 6c            pushi 6c // $6c dispose
  0bd5:76               push0 
  0bd6:72 143e          lofsa $143e // businessFour
  0bd9:4a 04             send 4 

  0bdb:39 6c            pushi 6c // $6c dispose
  0bdd:76               push0 
  0bde:72 14c6          lofsa $14c6 // businessFive
  0be1:4a 04             send 4 

  0be3:39 6c            pushi 6c // $6c dispose
  0be5:76               push0 
  0be6:72 154e          lofsa $154e // businessSix
  0be9:4a 04             send 4 

  0beb:39 6c            pushi 6c // $6c dispose
  0bed:76               push0 
  0bee:72 15d6          lofsa $15d6 // businessSeven
  0bf1:4a 04             send 4 

  0bf3:39 6c            pushi 6c // $6c dispose
  0bf5:76               push0 
  0bf6:72 165e          lofsa $165e // businessEight
  0bf9:4a 04             send 4 

  0bfb:39 6b            pushi 6b // $6b init
  0bfd:76               push0 
  0bfe:72 169e          lofsa $169e // plant
  0c01:4a 04             send 4 

  0c03:39 6b            pushi 6b // $6b init
  0c05:76               push0 
  0c06:72 16da          lofsa $16da // mural
  0c09:4a 04             send 4 

  0c0b:39 6b            pushi 6b // $6b init
  0c0d:76               push0 
  0c0e:72 173e          lofsa $173e // fStairs
  0c11:4a 04             send 4 

  0c13:39 6b            pushi 6b // $6b init
  0c15:76               push0 
  0c16:72 177e          lofsa $177e // fLamp1
  0c19:4a 04             send 4 

  0c1b:39 6b            pushi 6b // $6b init
  0c1d:76               push0 
  0c1e:72 17ba          lofsa $17ba // fLamp2
  0c21:4a 04             send 4 

  0c23:39 6b            pushi 6b // $6b init
  0c25:76               push0 
  0c26:72 181e          lofsa $181e // fAshtray
  0c29:4a 04             send 4 

  0c2b:39 6b            pushi 6b // $6b init
  0c2d:76               push0 
  0c2e:72 185e          lofsa $185e // sconceA
  0c31:4a 04             send 4 

  0c33:39 6b            pushi 6b // $6b init
  0c35:76               push0 
  0c36:72 189a          lofsa $189a // sconceB
  0c39:4a 04             send 4 

  0c3b:39 6b            pushi 6b // $6b init
  0c3d:76               push0 
  0c3e:72 18d6          lofsa $18d6 // clock
  0c41:4a 04             send 4 

  0c43:39 6b            pushi 6b // $6b init
  0c45:76               push0 
  0c46:72 193a          lofsa $193a // breasts
  0c49:4a 04             send 4 

  0c4b:39 6b            pushi 6b // $6b init
  0c4d:76               push0 
  0c4e:38 0119          pushi 119 // $119 approachVerbs
  0c51:39 03            pushi 3 // $3 y
  0c53:7a               push2 
  0c54:39 03            pushi 3 // $3 y
  0c56:39 04            pushi 4 // $4 x
  0c58:72 11e8          lofsa $11e8 // board
  0c5b:4a 0e             send e 

  0c5d:78               push1 
  0c5e:76               push0 
  0c5f:45 16 02         callb procedure_0016 2 //  


        code_0c62
  0c62:3a                toss 
  0c63:48                 ret 
    )

)

// 0cf4
(instance sBackToSleep of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0c9e
  0c9e:87 01              lap param1 
  0ca0:65 0a             aTop state 
  0ca2:36                push 
  0ca3:3c                 dup 
  0ca4:35 00              ldi 0 
  0ca6:1a                 eq? 
  0ca7:30 001e            bnt code_0cc8 
  0caa:35 00              ldi 0 
  0cac:a3 00              sal local0 
  0cae:38 00a2          pushi a2 // $a2 setLoop
  0cb1:78               push1 
  0cb2:76               push0 
  0cb3:38 0120          pushi 120 // $120 setCel
  0cb6:78               push1 
  0cb7:76               push0 
  0cb8:38 0096          pushi 96 // $96 setCycle
  0cbb:7a               push2 
  0cbc:51 1a            class End 
  0cbe:36                push 
  0cbf:7c            pushSelf 
  0cc0:72 0fa8          lofsa $0fa8 // guard
  0cc3:4a 14             send 14 

  0cc5:32 0023            jmp code_0ceb 

        code_0cc8
  0cc8:3c                 dup 
  0cc9:35 01              ldi 1 
  0ccb:1a                 eq? 
  0ccc:30 0010            bnt code_0cdf 
  0ccf:38 008e          pushi 8e // $8e setScript
  0cd2:78               push1 
  0cd3:72 0da4          lofsa $0da4 // sSleeping
  0cd6:36                push 
  0cd7:72 0fa8          lofsa $0fa8 // guard
  0cda:4a 06             send 6 

  0cdc:32 000c            jmp code_0ceb 

        code_0cdf
  0cdf:3c                 dup 
  0ce0:35 02              ldi 2 
  0ce2:1a                 eq? 
  0ce3:30 0005            bnt code_0ceb 
  0ce6:39 6c            pushi 6c // $6c dispose
  0ce8:76               push0 
  0ce9:54 04             self 4 


        code_0ceb
  0ceb:3a                toss 
  0cec:48                 ret 
  0ced:00                bnot 
    )

)

// 0d9e
(instance sSleeping of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0d28
  0d28:87 01              lap param1 
  0d2a:65 0a             aTop state 
  0d2c:36                push 
  0d2d:3c                 dup 
  0d2e:35 00              ldi 0 
  0d30:1a                 eq? 
  0d31:30 0020            bnt code_0d54 
  0d34:38 00a2          pushi a2 // $a2 setLoop
  0d37:78               push1 
  0d38:78               push1 
  0d39:38 0120          pushi 120 // $120 setCel
  0d3c:78               push1 
  0d3d:76               push0 
  0d3e:38 00db          pushi db // $db cycleSpeed
  0d41:78               push1 
  0d42:39 1e            pushi 1e // $1e mode
  0d44:38 0096          pushi 96 // $96 setCycle
  0d47:7a               push2 
  0d48:51 1a            class End 
  0d4a:36                push 
  0d4b:7c            pushSelf 
  0d4c:72 0fa8          lofsa $0fa8 // guard
  0d4f:4a 1a             send 1a 

  0d51:32 0041            jmp code_0d95 

        code_0d54
  0d54:3c                 dup 
  0d55:35 01              ldi 1 
  0d57:1a                 eq? 
  0d58:30 0007            bnt code_0d62 
  0d5b:35 14              ldi 14 
  0d5d:65 10             aTop cycles 
  0d5f:32 0033            jmp code_0d95 

        code_0d62
  0d62:3c                 dup 
  0d63:35 02              ldi 2 
  0d65:1a                 eq? 
  0d66:30 0010            bnt code_0d79 
  0d69:38 0096          pushi 96 // $96 setCycle
  0d6c:7a               push2 
  0d6d:51 1b            class Beg 
  0d6f:36                push 
  0d70:7c            pushSelf 
  0d71:72 0fa8          lofsa $0fa8 // guard
  0d74:4a 08             send 8 

  0d76:32 001c            jmp code_0d95 

        code_0d79
  0d79:3c                 dup 
  0d7a:35 03              ldi 3 
  0d7c:1a                 eq? 
  0d7d:30 0007            bnt code_0d87 
  0d80:35 14              ldi 14 
  0d82:65 10             aTop cycles 
  0d84:32 000e            jmp code_0d95 

        code_0d87
  0d87:3c                 dup 
  0d88:35 04              ldi 4 
  0d8a:1a                 eq? 
  0d8b:30 0007            bnt code_0d95 
  0d8e:38 008c          pushi 8c // $8c changeState
  0d91:78               push1 
  0d92:76               push0 
  0d93:54 06             self 6 


        code_0d95
  0d95:3a                toss 
  0d96:48                 ret 
  0d97:00                bnot 
    )

)

// 0fa2
(instance guard of Prop
    (properties
        x $112
        y $7c
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $1bac
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $f4
        approachY $a6
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $26e
        loop $1
        cel $0
        priority $b
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (init) // method_0f8a
  0f8a:39 6b            pushi 6b // $6b init
  0f8c:76               push0 
  0f8d:57 2f 04         super Prop 4 

  0f90:38 008e          pushi 8e // $8e setScript
  0f93:78               push1 
  0f94:72 0da4          lofsa $0da4 // sSleeping
  0f97:36                push 
  0f98:54 06             self 6 

  0f9a:48                 ret 
  0f9b:00                bnot 
    )

    (method (doVerb) // method_0dd2
  0dd2:8f 01              lsp param1 
  0dd4:3c                 dup 
  0dd5:35 05              ldi 5 
  0dd7:1a                 eq? 
  0dd8:30 004a            bnt code_0e25 
  0ddb:8b 00              lsl local0 
  0ddd:35 00              ldi 0 
  0ddf:1a                 eq? 
  0de0:30 0010            bnt code_0df3 
  0de3:38 008e          pushi 8e // $8e setScript
  0de6:78               push1 
  0de7:72 04d8          lofsa $04d8 // sGuardWakes
  0dea:36                push 
  0deb:72 0fa8          lofsa $0fa8 // guard
  0dee:4a 06             send 6 

  0df0:32 0195            jmp code_0f88 

        code_0df3
  0df3:39 6c            pushi 6c // $6c dispose
  0df5:76               push0 
  0df6:39 54            pushi 54 // $54 delete
  0df8:76               push0 
  0df9:51 75            class ll5Timer 
  0dfb:4a 08             send 8 

  0dfd:78               push1 
  0dfe:39 11            pushi 11 // $11 signal
  0e00:45 06 02         callb procedure_0006 2 //  

  0e03:30 000f            bnt code_0e15 
  0e06:38 008e          pushi 8e // $8e setScript
  0e09:78               push1 
  0e0a:72 0984          lofsa $0984 // sGuardApproves
  0e0d:36                push 
  0e0e:81 02              lag  
  0e10:4a 06             send 6 

  0e12:32 0173            jmp code_0f88 

        code_0e15
  0e15:38 008e          pushi 8e // $8e setScript
  0e18:78               push1 
  0e19:72 0598          lofsa $0598 // sGuardSleeps
  0e1c:36                push 
  0e1d:72 0fa8          lofsa $0fa8 // guard
  0e20:4a 06             send 6 

  0e22:32 0163            jmp code_0f88 

        code_0e25
  0e25:3c                 dup 
  0e26:35 04              ldi 4 
  0e28:1a                 eq? 
  0e29:30 00e7            bnt code_0f13 
  0e2c:8b 00              lsl local0 
  0e2e:35 01              ldi 1 
  0e30:1a                 eq? 
  0e31:30 00d3            bnt code_0f07 
  0e34:39 6c            pushi 6c // $6c dispose
  0e36:76               push0 
  0e37:39 54            pushi 54 // $54 delete
  0e39:76               push0 
  0e3a:51 75            class ll5Timer 
  0e3c:4a 08             send 8 

  0e3e:8f 02              lsp param2 
  0e40:3c                 dup 
  0e41:35 00              ldi 0 
  0e43:1a                 eq? 
  0e44:30 006e            bnt code_0eb5 
  0e47:39 20            pushi 20 // $20 state
  0e49:76               push0 
  0e4a:39 43            pushi 43 // $43 at
  0e4c:78               push1 
  0e4d:76               push0 
  0e4e:51 40            class Inv 
  0e50:4a 06             send 6 

  0e52:4a 04             send 4 

  0e54:36                push 
  0e55:35 01              ldi 1 
  0e57:1a                 eq? 
  0e58:30 0013            bnt code_0e6e 
  0e5b:35 01              ldi 1 
  0e5d:a3 01              sal local1 
  0e5f:38 008e          pushi 8e // $8e setScript
  0e62:78               push1 
  0e63:72 0984          lofsa $0984 // sGuardApproves
  0e66:36                push 
  0e67:81 02              lag  
  0e69:4a 06             send 6 

  0e6b:32 0095            jmp code_0f03 

        code_0e6e
  0e6e:39 20            pushi 20 // $20 state
  0e70:76               push0 
  0e71:39 43            pushi 43 // $43 at
  0e73:78               push1 
  0e74:76               push0 
  0e75:51 40            class Inv 
  0e77:4a 06             send 6 

  0e79:4a 04             send 4 

  0e7b:36                push 
  0e7c:35 02              ldi 2 
  0e7e:1a                 eq? 
  0e7f:30 0013            bnt code_0e95 
  0e82:35 01              ldi 1 
  0e84:a3 03              sal local3 
  0e86:38 008e          pushi 8e // $8e setScript
  0e89:78               push1 
  0e8a:72 0984          lofsa $0984 // sGuardApproves
  0e8d:36                push 
  0e8e:81 02              lag  
  0e90:4a 06             send 6 

  0e92:32 006e            jmp code_0f03 

        code_0e95
  0e95:39 04            pushi 4 // $4 x
  0e97:72 1996          lofsa $1996 // The Guard
  0e9a:36                push 
  0e9b:38 026c          pushi 26c // $26c sel_620
  0e9e:39 1b            pushi 1b // $1b elements
  0ea0:39 6c            pushi 6c // $6c dispose
  0ea2:45 12 08         callb procedure_0012 8 //  

  0ea5:38 008e          pushi 8e // $8e setScript
  0ea8:78               push1 
  0ea9:72 0cfa          lofsa $0cfa // sBackToSleep
  0eac:36                push 
  0ead:72 0fa8          lofsa $0fa8 // guard
  0eb0:4a 06             send 6 

  0eb2:32 004e            jmp code_0f03 

        code_0eb5
  0eb5:3c                 dup 
  0eb6:35 03              ldi 3 
  0eb8:1a                 eq? 
  0eb9:30 0013            bnt code_0ecf 
  0ebc:35 01              ldi 1 
  0ebe:a3 02              sal local2 
  0ec0:38 008e          pushi 8e // $8e setScript
  0ec3:78               push1 
  0ec4:72 0984          lofsa $0984 // sGuardApproves
  0ec7:36                push 
  0ec8:81 02              lag  
  0eca:4a 06             send 6 

  0ecc:32 0034            jmp code_0f03 

        code_0ecf
  0ecf:3c                 dup 
  0ed0:35 07              ldi 7 
  0ed2:1a                 eq? 
  0ed3:30 0013            bnt code_0ee9 
  0ed6:35 01              ldi 1 
  0ed8:a3 04              sal local4 
  0eda:38 008e          pushi 8e // $8e setScript
  0edd:78               push1 
  0ede:72 0984          lofsa $0984 // sGuardApproves
  0ee1:36                push 
  0ee2:81 02              lag  
  0ee4:4a 06             send 6 

  0ee6:32 001a            jmp code_0f03 

        code_0ee9
  0ee9:38 010c          pushi 10c // $10c doVerb
  0eec:7a               push2 
  0eed:8f 01              lsp param1 
  0eef:8f 02              lsp param2 
  0ef1:59 03            &rest 3 
  0ef3:57 2f 08         super Prop 8 

  0ef6:38 008e          pushi 8e // $8e setScript
  0ef9:78               push1 
  0efa:72 0cfa          lofsa $0cfa // sBackToSleep
  0efd:36                push 
  0efe:72 0fa8          lofsa $0fa8 // guard
  0f01:4a 06             send 6 


        code_0f03
  0f03:3a                toss 
  0f04:32 0081            jmp code_0f88 

        code_0f07
  0f07:7a               push2 
  0f08:38 026c          pushi 26c // $26c sel_620
  0f0b:39 1c            pushi 1c // $1c color
  0f0d:45 0e 04         callb procedure_000e 4 //  

  0f10:32 0075            jmp code_0f88 

        code_0f13
  0f13:3c                 dup 
  0f14:35 02              ldi 2 
  0f16:1a                 eq? 
  0f17:30 0020            bnt code_0f3a 
  0f1a:8b 00              lsl local0 
  0f1c:35 00              ldi 0 
  0f1e:1a                 eq? 
  0f1f:30 000c            bnt code_0f2e 
  0f22:7a               push2 
  0f23:38 026c          pushi 26c // $26c sel_620
  0f26:39 1d            pushi 1d // $1d back
  0f28:45 0e 04         callb procedure_000e 4 //  

  0f2b:32 005a            jmp code_0f88 

        code_0f2e
  0f2e:7a               push2 
  0f2f:38 026c          pushi 26c // $26c sel_620
  0f32:39 1e            pushi 1e // $1e mode
  0f34:45 0e 04         callb procedure_000e 4 //  

  0f37:32 004e            jmp code_0f88 

        code_0f3a
  0f3a:3c                 dup 
  0f3b:35 03              ldi 3 
  0f3d:1a                 eq? 
  0f3e:30 0027            bnt code_0f68 
  0f41:8b 00              lsl local0 
  0f43:35 01              ldi 1 
  0f45:1a                 eq? 
  0f46:30 0013            bnt code_0f5c 
  0f49:39 04            pushi 4 // $4 x
  0f4b:72 1996          lofsa $1996 // The Guard
  0f4e:36                push 
  0f4f:38 026c          pushi 26c // $26c sel_620
  0f52:39 1f            pushi 1f // $1f style
  0f54:39 6c            pushi 6c // $6c dispose
  0f56:45 12 08         callb procedure_0012 8 //  

  0f59:32 002c            jmp code_0f88 

        code_0f5c
  0f5c:7a               push2 
  0f5d:38 026c          pushi 26c // $26c sel_620
  0f60:39 20            pushi 20 // $20 state
  0f62:45 0e 04         callb procedure_000e 4 //  

  0f65:32 0020            jmp code_0f88 

        code_0f68
  0f68:3c                 dup 
  0f69:35 0a              ldi a 
  0f6b:1a                 eq? 
  0f6c:30 000c            bnt code_0f7b 
  0f6f:7a               push2 
  0f70:38 026c          pushi 26c // $26c sel_620
  0f73:39 21            pushi 21 // $21 font
  0f75:45 0e 04         callb procedure_000e 4 //  

  0f78:32 000d            jmp code_0f88 

        code_0f7b
  0f7b:38 010c          pushi 10c // $10c doVerb
  0f7e:7a               push2 
  0f7f:8f 01              lsp param1 
  0f81:8f 02              lsp param2 
  0f83:59 03            &rest 3 
  0f85:57 2f 08         super Prop 8 


        code_0f88
  0f88:3a                toss 
  0f89:48                 ret 
    )

)

// 104c
(instance elevator of Prop
    (properties
        x $3d
        y $94
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $1bbc
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $26c
        loop $0
        cel $0
        priority $8
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_100e
  100e:8f 01              lsp param1 
  1010:3c                 dup 
  1011:35 02              ldi 2 
  1013:1a                 eq? 
  1014:30 000c            bnt code_1023 
  1017:7a               push2 
  1018:38 026c          pushi 26c // $26c sel_620
  101b:39 22            pushi 22 // $22 type
  101d:45 0e 04         callb procedure_000e 4 //  

  1020:32 0020            jmp code_1043 

        code_1023
  1023:3c                 dup 
  1024:35 03              ldi 3 
  1026:1a                 eq? 
  1027:30 000c            bnt code_1036 
  102a:7a               push2 
  102b:38 026c          pushi 26c // $26c sel_620
  102e:39 23            pushi 23 // $23 window
  1030:45 0e 04         callb procedure_000e 4 //  

  1033:32 000d            jmp code_1043 

        code_1036
  1036:38 010c          pushi 10c // $10c doVerb
  1039:7a               push2 
  103a:8f 01              lsp param1 
  103c:8f 02              lsp param2 
  103e:59 03            &rest 3 
  1040:57 2f 08         super Prop 8 


        code_1043
  1043:3a                toss 
  1044:48                 ret 
  1045:00                bnot 
    )

)

// 10ca
(instance elevatorLeft of Prop
    (properties
        x $2d
        y $98
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $1bbc
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $26c
        loop $1
        cel $0
        priority $9
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_10b4
  10b4:38 010c          pushi 10c // $10c doVerb
  10b7:7a               push2 
  10b8:8f 01              lsp param1 
  10ba:8f 02              lsp param2 
  10bc:59 03            &rest 3 
  10be:72 1052          lofsa $1052 // elevator
  10c1:4a 08             send 8 

  10c3:48                 ret 
    )

)

// 1134
(instance elevatorDing of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $26d
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 116a
(instance elevatorDoor of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $26e
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 11e2
(instance board of Feature
    (properties
        x $a
        y $83
        z $0
        heading $0
        noun $0
        nsTop $62
        nsLeft $9
        nsBottom $a5
        nsRight $26
        description $1bf9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $3d
        approachY $b2
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_119e
  119e:8f 01              lsp param1 
  11a0:3c                 dup 
  11a1:35 02              ldi 2 
  11a3:1a                 eq? 
  11a4:30 000f            bnt code_11b6 
  11a7:38 008e          pushi 8e // $8e setScript
  11aa:78               push1 
  11ab:72 0b58          lofsa $0b58 // sUsesBoard
  11ae:36                push 
  11af:81 02              lag  
  11b1:4a 06             send 6 

  11b3:32 0023            jmp code_11d9 

        code_11b6
  11b6:3c                 dup 
  11b7:35 03              ldi 3 
  11b9:1a                 eq? 
  11ba:30 000f            bnt code_11cc 
  11bd:38 008e          pushi 8e // $8e setScript
  11c0:78               push1 
  11c1:72 0b58          lofsa $0b58 // sUsesBoard
  11c4:36                push 
  11c5:81 02              lag  
  11c7:4a 06             send 6 

  11c9:32 000d            jmp code_11d9 

        code_11cc
  11cc:38 010c          pushi 10c // $10c doVerb
  11cf:7a               push2 
  11d0:8f 01              lsp param1 
  11d2:8f 02              lsp param2 
  11d4:59 03            &rest 3 
  11d6:57 2c 08         super Feature 8 


        code_11d9
  11d9:3a                toss 
  11da:48                 ret 
  11db:00                bnot 
    )

)

// 126a
(instance businessOne of Feature
    (properties
        x $9d
        y $47
        z $0
        heading $0
        noun $0
        nsTop $42
        nsLeft $5d
        nsBottom $4c
        nsRight $dd
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1220
  1220:8f 01              lsp param1 
  1222:3c                 dup 
  1223:35 02              ldi 2 
  1225:1a                 eq? 
  1226:30 0013            bnt code_123c 
  1229:39 05            pushi 5 // $5 view
  122b:38 026c          pushi 26c // $26c sel_620
  122e:39 24            pushi 24 // $24 cursor
  1230:39 43            pushi 43 // $43 at
  1232:39 ff            pushi ff // $ff syncNum
  1234:39 14            pushi 14 // $14 brLeft
  1236:45 0e 0a         callb procedure_000e a //  

  1239:32 0025            jmp code_1261 

        code_123c
  123c:3c                 dup 
  123d:35 01              ldi 1 
  123f:1a                 eq? 
  1240:30 0011            bnt code_1254 
  1243:38 008e          pushi 8e // $8e setScript
  1246:78               push1 
  1247:72 0c70          lofsa $0c70 // sReturnsFromBoard
  124a:36                push 
  124b:81 02              lag  
  124d:4a 06             send 6 

  124f:35 01              ldi 1 
  1251:32 000d            jmp code_1261 

        code_1254
  1254:38 010c          pushi 10c // $10c doVerb
  1257:7a               push2 
  1258:8f 01              lsp param1 
  125a:8f 02              lsp param2 
  125c:59 03            &rest 3 
  125e:57 2c 08         super Feature 8 


        code_1261
  1261:3a                toss 
  1262:48                 ret 
  1263:00                bnot 
    )

)

// 12f2
(instance businessTwo of Feature
    (properties
        x $9c
        y $52
        z $0
        heading $0
        noun $0
        nsTop $4e
        nsLeft $5c
        nsBottom $56
        nsRight $dd
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_12a8
  12a8:8f 01              lsp param1 
  12aa:3c                 dup 
  12ab:35 02              ldi 2 
  12ad:1a                 eq? 
  12ae:30 0013            bnt code_12c4 
  12b1:39 05            pushi 5 // $5 view
  12b3:38 026c          pushi 26c // $26c sel_620
  12b6:39 25            pushi 25 // $25 max
  12b8:39 43            pushi 43 // $43 at
  12ba:39 ff            pushi ff // $ff syncNum
  12bc:39 14            pushi 14 // $14 brLeft
  12be:45 0e 0a         callb procedure_000e a //  

  12c1:32 0025            jmp code_12e9 

        code_12c4
  12c4:3c                 dup 
  12c5:35 01              ldi 1 
  12c7:1a                 eq? 
  12c8:30 0011            bnt code_12dc 
  12cb:38 008e          pushi 8e // $8e setScript
  12ce:78               push1 
  12cf:72 0c70          lofsa $0c70 // sReturnsFromBoard
  12d2:36                push 
  12d3:81 02              lag  
  12d5:4a 06             send 6 

  12d7:35 01              ldi 1 
  12d9:32 000d            jmp code_12e9 

        code_12dc
  12dc:38 010c          pushi 10c // $10c doVerb
  12df:7a               push2 
  12e0:8f 01              lsp param1 
  12e2:8f 02              lsp param2 
  12e4:59 03            &rest 3 
  12e6:57 2c 08         super Feature 8 


        code_12e9
  12e9:3a                toss 
  12ea:48                 ret 
  12eb:00                bnot 
    )

)

// 137a
(instance businessThree of Feature
    (properties
        x $9a
        y $5e
        z $0
        heading $0
        noun $0
        nsTop $5a
        nsLeft $56
        nsBottom $63
        nsRight $df
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1330
  1330:8f 01              lsp param1 
  1332:3c                 dup 
  1333:35 02              ldi 2 
  1335:1a                 eq? 
  1336:30 0013            bnt code_134c 
  1339:39 05            pushi 5 // $5 view
  133b:38 026c          pushi 26c // $26c sel_620
  133e:39 26            pushi 26 // $26 mark
  1340:39 43            pushi 43 // $43 at
  1342:39 ff            pushi ff // $ff syncNum
  1344:39 14            pushi 14 // $14 brLeft
  1346:45 0e 0a         callb procedure_000e a //  

  1349:32 0025            jmp code_1371 

        code_134c
  134c:3c                 dup 
  134d:35 01              ldi 1 
  134f:1a                 eq? 
  1350:30 0011            bnt code_1364 
  1353:38 008e          pushi 8e // $8e setScript
  1356:78               push1 
  1357:72 0c70          lofsa $0c70 // sReturnsFromBoard
  135a:36                push 
  135b:81 02              lag  
  135d:4a 06             send 6 

  135f:35 01              ldi 1 
  1361:32 000d            jmp code_1371 

        code_1364
  1364:38 010c          pushi 10c // $10c doVerb
  1367:7a               push2 
  1368:8f 01              lsp param1 
  136a:8f 02              lsp param2 
  136c:59 03            &rest 3 
  136e:57 2c 08         super Feature 8 


        code_1371
  1371:3a                toss 
  1372:48                 ret 
  1373:00                bnot 
    )

)

// 1438
(instance businessFour of Feature
    (properties
        x $99
        y $6a
        z $0
        heading $0
        noun $0
        nsTop $66
        nsLeft $55
        nsBottom $6f
        nsRight $de
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_13b8
  13b8:8f 01              lsp param1 
  13ba:3c                 dup 
  13bb:35 02              ldi 2 
  13bd:1a                 eq? 
  13be:30 0021            bnt code_13e2 
  13c1:78               push1 
  13c2:39 11            pushi 11 // $11 signal
  13c4:45 07 02         callb procedure_0007 2 //  

  13c7:7a               push2 
  13c8:39 03            pushi 3 // $3 y
  13ca:39 78            pushi 78 // $78 isEmpty
  13cc:45 0a 04         callb procedure_000a 4 //  

  13cf:39 05            pushi 5 // $5 view
  13d1:38 026c          pushi 26c // $26c sel_620
  13d4:39 27            pushi 27 // $27 who
  13d6:39 43            pushi 43 // $43 at
  13d8:39 ff            pushi ff // $ff syncNum
  13da:39 14            pushi 14 // $14 brLeft
  13dc:45 0e 0a         callb procedure_000e a //  

  13df:32 004d            jmp code_142f 

        code_13e2
  13e2:3c                 dup 
  13e3:35 03              ldi 3 
  13e5:1a                 eq? 
  13e6:30 0021            bnt code_140a 
  13e9:78               push1 
  13ea:39 11            pushi 11 // $11 signal
  13ec:45 07 02         callb procedure_0007 2 //  

  13ef:7a               push2 
  13f0:39 03            pushi 3 // $3 y
  13f2:39 78            pushi 78 // $78 isEmpty
  13f4:45 0a 04         callb procedure_000a 4 //  

  13f7:39 05            pushi 5 // $5 view
  13f9:38 026c          pushi 26c // $26c sel_620
  13fc:39 27            pushi 27 // $27 who
  13fe:39 43            pushi 43 // $43 at
  1400:39 ff            pushi ff // $ff syncNum
  1402:39 14            pushi 14 // $14 brLeft
  1404:45 0e 0a         callb procedure_000e a //  

  1407:32 0025            jmp code_142f 

        code_140a
  140a:3c                 dup 
  140b:35 01              ldi 1 
  140d:1a                 eq? 
  140e:30 0011            bnt code_1422 
  1411:38 008e          pushi 8e // $8e setScript
  1414:78               push1 
  1415:72 0c70          lofsa $0c70 // sReturnsFromBoard
  1418:36                push 
  1419:81 02              lag  
  141b:4a 06             send 6 

  141d:35 01              ldi 1 
  141f:32 000d            jmp code_142f 

        code_1422
  1422:38 010c          pushi 10c // $10c doVerb
  1425:7a               push2 
  1426:8f 01              lsp param1 
  1428:8f 02              lsp param2 
  142a:59 03            &rest 3 
  142c:57 2c 08         super Feature 8 


        code_142f
  142f:3a                toss 
  1430:48                 ret 
  1431:00                bnot 
    )

)

// 14c0
(instance businessFive of Feature
    (properties
        x $9b
        y $76
        z $0
        heading $0
        noun $0
        nsTop $72
        nsLeft $58
        nsBottom $7b
        nsRight $de
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1476
  1476:8f 01              lsp param1 
  1478:3c                 dup 
  1479:35 02              ldi 2 
  147b:1a                 eq? 
  147c:30 0013            bnt code_1492 
  147f:39 05            pushi 5 // $5 view
  1481:38 026c          pushi 26c // $26c sel_620
  1484:39 28            pushi 28 // $28 message
  1486:39 43            pushi 43 // $43 at
  1488:39 ff            pushi ff // $ff syncNum
  148a:39 14            pushi 14 // $14 brLeft
  148c:45 0e 0a         callb procedure_000e a //  

  148f:32 0025            jmp code_14b7 

        code_1492
  1492:3c                 dup 
  1493:35 01              ldi 1 
  1495:1a                 eq? 
  1496:30 0011            bnt code_14aa 
  1499:38 008e          pushi 8e // $8e setScript
  149c:78               push1 
  149d:72 0c70          lofsa $0c70 // sReturnsFromBoard
  14a0:36                push 
  14a1:81 02              lag  
  14a3:4a 06             send 6 

  14a5:35 01              ldi 1 
  14a7:32 000d            jmp code_14b7 

        code_14aa
  14aa:38 010c          pushi 10c // $10c doVerb
  14ad:7a               push2 
  14ae:8f 01              lsp param1 
  14b0:8f 02              lsp param2 
  14b2:59 03            &rest 3 
  14b4:57 2c 08         super Feature 8 


        code_14b7
  14b7:3a                toss 
  14b8:48                 ret 
  14b9:00                bnot 
    )

)

// 1548
(instance businessSix of Feature
    (properties
        x $9b
        y $82
        z $0
        heading $0
        noun $0
        nsTop $7e
        nsLeft $57
        nsBottom $87
        nsRight $e0
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_14fe
  14fe:8f 01              lsp param1 
  1500:3c                 dup 
  1501:35 02              ldi 2 
  1503:1a                 eq? 
  1504:30 0013            bnt code_151a 
  1507:39 05            pushi 5 // $5 view
  1509:38 026c          pushi 26c // $26c sel_620
  150c:39 29            pushi 29 // $29 edit
  150e:39 43            pushi 43 // $43 at
  1510:39 ff            pushi ff // $ff syncNum
  1512:39 14            pushi 14 // $14 brLeft
  1514:45 0e 0a         callb procedure_000e a //  

  1517:32 0025            jmp code_153f 

        code_151a
  151a:3c                 dup 
  151b:35 01              ldi 1 
  151d:1a                 eq? 
  151e:30 0011            bnt code_1532 
  1521:38 008e          pushi 8e // $8e setScript
  1524:78               push1 
  1525:72 0c70          lofsa $0c70 // sReturnsFromBoard
  1528:36                push 
  1529:81 02              lag  
  152b:4a 06             send 6 

  152d:35 01              ldi 1 
  152f:32 000d            jmp code_153f 

        code_1532
  1532:38 010c          pushi 10c // $10c doVerb
  1535:7a               push2 
  1536:8f 01              lsp param1 
  1538:8f 02              lsp param2 
  153a:59 03            &rest 3 
  153c:57 2c 08         super Feature 8 


        code_153f
  153f:3a                toss 
  1540:48                 ret 
  1541:00                bnot 
    )

)

// 15d0
(instance businessSeven of Feature
    (properties
        x $9c
        y $8e
        z $0
        heading $0
        noun $0
        nsTop $8a
        nsLeft $59
        nsBottom $93
        nsRight $e0
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1586
  1586:8f 01              lsp param1 
  1588:3c                 dup 
  1589:35 02              ldi 2 
  158b:1a                 eq? 
  158c:30 0013            bnt code_15a2 
  158f:39 05            pushi 5 // $5 view
  1591:38 026c          pushi 26c // $26c sel_620
  1594:39 2a            pushi 2a // $2a play
  1596:39 43            pushi 43 // $43 at
  1598:39 ff            pushi ff // $ff syncNum
  159a:39 14            pushi 14 // $14 brLeft
  159c:45 0e 0a         callb procedure_000e a //  

  159f:32 0025            jmp code_15c7 

        code_15a2
  15a2:3c                 dup 
  15a3:35 01              ldi 1 
  15a5:1a                 eq? 
  15a6:30 0011            bnt code_15ba 
  15a9:38 008e          pushi 8e // $8e setScript
  15ac:78               push1 
  15ad:72 0c70          lofsa $0c70 // sReturnsFromBoard
  15b0:36                push 
  15b1:81 02              lag  
  15b3:4a 06             send 6 

  15b5:35 01              ldi 1 
  15b7:32 000d            jmp code_15c7 

        code_15ba
  15ba:38 010c          pushi 10c // $10c doVerb
  15bd:7a               push2 
  15be:8f 01              lsp param1 
  15c0:8f 02              lsp param2 
  15c2:59 03            &rest 3 
  15c4:57 2c 08         super Feature 8 


        code_15c7
  15c7:3a                toss 
  15c8:48                 ret 
  15c9:00                bnot 
    )

)

// 1658
(instance businessEight of Feature
    (properties
        x $9c
        y $9a
        z $0
        heading $0
        noun $0
        nsTop $96
        nsLeft $59
        nsBottom $9f
        nsRight $df
        description $1c1e
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_160e
  160e:8f 01              lsp param1 
  1610:3c                 dup 
  1611:35 02              ldi 2 
  1613:1a                 eq? 
  1614:30 0013            bnt code_162a 
  1617:39 05            pushi 5 // $5 view
  1619:38 026c          pushi 26c // $26c sel_620
  161c:39 2b            pushi 2b // $2b number
  161e:39 43            pushi 43 // $43 at
  1620:39 ff            pushi ff // $ff syncNum
  1622:39 14            pushi 14 // $14 brLeft
  1624:45 0e 0a         callb procedure_000e a //  

  1627:32 0025            jmp code_164f 

        code_162a
  162a:3c                 dup 
  162b:35 01              ldi 1 
  162d:1a                 eq? 
  162e:30 0011            bnt code_1642 
  1631:38 008e          pushi 8e // $8e setScript
  1634:78               push1 
  1635:72 0c70          lofsa $0c70 // sReturnsFromBoard
  1638:36                push 
  1639:81 02              lag  
  163b:4a 06             send 6 

  163d:35 01              ldi 1 
  163f:32 000d            jmp code_164f 

        code_1642
  1642:38 010c          pushi 10c // $10c doVerb
  1645:7a               push2 
  1646:8f 01              lsp param1 
  1648:8f 02              lsp param2 
  164a:59 03            &rest 3 
  164c:57 2c 08         super Feature 8 


        code_164f
  164f:3a                toss 
  1650:48                 ret 
  1651:00                bnot 
    )

)

// 1698
(instance plant of Feature
    (properties
        x $78
        y $5f
        z $0
        heading $0
        noun $0
        nsTop $24
        nsLeft $68
        nsBottom $72
        nsRight $89
        description $1c94
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1c9e
    )
)

// 16d4
(instance mural of Feature
    (properties
        x $e6
        y $2f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $8e
        nsBottom $5f
        nsRight $13f
        description $1cee
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1cf8
    )
)

// 1738
(instance fStairs of Feature
    (properties
        x $e5
        y $a4
        z $0
        heading $0
        noun $0
        nsTop $8b
        nsLeft $8b
        nsBottom $bd
        nsRight $13f
        description $1d20
        sightAngle $28
        actions $0
        onMeCheck $2000
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1d2e
    )
    (method (doVerb) // method_170e
  170e:8f 01              lsp param1 
  1710:3c                 dup 
  1711:35 03              ldi 3 
  1713:1a                 eq? 
  1714:30 000c            bnt code_1723 
  1717:7a               push2 
  1718:38 026c          pushi 26c // $26c sel_620
  171b:39 2c            pushi 2c // $2c nodePtr
  171d:45 0e 04         callb procedure_000e 4 //  

  1720:32 000d            jmp code_1730 

        code_1723
  1723:38 010c          pushi 10c // $10c doVerb
  1726:7a               push2 
  1727:8f 01              lsp param1 
  1729:8f 02              lsp param2 
  172b:59 03            &rest 3 
  172d:57 2c 08         super Feature 8 


        code_1730
  1730:3a                toss 
  1731:48                 ret 
    )

)

// 1778
(instance fLamp1 of Feature
    (properties
        x $83
        y $a3
        z $0
        heading $0
        noun $0
        nsTop $8b
        nsLeft $7c
        nsBottom $bc
        nsRight $8a
        description $1de6
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1def
    )
)

// 17b4
(instance fLamp2 of Feature
    (properties
        x $126
        y $76
        z $0
        heading $0
        noun $0
        nsTop $62
        nsLeft $11f
        nsBottom $8a
        nsRight $12e
        description $1de6
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1def
    )
)

// 1818
(instance fAshtray of Feature
    (properties
        x $33
        y $96
        z $0
        heading $0
        noun $0
        nsTop $8d
        nsLeft $2e
        nsBottom $a0
        nsRight $38
        description $1e2f
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $46
        approachY $a0
        approachDist $0
        _approachVerbs $6789
        lookStr $1e3b
    )
    (method (doVerb) // method_17ee
  17ee:8f 01              lsp param1 
  17f0:3c                 dup 
  17f1:35 03              ldi 3 
  17f3:1a                 eq? 
  17f4:30 000c            bnt code_1803 
  17f7:7a               push2 
  17f8:38 026c          pushi 26c // $26c sel_620
  17fb:39 2d            pushi 2d // $2d client
  17fd:45 0e 04         callb procedure_000e 4 //  

  1800:32 000d            jmp code_1810 

        code_1803
  1803:38 010c          pushi 10c // $10c doVerb
  1806:7a               push2 
  1807:8f 01              lsp param1 
  1809:8f 02              lsp param2 
  180b:59 03            &rest 3 
  180d:57 2c 08         super Feature 8 


        code_1810
  1810:3a                toss 
  1811:48                 ret 
    )

)

// 1858
(instance sconceA of Feature
    (properties
        x $15
        y $51
        z $0
        heading $0
        noun $0
        nsTop $4d
        nsLeft $5
        nsBottom $56
        nsRight $25
        description $1ef4
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1eff
    )
)

// 1894
(instance sconceB of Feature
    (properties
        x $5e
        y $47
        z $0
        heading $0
        noun $0
        nsTop $45
        nsLeft $55
        nsBottom $4a
        nsRight $67
        description $1ef4
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1eff
    )
)

// 18d0
(instance clock of Feature
    (properties
        x $e6
        y $70
        z $0
        heading $0
        noun $0
        nsTop $6b
        nsLeft $d7
        nsBottom $7d
        nsRight $f5
        description $1f3c
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1f46
    )
)

// 1934
(instance breasts of Feature
    (properties
        x $bf
        y $c7
        z $50
        heading $0
        noun $0
        nsTop $22
        nsLeft $b6
        nsBottom $2c
        nsRight $c9
        description $1cee
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1fc7
    )
    (method (doVerb) // method_190a
  190a:8f 01              lsp param1 
  190c:3c                 dup 
  190d:35 03              ldi 3 
  190f:1a                 eq? 
  1910:30 000c            bnt code_191f 
  1913:7a               push2 
  1914:38 026c          pushi 26c // $26c sel_620
  1917:39 2e            pushi 2e // $2e dx
  1919:45 0e 04         callb procedure_000e 4 //  

  191c:32 000d            jmp code_192c 

        code_191f
  191f:38 010c          pushi 10c // $10c doVerb
  1922:7a               push2 
  1923:8f 01              lsp param1 
  1925:8f 02              lsp param2 
  1927:59 03            &rest 3 
  1929:57 2c 08         super Feature 8 


        code_192c
  192c:3a                toss 
  192d:48                 ret 
    )

)

// 1990
(instance The Guard of Talker
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $f
        nsLeft $23
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $656
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        bust $0
        eyes $0
        mouth $0
        ticks $0
        disposeWhenDone $1
        caller $0
        viewInPrint $1
        useFrame $0
        talkWidth $13e
    )
    (method (init) // method_1972
  1972:72 1a12          lofsa $1a12 // guardBust
  1975:65 56             aTop bust 
  1977:72 1a78          lofsa $1a78 // guardEyes
  197a:65 58             aTop eyes 
  197c:72 1ade          lofsa $1ade // guardMouth
  197f:65 5a             aTop mouth 
  1981:39 6b            pushi 6b // $6b init
  1983:76               push0 
  1984:59 01            &rest 1 
  1986:57 6f 04         super Talker 4 

  1989:48                 ret 
    )

)

// 1a0c
(instance guardBust of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $656
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1a72
(instance guardEyes of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $20
        nsLeft $15
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $656
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $46
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1ad8
(instance guardMouth of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $24
        nsLeft $f
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $656
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $5
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)



