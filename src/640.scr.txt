(script 640)

(string
    string_2b52 "rm640"
    string_2b58 "sExitElevator"
    string_2b66 "sGetRecord"
    string_2b71 "sMonitorRecording"
    string_2b83 "sSpeed78Reverse"
    string_2b93 "sSpeed33Reverse"
    string_2ba3 "sSpeed78Forward"
    string_2bb3 "sSpeed33Forward"
    string_2bc3 "sUsesStereo"
    string_2bcf "sReturnsFromStereo"
    string_2be2 "sStopButtonPressed"
    string_2bf5 "sForwardButtonPressed"
    string_2c0b "sReverseButtonPressed"
    string_2c21 "sButton33Pressed"
    string_2c32 "sButton78Pressed"
    string_2c43 "sEnterElevator"
    string_2c52 "sPlayMusic"
    string_2c5d "the stereo"
    string_2c68 "stereo"
    string_2c6f "the plaque"
    string_2c7a "plaque"
    string_2c81 "the gold record"
    string_2c91 "record"
    string_2c98 "record2"
    string_2ca0 "the elevator"
    string_2cad "This is the elevator in which you arrived."
    string_2cd8 "elevator"
    string_2ce1 "Reverse Biaz"
    string_2cee "reverseBiaz"
    string_2cfa "the turntable"
    string_2d08 "turntable"
    string_2d12 "turnTableWRecord"
    string_2d23 "the tone arm"
    string_2d30 "needle"
    string_2d37 "the speakers"
    string_2d44 "speakerOne"
    string_2d4f "speakerTwo"
    string_2d5a "MyRandCycle"
    string_2d66 "the studio door"
    string_2d76 "A small plaque on the door reads, \"Studio A.\""
    string_2da4 "door"
    string_2da9 "the Reverse button"
    string_2dbc "reverseButton"
    string_2dca "the Stop button"
    string_2dda "stopButton"
    string_2de5 "the Forward button"
    string_2df8 "forwardButton"
    string_2e06 "the 33 button"
    string_2e14 "button33"
    string_2e1d "the 78 button"
    string_2e2b "button78"
    string_2e34 "the statue"
    string_2e3f "This sculpture represents the patron saint of recording companies--\nSt. Needle."
    string_2e8f "statue"
    string_2e96 "the left speaker"
    string_2ea7 "This transducer converts electrical energy into rapidly pulsating sound waves."
    string_2ef6 "speakerA"
    string_2eff "the right speaker"
    string_2f11 "speakerB"
    string_2f1a "the plant"
    string_2f24 "Upon close examination, you determine this is a plant."
    string_2f5b "plant"
    string_2f61 "the shelves"
    string_2f6d "The office's shelves are filled with records, tapes, and books."
    string_2fad "shelves"
    string_2fb5 "the record jackets"
    string_2fc8 "Many famous record album jackets adorn the walls of the office of des Rever Records."
    string_301d "recordJacketsA"
    string_302c "recordJacketsB"
    string_303b "elevatorDing"
    string_3048 "elevatorDoor"
    string_3055 "message1"
    string_305e "message2"
    string_3067 "message3"
    string_3070 "recordSwitch"
    string_307d "needleDownSpin"
    string_308c "reverseBust"
    string_3098 "reverseEyes"
    string_30a4 "reverseMouth"
    string_30b1 "the gold records"
    string_30c2 "These gold records are firmly attached to the wall."
    string_30f6 "fGoldRecords"
    string_3103 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0001
    local5 = $0000
    local6 = $0012
    local7 = $0000
)

// 044a
(instance publicrm640 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $280
        style $ffff
        horizon $0
        controls $0
        north $294
        east $0
        south $0
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 6b            pushi 6b // $6b init
  0010:76               push0 
  0011:38 020a          pushi 20a // $20a normalize
  0014:78               push1 
  0015:38 023a          pushi 23a // $23a sel_570
  0018:81 00              lag  
  001a:4a 0a             send a 

  001c:76               push0 
  001d:45 03 00         callb procedure_0003 0 //  

  0020:89 0c              lsg  
  0022:3c                 dup 
  0023:63 1c             pToa north 
  0025:1a                 eq? 
  0026:30 0076            bnt code_009f 
  0029:38 011c          pushi 11c // $11c posn
  002c:7a               push2 
  002d:38 00bd          pushi bd // $bd maskView
  0030:39 56            pushi 56 // $56 parseLang
  0032:38 00e4          pushi e4 // $e4 setHeading
  0035:78               push1 
  0036:38 00b4          pushi b4 // $b4 busy
  0039:38 0146          pushi 146 // $146 edgeHit
  003c:78               push1 
  003d:76               push0 
  003e:81 00              lag  
  0040:4a 14             send 14 

  0042:35 01              ldi 1 
  0044:a3 01              sal local1 
  0046:78               push1 
  0047:39 16            pushi 16 // $16 brRight
  0049:45 06 02         callb procedure_0006 2 //  

  004c:18                 not 
  004d:30 001d            bnt code_006d 
  0050:38 00d5          pushi d5 // $d5 has
  0053:78               push1 
  0054:39 05            pushi 5 // $5 view
  0056:81 00              lag  
  0058:4a 06             send 6 

  005a:18                 not 
  005b:30 000f            bnt code_006d 
  005e:39 6b            pushi 6b // $6b init
  0060:76               push0 
  0061:38 0119          pushi 119 // $119 approachVerbs
  0064:7a               push2 
  0065:7a               push2 
  0066:39 03            pushi 3 // $3 y
  0068:72 195a          lofsa $195a // record
  006b:4a 0c             send c 


        code_006d
  006d:78               push1 
  006e:39 16            pushi 16 // $16 brRight
  0070:45 06 02         callb procedure_0006 2 //  

  0073:30 000f            bnt code_0085 
  0076:39 6b            pushi 6b // $6b init
  0078:76               push0 
  0079:38 0119          pushi 119 // $119 approachVerbs
  007c:7a               push2 
  007d:7a               push2 
  007e:39 03            pushi 3 // $3 y
  0080:72 19fc          lofsa $19fc // record2
  0083:4a 0c             send c 


        code_0085
  0085:39 2b            pushi 2b // $2b number
  0087:78               push1 
  0088:38 026c          pushi 26c // $26c sel_620
  008b:38 00a1          pushi a1 // $a1 setVol
  008e:78               push1 
  008f:39 7f            pushi 7f // $7f addAfter
  0091:39 66            pushi 66 // $66 flags
  0093:78               push1 
  0094:78               push1 
  0095:39 2a            pushi 2a // $2a play
  0097:76               push0 
  0098:81 66              lag  
  009a:4a 16             send 16 

  009c:32 0034            jmp code_00d3 

        code_009f
  009f:38 011c          pushi 11c // $11c posn
  00a2:7a               push2 
  00a3:39 3b            pushi 3b // $3b mover
  00a5:38 008b          pushi 8b // $8b caller
  00a8:38 00e4          pushi e4 // $e4 setHeading
  00ab:78               push1 
  00ac:39 5a            pushi 5a // $5a points
  00ae:38 0146          pushi 146 // $146 edgeHit
  00b1:78               push1 
  00b2:76               push0 
  00b3:39 42            pushi 42 // $42 setPri
  00b5:78               push1 
  00b6:39 09            pushi 9 // $9 nsTop
  00b8:38 008e          pushi 8e // $8e setScript
  00bb:78               push1 
  00bc:72 0572          lofsa $0572 // sExitElevator
  00bf:36                push 
  00c0:81 00              lag  
  00c2:4a 20             send 20 

  00c4:39 6b            pushi 6b // $6b init
  00c6:76               push0 
  00c7:38 0119          pushi 119 // $119 approachVerbs
  00ca:7a               push2 
  00cb:7a               push2 
  00cc:39 03            pushi 3 // $3 y
  00ce:72 195a          lofsa $195a // record
  00d1:4a 0c             send c 


        code_00d3
  00d3:3a                toss 
  00d4:7a               push2 
  00d5:38 0081          pushi 81 // $81 handleEvent
  00d8:38 028a          pushi 28a // $28a sel_650
  00db:46 03be 0000 04  calle 3be procedure_0000 4 //  

  00e1:39 04            pushi 4 // $4 x
  00e3:38 0080          pushi 80 // $80 indexOf
  00e6:38 028a          pushi 28a // $28a sel_650
  00e9:38 0281          pushi 281 // $281 sel_641
  00ec:38 0688          pushi 688 // $688 sel_1672
  00ef:46 03be 0000 08  calle 3be procedure_0000 8 //  

  00f5:39 0c            pushi c // $c nsRight
  00f7:38 0084          pushi 84 // $84 cycles
  00fa:38 0280          pushi 280 // $280 sel_640
  00fd:38 0281          pushi 281 // $281 sel_641
  0100:38 0282          pushi 282 // $282 sel_642
  0103:38 0283          pushi 283 // $283 sel_643
  0106:38 0284          pushi 284 // $284 sel_644
  0109:38 0285          pushi 285 // $285 sel_645
  010c:38 0286          pushi 286 // $286 sel_646
  010f:38 00c9          pushi c9 // $c9 disable
  0112:38 0288          pushi 288 // $288 sel_648
  0115:38 026d          pushi 26d // $26d sel_621
  0118:38 026e          pushi 26e // $26e sel_622
  011b:46 03be 0000 18  calle 3be procedure_0000 18 //  

  0121:39 6b            pushi 6b // $6b init
  0123:76               push0 
  0124:57 72 04         super LLRoom 4 

  0127:39 6b            pushi 6b // $6b init
  0129:76               push0 
  012a:38 0119          pushi 119 // $119 approachVerbs
  012d:39 03            pushi 3 // $3 y
  012f:7a               push2 
  0130:39 03            pushi 3 // $3 y
  0132:39 04            pushi 4 // $4 x
  0134:72 1824          lofsa $1824 // stereo
  0137:4a 0e             send e 

  0139:39 6b            pushi 6b // $6b init
  013b:76               push0 
  013c:38 0119          pushi 119 // $119 approachVerbs
  013f:78               push1 
  0140:39 03            pushi 3 // $3 y
  0142:72 1ab6          lofsa $1ab6 // elevator
  0145:4a 0a             send a 

  0147:39 6b            pushi 6b // $6b init
  0149:76               push0 
  014a:38 0119          pushi 119 // $119 approachVerbs
  014d:78               push1 
  014e:39 03            pushi 3 // $3 y
  0150:72 21b0          lofsa $21b0 // door
  0153:4a 0a             send a 

  0155:39 6b            pushi 6b // $6b init
  0157:76               push0 
  0158:38 008e          pushi 8e // $8e setScript
  015b:78               push1 
  015c:72 0730          lofsa $0730 // sMonitorRecording
  015f:36                push 
  0160:72 1bbc          lofsa $1bbc // reverseBiaz
  0163:4a 0a             send a 

  0165:39 6b            pushi 6b // $6b init
  0167:76               push0 
  0168:72 25e8          lofsa $25e8 // statue
  016b:4a 04             send 4 

  016d:39 6b            pushi 6b // $6b init
  016f:76               push0 
  0170:72 2624          lofsa $2624 // speakerA
  0173:4a 04             send 4 

  0175:39 6b            pushi 6b // $6b init
  0177:76               push0 
  0178:72 2660          lofsa $2660 // speakerB
  017b:4a 04             send 4 

  017d:39 6b            pushi 6b // $6b init
  017f:76               push0 
  0180:72 269c          lofsa $269c // plant
  0183:4a 04             send 4 

  0185:39 6b            pushi 6b // $6b init
  0187:76               push0 
  0188:72 26d8          lofsa $26d8 // shelves
  018b:4a 04             send 4 

  018d:39 6b            pushi 6b // $6b init
  018f:76               push0 
  0190:72 2714          lofsa $2714 // recordJacketsA
  0193:4a 04             send 4 

  0195:39 6b            pushi 6b // $6b init
  0197:76               push0 
  0198:72 2750          lofsa $2750 // recordJacketsB
  019b:4a 04             send 4 

  019d:39 6b            pushi 6b // $6b init
  019f:76               push0 
  01a0:72 2af8          lofsa $2af8 // fGoldRecords
  01a3:4a 04             send 4 

  01a5:39 6b            pushi 6b // $6b init
  01a7:76               push0 
  01a8:38 0119          pushi 119 // $119 approachVerbs
  01ab:39 03            pushi 3 // $3 y
  01ad:7a               push2 
  01ae:39 03            pushi 3 // $3 y
  01b0:39 04            pushi 4 // $4 x
  01b2:72 18dc          lofsa $18dc // plaque
  01b5:4a 0e             send e 

  01b7:38 0176          pushi 176 // $176 addObstacle
  01ba:39 03            pushi 3 // $3 y
  01bc:39 22            pushi 22 // $22 type
  01be:78               push1 
  01bf:7a               push2 
  01c0:39 6b            pushi 6b // $6b init
  01c2:39 28            pushi 28 // $28 message
  01c4:76               push0 
  01c5:39 75            pushi 75 // $75 firstTrue
  01c7:39 63            pushi 63 // $63 perform
  01c9:39 75            pushi 75 // $75 firstTrue
  01cb:39 69            pushi 69 // $69 hide
  01cd:39 7e            pushi 7e // $7e addToEnd
  01cf:39 3e            pushi 3e // $3e looper
  01d1:38 0095          pushi 95 // $95 set
  01d4:39 4d            pushi 4d // $4d value
  01d6:38 0095          pushi 95 // $95 set
  01d9:39 7d            pushi 7d // $7d addToFront
  01db:39 76            pushi 76 // $76 allTrue
  01dd:38 0091          pushi 91 // $91 globalize
  01e0:39 70            pushi 70 // $70 isMemberOf
  01e2:38 00ba          pushi ba // $ba right
  01e5:39 66            pushi 66 // $66 flags
  01e7:38 00e5          pushi e5 // $e5 distance
  01ea:39 6f            pushi 6f // $6f isKindOf
  01ec:38 00e8          pushi e8 // $e8 finalX
  01ef:38 0080          pushi 80 // $80 indexOf
  01f2:38 00ce          pushi ce // $ce curIcon
  01f5:38 008d          pushi 8d // $8d cue
  01f8:38 009a          pushi 9a // $9a prevSignal
  01fb:38 008d          pushi 8d // $8d cue
  01fe:38 0082          pushi 82 // $82 start
  0201:38 008b          pushi 8b // $8b caller
  0204:39 55            pushi 55 // $55 z
  0206:38 00a2          pushi a2 // $a2 setLoop
  0209:39 33            pushi 33 // $33 b-di
  020b:38 009f          pushi 9f // $9f fade
  020e:39 3e            pushi 3e // $3e looper
  0210:38 00a4          pushi a4 // $a4 check
  0213:39 36            pushi 36 // $36 xStep
  0215:38 00af          pushi af // $af checkState
  0218:39 1c            pushi 1c // $1c color
  021a:38 00af          pushi af // $af checkState
  021d:39 10            pushi 10 // $10 lsRight
  021f:38 00aa          pushi aa // $aa setSize
  0222:76               push0 
  0223:38 00af          pushi af // $af checkState
  0226:39 72            pushi 72 // $72 yourself
  0228:76               push0 
  0229:39 6a            pushi 6a // $6a new
  022b:76               push0 
  022c:51 23            class Polygon 
  022e:4a 04             send 4 

  0230:4a 5e             send 5e 

  0232:36                push 
  0233:39 22            pushi 22 // $22 type
  0235:78               push1 
  0236:7a               push2 
  0237:39 6b            pushi 6b // $6b init
  0239:39 2c            pushi 2c // $2c nodePtr
  023b:39 43            pushi 43 // $43 at
  023d:38 00a5          pushi a5 // $a5 clean
  0240:39 69            pushi 69 // $69 hide
  0242:38 00ab          pushi ab // $ab move
  0245:39 74            pushi 74 // $74 eachElementDo
  0247:38 00a0          pushi a0 // $a0 mute
  024a:38 00d4          pushi d4 // $d4 activateHeight
  024d:38 00a0          pushi a0 // $a0 mute
  0250:38 00e0          pushi e0 // $e0 xLast
  0253:38 0086          pushi 86 // $86 lastSeconds
  0256:38 00ff          pushi ff // $ff syncNum
  0259:38 0081          pushi 81 // $81 handleEvent
  025c:38 00fc          pushi fc // $fc syncTime
  025f:39 73            pushi 73 // $73 add
  0261:38 00c1          pushi c1 // $c1 lowlightColor
  0264:39 64            pushi 64 // $64 moveDone
  0266:76               push0 
  0267:39 64            pushi 64 // $64 moveDone
  0269:76               push0 
  026a:39 5d            pushi 5d // $5d handle
  026c:38 00dc          pushi dc // $dc cycler
  026f:39 5d            pushi 5d // $5d handle
  0271:38 011f          pushi 11f // $11f startUpd
  0274:39 6b            pushi 6b // $6b init
  0276:38 011e          pushi 11e // $11e forceUpd
  0279:38 008b          pushi 8b // $8b caller
  027c:38 00ec          pushi ec // $ec pickLoop
  027f:38 0094          pushi 94 // $94 lastTime
  0282:38 00f1          pushi f1 // $f1 escaping
  0285:38 00af          pushi af // $af checkState
  0288:38 00e7          pushi e7 // $e7 dynamic
  028b:38 00b5          pushi b5 // $b5 open
  028e:38 00c6          pushi c6 // $c6 swapCurIcon
  0291:38 00b9          pushi b9 // $b9 bottom
  0294:38 008e          pushi 8e // $8e setScript
  0297:38 00b9          pushi b9 // $b9 bottom
  029a:39 6f            pushi 6f // $6f isKindOf
  029c:38 00b7          pushi b7 // $b7 top
  029f:39 5a            pushi 5a // $5a points
  02a1:38 00b8          pushi b8 // $b8 left
  02a4:39 42            pushi 42 // $42 setPri
  02a6:38 00b7          pushi b7 // $b7 top
  02a9:39 3d            pushi 3d // $3d isBlocked
  02ab:38 00ae          pushi ae // $ae isType
  02ae:39 72            pushi 72 // $72 yourself
  02b0:76               push0 
  02b1:39 6a            pushi 6a // $6a new
  02b3:76               push0 
  02b4:51 23            class Polygon 
  02b6:4a 04             send 4 

  02b8:4a 66             send 66 

  02ba:36                push 
  02bb:39 22            pushi 22 // $22 type
  02bd:78               push1 
  02be:7a               push2 
  02bf:39 6b            pushi 6b // $6b init
  02c1:39 36            pushi 36 // $36 xStep
  02c3:39 67            pushi 67 // $67 quitGame
  02c5:39 53            pushi 53 // $53 draw
  02c7:38 00d0          pushi d0 // $d0 prevIcon
  02ca:39 53            pushi 53 // $53 draw
  02cc:38 00c9          pushi c9 // $c9 disable
  02cf:39 4e            pushi 4e // $4e save
  02d1:38 00c9          pushi c9 // $c9 disable
  02d4:39 34            pushi 34 // $34 b-xAxis
  02d6:38 00b2          pushi b2 // $b2 retreat
  02d9:39 34            pushi 34 // $34 b-xAxis
  02db:38 00b2          pushi b2 // $b2 retreat
  02de:39 4f            pushi 4f // $4f restore
  02e0:76               push0 
  02e1:39 4f            pushi 4f // $4f restore
  02e3:76               push0 
  02e4:76               push0 
  02e5:38 013f          pushi 13f // $13f inputLineAddr
  02e8:76               push0 
  02e9:38 013f          pushi 13f // $13f inputLineAddr
  02ec:38 00bd          pushi bd // $bd maskView
  02ef:38 00f5          pushi f5 // $f5 counter
  02f2:38 00bd          pushi bd // $bd maskView
  02f5:38 00f5          pushi f5 // $f5 counter
  02f8:38 00a6          pushi a6 // $a6 playBed
  02fb:38 0122          pushi 122 // $122 addToPic
  02fe:38 00a0          pushi a0 // $a0 mute
  0301:38 012d          pushi 12d // $12d observeControl
  0304:38 00ab          pushi ab // $ab move
  0307:38 013d          pushi 13d // $13d prevDir
  030a:38 00a1          pushi a1 // $a1 setVol
  030d:38 0121          pushi 121 // $121 ignoreActors
  0310:38 0082          pushi 82 // $82 start
  0313:38 013b          pushi 13b // $13b controls
  0316:38 0082          pushi 82 // $82 start
  0319:38 013b          pushi 13b // $13b controls
  031c:39 6c            pushi 6c // $6c dispose
  031e:38 0117          pushi 117 // $117 facingMe
  0321:39 4e            pushi 4e // $4e save
  0323:38 00e3          pushi e3 // $e3 onTarget
  0326:39 4e            pushi 4e // $4e save
  0328:38 00e4          pushi e4 // $e4 setHeading
  032b:39 53            pushi 53 // $53 draw
  032d:38 0100          pushi 100 // $100 syncStart
  0330:39 53            pushi 53 // $53 draw
  0332:38 0106          pushi 106 // $106 waitApogeeX
  0335:39 56            pushi 56 // $56 parseLang
  0337:38 00fd          pushi fd // $fd syncCue
  033a:39 5c            pushi 5c // $5c dataInc
  033c:38 00e2          pushi e2 // $e2 setTarget
  033f:39 5c            pushi 5c // $5c dataInc
  0341:38 00d7          pushi d7 // $d7 completed
  0344:39 5a            pushi 5a // $5a points
  0346:39 64            pushi 64 // $64 moveDone
  0348:39 5a            pushi 5a // $5a points
  034a:39 72            pushi 72 // $72 yourself
  034c:76               push0 
  034d:39 6a            pushi 6a // $6a new
  034f:76               push0 
  0350:51 23            class Polygon 
  0352:4a 04             send 4 

  0354:4a 7a             send 7a 

  0356:36                push 
  0357:81 02              lag  
  0359:4a 0a             send a 

  035b:48                 ret 
    )

    (method (doit) // method_035c
  035c:7a               push2 
  035d:89 00              lsg  
  035f:7a               push2 
  0360:45 05 04         callb procedure_0005 4 //  

  0363:30 000b            bnt code_0371 
  0366:83 01              lal local1 
  0368:18                 not 
  0369:30 0005            bnt code_0371 
  036c:76               push0 
  036d:40 27bf 00        call proc_2b30 0 


        code_0371
  0371:7a               push2 
  0372:89 00              lsg  
  0374:39 04            pushi 4 // $4 x
  0376:45 05 04         callb procedure_0005 4 //  

  0379:30 000b            bnt code_0387 
  037c:83 01              lal local1 
  037e:18                 not 
  037f:30 0005            bnt code_0387 
  0382:76               push0 
  0383:40 27a9 00        call proc_2b30 0 


        code_0387
  0387:39 3c            pushi 3c // $3c doit
  0389:76               push0 
  038a:59 01            &rest 1 
  038c:57 72 04         super LLRoom 4 

  038f:48                 ret 
    )

    (method (doVerb) // method_0390
  0390:8f 01              lsp param1 
  0392:3c                 dup 
  0393:35 01              ldi 1 
  0395:1a                 eq? 
  0396:30 001a            bnt code_03b3 
  0399:67 24             pTos curPic 
  039b:34 028a            ldi 28a 
  039e:1a                 eq? 
  039f:30 0049            bnt code_03eb 
  03a2:38 008e          pushi 8e // $8e setScript
  03a5:78               push1 
  03a6:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  03a9:36                push 
  03aa:81 02              lag  
  03ac:4a 06             send 6 

  03ae:35 01              ldi 1 
  03b0:32 0038            jmp code_03eb 

        code_03b3
  03b3:3c                 dup 
  03b4:35 02              ldi 2 
  03b6:1a                 eq? 
  03b7:30 0024            bnt code_03de 
  03ba:67 24             pTos curPic 
  03bc:34 028a            ldi 28a 
  03bf:1a                 eq? 
  03c0:30 0010            bnt code_03d3 
  03c3:38 010c          pushi 10c // $10c doVerb
  03c6:7a               push2 
  03c7:8f 01              lsp param1 
  03c9:8f 02              lsp param2 
  03cb:59 03            &rest 3 
  03cd:57 72 08         super LLRoom 8 

  03d0:32 0018            jmp code_03eb 

        code_03d3
  03d3:7a               push2 
  03d4:38 0280          pushi 280 // $280 sel_640
  03d7:76               push0 
  03d8:45 0e 04         callb procedure_000e 4 //  

  03db:32 000d            jmp code_03eb 

        code_03de
  03de:38 010c          pushi 10c // $10c doVerb
  03e1:7a               push2 
  03e2:8f 01              lsp param1 
  03e4:8f 02              lsp param2 
  03e6:59 03            &rest 3 
  03e8:57 72 08         super LLRoom 8 


        code_03eb
  03eb:3a                toss 
  03ec:48                 ret 
    )

    (method (newRoom) // method_03ed
  03ed:38 0179          pushi 179 // $179 newRoom
  03f0:78               push1 
  03f1:8f 01              lsp param1 
  03f3:57 72 06         super LLRoom 6 

  03f6:8f 01              lsp param1 
  03f8:34 026c            ldi 26c 
  03fb:1a                 eq? 
  03fc:18                 not 
  03fd:30 0021            bnt code_0421 
  0400:38 009f          pushi 9f // $9f fade
  0403:39 04            pushi 4 // $4 x
  0405:76               push0 
  0406:39 0f            pushi f // $f lsBottom
  0408:39 0c            pushi c // $c nsRight
  040a:78               push1 
  040b:81 66              lag  
  040d:4a 0c             send c 

  040f:38 009f          pushi 9f // $9f fade
  0412:39 04            pushi 4 // $4 x
  0414:76               push0 
  0415:39 0f            pushi f // $f lsBottom
  0417:39 0c            pushi c // $c nsRight
  0419:78               push1 
  041a:81 67              lag  
  041c:4a 0c             send c 

  041e:32 0021            jmp code_0442 

        code_0421
  0421:83 03              lal local3 
  0423:30 001c            bnt code_0442 
  0426:38 00a1          pushi a1 // $a1 setVol
  0429:78               push1 
  042a:39 7f            pushi 7f // $7f addAfter
  042c:39 2a            pushi 2a // $2a play
  042e:76               push0 
  042f:81 66              lag  
  0431:4a 0a             send a 

  0433:38 009f          pushi 9f // $9f fade
  0436:39 04            pushi 4 // $4 x
  0438:76               push0 
  0439:39 0f            pushi f // $f lsBottom
  043b:39 0c            pushi c // $c nsRight
  043d:78               push1 
  043e:81 67              lag  
  0440:4a 0c             send c 


        code_0442
  0442:48                 ret 
  0443:00                bnot 
    )

)

// 056c
(instance sExitElevator of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0496
  0496:87 01              lap param1 
  0498:65 0a             aTop state 
  049a:36                push 
  049b:3c                 dup 
  049c:35 00              ldi 0 
  049e:1a                 eq? 
  049f:30 000b            bnt code_04ad 
  04a2:76               push0 
  04a3:45 02 00         callb procedure_0002 0 //  

  04a6:35 02              ldi 2 
  04a8:65 12             aTop seconds 
  04aa:32 00b7            jmp code_0564 

        code_04ad
  04ad:3c                 dup 
  04ae:35 01              ldi 1 
  04b0:1a                 eq? 
  04b1:30 000f            bnt code_04c3 
  04b4:39 2a            pushi 2a // $2a play
  04b6:76               push0 
  04b7:72 278c          lofsa $278c // elevatorDing
  04ba:4a 04             send 4 

  04bc:35 0f              ldi f 
  04be:65 10             aTop cycles 
  04c0:32 00a1            jmp code_0564 

        code_04c3
  04c3:3c                 dup 
  04c4:35 02              ldi 2 
  04c6:1a                 eq? 
  04c7:30 0018            bnt code_04e2 
  04ca:39 2a            pushi 2a // $2a play
  04cc:76               push0 
  04cd:72 27c2          lofsa $27c2 // elevatorDoor
  04d0:4a 04             send 4 

  04d2:38 0096          pushi 96 // $96 setCycle
  04d5:7a               push2 
  04d6:51 1a            class End 
  04d8:36                push 
  04d9:7c            pushSelf 
  04da:72 1ab6          lofsa $1ab6 // elevator
  04dd:4a 08             send 8 

  04df:32 0082            jmp code_0564 

        code_04e2
  04e2:3c                 dup 
  04e3:35 03              ldi 3 
  04e5:1a                 eq? 
  04e6:30 0030            bnt code_0519 
  04e9:38 009c          pushi 9c // $9c stop
  04ec:76               push0 
  04ed:72 27c2          lofsa $27c2 // elevatorDoor
  04f0:4a 04             send 4 

  04f2:39 42            pushi 42 // $42 setPri
  04f4:78               push1 
  04f5:39 09            pushi 9 // $9 nsTop
  04f7:72 1ab6          lofsa $1ab6 // elevator
  04fa:4a 06             send 6 

  04fc:39 42            pushi 42 // $42 setPri
  04fe:78               push1 
  04ff:39 09            pushi 9 // $9 nsTop
  0501:38 011b          pushi 11b // $11b setMotion
  0504:39 03            pushi 3 // $3 y
  0506:51 1e            class MoveTo 
  0508:36                push 
  0509:39 49            pushi 49 // $49 semanticFail
  050b:38 0094          pushi 94 // $94 lastTime
  050e:81 00              lag  
  0510:4a 10             send 10 

  0512:35 02              ldi 2 
  0514:65 12             aTop seconds 
  0516:32 004b            jmp code_0564 

        code_0519
  0519:3c                 dup 
  051a:35 04              ldi 4 
  051c:1a                 eq? 
  051d:30 0018            bnt code_0538 
  0520:39 2a            pushi 2a // $2a play
  0522:76               push0 
  0523:72 27c2          lofsa $27c2 // elevatorDoor
  0526:4a 04             send 4 

  0528:38 0096          pushi 96 // $96 setCycle
  052b:7a               push2 
  052c:51 1b            class Beg 
  052e:36                push 
  052f:7c            pushSelf 
  0530:72 1ab6          lofsa $1ab6 // elevator
  0533:4a 08             send 8 

  0535:32 002c            jmp code_0564 

        code_0538
  0538:3c                 dup 
  0539:35 05              ldi 5 
  053b:1a                 eq? 
  053c:30 0025            bnt code_0564 
  053f:38 009c          pushi 9c // $9c stop
  0542:76               push0 
  0543:72 27c2          lofsa $27c2 // elevatorDoor
  0546:4a 04             send 4 

  0548:39 42            pushi 42 // $42 setPri
  054a:78               push1 
  054b:39 ff            pushi ff // $ff syncNum
  054d:81 00              lag  
  054f:4a 06             send 6 

  0551:38 011d          pushi 11d // $11d stopUpd
  0554:78               push1 
  0555:78               push1 
  0556:72 1ab6          lofsa $1ab6 // elevator
  0559:4a 06             send 6 

  055b:76               push0 
  055c:45 03 00         callb procedure_0003 0 //  

  055f:39 6c            pushi 6c // $6c dispose
  0561:76               push0 
  0562:54 04             self 4 


        code_0564
  0564:3a                toss 
  0565:48                 ret 
    )

)

// 0672
(instance sGetRecord of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_05a0
  05a0:87 01              lap param1 
  05a2:65 0a             aTop state 
  05a4:36                push 
  05a5:3c                 dup 
  05a6:35 00              ldi 0 
  05a8:1a                 eq? 
  05a9:30 0016            bnt code_05c2 
  05ac:38 0144          pushi 144 // $144 canInput
  05af:78               push1 
  05b0:76               push0 
  05b1:51 31            class User 
  05b3:4a 06             send 6 

  05b5:38 00e4          pushi e4 // $e4 setHeading
  05b8:7a               push2 
  05b9:76               push0 
  05ba:7c            pushSelf 
  05bb:81 00              lag  
  05bd:4a 08             send 8 

  05bf:32 00a7            jmp code_0669 

        code_05c2
  05c2:3c                 dup 
  05c3:35 01              ldi 1 
  05c5:1a                 eq? 
  05c6:30 0025            bnt code_05ee 
  05c9:39 05            pushi 5 // $5 view
  05cb:78               push1 
  05cc:38 0281          pushi 281 // $281 sel_641
  05cf:38 00a2          pushi a2 // $a2 setLoop
  05d2:78               push1 
  05d3:76               push0 
  05d4:38 0120          pushi 120 // $120 setCel
  05d7:78               push1 
  05d8:76               push0 
  05d9:38 00db          pushi db // $db cycleSpeed
  05dc:78               push1 
  05dd:39 0c            pushi c // $c nsRight
  05df:38 0096          pushi 96 // $96 setCycle
  05e2:7a               push2 
  05e3:51 1a            class End 
  05e5:36                push 
  05e6:7c            pushSelf 
  05e7:81 00              lag  
  05e9:4a 20             send 20 

  05eb:32 007b            jmp code_0669 

        code_05ee
  05ee:3c                 dup 
  05ef:35 02              ldi 2 
  05f1:1a                 eq? 
  05f2:30 001d            bnt code_0612 
  05f5:39 6c            pushi 6c // $6c dispose
  05f7:76               push0 
  05f8:72 195a          lofsa $195a // record
  05fb:4a 04             send 4 

  05fd:38 0147          pushi 147 // $147 get
  0600:78               push1 
  0601:39 05            pushi 5 // $5 view
  0603:38 0096          pushi 96 // $96 setCycle
  0606:7a               push2 
  0607:51 1b            class Beg 
  0609:36                push 
  060a:7c            pushSelf 
  060b:81 00              lag  
  060d:4a 0e             send e 

  060f:32 0057            jmp code_0669 

        code_0612
  0612:3c                 dup 
  0613:35 03              ldi 3 
  0615:1a                 eq? 
  0616:30 0050            bnt code_0669 
  0619:83 04              lal local4 
  061b:30 002d            bnt code_064b 
  061e:7a               push2 
  061f:39 0c            pushi c // $c nsRight
  0621:39 79            pushi 79 // $79 first
  0623:45 0a 04         callb procedure_000a 4 //  

  0626:35 00              ldi 0 
  0628:a3 04              sal local4 
  062a:7a               push2 
  062b:38 0280          pushi 280 // $280 sel_640
  062e:78               push1 
  062f:45 0e 04         callb procedure_000e 4 //  

  0632:7a               push2 
  0633:38 0280          pushi 280 // $280 sel_640
  0636:7a               push2 
  0637:45 0e 04         callb procedure_000e 4 //  

  063a:39 05            pushi 5 // $5 view
  063c:38 0280          pushi 280 // $280 sel_640
  063f:39 03            pushi 3 // $3 y
  0641:39 43            pushi 43 // $43 at
  0643:39 ff            pushi ff // $ff syncNum
  0645:38 00b9          pushi b9 // $b9 bottom
  0648:45 0e 0a         callb procedure_000e a //  


        code_064b
  064b:38 020a          pushi 20a // $20a normalize
  064e:78               push1 
  064f:38 023a          pushi 23a // $23a sel_570
  0652:39 06            pushi 6 // $6 loop
  0654:78               push1 
  0655:39 03            pushi 3 // $3 y
  0657:81 00              lag  
  0659:4a 0c             send c 

  065b:38 0144          pushi 144 // $144 canInput
  065e:78               push1 
  065f:78               push1 
  0660:51 31            class User 
  0662:4a 06             send 6 

  0664:39 6c            pushi 6c // $6c dispose
  0666:76               push0 
  0667:54 04             self 4 


        code_0669
  0669:3a                toss 
  066a:48                 ret 
  066b:00                bnot 
    )

)

// 072a
(instance sMonitorRecording of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_06a6
  06a6:87 01              lap param1 
  06a8:65 0a             aTop state 
  06aa:36                push 
  06ab:3c                 dup 
  06ac:35 00              ldi 0 
  06ae:1a                 eq? 
  06af:30 0007            bnt code_06b9 
  06b2:35 0a              ldi a 
  06b4:65 12             aTop seconds 
  06b6:32 0069            jmp code_0722 

        code_06b9
  06b9:3c                 dup 
  06ba:35 01              ldi 1 
  06bc:1a                 eq? 
  06bd:30 003d            bnt code_06fd 
  06c0:7a               push2 
  06c1:76               push0 
  06c2:78               push1 
  06c3:43 3c 04         callk Random 4 

  06c6:30 001a            bnt code_06e3 
  06c9:38 00a2          pushi a2 // $a2 setLoop
  06cc:78               push1 
  06cd:76               push0 
  06ce:38 0120          pushi 120 // $120 setCel
  06d1:78               push1 
  06d2:76               push0 
  06d3:38 0096          pushi 96 // $96 setCycle
  06d6:7a               push2 
  06d7:51 1a            class End 
  06d9:36                push 
  06da:7c            pushSelf 
  06db:72 1bbc          lofsa $1bbc // reverseBiaz
  06de:4a 14             send 14 

  06e0:32 003f            jmp code_0722 

        code_06e3
  06e3:38 00a2          pushi a2 // $a2 setLoop
  06e6:78               push1 
  06e7:78               push1 
  06e8:38 0120          pushi 120 // $120 setCel
  06eb:78               push1 
  06ec:76               push0 
  06ed:38 0096          pushi 96 // $96 setCycle
  06f0:7a               push2 
  06f1:51 1a            class End 
  06f3:36                push 
  06f4:7c            pushSelf 
  06f5:72 1bbc          lofsa $1bbc // reverseBiaz
  06f8:4a 14             send 14 

  06fa:32 0025            jmp code_0722 

        code_06fd
  06fd:3c                 dup 
  06fe:35 02              ldi 2 
  0700:1a                 eq? 
  0701:30 0010            bnt code_0714 
  0704:38 0096          pushi 96 // $96 setCycle
  0707:7a               push2 
  0708:51 1b            class Beg 
  070a:36                push 
  070b:7c            pushSelf 
  070c:72 1bbc          lofsa $1bbc // reverseBiaz
  070f:4a 08             send 8 

  0711:32 000e            jmp code_0722 

        code_0714
  0714:3c                 dup 
  0715:35 03              ldi 3 
  0717:1a                 eq? 
  0718:30 0007            bnt code_0722 
  071b:38 008c          pushi 8c // $8c changeState
  071e:78               push1 
  071f:76               push0 
  0720:54 06             self 6 


        code_0722
  0722:3a                toss 
  0723:48                 ret 
    )

)

// 0834
(instance sSpeed78Reverse of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_075e
  075e:87 01              lap param1 
  0760:65 0a             aTop state 
  0762:36                push 
  0763:3c                 dup 
  0764:35 00              ldi 0 
  0766:1a                 eq? 
  0767:30 001a            bnt code_0784 
  076a:39 07            pushi 7 // $7 cel
  076c:76               push0 
  076d:72 1f32          lofsa $1f32 // needle
  0770:4a 04             send 4 

  0772:30 0007            bnt code_077c 
  0775:35 0a              ldi a 
  0777:65 12             aTop seconds 
  0779:32 00af            jmp code_082b 

        code_077c
  077c:39 6c            pushi 6c // $6c dispose
  077e:76               push0 
  077f:54 04             self 4 

  0781:32 00a7            jmp code_082b 

        code_0784
  0784:3c                 dup 
  0785:35 01              ldi 1 
  0787:1a                 eq? 
  0788:30 003a            bnt code_07c5 
  078b:76               push0 
  078c:45 02 00         callb procedure_0002 0 //  

  078f:78               push1 
  0790:39 04            pushi 4 // $4 x
  0792:43 2d 02         callk DoSound 2 

  0795:18                 not 
  0796:30 0016            bnt code_07af 
  0799:39 07            pushi 7 // $7 cel
  079b:38 0280          pushi 280 // $280 sel_640
  079e:39 04            pushi 4 // $4 x
  07a0:39 43            pushi 43 // $43 at
  07a2:39 ff            pushi ff // $ff syncNum
  07a4:39 14            pushi 14 // $14 brLeft
  07a6:39 6c            pushi 6c // $6c dispose
  07a8:7c            pushSelf 
  07a9:45 0e 0e         callb procedure_000e e //  

  07ac:32 007c            jmp code_082b 

        code_07af
  07af:38 00a1          pushi a1 // $a1 setVol
  07b2:78               push1 
  07b3:39 50            pushi 50 // $50 title
  07b5:81 67              lag  
  07b7:4a 06             send 6 

  07b9:39 2a            pushi 2a // $2a play
  07bb:78               push1 
  07bc:7c            pushSelf 
  07bd:72 27f8          lofsa $27f8 // message1
  07c0:4a 06             send 6 

  07c2:32 0066            jmp code_082b 

        code_07c5
  07c5:3c                 dup 
  07c6:35 02              ldi 2 
  07c8:1a                 eq? 
  07c9:30 0028            bnt code_07f4 
  07cc:38 00a1          pushi a1 // $a1 setVol
  07cf:78               push1 
  07d0:39 7f            pushi 7f // $7f addAfter
  07d2:81 67              lag  
  07d4:4a 06             send 6 

  07d6:7a               push2 
  07d7:39 03            pushi 3 // $3 y
  07d9:39 7d            pushi 7d // $7d addToFront
  07db:45 0a 04         callb procedure_000a 4 //  

  07de:39 07            pushi 7 // $7 cel
  07e0:38 0280          pushi 280 // $280 sel_640
  07e3:39 05            pushi 5 // $5 view
  07e5:39 43            pushi 43 // $43 at
  07e7:39 ff            pushi ff // $ff syncNum
  07e9:39 14            pushi 14 // $14 brLeft
  07eb:39 6c            pushi 6c // $6c dispose
  07ed:7c            pushSelf 
  07ee:45 0e 0e         callb procedure_000e e //  

  07f1:32 0037            jmp code_082b 

        code_07f4
  07f4:3c                 dup 
  07f5:35 03              ldi 3 
  07f7:1a                 eq? 
  07f8:30 0017            bnt code_0812 
  07fb:39 07            pushi 7 // $7 cel
  07fd:38 0280          pushi 280 // $280 sel_640
  0800:39 06            pushi 6 // $6 loop
  0802:39 43            pushi 43 // $43 at
  0804:39 ff            pushi ff // $ff syncNum
  0806:38 00b9          pushi b9 // $b9 bottom
  0809:39 6c            pushi 6c // $6c dispose
  080b:7c            pushSelf 
  080c:45 0e 0e         callb procedure_000e e //  

  080f:32 0019            jmp code_082b 

        code_0812
  0812:3c                 dup 
  0813:35 04              ldi 4 
  0815:1a                 eq? 
  0816:30 0012            bnt code_082b 
  0819:76               push0 
  081a:45 03 00         callb procedure_0003 0 //  

  081d:38 011a          pushi 11a // $11a canControl
  0820:78               push1 
  0821:76               push0 
  0822:51 31            class User 
  0824:4a 06             send 6 

  0826:39 6c            pushi 6c // $6c dispose
  0828:76               push0 
  0829:54 04             self 4 


        code_082b
  082b:3a                toss 
  082c:48                 ret 
  082d:00                bnot 
    )

)

// 095a
(instance sSpeed33Reverse of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0868
  0868:87 01              lap param1 
  086a:65 0a             aTop state 
  086c:36                push 
  086d:3c                 dup 
  086e:35 00              ldi 0 
  0870:1a                 eq? 
  0871:30 001a            bnt code_088e 
  0874:39 07            pushi 7 // $7 cel
  0876:76               push0 
  0877:72 1f32          lofsa $1f32 // needle
  087a:4a 04             send 4 

  087c:30 0007            bnt code_0886 
  087f:35 0a              ldi a 
  0881:65 12             aTop seconds 
  0883:32 00cb            jmp code_0951 

        code_0886
  0886:39 6c            pushi 6c // $6c dispose
  0888:76               push0 
  0889:54 04             self 4 

  088b:32 00c3            jmp code_0951 

        code_088e
  088e:3c                 dup 
  088f:35 01              ldi 1 
  0891:1a                 eq? 
  0892:30 003a            bnt code_08cf 
  0895:76               push0 
  0896:45 02 00         callb procedure_0002 0 //  

  0899:78               push1 
  089a:39 04            pushi 4 // $4 x
  089c:43 2d 02         callk DoSound 2 

  089f:18                 not 
  08a0:30 0016            bnt code_08b9 
  08a3:39 07            pushi 7 // $7 cel
  08a5:38 0280          pushi 280 // $280 sel_640
  08a8:39 07            pushi 7 // $7 cel
  08aa:39 43            pushi 43 // $43 at
  08ac:39 ff            pushi ff // $ff syncNum
  08ae:39 14            pushi 14 // $14 brLeft
  08b0:39 6c            pushi 6c // $6c dispose
  08b2:7c            pushSelf 
  08b3:45 0e 0e         callb procedure_000e e //  

  08b6:32 0098            jmp code_0951 

        code_08b9
  08b9:38 00a1          pushi a1 // $a1 setVol
  08bc:78               push1 
  08bd:39 50            pushi 50 // $50 title
  08bf:81 67              lag  
  08c1:4a 06             send 6 

  08c3:39 2a            pushi 2a // $2a play
  08c5:78               push1 
  08c6:7c            pushSelf 
  08c7:72 282e          lofsa $282e // message2
  08ca:4a 06             send 6 

  08cc:32 0082            jmp code_0951 

        code_08cf
  08cf:3c                 dup 
  08d0:35 02              ldi 2 
  08d2:1a                 eq? 
  08d3:30 0028            bnt code_08fe 
  08d6:38 00a1          pushi a1 // $a1 setVol
  08d9:78               push1 
  08da:39 7f            pushi 7f // $7f addAfter
  08dc:81 67              lag  
  08de:4a 06             send 6 

  08e0:7a               push2 
  08e1:39 03            pushi 3 // $3 y
  08e3:39 7b            pushi 7b // $7b last
  08e5:45 0a 04         callb procedure_000a 4 //  

  08e8:39 07            pushi 7 // $7 cel
  08ea:38 0280          pushi 280 // $280 sel_640
  08ed:39 08            pushi 8 // $8 underBits
  08ef:39 43            pushi 43 // $43 at
  08f1:39 ff            pushi ff // $ff syncNum
  08f3:39 14            pushi 14 // $14 brLeft
  08f5:39 6c            pushi 6c // $6c dispose
  08f7:7c            pushSelf 
  08f8:45 0e 0e         callb procedure_000e e //  

  08fb:32 0053            jmp code_0951 

        code_08fe
  08fe:3c                 dup 
  08ff:35 03              ldi 3 
  0901:1a                 eq? 
  0902:30 0016            bnt code_091b 
  0905:39 07            pushi 7 // $7 cel
  0907:38 0280          pushi 280 // $280 sel_640
  090a:39 09            pushi 9 // $9 nsTop
  090c:39 43            pushi 43 // $43 at
  090e:39 ff            pushi ff // $ff syncNum
  0910:39 14            pushi 14 // $14 brLeft
  0912:39 6c            pushi 6c // $6c dispose
  0914:7c            pushSelf 
  0915:45 0e 0e         callb procedure_000e e //  

  0918:32 0036            jmp code_0951 

        code_091b
  091b:3c                 dup 
  091c:35 04              ldi 4 
  091e:1a                 eq? 
  091f:30 0016            bnt code_0938 
  0922:39 07            pushi 7 // $7 cel
  0924:38 0280          pushi 280 // $280 sel_640
  0927:39 0a            pushi a // $a nsLeft
  0929:39 43            pushi 43 // $43 at
  092b:39 ff            pushi ff // $ff syncNum
  092d:39 14            pushi 14 // $14 brLeft
  092f:39 6c            pushi 6c // $6c dispose
  0931:7c            pushSelf 
  0932:45 0e 0e         callb procedure_000e e //  

  0935:32 0019            jmp code_0951 

        code_0938
  0938:3c                 dup 
  0939:35 05              ldi 5 
  093b:1a                 eq? 
  093c:30 0012            bnt code_0951 
  093f:76               push0 
  0940:45 03 00         callb procedure_0003 0 //  

  0943:38 011a          pushi 11a // $11a canControl
  0946:78               push1 
  0947:76               push0 
  0948:51 31            class User 
  094a:4a 06             send 6 

  094c:39 6c            pushi 6c // $6c dispose
  094e:76               push0 
  094f:54 04             self 4 


        code_0951
  0951:3a                toss 
  0952:48                 ret 
  0953:00                bnot 
    )

)

// 0a46
(instance sSpeed78Forward of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_098e
  098e:87 01              lap param1 
  0990:65 0a             aTop state 
  0992:36                push 
  0993:3c                 dup 
  0994:35 00              ldi 0 
  0996:1a                 eq? 
  0997:30 001a            bnt code_09b4 
  099a:39 07            pushi 7 // $7 cel
  099c:76               push0 
  099d:72 1f32          lofsa $1f32 // needle
  09a0:4a 04             send 4 

  09a2:30 0007            bnt code_09ac 
  09a5:35 0a              ldi a 
  09a7:65 12             aTop seconds 
  09a9:32 0092            jmp code_0a3e 

        code_09ac
  09ac:39 6c            pushi 6c // $6c dispose
  09ae:76               push0 
  09af:54 04             self 4 

  09b1:32 008a            jmp code_0a3e 

        code_09b4
  09b4:3c                 dup 
  09b5:35 01              ldi 1 
  09b7:1a                 eq? 
  09b8:30 003a            bnt code_09f5 
  09bb:76               push0 
  09bc:45 02 00         callb procedure_0002 0 //  

  09bf:78               push1 
  09c0:39 04            pushi 4 // $4 x
  09c2:43 2d 02         callk DoSound 2 

  09c5:18                 not 
  09c6:30 0016            bnt code_09df 
  09c9:39 07            pushi 7 // $7 cel
  09cb:38 0280          pushi 280 // $280 sel_640
  09ce:39 0b            pushi b // $b nsBottom
  09d0:39 43            pushi 43 // $43 at
  09d2:39 ff            pushi ff // $ff syncNum
  09d4:39 14            pushi 14 // $14 brLeft
  09d6:39 6c            pushi 6c // $6c dispose
  09d8:7c            pushSelf 
  09d9:45 0e 0e         callb procedure_000e e //  

  09dc:32 005f            jmp code_0a3e 

        code_09df
  09df:38 00a1          pushi a1 // $a1 setVol
  09e2:78               push1 
  09e3:39 50            pushi 50 // $50 title
  09e5:81 67              lag  
  09e7:4a 06             send 6 

  09e9:39 2a            pushi 2a // $2a play
  09eb:78               push1 
  09ec:7c            pushSelf 
  09ed:72 2864          lofsa $2864 // message3
  09f0:4a 06             send 6 

  09f2:32 0049            jmp code_0a3e 

        code_09f5
  09f5:3c                 dup 
  09f6:35 02              ldi 2 
  09f8:1a                 eq? 
  09f9:30 0029            bnt code_0a25 
  09fc:38 00a1          pushi a1 // $a1 setVol
  09ff:78               push1 
  0a00:39 7f            pushi 7f // $7f addAfter
  0a02:81 67              lag  
  0a04:4a 06             send 6 

  0a06:7a               push2 
  0a07:39 03            pushi 3 // $3 y
  0a09:39 7c            pushi 7c // $7c prev
  0a0b:45 0a 04         callb procedure_000a 4 //  

  0a0e:39 07            pushi 7 // $7 cel
  0a10:38 0280          pushi 280 // $280 sel_640
  0a13:39 0c            pushi c // $c nsRight
  0a15:39 43            pushi 43 // $43 at
  0a17:39 ff            pushi ff // $ff syncNum
  0a19:38 00b9          pushi b9 // $b9 bottom
  0a1c:39 6c            pushi 6c // $6c dispose
  0a1e:7c            pushSelf 
  0a1f:45 0e 0e         callb procedure_000e e //  

  0a22:32 0019            jmp code_0a3e 

        code_0a25
  0a25:3c                 dup 
  0a26:35 03              ldi 3 
  0a28:1a                 eq? 
  0a29:30 0012            bnt code_0a3e 
  0a2c:76               push0 
  0a2d:45 03 00         callb procedure_0003 0 //  

  0a30:38 011a          pushi 11a // $11a canControl
  0a33:78               push1 
  0a34:76               push0 
  0a35:51 31            class User 
  0a37:4a 06             send 6 

  0a39:39 6c            pushi 6c // $6c dispose
  0a3b:76               push0 
  0a3c:54 04             self 4 


        code_0a3e
  0a3e:3a                toss 
  0a3f:48                 ret 
    )

)

// 0aea
(instance sSpeed33Forward of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0a7a
  0a7a:87 01              lap param1 
  0a7c:65 0a             aTop state 
  0a7e:36                push 
  0a7f:3c                 dup 
  0a80:35 00              ldi 0 
  0a82:1a                 eq? 
  0a83:30 001a            bnt code_0aa0 
  0a86:39 07            pushi 7 // $7 cel
  0a88:76               push0 
  0a89:72 1f32          lofsa $1f32 // needle
  0a8c:4a 04             send 4 

  0a8e:30 0007            bnt code_0a98 
  0a91:35 0a              ldi a 
  0a93:65 12             aTop seconds 
  0a95:32 004a            jmp code_0ae2 

        code_0a98
  0a98:39 6c            pushi 6c // $6c dispose
  0a9a:76               push0 
  0a9b:54 04             self 4 

  0a9d:32 0042            jmp code_0ae2 

        code_0aa0
  0aa0:3c                 dup 
  0aa1:35 01              ldi 1 
  0aa3:1a                 eq? 
  0aa4:30 0022            bnt code_0ac9 
  0aa7:76               push0 
  0aa8:45 02 00         callb procedure_0002 0 //  

  0aab:7a               push2 
  0aac:39 03            pushi 3 // $3 y
  0aae:39 7a            pushi 7a // $7a release
  0ab0:45 0a 04         callb procedure_000a 4 //  

  0ab3:39 07            pushi 7 // $7 cel
  0ab5:38 0280          pushi 280 // $280 sel_640
  0ab8:39 0d            pushi d // $d lsTop
  0aba:39 43            pushi 43 // $43 at
  0abc:39 ff            pushi ff // $ff syncNum
  0abe:39 14            pushi 14 // $14 brLeft
  0ac0:39 6c            pushi 6c // $6c dispose
  0ac2:7c            pushSelf 
  0ac3:45 0e 0e         callb procedure_000e e //  

  0ac6:32 0019            jmp code_0ae2 

        code_0ac9
  0ac9:3c                 dup 
  0aca:35 02              ldi 2 
  0acc:1a                 eq? 
  0acd:30 0012            bnt code_0ae2 
  0ad0:76               push0 
  0ad1:45 03 00         callb procedure_0003 0 //  

  0ad4:38 011a          pushi 11a // $11a canControl
  0ad7:78               push1 
  0ad8:76               push0 
  0ad9:51 31            class User 
  0adb:4a 06             send 6 

  0add:39 6c            pushi 6c // $6c dispose
  0adf:76               push0 
  0ae0:54 04             self 4 


        code_0ae2
  0ae2:3a                toss 
  0ae3:48                 ret 
    )

)

// 0cc8
(instance sUsesStereo of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0b1e
  0b1e:87 01              lap param1 
  0b20:65 0a             aTop state 
  0b22:36                push 
  0b23:3c                 dup 
  0b24:35 00              ldi 0 
  0b26:1a                 eq? 
  0b27:30 0180            bnt code_0caa 
  0b2a:38 011a          pushi 11a // $11a canControl
  0b2d:78               push1 
  0b2e:76               push0 
  0b2f:51 31            class User 
  0b31:4a 06             send 6 

  0b33:38 0144          pushi 144 // $144 canInput
  0b36:78               push1 
  0b37:78               push1 
  0b38:51 31            class User 
  0b3a:4a 06             send 6 

  0b3c:39 74            pushi 74 // $74 eachElementDo
  0b3e:78               push1 
  0b3f:39 69            pushi 69 // $69 hide
  0b41:81 05              lag  
  0b43:4a 06             send 6 

  0b45:39 6c            pushi 6c // $6c dispose
  0b47:76               push0 
  0b48:72 25e8          lofsa $25e8 // statue
  0b4b:4a 04             send 4 

  0b4d:39 6c            pushi 6c // $6c dispose
  0b4f:76               push0 
  0b50:72 2624          lofsa $2624 // speakerA
  0b53:4a 04             send 4 

  0b55:39 6c            pushi 6c // $6c dispose
  0b57:76               push0 
  0b58:72 2660          lofsa $2660 // speakerB
  0b5b:4a 04             send 4 

  0b5d:39 6c            pushi 6c // $6c dispose
  0b5f:76               push0 
  0b60:72 269c          lofsa $269c // plant
  0b63:4a 04             send 4 

  0b65:39 6c            pushi 6c // $6c dispose
  0b67:76               push0 
  0b68:72 26d8          lofsa $26d8 // shelves
  0b6b:4a 04             send 4 

  0b6d:39 6c            pushi 6c // $6c dispose
  0b6f:76               push0 
  0b70:72 2714          lofsa $2714 // recordJacketsA
  0b73:4a 04             send 4 

  0b75:39 6c            pushi 6c // $6c dispose
  0b77:76               push0 
  0b78:72 2750          lofsa $2750 // recordJacketsB
  0b7b:4a 04             send 4 

  0b7d:39 6c            pushi 6c // $6c dispose
  0b7f:76               push0 
  0b80:72 2af8          lofsa $2af8 // fGoldRecords
  0b83:4a 04             send 4 

  0b85:39 6c            pushi 6c // $6c dispose
  0b87:76               push0 
  0b88:72 18dc          lofsa $18dc // plaque
  0b8b:4a 04             send 4 

  0b8d:39 6b            pushi 6b // $6b init
  0b8f:76               push0 
  0b90:38 011d          pushi 11d // $11d stopUpd
  0b93:76               push0 
  0b94:72 2286          lofsa $2286 // reverseButton
  0b97:4a 08             send 8 

  0b99:39 6b            pushi 6b // $6b init
  0b9b:76               push0 
  0b9c:38 011d          pushi 11d // $11d stopUpd
  0b9f:76               push0 
  0ba0:72 2344          lofsa $2344 // stopButton
  0ba3:4a 08             send 8 

  0ba5:39 6b            pushi 6b // $6b init
  0ba7:76               push0 
  0ba8:38 011d          pushi 11d // $11d stopUpd
  0bab:76               push0 
  0bac:72 2402          lofsa $2402 // forwardButton
  0baf:4a 08             send 8 

  0bb1:39 6b            pushi 6b // $6b init
  0bb3:76               push0 
  0bb4:38 011d          pushi 11d // $11d stopUpd
  0bb7:76               push0 
  0bb8:72 24c0          lofsa $24c0 // button33
  0bbb:4a 08             send 8 

  0bbd:39 6b            pushi 6b // $6b init
  0bbf:76               push0 
  0bc0:38 011d          pushi 11d // $11d stopUpd
  0bc3:76               push0 
  0bc4:72 257e          lofsa $257e // button78
  0bc7:4a 08             send 8 

  0bc9:39 6b            pushi 6b // $6b init
  0bcb:76               push0 
  0bcc:72 1f32          lofsa $1f32 // needle
  0bcf:4a 04             send 4 

  0bd1:78               push1 
  0bd2:39 16            pushi 16 // $16 brRight
  0bd4:45 06 02         callb procedure_0006 2 //  

  0bd7:30 0042            bnt code_0c1c 
  0bda:39 6b            pushi 6b // $6b init
  0bdc:76               push0 
  0bdd:38 0096          pushi 96 // $96 setCycle
  0be0:78               push1 
  0be1:8b 05              lsl local5 
  0be3:35 00              ldi 0 
  0be5:1a                 eq? 
  0be6:30 0005            bnt code_0bee 
  0be9:35 00              ldi 0 
  0beb:32 0017            jmp code_0c05 

        code_0bee
  0bee:8b 05              lsl local5 
  0bf0:35 01              ldi 1 
  0bf2:1a                 eq? 
  0bf3:30 0005            bnt code_0bfb 
  0bf6:51 17            class Fwd 
  0bf8:32 000a            jmp code_0c05 

        code_0bfb
  0bfb:8b 05              lsl local5 
  0bfd:35 02              ldi 2 
  0bff:1a                 eq? 
  0c00:30 0002            bnt code_0c05 
  0c03:51 1f            class Rev 

        code_0c05
  0c05:36                push 
  0c06:38 00db          pushi db // $db cycleSpeed
  0c09:78               push1 
  0c0a:8b 06              lsl local6 
  0c0c:72 1db0          lofsa $1db0 // turnTableWRecord
  0c0f:4a 10             send 10 

  0c11:39 6c            pushi 6c // $6c dispose
  0c13:76               push0 
  0c14:72 19fc          lofsa $19fc // record2
  0c17:4a 04             send 4 

  0c19:32 0008            jmp code_0c24 

        code_0c1c
  0c1c:39 6b            pushi 6b // $6b init
  0c1e:76               push0 
  0c1f:72 1ce0          lofsa $1ce0 // turntable
  0c22:4a 04             send 4 


        code_0c24
  0c24:39 6b            pushi 6b // $6b init
  0c26:76               push0 
  0c27:38 0096          pushi 96 // $96 setCycle
  0c2a:78               push1 
  0c2b:83 07              lal local7 
  0c2d:30 0006            bnt code_0c36 
  0c30:72 2178          lofsa $2178 // MyRandCycle
  0c33:32 0002            jmp code_0c38 

        code_0c36
  0c36:35 00              ldi 0 

        code_0c38
  0c38:36                push 
  0c39:72 203a          lofsa $203a // speakerOne
  0c3c:4a 0a             send a 

  0c3e:39 6b            pushi 6b // $6b init
  0c40:76               push0 
  0c41:38 0096          pushi 96 // $96 setCycle
  0c44:78               push1 
  0c45:83 07              lal local7 
  0c47:30 0006            bnt code_0c50 
  0c4a:72 2178          lofsa $2178 // MyRandCycle
  0c4d:32 0002            jmp code_0c52 

        code_0c50
  0c50:35 00              ldi 0 

        code_0c52
  0c52:36                push 
  0c53:72 20e6          lofsa $20e6 // speakerTwo
  0c56:4a 0a             send a 

  0c58:38 018c          pushi 18c // $18c drawPic
  0c5b:78               push1 
  0c5c:38 028a          pushi 28a // $28a sel_650
  0c5f:81 02              lag  
  0c61:4a 06             send 6 

  0c63:78               push1 
  0c64:78               push1 
  0c65:45 16 02         callb procedure_0016 2 //  

  0c68:38 00ce          pushi ce // $ce curIcon
  0c6b:78               push1 
  0c6c:39 43            pushi 43 // $43 at
  0c6e:78               push1 
  0c6f:7a               push2 
  0c70:81 45              lag  
  0c72:4a 06             send 6 

  0c74:36                push 
  0c75:81 45              lag  
  0c77:4a 06             send 6 

  0c79:38 00bb          pushi bb // $bb setCursor
  0c7c:78               push1 
  0c7d:39 24            pushi 24 // $24 cursor
  0c7f:76               push0 
  0c80:38 00ce          pushi ce // $ce curIcon
  0c83:76               push0 
  0c84:81 45              lag  
  0c86:4a 04             send 4 

  0c88:4a 04             send 4 

  0c8a:36                push 
  0c8b:81 01              lag  
  0c8d:4a 06             send 6 

  0c8f:39 6c            pushi 6c // $6c dispose
  0c91:76               push0 
  0c92:72 1824          lofsa $1824 // stereo
  0c95:4a 04             send 4 

  0c97:38 009f          pushi 9f // $9f fade
  0c9a:39 05            pushi 5 // $5 view
  0c9c:76               push0 
  0c9d:39 0f            pushi f // $f lsBottom
  0c9f:39 0c            pushi c // $c nsRight
  0ca1:76               push0 
  0ca2:7c            pushSelf 
  0ca3:81 66              lag  
  0ca5:4a 0e             send e 

  0ca7:32 0015            jmp code_0cbf 

        code_0caa
  0caa:3c                 dup 
  0cab:35 01              ldi 1 
  0cad:1a                 eq? 
  0cae:30 000e            bnt code_0cbf 
  0cb1:38 009d          pushi 9d // $9d pause
  0cb4:78               push1 
  0cb5:78               push1 
  0cb6:81 66              lag  
  0cb8:4a 06             send 6 

  0cba:39 6c            pushi 6c // $6c dispose
  0cbc:76               push0 
  0cbd:54 04             self 4 


        code_0cbf
  0cbf:3a                toss 
  0cc0:48                 ret 
  0cc1:00                bnot 
    )

)

// 0ede
(instance sReturnsFromStereo of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0cfc
  0cfc:87 01              lap param1 
  0cfe:65 0a             aTop state 
  0d00:36                push 
  0d01:3c                 dup 
  0d02:35 00              ldi 0 
  0d04:1a                 eq? 
  0d05:30 01cd            bnt code_0ed5 
  0d08:76               push0 
  0d09:45 03 00         callb procedure_0003 0 //  

  0d0c:38 008a          pushi 8a // $8a script
  0d0f:76               push0 
  0d10:81 02              lag  
  0d12:4a 04             send 4 

  0d14:30 000d            bnt code_0d24 
  0d17:39 6c            pushi 6c // $6c dispose
  0d19:76               push0 
  0d1a:38 008a          pushi 8a // $8a script
  0d1d:76               push0 
  0d1e:81 02              lag  
  0d20:4a 04             send 4 

  0d22:4a 04             send 4 


        code_0d24
  0d24:39 07            pushi 7 // $7 cel
  0d26:76               push0 
  0d27:72 1f32          lofsa $1f32 // needle
  0d2a:4a 04             send 4 

  0d2c:18                 not 
  0d2d:30 000f            bnt code_0d3f 
  0d30:38 00a1          pushi a1 // $a1 setVol
  0d33:78               push1 
  0d34:39 7f            pushi 7f // $7f addAfter
  0d36:38 009d          pushi 9d // $9d pause
  0d39:78               push1 
  0d3a:76               push0 
  0d3b:81 66              lag  
  0d3d:4a 0c             send c 


        code_0d3f
  0d3f:39 6c            pushi 6c // $6c dispose
  0d41:76               push0 
  0d42:72 2344          lofsa $2344 // stopButton
  0d45:4a 04             send 4 

  0d47:39 6c            pushi 6c // $6c dispose
  0d49:76               push0 
  0d4a:72 2402          lofsa $2402 // forwardButton
  0d4d:4a 04             send 4 

  0d4f:39 6c            pushi 6c // $6c dispose
  0d51:76               push0 
  0d52:72 2286          lofsa $2286 // reverseButton
  0d55:4a 04             send 4 

  0d57:39 6c            pushi 6c // $6c dispose
  0d59:76               push0 
  0d5a:72 24c0          lofsa $24c0 // button33
  0d5d:4a 04             send 4 

  0d5f:39 6c            pushi 6c // $6c dispose
  0d61:76               push0 
  0d62:72 257e          lofsa $257e // button78
  0d65:4a 04             send 4 

  0d67:39 6c            pushi 6c // $6c dispose
  0d69:76               push0 
  0d6a:72 1f32          lofsa $1f32 // needle
  0d6d:4a 04             send 4 

  0d6f:78               push1 
  0d70:39 16            pushi 16 // $16 brRight
  0d72:45 06 02         callb procedure_0006 2 //  

  0d75:30 006c            bnt code_0de4 
  0d78:38 00dc          pushi dc // $dc cycler
  0d7b:76               push0 
  0d7c:72 1db0          lofsa $1db0 // turnTableWRecord
  0d7f:4a 04             send 4 

  0d81:30 003a            bnt code_0dbe 
  0d84:39 6f            pushi 6f // $6f isKindOf
  0d86:78               push1 
  0d87:51 17            class Fwd 
  0d89:36                push 
  0d8a:38 00dc          pushi dc // $dc cycler
  0d8d:76               push0 
  0d8e:72 1db0          lofsa $1db0 // turnTableWRecord
  0d91:4a 04             send 4 

  0d93:4a 06             send 6 

  0d95:30 0007            bnt code_0d9f 
  0d98:35 01              ldi 1 
  0d9a:a3 05              sal local5 
  0d9c:32 0018            jmp code_0db7 

        code_0d9f
  0d9f:39 6f            pushi 6f // $6f isKindOf
  0da1:78               push1 
  0da2:51 1f            class Rev 
  0da4:36                push 
  0da5:38 00dc          pushi dc // $dc cycler
  0da8:76               push0 
  0da9:72 1db0          lofsa $1db0 // turnTableWRecord
  0dac:4a 04             send 4 

  0dae:4a 06             send 6 

  0db0:30 0004            bnt code_0db7 
  0db3:35 02              ldi 2 
  0db5:a3 05              sal local5 

        code_0db7
  0db7:35 01              ldi 1 
  0db9:a3 03              sal local3 
  0dbb:32 0008            jmp code_0dc6 

        code_0dbe
  0dbe:35 00              ldi 0 
  0dc0:a3 05              sal local5 
  0dc2:35 00              ldi 0 
  0dc4:a3 03              sal local3 

        code_0dc6
  0dc6:39 6b            pushi 6b // $6b init
  0dc8:76               push0 
  0dc9:72 19fc          lofsa $19fc // record2
  0dcc:4a 04             send 4 

  0dce:38 00db          pushi db // $db cycleSpeed
  0dd1:76               push0 
  0dd2:72 1db0          lofsa $1db0 // turnTableWRecord
  0dd5:4a 04             send 4 

  0dd7:a3 06              sal local6 
  0dd9:39 6c            pushi 6c // $6c dispose
  0ddb:76               push0 
  0ddc:72 1db0          lofsa $1db0 // turnTableWRecord
  0ddf:4a 04             send 4 

  0de1:32 0008            jmp code_0dec 

        code_0de4
  0de4:39 6c            pushi 6c // $6c dispose
  0de6:76               push0 
  0de7:72 1ce0          lofsa $1ce0 // turntable
  0dea:4a 04             send 4 


        code_0dec
  0dec:38 00dc          pushi dc // $dc cycler
  0def:76               push0 
  0df0:72 203a          lofsa $203a // speakerOne
  0df3:4a 04             send 4 

  0df5:30 0007            bnt code_0dff 
  0df8:35 01              ldi 1 
  0dfa:a3 07              sal local7 
  0dfc:32 0004            jmp code_0e03 

        code_0dff
  0dff:35 00              ldi 0 
  0e01:a3 07              sal local7 

        code_0e03
  0e03:39 6c            pushi 6c // $6c dispose
  0e05:76               push0 
  0e06:72 203a          lofsa $203a // speakerOne
  0e09:4a 04             send 4 

  0e0b:39 6c            pushi 6c // $6c dispose
  0e0d:76               push0 
  0e0e:72 20e6          lofsa $20e6 // speakerTwo
  0e11:4a 04             send 4 

  0e13:38 00d5          pushi d5 // $d5 has
  0e16:78               push1 
  0e17:39 05            pushi 5 // $5 view
  0e19:81 00              lag  
  0e1b:4a 06             send 6 

  0e1d:18                 not 
  0e1e:30 0009            bnt code_0e2a 
  0e21:38 00c2          pushi c2 // $c2 show
  0e24:76               push0 
  0e25:72 195a          lofsa $195a // record
  0e28:4a 04             send 4 


        code_0e2a
  0e2a:39 6b            pushi 6b // $6b init
  0e2c:76               push0 
  0e2d:38 0119          pushi 119 // $119 approachVerbs
  0e30:39 03            pushi 3 // $3 y
  0e32:7a               push2 
  0e33:39 03            pushi 3 // $3 y
  0e35:39 04            pushi 4 // $4 x
  0e37:72 1824          lofsa $1824 // stereo
  0e3a:4a 0e             send e 

  0e3c:38 018c          pushi 18c // $18c drawPic
  0e3f:78               push1 
  0e40:38 0183          pushi 183 // $183 picture
  0e43:76               push0 
  0e44:81 02              lag  
  0e46:4a 04             send 4 

  0e48:36                push 
  0e49:81 02              lag  
  0e4b:4a 06             send 6 

  0e4d:38 00c2          pushi c2 // $c2 show
  0e50:76               push0 
  0e51:72 1ab6          lofsa $1ab6 // elevator
  0e54:4a 04             send 4 

  0e56:38 00c2          pushi c2 // $c2 show
  0e59:76               push0 
  0e5a:81 00              lag  
  0e5c:4a 04             send 4 

  0e5e:38 00c2          pushi c2 // $c2 show
  0e61:76               push0 
  0e62:72 21b0          lofsa $21b0 // door
  0e65:4a 04             send 4 

  0e67:38 00c2          pushi c2 // $c2 show
  0e6a:76               push0 
  0e6b:72 1bbc          lofsa $1bbc // reverseBiaz
  0e6e:4a 04             send 4 

  0e70:39 6b            pushi 6b // $6b init
  0e72:76               push0 
  0e73:72 25e8          lofsa $25e8 // statue
  0e76:4a 04             send 4 

  0e78:39 6b            pushi 6b // $6b init
  0e7a:76               push0 
  0e7b:72 2624          lofsa $2624 // speakerA
  0e7e:4a 04             send 4 

  0e80:39 6b            pushi 6b // $6b init
  0e82:76               push0 
  0e83:72 2660          lofsa $2660 // speakerB
  0e86:4a 04             send 4 

  0e88:39 6b            pushi 6b // $6b init
  0e8a:76               push0 
  0e8b:72 269c          lofsa $269c // plant
  0e8e:4a 04             send 4 

  0e90:39 6b            pushi 6b // $6b init
  0e92:76               push0 
  0e93:72 26d8          lofsa $26d8 // shelves
  0e96:4a 04             send 4 

  0e98:39 6b            pushi 6b // $6b init
  0e9a:76               push0 
  0e9b:72 2714          lofsa $2714 // recordJacketsA
  0e9e:4a 04             send 4 

  0ea0:39 6b            pushi 6b // $6b init
  0ea2:76               push0 
  0ea3:72 2750          lofsa $2750 // recordJacketsB
  0ea6:4a 04             send 4 

  0ea8:39 6b            pushi 6b // $6b init
  0eaa:76               push0 
  0eab:72 2af8          lofsa $2af8 // fGoldRecords
  0eae:4a 04             send 4 

  0eb0:39 6b            pushi 6b // $6b init
  0eb2:76               push0 
  0eb3:38 0119          pushi 119 // $119 approachVerbs
  0eb6:39 03            pushi 3 // $3 y
  0eb8:7a               push2 
  0eb9:39 03            pushi 3 // $3 y
  0ebb:39 04            pushi 4 // $4 x
  0ebd:72 18dc          lofsa $18dc // plaque
  0ec0:4a 0e             send e 

  0ec2:78               push1 
  0ec3:76               push0 
  0ec4:45 16 02         callb procedure_0016 2 //  

  0ec7:38 011a          pushi 11a // $11a canControl
  0eca:78               push1 
  0ecb:78               push1 
  0ecc:51 31            class User 
  0ece:4a 06             send 6 

  0ed0:39 6c            pushi 6c // $6c dispose
  0ed2:76               push0 
  0ed3:54 04             self 4 


        code_0ed5
  0ed5:3a                toss 
  0ed6:48                 ret 
  0ed7:00                bnot 
    )

)

// 100a
(instance sStopButtonPressed of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0f12
  0f12:87 01              lap param1 
  0f14:65 0a             aTop state 
  0f16:36                push 
  0f17:3c                 dup 
  0f18:35 00              ldi 0 
  0f1a:1a                 eq? 
  0f1b:30 001f            bnt code_0f3d 
  0f1e:39 07            pushi 7 // $7 cel
  0f20:76               push0 
  0f21:72 1f32          lofsa $1f32 // needle
  0f24:4a 04             send 4 

  0f26:30 0004            bnt code_0f2d 
  0f29:76               push0 
  0f2a:45 02 00         callb procedure_0002 0 //  


        code_0f2d
  0f2d:38 011f          pushi 11f // $11f startUpd
  0f30:76               push0 
  0f31:72 2344          lofsa $2344 // stopButton
  0f34:4a 04             send 4 

  0f36:35 01              ldi 1 
  0f38:65 10             aTop cycles 
  0f3a:32 00c4            jmp code_1001 

        code_0f3d
  0f3d:3c                 dup 
  0f3e:35 01              ldi 1 
  0f40:1a                 eq? 
  0f41:30 001f            bnt code_0f63 
  0f44:39 2a            pushi 2a // $2a play
  0f46:76               push0 
  0f47:72 289a          lofsa $289a // recordSwitch
  0f4a:4a 04             send 4 

  0f4c:39 42            pushi 42 // $42 setPri
  0f4e:78               push1 
  0f4f:39 0a            pushi a // $a nsLeft
  0f51:38 0096          pushi 96 // $96 setCycle
  0f54:39 03            pushi 3 // $3 y
  0f56:51 5f            class Osc 
  0f58:36                push 
  0f59:78               push1 
  0f5a:7c            pushSelf 
  0f5b:72 2344          lofsa $2344 // stopButton
  0f5e:4a 10             send 10 

  0f60:32 009e            jmp code_1001 

        code_0f63
  0f63:3c                 dup 
  0f64:35 02              ldi 2 
  0f66:1a                 eq? 
  0f67:30 005c            bnt code_0fc6 
  0f6a:38 00dc          pushi dc // $dc cycler
  0f6d:76               push0 
  0f6e:72 1db0          lofsa $1db0 // turnTableWRecord
  0f71:4a 04             send 4 

  0f73:18                 not 
  0f74:30 0014            bnt code_0f8b 
  0f77:39 05            pushi 5 // $5 view
  0f79:38 0280          pushi 280 // $280 sel_640
  0f7c:39 0e            pushi e // $e lsLeft
  0f7e:39 43            pushi 43 // $43 at
  0f80:39 ff            pushi ff // $ff syncNum
  0f82:38 00b9          pushi b9 // $b9 bottom
  0f85:45 0e 0a         callb procedure_000e a //  

  0f88:32 0034            jmp code_0fbf 

        code_0f8b
  0f8b:78               push1 
  0f8c:39 16            pushi 16 // $16 brRight
  0f8e:45 06 02         callb procedure_0006 2 //  

  0f91:18                 not 
  0f92:30 0014            bnt code_0fa9 
  0f95:39 05            pushi 5 // $5 view
  0f97:38 0280          pushi 280 // $280 sel_640
  0f9a:39 0f            pushi f // $f lsBottom
  0f9c:39 43            pushi 43 // $43 at
  0f9e:39 ff            pushi ff // $ff syncNum
  0fa0:38 00b9          pushi b9 // $b9 bottom
  0fa3:45 0e 0a         callb procedure_000e a //  

  0fa6:32 0016            jmp code_0fbf 

        code_0fa9
  0fa9:39 07            pushi 7 // $7 cel
  0fab:76               push0 
  0fac:72 1f32          lofsa $1f32 // needle
  0faf:4a 04             send 4 

  0fb1:30 000b            bnt code_0fbf 
  0fb4:38 010c          pushi 10c // $10c doVerb
  0fb7:78               push1 
  0fb8:39 03            pushi 3 // $3 y
  0fba:72 1f32          lofsa $1f32 // needle
  0fbd:4a 06             send 6 


        code_0fbf
  0fbf:35 01              ldi 1 
  0fc1:65 10             aTop cycles 
  0fc3:32 003b            jmp code_1001 

        code_0fc6
  0fc6:3c                 dup 
  0fc7:35 03              ldi 3 
  0fc9:1a                 eq? 
  0fca:30 0010            bnt code_0fdd 
  0fcd:38 011a          pushi 11a // $11a canControl
  0fd0:78               push1 
  0fd1:76               push0 
  0fd2:51 31            class User 
  0fd4:4a 06             send 6 

  0fd6:35 03              ldi 3 
  0fd8:65 12             aTop seconds 
  0fda:32 0024            jmp code_1001 

        code_0fdd
  0fdd:3c                 dup 
  0fde:35 04              ldi 4 
  0fe0:1a                 eq? 
  0fe1:30 001d            bnt code_1001 
  0fe4:38 0096          pushi 96 // $96 setCycle
  0fe7:78               push1 
  0fe8:76               push0 
  0fe9:72 1db0          lofsa $1db0 // turnTableWRecord
  0fec:4a 06             send 6 

  0fee:39 42            pushi 42 // $42 setPri
  0ff0:78               push1 
  0ff1:39 ff            pushi ff // $ff syncNum
  0ff3:38 011d          pushi 11d // $11d stopUpd
  0ff6:76               push0 
  0ff7:72 2344          lofsa $2344 // stopButton
  0ffa:4a 0a             send a 

  0ffc:39 6c            pushi 6c // $6c dispose
  0ffe:76               push0 
  0fff:54 04             self 4 


        code_1001
  1001:3a                toss 
  1002:48                 ret 
  1003:00                bnot 
    )

)

// 1136
(instance sForwardButtonPressed of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_103e
  103e:87 01              lap param1 
  1040:65 0a             aTop state 
  1042:36                push 
  1043:3c                 dup 
  1044:35 00              ldi 0 
  1046:1a                 eq? 
  1047:30 0010            bnt code_105a 
  104a:38 011f          pushi 11f // $11f startUpd
  104d:76               push0 
  104e:72 2402          lofsa $2402 // forwardButton
  1051:4a 04             send 4 

  1053:35 01              ldi 1 
  1055:65 10             aTop cycles 
  1057:32 00d4            jmp code_112e 

        code_105a
  105a:3c                 dup 
  105b:35 01              ldi 1 
  105d:1a                 eq? 
  105e:30 001f            bnt code_1080 
  1061:39 2a            pushi 2a // $2a play
  1063:76               push0 
  1064:72 289a          lofsa $289a // recordSwitch
  1067:4a 04             send 4 

  1069:39 42            pushi 42 // $42 setPri
  106b:78               push1 
  106c:39 0a            pushi a // $a nsLeft
  106e:38 0096          pushi 96 // $96 setCycle
  1071:39 03            pushi 3 // $3 y
  1073:51 5f            class Osc 
  1075:36                push 
  1076:78               push1 
  1077:7c            pushSelf 
  1078:72 2402          lofsa $2402 // forwardButton
  107b:4a 10             send 10 

  107d:32 00ae            jmp code_112e 

        code_1080
  1080:3c                 dup 
  1081:35 02              ldi 2 
  1083:1a                 eq? 
  1084:30 00a7            bnt code_112e 
  1087:38 00dc          pushi dc // $dc cycler
  108a:76               push0 
  108b:72 1db0          lofsa $1db0 // turnTableWRecord
  108e:4a 04             send 4 

  1090:30 0067            bnt code_10fa 
  1093:39 6f            pushi 6f // $6f isKindOf
  1095:78               push1 
  1096:51 17            class Fwd 
  1098:36                push 
  1099:38 00dc          pushi dc // $dc cycler
  109c:76               push0 
  109d:72 1db0          lofsa $1db0 // turnTableWRecord
  10a0:4a 04             send 4 

  10a2:4a 06             send 6 

  10a4:18                 not 
  10a5:30 0073            bnt code_111b 
  10a8:38 0096          pushi 96 // $96 setCycle
  10ab:78               push1 
  10ac:51 17            class Fwd 
  10ae:36                push 
  10af:72 1db0          lofsa $1db0 // turnTableWRecord
  10b2:4a 06             send 6 

  10b4:39 07            pushi 7 // $7 cel
  10b6:76               push0 
  10b7:72 1f32          lofsa $1f32 // needle
  10ba:4a 04             send 4 

  10bc:30 000d            bnt code_10cc 
  10bf:35 00              ldi 0 
  10c1:a3 02              sal local2 
  10c3:38 008d          pushi 8d // $8d cue
  10c6:76               push0 
  10c7:72 203a          lofsa $203a // speakerOne
  10ca:4a 04             send 4 


        code_10cc
  10cc:38 00db          pushi db // $db cycleSpeed
  10cf:76               push0 
  10d0:72 1db0          lofsa $1db0 // turnTableWRecord
  10d3:4a 04             send 4 

  10d5:36                push 
  10d6:35 06              ldi 6 
  10d8:1a                 eq? 
  10d9:30 000f            bnt code_10eb 
  10dc:38 008e          pushi 8e // $8e setScript
  10df:78               push1 
  10e0:72 0a4c          lofsa $0a4c // sSpeed78Forward
  10e3:36                push 
  10e4:81 02              lag  
  10e6:4a 06             send 6 

  10e8:32 0030            jmp code_111b 

        code_10eb
  10eb:38 008e          pushi 8e // $8e setScript
  10ee:78               push1 
  10ef:72 0af0          lofsa $0af0 // sSpeed33Forward
  10f2:36                push 
  10f3:81 02              lag  
  10f5:4a 06             send 6 

  10f7:32 0021            jmp code_111b 

        code_10fa
  10fa:78               push1 
  10fb:39 16            pushi 16 // $16 brRight
  10fd:45 06 02         callb procedure_0006 2 //  

  1100:30 000f            bnt code_1112 
  1103:38 0096          pushi 96 // $96 setCycle
  1106:78               push1 
  1107:51 17            class Fwd 
  1109:36                push 
  110a:72 1db0          lofsa $1db0 // turnTableWRecord
  110d:4a 06             send 6 

  110f:32 0009            jmp code_111b 

        code_1112
  1112:7a               push2 
  1113:38 0280          pushi 280 // $280 sel_640
  1116:39 10            pushi 10 // $10 lsRight
  1118:45 0e 04         callb procedure_000e 4 //  


        code_111b
  111b:39 42            pushi 42 // $42 setPri
  111d:78               push1 
  111e:39 ff            pushi ff // $ff syncNum
  1120:38 011d          pushi 11d // $11d stopUpd
  1123:76               push0 
  1124:72 2402          lofsa $2402 // forwardButton
  1127:4a 0a             send a 

  1129:39 6c            pushi 6c // $6c dispose
  112b:76               push0 
  112c:54 04             self 4 


        code_112e
  112e:3a                toss 
  112f:48                 ret 
    )

)

// 1272
(instance sReverseButtonPressed of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_116a
  116a:87 01              lap param1 
  116c:65 0a             aTop state 
  116e:36                push 
  116f:3c                 dup 
  1170:35 00              ldi 0 
  1172:1a                 eq? 
  1173:30 0010            bnt code_1186 
  1176:38 011f          pushi 11f // $11f startUpd
  1179:76               push0 
  117a:72 2286          lofsa $2286 // reverseButton
  117d:4a 04             send 4 

  117f:35 01              ldi 1 
  1181:65 10             aTop cycles 
  1183:32 00e4            jmp code_126a 

        code_1186
  1186:3c                 dup 
  1187:35 01              ldi 1 
  1189:1a                 eq? 
  118a:30 001f            bnt code_11ac 
  118d:39 2a            pushi 2a // $2a play
  118f:76               push0 
  1190:72 289a          lofsa $289a // recordSwitch
  1193:4a 04             send 4 

  1195:39 42            pushi 42 // $42 setPri
  1197:78               push1 
  1198:39 0a            pushi a // $a nsLeft
  119a:38 0096          pushi 96 // $96 setCycle
  119d:39 03            pushi 3 // $3 y
  119f:51 5f            class Osc 
  11a1:36                push 
  11a2:78               push1 
  11a3:7c            pushSelf 
  11a4:72 2286          lofsa $2286 // reverseButton
  11a7:4a 10             send 10 

  11a9:32 00be            jmp code_126a 

        code_11ac
  11ac:3c                 dup 
  11ad:35 02              ldi 2 
  11af:1a                 eq? 
  11b0:30 00b7            bnt code_126a 
  11b3:38 00dc          pushi dc // $dc cycler
  11b6:76               push0 
  11b7:72 1db0          lofsa $1db0 // turnTableWRecord
  11ba:4a 04             send 4 

  11bc:30 0077            bnt code_1236 
  11bf:39 6f            pushi 6f // $6f isKindOf
  11c1:78               push1 
  11c2:51 1f            class Rev 
  11c4:36                push 
  11c5:38 00dc          pushi dc // $dc cycler
  11c8:76               push0 
  11c9:72 1db0          lofsa $1db0 // turnTableWRecord
  11cc:4a 04             send 4 

  11ce:4a 06             send 6 

  11d0:18                 not 
  11d1:30 0083            bnt code_1257 
  11d4:38 0096          pushi 96 // $96 setCycle
  11d7:78               push1 
  11d8:51 1f            class Rev 
  11da:36                push 
  11db:72 1db0          lofsa $1db0 // turnTableWRecord
  11de:4a 06             send 6 

  11e0:39 07            pushi 7 // $7 cel
  11e2:76               push0 
  11e3:72 1f32          lofsa $1f32 // needle
  11e6:4a 04             send 4 

  11e8:30 000d            bnt code_11f8 
  11eb:35 00              ldi 0 
  11ed:a3 02              sal local2 
  11ef:38 008d          pushi 8d // $8d cue
  11f2:76               push0 
  11f3:72 203a          lofsa $203a // speakerOne
  11f6:4a 04             send 4 


        code_11f8
  11f8:38 00db          pushi db // $db cycleSpeed
  11fb:76               push0 
  11fc:72 1db0          lofsa $1db0 // turnTableWRecord
  11ff:4a 04             send 4 

  1201:36                push 
  1202:35 12              ldi 12 
  1204:1a                 eq? 
  1205:30 000f            bnt code_1217 
  1208:38 008e          pushi 8e // $8e setScript
  120b:78               push1 
  120c:72 0960          lofsa $0960 // sSpeed33Reverse
  120f:36                push 
  1210:81 02              lag  
  1212:4a 06             send 6 

  1214:32 0040            jmp code_1257 

        code_1217
  1217:38 00db          pushi db // $db cycleSpeed
  121a:76               push0 
  121b:72 1db0          lofsa $1db0 // turnTableWRecord
  121e:4a 04             send 4 

  1220:36                push 
  1221:35 06              ldi 6 
  1223:1a                 eq? 
  1224:30 0030            bnt code_1257 
  1227:38 008e          pushi 8e // $8e setScript
  122a:78               push1 
  122b:72 083a          lofsa $083a // sSpeed78Reverse
  122e:36                push 
  122f:81 02              lag  
  1231:4a 06             send 6 

  1233:32 0021            jmp code_1257 

        code_1236
  1236:78               push1 
  1237:39 16            pushi 16 // $16 brRight
  1239:45 06 02         callb procedure_0006 2 //  

  123c:30 000f            bnt code_124e 
  123f:38 0096          pushi 96 // $96 setCycle
  1242:78               push1 
  1243:51 1f            class Rev 
  1245:36                push 
  1246:72 1db0          lofsa $1db0 // turnTableWRecord
  1249:4a 06             send 6 

  124b:32 0009            jmp code_1257 

        code_124e
  124e:7a               push2 
  124f:38 0280          pushi 280 // $280 sel_640
  1252:39 10            pushi 10 // $10 lsRight
  1254:45 0e 04         callb procedure_000e 4 //  


        code_1257
  1257:39 42            pushi 42 // $42 setPri
  1259:78               push1 
  125a:39 ff            pushi ff // $ff syncNum
  125c:38 011d          pushi 11d // $11d stopUpd
  125f:76               push0 
  1260:72 2286          lofsa $2286 // reverseButton
  1263:4a 0a             send a 

  1265:39 6c            pushi 6c // $6c dispose
  1267:76               push0 
  1268:54 04             self 4 


        code_126a
  126a:3a                toss 
  126b:48                 ret 
    )

)

// 13b4
(instance sButton33Pressed of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_12a6
  12a6:87 01              lap param1 
  12a8:65 0a             aTop state 
  12aa:36                push 
  12ab:3c                 dup 
  12ac:35 00              ldi 0 
  12ae:1a                 eq? 
  12af:30 0010            bnt code_12c2 
  12b2:38 011f          pushi 11f // $11f startUpd
  12b5:76               push0 
  12b6:72 24c0          lofsa $24c0 // button33
  12b9:4a 04             send 4 

  12bb:35 01              ldi 1 
  12bd:65 10             aTop cycles 
  12bf:32 00ea            jmp code_13ac 

        code_12c2
  12c2:3c                 dup 
  12c3:35 01              ldi 1 
  12c5:1a                 eq? 
  12c6:30 001f            bnt code_12e8 
  12c9:39 2a            pushi 2a // $2a play
  12cb:76               push0 
  12cc:72 289a          lofsa $289a // recordSwitch
  12cf:4a 04             send 4 

  12d1:39 42            pushi 42 // $42 setPri
  12d3:78               push1 
  12d4:39 0a            pushi a // $a nsLeft
  12d6:38 0096          pushi 96 // $96 setCycle
  12d9:39 03            pushi 3 // $3 y
  12db:51 5f            class Osc 
  12dd:36                push 
  12de:78               push1 
  12df:7c            pushSelf 
  12e0:72 24c0          lofsa $24c0 // button33
  12e3:4a 10             send 10 

  12e5:32 00c4            jmp code_13ac 

        code_12e8
  12e8:3c                 dup 
  12e9:35 02              ldi 2 
  12eb:1a                 eq? 
  12ec:30 00bd            bnt code_13ac 
  12ef:38 00dc          pushi dc // $dc cycler
  12f2:76               push0 
  12f3:72 1db0          lofsa $1db0 // turnTableWRecord
  12f6:4a 04             send 4 

  12f8:30 0079            bnt code_1374 
  12fb:38 00db          pushi db // $db cycleSpeed
  12fe:76               push0 
  12ff:72 1db0          lofsa $1db0 // turnTableWRecord
  1302:4a 04             send 4 

  1304:36                push 
  1305:35 06              ldi 6 
  1307:1a                 eq? 
  1308:30 008e            bnt code_1399 
  130b:38 00db          pushi db // $db cycleSpeed
  130e:78               push1 
  130f:39 12            pushi 12 // $12 illegalBits
  1311:72 1db0          lofsa $1db0 // turnTableWRecord
  1314:4a 06             send 6 

  1316:39 07            pushi 7 // $7 cel
  1318:76               push0 
  1319:72 1f32          lofsa $1f32 // needle
  131c:4a 04             send 4 

  131e:30 000d            bnt code_132e 
  1321:35 00              ldi 0 
  1323:a3 02              sal local2 
  1325:38 008d          pushi 8d // $8d cue
  1328:76               push0 
  1329:72 203a          lofsa $203a // speakerOne
  132c:4a 04             send 4 


        code_132e
  132e:39 6f            pushi 6f // $6f isKindOf
  1330:78               push1 
  1331:51 1f            class Rev 
  1333:36                push 
  1334:38 00dc          pushi dc // $dc cycler
  1337:76               push0 
  1338:72 1db0          lofsa $1db0 // turnTableWRecord
  133b:4a 04             send 4 

  133d:4a 06             send 6 

  133f:30 000f            bnt code_1351 
  1342:38 008e          pushi 8e // $8e setScript
  1345:78               push1 
  1346:72 0960          lofsa $0960 // sSpeed33Reverse
  1349:36                push 
  134a:81 02              lag  
  134c:4a 06             send 6 

  134e:32 0048            jmp code_1399 

        code_1351
  1351:39 6f            pushi 6f // $6f isKindOf
  1353:78               push1 
  1354:51 17            class Fwd 
  1356:36                push 
  1357:38 00dc          pushi dc // $dc cycler
  135a:76               push0 
  135b:72 1db0          lofsa $1db0 // turnTableWRecord
  135e:4a 04             send 4 

  1360:4a 06             send 6 

  1362:30 0034            bnt code_1399 
  1365:38 008e          pushi 8e // $8e setScript
  1368:78               push1 
  1369:72 0af0          lofsa $0af0 // sSpeed33Forward
  136c:36                push 
  136d:81 02              lag  
  136f:4a 06             send 6 

  1371:32 0025            jmp code_1399 

        code_1374
  1374:38 00db          pushi db // $db cycleSpeed
  1377:78               push1 
  1378:39 12            pushi 12 // $12 illegalBits
  137a:72 1db0          lofsa $1db0 // turnTableWRecord
  137d:4a 06             send 6 

  137f:7a               push2 
  1380:38 0280          pushi 280 // $280 sel_640
  1383:39 11            pushi 11 // $11 signal
  1385:45 0e 04         callb procedure_000e 4 //  

  1388:39 05            pushi 5 // $5 view
  138a:38 0280          pushi 280 // $280 sel_640
  138d:39 12            pushi 12 // $12 illegalBits
  138f:39 43            pushi 43 // $43 at
  1391:39 ff            pushi ff // $ff syncNum
  1393:38 00b9          pushi b9 // $b9 bottom
  1396:45 0e 0a         callb procedure_000e a //  


        code_1399
  1399:39 42            pushi 42 // $42 setPri
  139b:78               push1 
  139c:39 ff            pushi ff // $ff syncNum
  139e:38 011d          pushi 11d // $11d stopUpd
  13a1:76               push0 
  13a2:72 24c0          lofsa $24c0 // button33
  13a5:4a 0a             send a 

  13a7:39 6c            pushi 6c // $6c dispose
  13a9:76               push0 
  13aa:54 04             self 4 


        code_13ac
  13ac:3a                toss 
  13ad:48                 ret 
    )

)

// 14e2
(instance sButton78Pressed of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_13e8
  13e8:87 01              lap param1 
  13ea:65 0a             aTop state 
  13ec:36                push 
  13ed:3c                 dup 
  13ee:35 00              ldi 0 
  13f0:1a                 eq? 
  13f1:30 0010            bnt code_1404 
  13f4:38 011f          pushi 11f // $11f startUpd
  13f7:76               push0 
  13f8:72 257e          lofsa $257e // button78
  13fb:4a 04             send 4 

  13fd:35 01              ldi 1 
  13ff:65 10             aTop cycles 
  1401:32 00d6            jmp code_14da 

        code_1404
  1404:3c                 dup 
  1405:35 01              ldi 1 
  1407:1a                 eq? 
  1408:30 001f            bnt code_142a 
  140b:39 2a            pushi 2a // $2a play
  140d:76               push0 
  140e:72 289a          lofsa $289a // recordSwitch
  1411:4a 04             send 4 

  1413:39 42            pushi 42 // $42 setPri
  1415:78               push1 
  1416:39 0a            pushi a // $a nsLeft
  1418:38 0096          pushi 96 // $96 setCycle
  141b:39 03            pushi 3 // $3 y
  141d:51 5f            class Osc 
  141f:36                push 
  1420:78               push1 
  1421:7c            pushSelf 
  1422:72 257e          lofsa $257e // button78
  1425:4a 10             send 10 

  1427:32 00b0            jmp code_14da 

        code_142a
  142a:3c                 dup 
  142b:35 02              ldi 2 
  142d:1a                 eq? 
  142e:30 00a9            bnt code_14da 
  1431:38 00dc          pushi dc // $dc cycler
  1434:76               push0 
  1435:72 1db0          lofsa $1db0 // turnTableWRecord
  1438:4a 04             send 4 

  143a:30 0065            bnt code_14a2 
  143d:38 00db          pushi db // $db cycleSpeed
  1440:76               push0 
  1441:72 1db0          lofsa $1db0 // turnTableWRecord
  1444:4a 04             send 4 

  1446:36                push 
  1447:35 12              ldi 12 
  1449:1a                 eq? 
  144a:30 007a            bnt code_14c7 
  144d:38 00db          pushi db // $db cycleSpeed
  1450:78               push1 
  1451:39 06            pushi 6 // $6 loop
  1453:72 1db0          lofsa $1db0 // turnTableWRecord
  1456:4a 06             send 6 

  1458:39 07            pushi 7 // $7 cel
  145a:76               push0 
  145b:72 1f32          lofsa $1f32 // needle
  145e:4a 04             send 4 

  1460:30 000d            bnt code_1470 
  1463:35 00              ldi 0 
  1465:a3 02              sal local2 
  1467:38 008d          pushi 8d // $8d cue
  146a:76               push0 
  146b:72 203a          lofsa $203a // speakerOne
  146e:4a 04             send 4 


        code_1470
  1470:39 6f            pushi 6f // $6f isKindOf
  1472:78               push1 
  1473:51 1f            class Rev 
  1475:36                push 
  1476:38 00dc          pushi dc // $dc cycler
  1479:76               push0 
  147a:72 1db0          lofsa $1db0 // turnTableWRecord
  147d:4a 04             send 4 

  147f:4a 06             send 6 

  1481:30 000f            bnt code_1493 
  1484:38 008e          pushi 8e // $8e setScript
  1487:78               push1 
  1488:72 083a          lofsa $083a // sSpeed78Reverse
  148b:36                push 
  148c:81 02              lag  
  148e:4a 06             send 6 

  1490:32 0034            jmp code_14c7 

        code_1493
  1493:38 008e          pushi 8e // $8e setScript
  1496:78               push1 
  1497:72 0a4c          lofsa $0a4c // sSpeed78Forward
  149a:36                push 
  149b:81 02              lag  
  149d:4a 06             send 6 

  149f:32 0025            jmp code_14c7 

        code_14a2
  14a2:38 00db          pushi db // $db cycleSpeed
  14a5:78               push1 
  14a6:39 06            pushi 6 // $6 loop
  14a8:72 1db0          lofsa $1db0 // turnTableWRecord
  14ab:4a 06             send 6 

  14ad:7a               push2 
  14ae:38 0280          pushi 280 // $280 sel_640
  14b1:39 13            pushi 13 // $13 brTop
  14b3:45 0e 04         callb procedure_000e 4 //  

  14b6:39 05            pushi 5 // $5 view
  14b8:38 0280          pushi 280 // $280 sel_640
  14bb:39 12            pushi 12 // $12 illegalBits
  14bd:39 43            pushi 43 // $43 at
  14bf:39 ff            pushi ff // $ff syncNum
  14c1:38 00b9          pushi b9 // $b9 bottom
  14c4:45 0e 0a         callb procedure_000e a //  


        code_14c7
  14c7:39 42            pushi 42 // $42 setPri
  14c9:78               push1 
  14ca:39 ff            pushi ff // $ff syncNum
  14cc:38 011d          pushi 11d // $11d stopUpd
  14cf:76               push0 
  14d0:72 257e          lofsa $257e // button78
  14d3:4a 0a             send a 

  14d5:39 6c            pushi 6c // $6c dispose
  14d7:76               push0 
  14d8:54 04             self 4 


        code_14da
  14da:3a                toss 
  14db:48                 ret 
    )

)

// 1602
(instance sEnterElevator of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1516
  1516:87 01              lap param1 
  1518:65 0a             aTop state 
  151a:36                push 
  151b:3c                 dup 
  151c:35 00              ldi 0 
  151e:1a                 eq? 
  151f:30 0013            bnt code_1535 
  1522:76               push0 
  1523:45 02 00         callb procedure_0002 0 //  

  1526:39 2a            pushi 2a // $2a play
  1528:76               push0 
  1529:72 278c          lofsa $278c // elevatorDing
  152c:4a 04             send 4 

  152e:35 0f              ldi f 
  1530:65 10             aTop cycles 
  1532:32 00c5            jmp code_15fa 

        code_1535
  1535:3c                 dup 
  1536:35 01              ldi 1 
  1538:1a                 eq? 
  1539:30 0018            bnt code_1554 
  153c:39 2a            pushi 2a // $2a play
  153e:76               push0 
  153f:72 27c2          lofsa $27c2 // elevatorDoor
  1542:4a 04             send 4 

  1544:38 0096          pushi 96 // $96 setCycle
  1547:7a               push2 
  1548:51 1a            class End 
  154a:36                push 
  154b:7c            pushSelf 
  154c:72 1ab6          lofsa $1ab6 // elevator
  154f:4a 08             send 8 

  1551:32 00a6            jmp code_15fa 

        code_1554
  1554:3c                 dup 
  1555:35 02              ldi 2 
  1557:1a                 eq? 
  1558:30 002d            bnt code_1588 
  155b:38 009c          pushi 9c // $9c stop
  155e:76               push0 
  155f:72 27c2          lofsa $27c2 // elevatorDoor
  1562:4a 04             send 4 

  1564:39 42            pushi 42 // $42 setPri
  1566:78               push1 
  1567:39 0a            pushi a // $a nsLeft
  1569:72 1ab6          lofsa $1ab6 // elevator
  156c:4a 06             send 6 

  156e:39 42            pushi 42 // $42 setPri
  1570:78               push1 
  1571:39 09            pushi 9 // $9 nsTop
  1573:38 011b          pushi 11b // $11b setMotion
  1576:39 04            pushi 4 // $4 x
  1578:51 1e            class MoveTo 
  157a:36                push 
  157b:39 3b            pushi 3b // $3b mover
  157d:38 008b          pushi 8b // $8b caller
  1580:7c            pushSelf 
  1581:81 00              lag  
  1583:4a 12             send 12 

  1585:32 0072            jmp code_15fa 

        code_1588
  1588:3c                 dup 
  1589:35 03              ldi 3 
  158b:1a                 eq? 
  158c:30 000e            bnt code_159d 
  158f:38 00e4          pushi e4 // $e4 setHeading
  1592:7a               push2 
  1593:39 5a            pushi 5a // $5a points
  1595:7c            pushSelf 
  1596:81 00              lag  
  1598:4a 08             send 8 

  159a:32 005d            jmp code_15fa 

        code_159d
  159d:3c                 dup 
  159e:35 04              ldi 4 
  15a0:1a                 eq? 
  15a1:30 0017            bnt code_15bb 
  15a4:39 06            pushi 6 // $6 loop
  15a6:72 2922          lofsa $2922 // Reverse Biaz
  15a9:36                push 
  15aa:38 0280          pushi 280 // $280 sel_640
  15ad:39 14            pushi 14 // $14 brLeft
  15af:39 6c            pushi 6c // $6c dispose
  15b1:38 008b          pushi 8b // $8b caller
  15b4:7c            pushSelf 
  15b5:45 12 0c         callb procedure_0012 c //  

  15b8:32 003f            jmp code_15fa 

        code_15bb
  15bb:3c                 dup 
  15bc:35 05              ldi 5 
  15be:1a                 eq? 
  15bf:30 0018            bnt code_15da 
  15c2:39 2a            pushi 2a // $2a play
  15c4:76               push0 
  15c5:72 27c2          lofsa $27c2 // elevatorDoor
  15c8:4a 04             send 4 

  15ca:38 0096          pushi 96 // $96 setCycle
  15cd:7a               push2 
  15ce:51 1b            class Beg 
  15d0:36                push 
  15d1:7c            pushSelf 
  15d2:72 1ab6          lofsa $1ab6 // elevator
  15d5:4a 08             send 8 

  15d7:32 0020            jmp code_15fa 

        code_15da
  15da:3c                 dup 
  15db:35 06              ldi 6 
  15dd:1a                 eq? 
  15de:30 0019            bnt code_15fa 
  15e1:38 009c          pushi 9c // $9c stop
  15e4:76               push0 
  15e5:72 27c2          lofsa $27c2 // elevatorDoor
  15e8:4a 04             send 4 

  15ea:38 0179          pushi 179 // $179 newRoom
  15ed:78               push1 
  15ee:38 026c          pushi 26c // $26c sel_620
  15f1:81 02              lag  
  15f3:4a 06             send 6 

  15f5:39 6c            pushi 6c // $6c dispose
  15f7:76               push0 
  15f8:54 04             self 4 


        code_15fa
  15fa:3a                toss 
  15fb:48                 ret 
    )

)

// 1768
(instance sPlayMusic of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1636
  1636:87 01              lap param1 
  1638:65 0a             aTop state 
  163a:36                push 
  163b:3c                 dup 
  163c:35 00              ldi 0 
  163e:1a                 eq? 
  163f:30 0018            bnt code_165a 
  1642:83 02              lal local2 
  1644:30 000c            bnt code_1653 
  1647:39 2a            pushi 2a // $2a play
  1649:78               push1 
  164a:7c            pushSelf 
  164b:72 28d0          lofsa $28d0 // needleDownSpin
  164e:4a 06             send 6 

  1650:32 010d            jmp code_1760 

        code_1653
  1653:35 01              ldi 1 
  1655:65 10             aTop cycles 
  1657:32 0106            jmp code_1760 

        code_165a
  165a:3c                 dup 
  165b:35 01              ldi 1 
  165d:1a                 eq? 
  165e:30 00ff            bnt code_1760 
  1661:76               push0 
  1662:45 03 00         callb procedure_0003 0 //  

  1665:38 011a          pushi 11a // $11a canControl
  1668:78               push1 
  1669:76               push0 
  166a:51 31            class User 
  166c:4a 06             send 6 

  166e:39 6f            pushi 6f // $6f isKindOf
  1670:78               push1 
  1671:51 17            class Fwd 
  1673:36                push 
  1674:38 00dc          pushi dc // $dc cycler
  1677:76               push0 
  1678:72 1db0          lofsa $1db0 // turnTableWRecord
  167b:4a 04             send 4 

  167d:4a 06             send 6 

  167f:30 005c            bnt code_16de 
  1682:38 00db          pushi db // $db cycleSpeed
  1685:76               push0 
  1686:72 1db0          lofsa $1db0 // turnTableWRecord
  1689:4a 04             send 4 

  168b:36                push 
  168c:35 06              ldi 6 
  168e:1a                 eq? 
  168f:30 0026            bnt code_16b8 
  1692:39 2b            pushi 2b // $2b number
  1694:78               push1 
  1695:38 0281          pushi 281 // $281 sel_641
  1698:39 66            pushi 66 // $66 flags
  169a:78               push1 
  169b:78               push1 
  169c:38 00a2          pushi a2 // $a2 setLoop
  169f:78               push1 
  16a0:39 ff            pushi ff // $ff syncNum
  16a2:39 2a            pushi 2a // $2a play
  16a4:76               push0 
  16a5:81 67              lag  
  16a7:4a 16             send 16 

  16a9:38 008e          pushi 8e // $8e setScript
  16ac:78               push1 
  16ad:72 0a4c          lofsa $0a4c // sSpeed78Forward
  16b0:36                push 
  16b1:81 02              lag  
  16b3:4a 06             send 6 

  16b5:32 00a3            jmp code_175b 

        code_16b8
  16b8:39 2b            pushi 2b // $2b number
  16ba:78               push1 
  16bb:38 0280          pushi 280 // $280 sel_640
  16be:39 66            pushi 66 // $66 flags
  16c0:78               push1 
  16c1:78               push1 
  16c2:38 00a2          pushi a2 // $a2 setLoop
  16c5:78               push1 
  16c6:39 ff            pushi ff // $ff syncNum
  16c8:39 2a            pushi 2a // $2a play
  16ca:76               push0 
  16cb:81 67              lag  
  16cd:4a 16             send 16 

  16cf:38 008e          pushi 8e // $8e setScript
  16d2:78               push1 
  16d3:72 0af0          lofsa $0af0 // sSpeed33Forward
  16d6:36                push 
  16d7:81 02              lag  
  16d9:4a 06             send 6 

  16db:32 007d            jmp code_175b 

        code_16de
  16de:39 6f            pushi 6f // $6f isKindOf
  16e0:78               push1 
  16e1:51 1f            class Rev 
  16e3:36                push 
  16e4:38 00dc          pushi dc // $dc cycler
  16e7:76               push0 
  16e8:72 1db0          lofsa $1db0 // turnTableWRecord
  16eb:4a 04             send 4 

  16ed:4a 06             send 6 

  16ef:30 0069            bnt code_175b 
  16f2:38 00db          pushi db // $db cycleSpeed
  16f5:76               push0 
  16f6:72 1db0          lofsa $1db0 // turnTableWRecord
  16f9:4a 04             send 4 

  16fb:36                push 
  16fc:35 12              ldi 12 
  16fe:1a                 eq? 
  16ff:30 0026            bnt code_1728 
  1702:39 2b            pushi 2b // $2b number
  1704:78               push1 
  1705:38 0282          pushi 282 // $282 sel_642
  1708:39 66            pushi 66 // $66 flags
  170a:78               push1 
  170b:78               push1 
  170c:38 00a2          pushi a2 // $a2 setLoop
  170f:78               push1 
  1710:39 ff            pushi ff // $ff syncNum
  1712:39 2a            pushi 2a // $2a play
  1714:76               push0 
  1715:81 67              lag  
  1717:4a 16             send 16 

  1719:38 008e          pushi 8e // $8e setScript
  171c:78               push1 
  171d:72 0960          lofsa $0960 // sSpeed33Reverse
  1720:36                push 
  1721:81 02              lag  
  1723:4a 06             send 6 

  1725:32 0033            jmp code_175b 

        code_1728
  1728:38 00db          pushi db // $db cycleSpeed
  172b:76               push0 
  172c:72 1db0          lofsa $1db0 // turnTableWRecord
  172f:4a 04             send 4 

  1731:36                push 
  1732:35 06              ldi 6 
  1734:1a                 eq? 
  1735:30 0023            bnt code_175b 
  1738:39 2b            pushi 2b // $2b number
  173a:78               push1 
  173b:38 0283          pushi 283 // $283 sel_643
  173e:39 66            pushi 66 // $66 flags
  1740:78               push1 
  1741:78               push1 
  1742:38 00a2          pushi a2 // $a2 setLoop
  1745:78               push1 
  1746:39 ff            pushi ff // $ff syncNum
  1748:39 2a            pushi 2a // $2a play
  174a:76               push0 
  174b:81 67              lag  
  174d:4a 16             send 16 

  174f:38 008e          pushi 8e // $8e setScript
  1752:78               push1 
  1753:72 083a          lofsa $083a // sSpeed78Reverse
  1756:36                push 
  1757:81 02              lag  
  1759:4a 06             send 6 


        code_175b
  175b:39 6c            pushi 6c // $6c dispose
  175d:76               push0 
  175e:54 04             self 4 


        code_1760
  1760:3a                toss 
  1761:48                 ret 
    )

)

// 181e
(instance stereo of Feature
    (properties
        x $ae
        y $a3
        z $3
        heading $0
        noun $0
        nsTop $9a
        nsLeft $97
        nsBottom $a7
        nsRight $c5
        description $2c5d
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $ac
        approachY $b9
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_179c
  179c:8f 01              lsp param1 
  179e:3c                 dup 
  179f:35 02              ldi 2 
  17a1:1a                 eq? 
  17a2:30 000f            bnt code_17b4 
  17a5:38 008e          pushi 8e // $8e setScript
  17a8:78               push1 
  17a9:72 0cce          lofsa $0cce // sUsesStereo
  17ac:36                push 
  17ad:81 02              lag  
  17af:4a 06             send 6 

  17b1:32 0061            jmp code_1815 

        code_17b4
  17b4:3c                 dup 
  17b5:35 03              ldi 3 
  17b7:1a                 eq? 
  17b8:30 000f            bnt code_17ca 
  17bb:38 008e          pushi 8e // $8e setScript
  17be:78               push1 
  17bf:72 0cce          lofsa $0cce // sUsesStereo
  17c2:36                push 
  17c3:81 02              lag  
  17c5:4a 06             send 6 

  17c7:32 004b            jmp code_1815 

        code_17ca
  17ca:3c                 dup 
  17cb:35 04              ldi 4 
  17cd:1a                 eq? 
  17ce:30 0037            bnt code_1808 
  17d1:8f 02              lsp param2 
  17d3:35 05              ldi 5 
  17d5:1a                 eq? 
  17d6:30 001f            bnt code_17f8 
  17d9:78               push1 
  17da:39 16            pushi 16 // $16 brRight
  17dc:45 07 02         callb procedure_0007 2 //  

  17df:38 0148          pushi 148 // $148 put
  17e2:78               push1 
  17e3:39 05            pushi 5 // $5 view
  17e5:81 00              lag  
  17e7:4a 06             send 6 

  17e9:38 008e          pushi 8e // $8e setScript
  17ec:78               push1 
  17ed:72 0cce          lofsa $0cce // sUsesStereo
  17f0:36                push 
  17f1:81 02              lag  
  17f3:4a 06             send 6 

  17f5:32 001d            jmp code_1815 

        code_17f8
  17f8:38 010c          pushi 10c // $10c doVerb
  17fb:7a               push2 
  17fc:8f 01              lsp param1 
  17fe:8f 02              lsp param2 
  1800:59 03            &rest 3 
  1802:57 2c 08         super Feature 8 

  1805:32 000d            jmp code_1815 

        code_1808
  1808:38 010c          pushi 10c // $10c doVerb
  180b:7a               push2 
  180c:8f 01              lsp param1 
  180e:8f 02              lsp param2 
  1810:59 03            &rest 3 
  1812:57 2c 08         super Feature 8 


        code_1815
  1815:3a                toss 
  1816:48                 ret 
  1817:00                bnot 
    )

)

// 18d6
(instance plaque of Feature
    (properties
        x $a7
        y $a1
        z $1d
        heading $0
        noun $0
        nsTop $77
        nsLeft $99
        nsBottom $91
        nsRight $b5
        description $2c6f
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $9f
        approachY $b7
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_185c
  185c:8f 01              lsp param1 
  185e:3c                 dup 
  185f:35 02              ldi 2 
  1861:1a                 eq? 
  1862:30 0026            bnt code_188b 
  1865:39 77            pushi 77 // $77 contains
  1867:78               push1 
  1868:72 195a          lofsa $195a // record
  186b:36                push 
  186c:81 05              lag  
  186e:4a 06             send 6 

  1870:30 000c            bnt code_187f 
  1873:7a               push2 
  1874:38 0280          pushi 280 // $280 sel_640
  1877:39 15            pushi 15 // $15 brBottom
  1879:45 0e 04         callb procedure_000e 4 //  

  187c:32 004f            jmp code_18ce 

        code_187f
  187f:7a               push2 
  1880:38 0280          pushi 280 // $280 sel_640
  1883:39 16            pushi 16 // $16 brRight
  1885:45 0e 04         callb procedure_000e 4 //  

  1888:32 0043            jmp code_18ce 

        code_188b
  188b:3c                 dup 
  188c:35 04              ldi 4 
  188e:1a                 eq? 
  188f:30 002f            bnt code_18c1 
  1892:8f 02              lsp param2 
  1894:3c                 dup 
  1895:35 05              ldi 5 
  1897:1a                 eq? 
  1898:30 0015            bnt code_18b0 
  189b:39 6b            pushi 6b // $6b init
  189d:76               push0 
  189e:72 195a          lofsa $195a // record
  18a1:4a 04             send 4 

  18a3:38 0148          pushi 148 // $148 put
  18a6:78               push1 
  18a7:39 05            pushi 5 // $5 view
  18a9:81 00              lag  
  18ab:4a 06             send 6 

  18ad:32 000d            jmp code_18bd 

        code_18b0
  18b0:38 010c          pushi 10c // $10c doVerb
  18b3:7a               push2 
  18b4:8f 01              lsp param1 
  18b6:8f 02              lsp param2 
  18b8:59 03            &rest 3 
  18ba:57 2c 08         super Feature 8 


        code_18bd
  18bd:3a                toss 
  18be:32 000d            jmp code_18ce 

        code_18c1
  18c1:38 010c          pushi 10c // $10c doVerb
  18c4:7a               push2 
  18c5:8f 01              lsp param1 
  18c7:8f 02              lsp param2 
  18c9:59 03            &rest 3 
  18cb:57 2c 08         super Feature 8 


        code_18ce
  18ce:3a                toss 
  18cf:48                 ret 
    )

)

// 1954
(instance record of View
    (properties
        x $a9
        y $a2
        z $21
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2c81
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $9f
        approachY $b7
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $280
        loop $2
        cel $0
        priority $e
        underBits $0
        signal $4011
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_1914
  1914:8f 01              lsp param1 
  1916:3c                 dup 
  1917:35 03              ldi 3 
  1919:1a                 eq? 
  191a:30 000f            bnt code_192c 
  191d:38 008e          pushi 8e // $8e setScript
  1920:78               push1 
  1921:72 0678          lofsa $0678 // sGetRecord
  1924:36                push 
  1925:81 00              lag  
  1927:4a 06             send 6 

  1929:32 0020            jmp code_194c 

        code_192c
  192c:3c                 dup 
  192d:35 02              ldi 2 
  192f:1a                 eq? 
  1930:30 000c            bnt code_193f 
  1933:7a               push2 
  1934:38 0280          pushi 280 // $280 sel_640
  1937:39 17            pushi 17 // $17 name
  1939:45 0e 04         callb procedure_000e 4 //  

  193c:32 000d            jmp code_194c 

        code_193f
  193f:38 010c          pushi 10c // $10c doVerb
  1942:7a               push2 
  1943:8f 01              lsp param1 
  1945:8f 02              lsp param2 
  1947:59 03            &rest 3 
  1949:57 2e 08         super View 8 


        code_194c
  194c:3a                toss 
  194d:48                 ret 
    )

)

// 19f6
(instance record2 of View
    (properties
        x $9a
        y $a4
        z $10
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2c5d
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $9f
        approachY $b7
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $280
        loop $3
        cel $0
        priority $e
        underBits $0
        signal $4011
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_19b2
  19b2:8f 01              lsp param1 
  19b4:3c                 dup 
  19b5:35 02              ldi 2 
  19b7:1a                 eq? 
  19b8:30 000f            bnt code_19ca 
  19bb:38 008e          pushi 8e // $8e setScript
  19be:78               push1 
  19bf:72 0cce          lofsa $0cce // sUsesStereo
  19c2:36                push 
  19c3:81 02              lag  
  19c5:4a 06             send 6 

  19c7:32 0023            jmp code_19ed 

        code_19ca
  19ca:3c                 dup 
  19cb:35 03              ldi 3 
  19cd:1a                 eq? 
  19ce:30 000f            bnt code_19e0 
  19d1:38 008e          pushi 8e // $8e setScript
  19d4:78               push1 
  19d5:72 0cce          lofsa $0cce // sUsesStereo
  19d8:36                push 
  19d9:81 02              lag  
  19db:4a 06             send 6 

  19dd:32 000d            jmp code_19ed 

        code_19e0
  19e0:38 010c          pushi 10c // $10c doVerb
  19e3:7a               push2 
  19e4:8f 01              lsp param1 
  19e6:8f 02              lsp param2 
  19e8:59 03            &rest 3 
  19ea:57 2e 08         super View 8 


        code_19ed
  19ed:3a                toss 
  19ee:48                 ret 
  19ef:00                bnot 
    )

)

// 1ab0
(instance elevator of Prop
    (properties
        x $32
        y $4d
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2ca0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $41
        approachY $98
        approachDist $0
        _approachVerbs $6789
        lookStr $2cad
        yStep $2
        view $280
        loop $0
        cel $0
        priority $a
        underBits $0
        signal $4011
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1a54
  1a54:8f 01              lsp param1 
  1a56:3c                 dup 
  1a57:35 03              ldi 3 
  1a59:1a                 eq? 
  1a5a:30 003e            bnt code_1a9b 
  1a5d:78               push1 
  1a5e:39 15            pushi 15 // $15 brBottom
  1a60:45 06 02         callb procedure_0006 2 //  

  1a63:30 000f            bnt code_1a75 
  1a66:38 008e          pushi 8e // $8e setScript
  1a69:78               push1 
  1a6a:72 1608          lofsa $1608 // sEnterElevator
  1a6d:36                push 
  1a6e:81 02              lag  
  1a70:4a 06             send 6 

  1a72:32 0033            jmp code_1aa8 

        code_1a75
  1a75:83 01              lal local1 
  1a77:30 0019            bnt code_1a93 
  1a7a:78               push1 
  1a7b:39 15            pushi 15 // $15 brBottom
  1a7d:45 07 02         callb procedure_0007 2 //  

  1a80:39 04            pushi 4 // $4 x
  1a82:72 2922          lofsa $2922 // Reverse Biaz
  1a85:36                push 
  1a86:38 0280          pushi 280 // $280 sel_640
  1a89:39 18            pushi 18 // $18 key
  1a8b:39 6c            pushi 6c // $6c dispose
  1a8d:45 12 08         callb procedure_0012 8 //  

  1a90:32 0015            jmp code_1aa8 

        code_1a93
  1a93:76               push0 
  1a94:40 1098 00        call proc_2b30 0 

  1a98:32 000d            jmp code_1aa8 

        code_1a9b
  1a9b:38 010c          pushi 10c // $10c doVerb
  1a9e:7a               push2 
  1a9f:8f 01              lsp param1 
  1aa1:8f 02              lsp param2 
  1aa3:59 03            &rest 3 
  1aa5:57 2f 08         super Prop 8 


        code_1aa8
  1aa8:3a                toss 
  1aa9:48                 ret 
    )

)

// 1bb6
(instance reverseBiaz of Prop
    (properties
        x $fb
        y $38
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2ce1
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $282
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1b18
  1b18:8f 01              lsp param1 
  1b1a:3c                 dup 
  1b1b:35 02              ldi 2 
  1b1d:1a                 eq? 
  1b1e:30 0017            bnt code_1b38 
  1b21:7a               push2 
  1b22:38 0280          pushi 280 // $280 sel_640
  1b25:39 19            pushi 19 // $19 time
  1b27:45 0e 04         callb procedure_000e 4 //  

  1b2a:83 01              lal local1 
  1b2c:18                 not 
  1b2d:30 007e            bnt code_1bae 
  1b30:76               push0 
  1b31:40 0ffb 00        call proc_2b30 0 

  1b35:32 0076            jmp code_1bae 

        code_1b38
  1b38:3c                 dup 
  1b39:35 05              ldi 5 
  1b3b:1a                 eq? 
  1b3c:30 0017            bnt code_1b56 
  1b3f:7a               push2 
  1b40:38 0280          pushi 280 // $280 sel_640
  1b43:39 1a            pushi 1a // $1a text
  1b45:45 0e 04         callb procedure_000e 4 //  

  1b48:83 01              lal local1 
  1b4a:18                 not 
  1b4b:30 0060            bnt code_1bae 
  1b4e:76               push0 
  1b4f:40 0fdd 00        call proc_2b30 0 

  1b53:32 0058            jmp code_1bae 

        code_1b56
  1b56:3c                 dup 
  1b57:35 03              ldi 3 
  1b59:1a                 eq? 
  1b5a:30 000c            bnt code_1b69 
  1b5d:7a               push2 
  1b5e:38 0280          pushi 280 // $280 sel_640
  1b61:39 1b            pushi 1b // $1b elements
  1b63:45 0e 04         callb procedure_000e 4 //  

  1b66:32 0045            jmp code_1bae 

        code_1b69
  1b69:3c                 dup 
  1b6a:35 04              ldi 4 
  1b6c:1a                 eq? 
  1b6d:30 0022            bnt code_1b92 
  1b70:8f 02              lsp param2 
  1b72:3c                 dup 
  1b73:35 04              ldi 4 
  1b75:1a                 eq? 
  1b76:30 000c            bnt code_1b85 
  1b79:7a               push2 
  1b7a:38 0280          pushi 280 // $280 sel_640
  1b7d:39 1c            pushi 1c // $1c color
  1b7f:45 0e 04         callb procedure_000e 4 //  

  1b82:32 0009            jmp code_1b8e 

        code_1b85
  1b85:7a               push2 
  1b86:38 0280          pushi 280 // $280 sel_640
  1b89:39 1d            pushi 1d // $1d back
  1b8b:45 0e 04         callb procedure_000e 4 //  


        code_1b8e
  1b8e:3a                toss 
  1b8f:32 001c            jmp code_1bae 

        code_1b92
  1b92:3c                 dup 
  1b93:35 0a              ldi a 
  1b95:1a                 eq? 
  1b96:30 000c            bnt code_1ba5 
  1b99:7a               push2 
  1b9a:38 0280          pushi 280 // $280 sel_640
  1b9d:39 1e            pushi 1e // $1e mode
  1b9f:45 0e 04         callb procedure_000e 4 //  

  1ba2:32 0009            jmp code_1bae 

        code_1ba5
  1ba5:7a               push2 
  1ba6:38 0280          pushi 280 // $280 sel_640
  1ba9:39 1f            pushi 1f // $1f style
  1bab:45 0e 04         callb procedure_000e 4 //  


        code_1bae
  1bae:3a                toss 
  1baf:48                 ret 
    )

)

// 1cda
(instance turntable of Feature
    (properties
        x $ae
        y $a0
        z $0
        heading $0
        noun $0
        nsTop $6d
        nsLeft $70
        nsBottom $84
        nsRight $bf
        description $2cfa
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1c1e
  1c1e:8f 01              lsp param1 
  1c20:3c                 dup 
  1c21:35 02              ldi 2 
  1c23:1a                 eq? 
  1c24:30 000c            bnt code_1c33 
  1c27:7a               push2 
  1c28:38 0280          pushi 280 // $280 sel_640
  1c2b:39 20            pushi 20 // $20 state
  1c2d:45 0e 04         callb procedure_000e 4 //  

  1c30:32 009e            jmp code_1cd1 

        code_1c33
  1c33:3c                 dup 
  1c34:35 03              ldi 3 
  1c36:1a                 eq? 
  1c37:30 000c            bnt code_1c46 
  1c3a:7a               push2 
  1c3b:38 0280          pushi 280 // $280 sel_640
  1c3e:39 21            pushi 21 // $21 font
  1c40:45 0e 04         callb procedure_000e 4 //  

  1c43:32 008b            jmp code_1cd1 

        code_1c46
  1c46:3c                 dup 
  1c47:35 04              ldi 4 
  1c49:1a                 eq? 
  1c4a:30 0061            bnt code_1cae 
  1c4d:8f 02              lsp param2 
  1c4f:3c                 dup 
  1c50:35 05              ldi 5 
  1c52:1a                 eq? 
  1c53:30 0047            bnt code_1c9d 
  1c56:78               push1 
  1c57:39 16            pushi 16 // $16 brRight
  1c59:45 07 02         callb procedure_0007 2 //  

  1c5c:38 0148          pushi 148 // $148 put
  1c5f:78               push1 
  1c60:39 05            pushi 5 // $5 view
  1c62:81 00              lag  
  1c64:4a 06             send 6 

  1c66:39 6b            pushi 6b // $6b init
  1c68:76               push0 
  1c69:72 1db0          lofsa $1db0 // turnTableWRecord
  1c6c:4a 04             send 4 

  1c6e:38 00ce          pushi ce // $ce curIcon
  1c71:78               push1 
  1c72:39 43            pushi 43 // $43 at
  1c74:78               push1 
  1c75:7a               push2 
  1c76:81 45              lag  
  1c78:4a 06             send 6 

  1c7a:36                push 
  1c7b:81 45              lag  
  1c7d:4a 06             send 6 

  1c7f:38 00bb          pushi bb // $bb setCursor
  1c82:78               push1 
  1c83:39 24            pushi 24 // $24 cursor
  1c85:76               push0 
  1c86:38 00ce          pushi ce // $ce curIcon
  1c89:76               push0 
  1c8a:81 45              lag  
  1c8c:4a 04             send 4 

  1c8e:4a 04             send 4 

  1c90:36                push 
  1c91:81 01              lag  
  1c93:4a 06             send 6 

  1c95:39 6c            pushi 6c // $6c dispose
  1c97:76               push0 
  1c98:54 04             self 4 

  1c9a:32 000d            jmp code_1caa 

        code_1c9d
  1c9d:38 010c          pushi 10c // $10c doVerb
  1ca0:7a               push2 
  1ca1:8f 01              lsp param1 
  1ca3:8f 02              lsp param2 
  1ca5:59 03            &rest 3 
  1ca7:57 2c 08         super Feature 8 


        code_1caa
  1caa:3a                toss 
  1cab:32 0023            jmp code_1cd1 

        code_1cae
  1cae:3c                 dup 
  1caf:35 01              ldi 1 
  1cb1:1a                 eq? 
  1cb2:30 000f            bnt code_1cc4 
  1cb5:38 008e          pushi 8e // $8e setScript
  1cb8:78               push1 
  1cb9:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  1cbc:36                push 
  1cbd:81 02              lag  
  1cbf:4a 06             send 6 

  1cc1:32 000d            jmp code_1cd1 

        code_1cc4
  1cc4:38 010c          pushi 10c // $10c doVerb
  1cc7:7a               push2 
  1cc8:8f 01              lsp param1 
  1cca:8f 02              lsp param2 
  1ccc:59 03            &rest 3 
  1cce:57 2c 08         super Feature 8 


        code_1cd1
  1cd1:3a                toss 
  1cd2:48                 ret 
  1cd3:00                bnot 
    )

)

// 1daa
(instance turnTableWRecord of Prop
    (properties
        x $96
        y $85
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2c81
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $a
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $12
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1d18
  1d18:8f 01              lsp param1 
  1d1a:3c                 dup 
  1d1b:35 02              ldi 2 
  1d1d:1a                 eq? 
  1d1e:30 0021            bnt code_1d42 
  1d21:38 00dc          pushi dc // $dc cycler
  1d24:76               push0 
  1d25:54 04             self 4 

  1d27:30 000c            bnt code_1d36 
  1d2a:7a               push2 
  1d2b:38 0280          pushi 280 // $280 sel_640
  1d2e:39 22            pushi 22 // $22 type
  1d30:45 0e 04         callb procedure_000e 4 //  

  1d33:32 006b            jmp code_1da1 

        code_1d36
  1d36:7a               push2 
  1d37:38 0280          pushi 280 // $280 sel_640
  1d3a:39 23            pushi 23 // $23 window
  1d3c:45 0e 04         callb procedure_000e 4 //  

  1d3f:32 005f            jmp code_1da1 

        code_1d42
  1d42:3c                 dup 
  1d43:35 03              ldi 3 
  1d45:1a                 eq? 
  1d46:30 0035            bnt code_1d7e 
  1d49:38 00dc          pushi dc // $dc cycler
  1d4c:76               push0 
  1d4d:54 04             self 4 

  1d4f:30 000c            bnt code_1d5e 
  1d52:7a               push2 
  1d53:38 0280          pushi 280 // $280 sel_640
  1d56:39 24            pushi 24 // $24 cursor
  1d58:45 0e 04         callb procedure_000e 4 //  

  1d5b:32 0043            jmp code_1da1 

        code_1d5e
  1d5e:78               push1 
  1d5f:39 16            pushi 16 // $16 brRight
  1d61:45 08 02         callb procedure_0008 2 //  

  1d64:38 0147          pushi 147 // $147 get
  1d67:78               push1 
  1d68:39 05            pushi 5 // $5 view
  1d6a:81 00              lag  
  1d6c:4a 06             send 6 

  1d6e:39 6b            pushi 6b // $6b init
  1d70:76               push0 
  1d71:72 1ce0          lofsa $1ce0 // turntable
  1d74:4a 04             send 4 

  1d76:39 6c            pushi 6c // $6c dispose
  1d78:76               push0 
  1d79:54 04             self 4 

  1d7b:32 0023            jmp code_1da1 

        code_1d7e
  1d7e:3c                 dup 
  1d7f:35 01              ldi 1 
  1d81:1a                 eq? 
  1d82:30 000f            bnt code_1d94 
  1d85:38 008e          pushi 8e // $8e setScript
  1d88:78               push1 
  1d89:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  1d8c:36                push 
  1d8d:81 02              lag  
  1d8f:4a 06             send 6 

  1d91:32 000d            jmp code_1da1 

        code_1d94
  1d94:38 010c          pushi 10c // $10c doVerb
  1d97:7a               push2 
  1d98:8f 01              lsp param1 
  1d9a:8f 02              lsp param2 
  1d9c:59 03            &rest 3 
  1d9e:57 2f 08         super Prop 8 


        code_1da1
  1da1:3a                toss 
  1da2:48                 ret 
  1da3:00                bnot 
    )

)

// 1f2c
(instance needle of Prop
    (properties
        x $bf
        y $6f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2d23
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $6
        cel $0
        priority $b
        underBits $0
        signal $11
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1e12
  1e12:8f 01              lsp param1 
  1e14:3c                 dup 
  1e15:35 02              ldi 2 
  1e17:1a                 eq? 
  1e18:30 0020            bnt code_1e3b 
  1e1b:39 07            pushi 7 // $7 cel
  1e1d:76               push0 
  1e1e:54 04             self 4 

  1e20:30 000c            bnt code_1e2f 
  1e23:7a               push2 
  1e24:38 0280          pushi 280 // $280 sel_640
  1e27:39 25            pushi 25 // $25 max
  1e29:45 0e 04         callb procedure_000e 4 //  

  1e2c:32 00f5            jmp code_1f24 

        code_1e2f
  1e2f:7a               push2 
  1e30:38 0280          pushi 280 // $280 sel_640
  1e33:39 26            pushi 26 // $26 mark
  1e35:45 0e 04         callb procedure_000e 4 //  

  1e38:32 00e9            jmp code_1f24 

        code_1e3b
  1e3b:3c                 dup 
  1e3c:35 03              ldi 3 
  1e3e:1a                 eq? 
  1e3f:30 00bf            bnt code_1f01 
  1e42:39 07            pushi 7 // $7 cel
  1e44:76               push0 
  1e45:54 04             self 4 

  1e47:30 0059            bnt code_1ea3 
  1e4a:67 0a             pTos y 
  1e4c:34 03e8            ldi 3e8 
  1e4f:04                 sub 
  1e50:65 0a             aTop y 
  1e52:35 00              ldi 0 
  1e54:65 0c             aTop z 
  1e56:76               push0 
  1e57:45 02 00         callb procedure_0002 0 //  

  1e5a:38 0096          pushi 96 // $96 setCycle
  1e5d:7a               push2 
  1e5e:51 1b            class Beg 
  1e60:36                push 
  1e61:72 203a          lofsa $203a // speakerOne
  1e64:36                push 
  1e65:54 08             self 8 

  1e67:38 008a          pushi 8a // $8a script
  1e6a:76               push0 
  1e6b:81 02              lag  
  1e6d:4a 04             send 4 

  1e6f:36                push 
  1e70:72 1010          lofsa $1010 // sStopButtonPressed
  1e73:1a                 eq? 
  1e74:30 0011            bnt code_1e88 
  1e77:38 008d          pushi 8d // $8d cue
  1e7a:76               push0 
  1e7b:38 008a          pushi 8a // $8a script
  1e7e:76               push0 
  1e7f:81 02              lag  
  1e81:4a 04             send 4 

  1e83:4a 04             send 4 

  1e85:32 009c            jmp code_1f24 

        code_1e88
  1e88:38 008a          pushi 8a // $8a script
  1e8b:76               push0 
  1e8c:81 02              lag  
  1e8e:4a 04             send 4 

  1e90:30 0091            bnt code_1f24 
  1e93:39 6c            pushi 6c // $6c dispose
  1e95:76               push0 
  1e96:38 008a          pushi 8a // $8a script
  1e99:76               push0 
  1e9a:81 02              lag  
  1e9c:4a 04             send 4 

  1e9e:4a 04             send 4 

  1ea0:32 0081            jmp code_1f24 

        code_1ea3
  1ea3:78               push1 
  1ea4:39 16            pushi 16 // $16 brRight
  1ea6:45 06 02         callb procedure_0006 2 //  

  1ea9:30 0049            bnt code_1ef5 
  1eac:38 00dc          pushi dc // $dc cycler
  1eaf:76               push0 
  1eb0:72 1db0          lofsa $1db0 // turnTableWRecord
  1eb3:4a 04             send 4 

  1eb5:30 0031            bnt code_1ee9 
  1eb8:38 008a          pushi 8a // $8a script
  1ebb:76               push0 
  1ebc:81 02              lag  
  1ebe:4a 04             send 4 

  1ec0:18                 not 
  1ec1:30 0025            bnt code_1ee9 
  1ec4:67 0a             pTos y 
  1ec6:34 03e8            ldi 3e8 
  1ec9:02                 add 
  1eca:65 0a             aTop y 
  1ecc:34 03e8            ldi 3e8 
  1ecf:65 0c             aTop z 
  1ed1:35 01              ldi 1 
  1ed3:a3 02              sal local2 
  1ed5:76               push0 
  1ed6:45 02 00         callb procedure_0002 0 //  

  1ed9:38 0096          pushi 96 // $96 setCycle
  1edc:7a               push2 
  1edd:51 1a            class End 
  1edf:36                push 
  1ee0:72 203a          lofsa $203a // speakerOne
  1ee3:36                push 
  1ee4:54 08             self 8 

  1ee6:32 003b            jmp code_1f24 

        code_1ee9
  1ee9:7a               push2 
  1eea:38 0280          pushi 280 // $280 sel_640
  1eed:39 27            pushi 27 // $27 who
  1eef:45 0e 04         callb procedure_000e 4 //  

  1ef2:32 002f            jmp code_1f24 

        code_1ef5
  1ef5:7a               push2 
  1ef6:38 0280          pushi 280 // $280 sel_640
  1ef9:39 28            pushi 28 // $28 message
  1efb:45 0e 04         callb procedure_000e 4 //  

  1efe:32 0023            jmp code_1f24 

        code_1f01
  1f01:3c                 dup 
  1f02:35 01              ldi 1 
  1f04:1a                 eq? 
  1f05:30 000f            bnt code_1f17 
  1f08:38 008e          pushi 8e // $8e setScript
  1f0b:78               push1 
  1f0c:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  1f0f:36                push 
  1f10:81 02              lag  
  1f12:4a 06             send 6 

  1f14:32 000d            jmp code_1f24 

        code_1f17
  1f17:38 010c          pushi 10c // $10c doVerb
  1f1a:7a               push2 
  1f1b:8f 01              lsp param1 
  1f1d:8f 02              lsp param2 
  1f1f:59 03            &rest 3 
  1f21:57 2f 08         super Prop 8 


        code_1f24
  1f24:3a                toss 
  1f25:48                 ret 
    )

)

// 2034
(instance speakerOne of Prop
    (properties
        x $f3
        y $72
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2d37
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $8
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $2
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1f94
  1f94:8f 01              lsp param1 
  1f96:3c                 dup 
  1f97:35 02              ldi 2 
  1f99:1a                 eq? 
  1f9a:30 000c            bnt code_1fa9 
  1f9d:7a               push2 
  1f9e:38 0280          pushi 280 // $280 sel_640
  1fa1:39 29            pushi 29 // $29 edit
  1fa3:45 0e 04         callb procedure_000e 4 //  

  1fa6:32 0023            jmp code_1fcc 

        code_1fa9
  1fa9:3c                 dup 
  1faa:35 01              ldi 1 
  1fac:1a                 eq? 
  1fad:30 000f            bnt code_1fbf 
  1fb0:38 008e          pushi 8e // $8e setScript
  1fb3:78               push1 
  1fb4:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  1fb7:36                push 
  1fb8:81 02              lag  
  1fba:4a 06             send 6 

  1fbc:32 000d            jmp code_1fcc 

        code_1fbf
  1fbf:38 010c          pushi 10c // $10c doVerb
  1fc2:7a               push2 
  1fc3:8f 01              lsp param1 
  1fc5:8f 02              lsp param2 
  1fc7:59 03            &rest 3 
  1fc9:57 2f 08         super Prop 8 


        code_1fcc
  1fcc:3a                toss 
  1fcd:48                 ret 
    )

    (method (cue) // method_1fce
  1fce:38 011d          pushi 11d // $11d stopUpd
  1fd1:76               push0 
  1fd2:72 1f32          lofsa $1f32 // needle
  1fd5:4a 04             send 4 

  1fd7:39 07            pushi 7 // $7 cel
  1fd9:76               push0 
  1fda:72 1f32          lofsa $1f32 // needle
  1fdd:4a 04             send 4 

  1fdf:30 0024            bnt code_2006 
  1fe2:38 0096          pushi 96 // $96 setCycle
  1fe5:78               push1 
  1fe6:72 2178          lofsa $2178 // MyRandCycle
  1fe9:36                push 
  1fea:54 06             self 6 

  1fec:38 0096          pushi 96 // $96 setCycle
  1fef:78               push1 
  1ff0:72 2178          lofsa $2178 // MyRandCycle
  1ff3:36                push 
  1ff4:72 20e6          lofsa $20e6 // speakerTwo
  1ff7:4a 06             send 6 

  1ff9:38 008e          pushi 8e // $8e setScript
  1ffc:78               push1 
  1ffd:72 176e          lofsa $176e // sPlayMusic
  2000:36                push 
  2001:54 06             self 6 

  2003:32 0026            jmp code_202c 

        code_2006
  2006:76               push0 
  2007:45 03 00         callb procedure_0003 0 //  

  200a:38 011a          pushi 11a // $11a canControl
  200d:78               push1 
  200e:76               push0 
  200f:51 31            class User 
  2011:4a 06             send 6 

  2013:38 009c          pushi 9c // $9c stop
  2016:76               push0 
  2017:81 67              lag  
  2019:4a 04             send 4 

  201b:38 0096          pushi 96 // $96 setCycle
  201e:78               push1 
  201f:76               push0 
  2020:54 06             self 6 

  2022:38 0096          pushi 96 // $96 setCycle
  2025:78               push1 
  2026:76               push0 
  2027:72 20e6          lofsa $20e6 // speakerTwo
  202a:4a 06             send 6 


        code_202c
  202c:48                 ret 
  202d:00                bnot 
    )

)

// 20e0
(instance speakerTwo of Prop
    (properties
        x $4b
        y $75
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2d37
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $9
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $2
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_20a0
  20a0:8f 01              lsp param1 
  20a2:3c                 dup 
  20a3:35 02              ldi 2 
  20a5:1a                 eq? 
  20a6:30 000c            bnt code_20b5 
  20a9:7a               push2 
  20aa:38 0280          pushi 280 // $280 sel_640
  20ad:39 29            pushi 29 // $29 edit
  20af:45 0e 04         callb procedure_000e 4 //  

  20b2:32 0023            jmp code_20d8 

        code_20b5
  20b5:3c                 dup 
  20b6:35 01              ldi 1 
  20b8:1a                 eq? 
  20b9:30 000f            bnt code_20cb 
  20bc:38 008e          pushi 8e // $8e setScript
  20bf:78               push1 
  20c0:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  20c3:36                push 
  20c4:81 02              lag  
  20c6:4a 06             send 6 

  20c8:32 000d            jmp code_20d8 

        code_20cb
  20cb:38 010c          pushi 10c // $10c doVerb
  20ce:7a               push2 
  20cf:8f 01              lsp param1 
  20d1:8f 02              lsp param2 
  20d3:59 03            &rest 3 
  20d5:57 2f 08         super Prop 8 


        code_20d8
  20d8:3a                toss 
  20d9:48                 ret 
    )

)

// 2172
(class MyRandCycle of Cycle
    (properties
        client $0
        caller $0
        cycleDir $1
        cycleCnt $0
        completed $0
    )
    (method (doit) // method_2148
  2148:6b 0e            ipToa cycleCnt 
  214a:67 0e             pTos cycleCnt 
  214c:38 00db          pushi db // $db cycleSpeed
  214f:76               push0 
  2150:63 08             pToa client 
  2152:4a 04             send 4 

  2154:1e                 gt? 
  2155:30 0013            bnt code_216b 
  2158:38 0120          pushi 120 // $120 setCel
  215b:78               push1 
  215c:7a               push2 
  215d:76               push0 
  215e:78               push1 
  215f:43 3c 04         callk Random 4 

  2162:36                push 
  2163:63 08             pToa client 
  2165:4a 06             send 6 

  2167:35 00              ldi 0 
  2169:65 0e             aTop cycleCnt 

        code_216b
  216b:48                 ret 
    )

)

// 21aa
(instance door of Door
    (properties
        x $b1
        y $15
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2d66
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $c3
        approachY $53
        approachDist $0
        _approachVerbs $6789
        lookStr $2d76
        yStep $2
        view $280
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        entranceTo $294
        locked $0
        openSnd $28
        closeSnd $29
        state $0
        doubleDoor $0
        forceOpen $0
        caller $0
        moveToX $c3
        moveToY $49
        enterType $0
        exitType $0
        closeScript $0
        openScript $0
    )
)

// 2280
(instance reverseButton of Prop
    (properties
        x $69
        y $9f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2da9
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_222a
  222a:8f 01              lsp param1 
  222c:3c                 dup 
  222d:35 03              ldi 3 
  222f:1a                 eq? 
  2230:30 000f            bnt code_2242 
  2233:38 008e          pushi 8e // $8e setScript
  2236:78               push1 
  2237:72 1278          lofsa $1278 // sReverseButtonPressed
  223a:36                push 
  223b:81 02              lag  
  223d:4a 06             send 6 

  223f:32 0036            jmp code_2278 

        code_2242
  2242:3c                 dup 
  2243:35 02              ldi 2 
  2245:1a                 eq? 
  2246:30 000c            bnt code_2255 
  2249:7a               push2 
  224a:38 0280          pushi 280 // $280 sel_640
  224d:39 2a            pushi 2a // $2a play
  224f:45 0e 04         callb procedure_000e 4 //  

  2252:32 0023            jmp code_2278 

        code_2255
  2255:3c                 dup 
  2256:35 01              ldi 1 
  2258:1a                 eq? 
  2259:30 000f            bnt code_226b 
  225c:38 008e          pushi 8e // $8e setScript
  225f:78               push1 
  2260:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  2263:36                push 
  2264:81 02              lag  
  2266:4a 06             send 6 

  2268:32 000d            jmp code_2278 

        code_226b
  226b:38 010c          pushi 10c // $10c doVerb
  226e:7a               push2 
  226f:8f 01              lsp param1 
  2271:8f 02              lsp param2 
  2273:59 03            &rest 3 
  2275:57 2f 08         super Prop 8 


        code_2278
  2278:3a                toss 
  2279:48                 ret 
    )

)

// 233e
(instance stopButton of Prop
    (properties
        x $78
        y $a0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2dca
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_22e8
  22e8:8f 01              lsp param1 
  22ea:3c                 dup 
  22eb:35 03              ldi 3 
  22ed:1a                 eq? 
  22ee:30 000f            bnt code_2300 
  22f1:38 008e          pushi 8e // $8e setScript
  22f4:78               push1 
  22f5:72 1010          lofsa $1010 // sStopButtonPressed
  22f8:36                push 
  22f9:81 02              lag  
  22fb:4a 06             send 6 

  22fd:32 0036            jmp code_2336 

        code_2300
  2300:3c                 dup 
  2301:35 02              ldi 2 
  2303:1a                 eq? 
  2304:30 000c            bnt code_2313 
  2307:7a               push2 
  2308:38 0280          pushi 280 // $280 sel_640
  230b:39 2b            pushi 2b // $2b number
  230d:45 0e 04         callb procedure_000e 4 //  

  2310:32 0023            jmp code_2336 

        code_2313
  2313:3c                 dup 
  2314:35 01              ldi 1 
  2316:1a                 eq? 
  2317:30 000f            bnt code_2329 
  231a:38 008e          pushi 8e // $8e setScript
  231d:78               push1 
  231e:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  2321:36                push 
  2322:81 02              lag  
  2324:4a 06             send 6 

  2326:32 000d            jmp code_2336 

        code_2329
  2329:38 010c          pushi 10c // $10c doVerb
  232c:7a               push2 
  232d:8f 01              lsp param1 
  232f:8f 02              lsp param2 
  2331:59 03            &rest 3 
  2333:57 2f 08         super Prop 8 


        code_2336
  2336:3a                toss 
  2337:48                 ret 
    )

)

// 23fc
(instance forwardButton of Prop
    (properties
        x $86
        y $a1
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2de5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_23a6
  23a6:8f 01              lsp param1 
  23a8:3c                 dup 
  23a9:35 03              ldi 3 
  23ab:1a                 eq? 
  23ac:30 000f            bnt code_23be 
  23af:38 008e          pushi 8e // $8e setScript
  23b2:78               push1 
  23b3:72 113c          lofsa $113c // sForwardButtonPressed
  23b6:36                push 
  23b7:81 02              lag  
  23b9:4a 06             send 6 

  23bb:32 0036            jmp code_23f4 

        code_23be
  23be:3c                 dup 
  23bf:35 02              ldi 2 
  23c1:1a                 eq? 
  23c2:30 000c            bnt code_23d1 
  23c5:7a               push2 
  23c6:38 0280          pushi 280 // $280 sel_640
  23c9:39 2c            pushi 2c // $2c nodePtr
  23cb:45 0e 04         callb procedure_000e 4 //  

  23ce:32 0023            jmp code_23f4 

        code_23d1
  23d1:3c                 dup 
  23d2:35 01              ldi 1 
  23d4:1a                 eq? 
  23d5:30 000f            bnt code_23e7 
  23d8:38 008e          pushi 8e // $8e setScript
  23db:78               push1 
  23dc:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  23df:36                push 
  23e0:81 02              lag  
  23e2:4a 06             send 6 

  23e4:32 000d            jmp code_23f4 

        code_23e7
  23e7:38 010c          pushi 10c // $10c doVerb
  23ea:7a               push2 
  23eb:8f 01              lsp param1 
  23ed:8f 02              lsp param2 
  23ef:59 03            &rest 3 
  23f1:57 2f 08         super Prop 8 


        code_23f4
  23f4:3a                toss 
  23f5:48                 ret 
    )

)

// 24ba
(instance button33 of Prop
    (properties
        x $bc
        y $a1
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2e06
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_2464
  2464:8f 01              lsp param1 
  2466:3c                 dup 
  2467:35 03              ldi 3 
  2469:1a                 eq? 
  246a:30 000f            bnt code_247c 
  246d:38 008e          pushi 8e // $8e setScript
  2470:78               push1 
  2471:72 13ba          lofsa $13ba // sButton33Pressed
  2474:36                push 
  2475:81 02              lag  
  2477:4a 06             send 6 

  2479:32 0036            jmp code_24b2 

        code_247c
  247c:3c                 dup 
  247d:35 02              ldi 2 
  247f:1a                 eq? 
  2480:30 000c            bnt code_248f 
  2483:7a               push2 
  2484:38 0280          pushi 280 // $280 sel_640
  2487:39 2d            pushi 2d // $2d client
  2489:45 0e 04         callb procedure_000e 4 //  

  248c:32 0023            jmp code_24b2 

        code_248f
  248f:3c                 dup 
  2490:35 01              ldi 1 
  2492:1a                 eq? 
  2493:30 000f            bnt code_24a5 
  2496:38 008e          pushi 8e // $8e setScript
  2499:78               push1 
  249a:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  249d:36                push 
  249e:81 02              lag  
  24a0:4a 06             send 6 

  24a2:32 000d            jmp code_24b2 

        code_24a5
  24a5:38 010c          pushi 10c // $10c doVerb
  24a8:7a               push2 
  24a9:8f 01              lsp param1 
  24ab:8f 02              lsp param2 
  24ad:59 03            &rest 3 
  24af:57 2f 08         super Prop 8 


        code_24b2
  24b2:3a                toss 
  24b3:48                 ret 
    )

)

// 2578
(instance button78 of Prop
    (properties
        x $d9
        y $9f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2e1d
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $28a
        loop $5
        cel $0
        priority $0
        underBits $0
        signal $1
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $c
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_2522
  2522:8f 01              lsp param1 
  2524:3c                 dup 
  2525:35 03              ldi 3 
  2527:1a                 eq? 
  2528:30 000f            bnt code_253a 
  252b:38 008e          pushi 8e // $8e setScript
  252e:78               push1 
  252f:72 14e8          lofsa $14e8 // sButton78Pressed
  2532:36                push 
  2533:81 02              lag  
  2535:4a 06             send 6 

  2537:32 0036            jmp code_2570 

        code_253a
  253a:3c                 dup 
  253b:35 02              ldi 2 
  253d:1a                 eq? 
  253e:30 000c            bnt code_254d 
  2541:7a               push2 
  2542:38 0280          pushi 280 // $280 sel_640
  2545:39 2e            pushi 2e // $2e dx
  2547:45 0e 04         callb procedure_000e 4 //  

  254a:32 0023            jmp code_2570 

        code_254d
  254d:3c                 dup 
  254e:35 01              ldi 1 
  2550:1a                 eq? 
  2551:30 000f            bnt code_2563 
  2554:38 008e          pushi 8e // $8e setScript
  2557:78               push1 
  2558:72 0ee4          lofsa $0ee4 // sReturnsFromStereo
  255b:36                push 
  255c:81 02              lag  
  255e:4a 06             send 6 

  2560:32 000d            jmp code_2570 

        code_2563
  2563:38 010c          pushi 10c // $10c doVerb
  2566:7a               push2 
  2567:8f 01              lsp param1 
  2569:8f 02              lsp param2 
  256b:59 03            &rest 3 
  256d:57 2f 08         super Prop 8 


        code_2570
  2570:3a                toss 
  2571:48                 ret 
    )

)

// 25e2
(instance statue of Feature
    (properties
        x $1f
        y $8d
        z $0
        heading $0
        noun $0
        nsTop $72
        nsLeft $18
        nsBottom $a9
        nsRight $2b
        description $2e34
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2e3f
    )
)

// 261e
(instance speakerA of Feature
    (properties
        x $79
        y $c8
        z $32
        heading $0
        noun $0
        nsTop $89
        nsLeft $70
        nsBottom $a4
        nsRight $83
        description $2e96
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2ea7
    )
)

// 265a
(instance speakerB of Feature
    (properties
        x $d7
        y $c7
        z $32
        heading $0
        noun $0
        nsTop $89
        nsLeft $cd
        nsBottom $a1
        nsRight $e1
        description $2eff
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2ea7
    )
)

// 2696
(instance plant of Feature
    (properties
        x $e9
        y $47
        z $0
        heading $0
        noun $0
        nsTop $2d
        nsLeft $dc
        nsBottom $5d
        nsRight $f6
        description $2f1a
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2f24
    )
)

// 26d2
(instance shelves of Feature
    (properties
        x $10c
        y $6e
        z $0
        heading $0
        noun $0
        nsTop $53
        nsLeft $101
        nsBottom $89
        nsRight $117
        description $2f61
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2f6d
    )
)

// 270e
(instance recordJacketsA of Feature
    (properties
        x $85
        y $f
        z $0
        heading $0
        noun $0
        nsTop $a
        nsLeft $68
        nsBottom $14
        nsRight $a2
        description $2fb5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2fc8
    )
)

// 274a
(instance recordJacketsB of Feature
    (properties
        x $10c
        y $f
        z $0
        heading $0
        noun $0
        nsTop $b
        nsLeft $de
        nsBottom $14
        nsRight $13b
        description $2fb5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2fc8
    )
)

// 2786
(instance elevatorDing of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $26d
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 27bc
(instance elevatorDoor of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $26e
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 27f2
(instance message1 of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $284
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2828
(instance message2 of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $285
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 285e
(instance message3 of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $286
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 2894
(instance recordSwitch of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $c9
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 28ca
(instance needleDownSpin of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $288
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 291c
(instance Reverse Biaz of Talker
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $f
        nsLeft $23
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        bust $0
        eyes $0
        mouth $0
        ticks $0
        disposeWhenDone $1
        caller $0
        viewInPrint $1
        useFrame $0
        talkWidth $13e
    )
    (method (init) // method_28fe
  28fe:72 299e          lofsa $299e // reverseBust
  2901:65 56             aTop bust 
  2903:72 2a04          lofsa $2a04 // reverseEyes
  2906:65 58             aTop eyes 
  2908:72 2a6a          lofsa $2a6a // reverseMouth
  290b:65 5a             aTop mouth 
  290d:39 6b            pushi 6b // $6b init
  290f:76               push0 
  2910:59 01            &rest 1 
  2912:57 6f 04         super Talker 4 

  2915:48                 ret 
    )

)

// 2998
(instance reverseBust of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 29fe
(instance reverseEyes of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $1f
        nsLeft $16
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $46
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 2a64
(instance reverseMouth of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $24
        nsLeft $f
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $688
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $5
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 2af2
(instance fGoldRecords of Feature
    (properties
        x $86
        y $4d
        z $25
        heading $0
        noun $0
        nsTop $22
        nsLeft $6c
        nsBottom $2f
        nsRight $a0
        description $30b1
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $30c2
    )
    (method (doVerb) // method_2ac8
  2ac8:8f 01              lsp param1 
  2aca:3c                 dup 
  2acb:35 03              ldi 3 
  2acd:1a                 eq? 
  2ace:30 000c            bnt code_2add 
  2ad1:7a               push2 
  2ad2:38 0280          pushi 280 // $280 sel_640
  2ad5:39 2f            pushi 2f // $2f dy
  2ad7:45 0e 04         callb procedure_000e 4 //  

  2ada:32 000d            jmp code_2aea 

        code_2add
  2add:38 010c          pushi 10c // $10c doVerb
  2ae0:7a               push2 
  2ae1:8f 01              lsp param1 
  2ae3:8f 02              lsp param2 
  2ae5:59 03            &rest 3 
  2ae7:57 2c 08         super Feature 8 


        code_2aea
  2aea:3a                toss 
  2aeb:48                 ret 
    )

)



(procedure proc_2b30
  2b30:35 01              ldi 1 
  2b32:a3 01              sal local1 
  2b34:7a               push2 
  2b35:38 0280          pushi 280 // $280 sel_640
  2b38:39 30            pushi 30 // $30 b-moveCnt
  2b3a:45 0e 04         callb procedure_000e 4 //  

  2b3d:39 04            pushi 4 // $4 x
  2b3f:72 2922          lofsa $2922 // Reverse Biaz
  2b42:36                push 
  2b43:38 0280          pushi 280 // $280 sel_640
  2b46:39 31            pushi 31 // $31 b-i1
  2b48:39 6c            pushi 6c // $6c dispose
  2b4a:45 12 08         callb procedure_0012 8 //  

  2b4d:48                 ret 
)

