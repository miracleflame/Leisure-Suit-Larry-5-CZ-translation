(script 920)

(string
    string_0b4c "rm920"
    string_0b52 "Chi Chi"
    string_0b5a "You"
    string_0b5e "sCartoon"
    string_0b67 "Chi Chi Lambada"
    string_0b77 "Chi Chi loves doing sexually-explicit gymnastics routines."
    string_0bb2 "chiChi"
    string_0bb9 "the venetian blinds"
    string_0bcd "If it weren't for these venetian blinds, we'd all have a perfect view!"
    string_0c14 "blinds"
    string_0c1b "the rope"
    string_0c24 "Hang on to this!"
    string_0c35 "rope"
    string_0c3a "bars"
    string_0c3f "crack"
    string_0c45 ""
)

(said
)

(local
    local0 = $0000
    local1 = $000b
    local2 = $005b
    local3 = $0056
    local4 = $0000
    local5 = $000c
    local6 = $005c
    local7 = $0059
    local8 = $0000
    local9 = $000d
    local10 = $005b
    local11 = $005b
    local12 = $0000
    local13 = $000e
    local14 = $006f
    local15 = $0062
    local16 = $0000
    local17 = $000e
    local18 = $0099
    local19 = $0054
    local20 = $0000
    local21 = $000e
    local22 = $00ad
    local23 = $0050
    local24 = $8000
)

// 00d8
(instance publicrm920 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $398
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $0
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:7a               push2 
  000f:38 0081          pushi 81 // $81 handleEvent
  0012:78               push1 
  0013:43 00 04         callk Load 4 

  0016:39 6b            pushi 6b // $6b init
  0018:76               push0 
  0019:57 72 04         super LLRoom 4 

  001c:39 6b            pushi 6b // $6b init
  001e:76               push0 
  001f:38 020a          pushi 20a // $20a normalize
  0022:76               push0 
  0023:39 05            pushi 5 // $5 view
  0025:78               push1 
  0026:38 039b          pushi 39b // $39b sel_923
  0029:38 011c          pushi 11c // $11c posn
  002c:7a               push2 
  002d:38 0089          pushi 89 // $89 register
  0030:39 75            pushi 75 // $75 firstTrue
  0032:38 0096          pushi 96 // $96 setCycle
  0035:78               push1 
  0036:76               push0 
  0037:38 00a2          pushi a2 // $a2 setLoop
  003a:78               push1 
  003b:76               push0 
  003c:38 0120          pushi 120 // $120 setCel
  003f:78               push1 
  0040:76               push0 
  0041:39 42            pushi 42 // $42 setPri
  0043:78               push1 
  0044:39 08            pushi 8 // $8 underBits
  0046:38 0134          pushi 134 // $134 setStep
  0049:7a               push2 
  004a:78               push1 
  004b:78               push1 
  004c:39 12            pushi 12 // $12 illegalBits
  004e:78               push1 
  004f:76               push0 
  0050:38 0121          pushi 121 // $121 ignoreActors
  0053:78               push1 
  0054:78               push1 
  0055:39 69            pushi 69 // $69 hide
  0057:76               push0 
  0058:81 00              lag  
  005a:4a 46             send 46 

  005c:39 6b            pushi 6b // $6b init
  005e:76               push0 
  005f:39 69            pushi 69 // $69 hide
  0061:76               push0 
  0062:72 0aee          lofsa $0aee // crack
  0065:4a 08             send 8 

  0067:39 6b            pushi 6b // $6b init
  0069:76               push0 
  006a:39 69            pushi 69 // $69 hide
  006c:76               push0 
  006d:72 0a92          lofsa $0a92 // bars
  0070:4a 08             send 8 

  0072:39 6b            pushi 6b // $6b init
  0074:76               push0 
  0075:39 69            pushi 69 // $69 hide
  0077:76               push0 
  0078:72 0a2c          lofsa $0a2c // rope
  007b:4a 08             send 8 

  007d:39 6b            pushi 6b // $6b init
  007f:76               push0 
  0080:38 0096          pushi 96 // $96 setCycle
  0083:78               push1 
  0084:51 17            class Fwd 
  0086:36                push 
  0087:72 0948          lofsa $0948 // chiChi
  008a:4a 0a             send a 

  008c:39 6b            pushi 6b // $6b init
  008e:76               push0 
  008f:38 0120          pushi 120 // $120 setCel
  0092:78               push1 
  0093:38 00ff          pushi ff // $ff syncNum
  0096:72 09c6          lofsa $09c6 // blinds
  0099:4a 0a             send a 

  009b:39 2b            pushi 2b // $2b number
  009d:78               push1 
  009e:38 0398          pushi 398 // $398 sel_920
  00a1:39 06            pushi 6 // $6 loop
  00a3:78               push1 
  00a4:39 ff            pushi ff // $ff syncNum
  00a6:39 2a            pushi 2a // $2a play
  00a8:76               push0 
  00a9:81 66              lag  
  00ab:4a 10             send 10 

  00ad:38 008e          pushi 8e // $8e setScript
  00b0:78               push1 
  00b1:72 0912          lofsa $0912 // sCartoon
  00b4:36                push 
  00b5:54 06             self 6 

  00b7:48                 ret 
    )

    (method (newRoom) // method_00b8
  00b8:38 009c          pushi 9c // $9c stop
  00bb:76               push0 
  00bc:81 66              lag  
  00be:4a 04             send 4 

  00c0:38 009c          pushi 9c // $9c stop
  00c3:76               push0 
  00c4:81 67              lag  
  00c6:4a 04             send 4 

  00c8:38 0179          pushi 179 // $179 newRoom
  00cb:78               push1 
  00cc:8f 01              lsp param1 
  00ce:57 72 06         super LLRoom 6 

  00d1:48                 ret 
    )

)

// 090c
(instance sCartoon of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_011c
  011c:87 01              lap param1 
  011e:65 0a             aTop state 
  0120:36                push 
  0121:3c                 dup 
  0122:35 00              ldi 0 
  0124:1a                 eq? 
  0125:30 0017            bnt code_013f 
  0128:76               push0 
  0129:45 02 00         callb procedure_0002 0 //  

  012c:78               push1 
  012d:38 0384          pushi 384 // $384 sel_900
  0130:45 0d 02         callb procedure_000d 2 //  

  0133:78               push1 
  0134:76               push0 
  0135:45 16 02         callb procedure_0016 2 //  

  0138:35 5a              ldi 5a 
  013a:65 16             aTop ticks 
  013c:32 07c4            jmp code_0903 

        code_013f
  013f:3c                 dup 
  0140:35 01              ldi 1 
  0142:1a                 eq? 
  0143:30 0012            bnt code_0158 
  0146:39 03            pushi 3 // $3 y
  0148:89 00              lsg  
  014a:38 0398          pushi 398 // $398 sel_920
  014d:76               push0 
  014e:45 12 06         callb procedure_0012 6 //  

  0151:35 1e              ldi 1e 
  0153:65 16             aTop ticks 
  0155:32 07ab            jmp code_0903 

        code_0158
  0158:3c                 dup 
  0159:35 02              ldi 2 
  015b:1a                 eq? 
  015c:30 0016            bnt code_0175 
  015f:39 04            pushi 4 // $4 x
  0161:38 0398          pushi 398 // $398 sel_920
  0164:78               push1 
  0165:39 50            pushi 50 // $50 title
  0167:72 0b52          lofsa $0b52 // Chi Chi
  016a:36                push 
  016b:45 0e 08         callb procedure_000e 8 //  

  016e:35 5a              ldi 5a 
  0170:65 16             aTop ticks 
  0172:32 078e            jmp code_0903 

        code_0175
  0175:3c                 dup 
  0176:35 03              ldi 3 
  0178:1a                 eq? 
  0179:30 0010            bnt code_018c 
  017c:38 0096          pushi 96 // $96 setCycle
  017f:7a               push2 
  0180:51 1b            class Beg 
  0182:36                push 
  0183:7c            pushSelf 
  0184:72 09c6          lofsa $09c6 // blinds
  0187:4a 08             send 8 

  0189:32 0777            jmp code_0903 

        code_018c
  018c:3c                 dup 
  018d:35 04              ldi 4 
  018f:1a                 eq? 
  0190:30 0010            bnt code_01a3 
  0193:38 011d          pushi 11d // $11d stopUpd
  0196:76               push0 
  0197:72 09c6          lofsa $09c6 // blinds
  019a:4a 04             send 4 

  019c:35 5a              ldi 5a 
  019e:65 16             aTop ticks 
  01a0:32 0760            jmp code_0903 

        code_01a3
  01a3:3c                 dup 
  01a4:35 05              ldi 5 
  01a6:1a                 eq? 
  01a7:30 002d            bnt code_01d7 
  01aa:39 07            pushi 7 // $7 cel
  01ac:76               push0 
  01ad:72 0948          lofsa $0948 // chiChi
  01b0:4a 04             send 4 

  01b2:36                push 
  01b3:35 01              ldi 1 
  01b5:1c                 ne? 
  01b6:30 0005            bnt code_01be 
  01b9:6d 0a            dpToa state 
  01bb:32 0008            jmp code_01c6 

        code_01be
  01be:38 00c2          pushi c2 // $c2 show
  01c1:76               push0 
  01c2:81 00              lag  
  01c4:4a 04             send 4 


        code_01c6
  01c6:38 00db          pushi db // $db cycleSpeed
  01c9:76               push0 
  01ca:81 00              lag  
  01cc:4a 04             send 4 

  01ce:65 1a             aTop register 
  01d0:35 02              ldi 2 
  01d2:65 10             aTop cycles 
  01d4:32 072c            jmp code_0903 

        code_01d7
  01d7:3c                 dup 
  01d8:35 06              ldi 6 
  01da:1a                 eq? 
  01db:30 0015            bnt code_01f3 
  01de:38 00db          pushi db // $db cycleSpeed
  01e1:78               push1 
  01e2:39 08            pushi 8 // $8 underBits
  01e4:38 0096          pushi 96 // $96 setCycle
  01e7:7a               push2 
  01e8:51 1a            class End 
  01ea:36                push 
  01eb:7c            pushSelf 
  01ec:81 00              lag  
  01ee:4a 0e             send e 

  01f0:32 0710            jmp code_0903 

        code_01f3
  01f3:3c                 dup 
  01f4:35 07              ldi 7 
  01f6:1a                 eq? 
  01f7:30 005e            bnt code_0258 
  01fa:39 2b            pushi 2b // $2b number
  01fc:78               push1 
  01fd:38 0391          pushi 391 // $391 sel_913
  0200:39 06            pushi 6 // $6 loop
  0202:78               push1 
  0203:78               push1 
  0204:39 2a            pushi 2a // $2a play
  0206:76               push0 
  0207:81 67              lag  
  0209:4a 10             send 10 

  020b:38 00db          pushi db // $db cycleSpeed
  020e:78               push1 
  020f:67 1a             pTos register 
  0211:38 00a2          pushi a2 // $a2 setLoop
  0214:78               push1 
  0215:78               push1 
  0216:38 0120          pushi 120 // $120 setCel
  0219:78               push1 
  021a:76               push0 
  021b:38 011c          pushi 11c // $11c posn
  021e:7a               push2 
  021f:39 55            pushi 55 // $55 z
  0221:39 52            pushi 52 // $52 icon
  0223:81 00              lag  
  0225:4a 1a             send 1a 

  0227:38 00c2          pushi c2 // $c2 show
  022a:76               push0 
  022b:38 0096          pushi 96 // $96 setCycle
  022e:78               push1 
  022f:51 1a            class End 
  0231:36                push 
  0232:72 0a2c          lofsa $0a2c // rope
  0235:4a 0a             send a 

  0237:39 07            pushi 7 // $7 cel
  0239:89 00              lsg  
  023b:38 0398          pushi 398 // $398 sel_920
  023e:7a               push2 
  023f:39 43            pushi 43 // $43 at
  0241:39 ff            pushi ff // $ff syncNum
  0243:39 14            pushi 14 // $14 brLeft
  0245:39 6c            pushi 6c // $6c dispose
  0247:45 12 0e         callb procedure_0012 e //  

  024a:7a               push2 
  024b:39 05            pushi 5 // $5 view
  024d:78               push1 
  024e:43 66 04         callk ShakeScreen 4 

  0251:35 5a              ldi 5a 
  0253:65 16             aTop ticks 
  0255:32 06ab            jmp code_0903 

        code_0258
  0258:3c                 dup 
  0259:35 08              ldi 8 
  025b:1a                 eq? 
  025c:30 001c            bnt code_027b 
  025f:38 0134          pushi 134 // $134 setStep
  0262:7a               push2 
  0263:39 03            pushi 3 // $3 y
  0265:39 06            pushi 6 // $6 loop
  0267:38 011b          pushi 11b // $11b setMotion
  026a:39 04            pushi 4 // $4 x
  026c:51 1e            class MoveTo 
  026e:36                push 
  026f:39 55            pushi 55 // $55 z
  0271:39 7c            pushi 7c // $7c prev
  0273:7c            pushSelf 
  0274:81 00              lag  
  0276:4a 14             send 14 

  0278:32 0688            jmp code_0903 

        code_027b
  027b:3c                 dup 
  027c:35 09              ldi 9 
  027e:1a                 eq? 
  027f:30 0007            bnt code_0289 
  0282:35 03              ldi 3 
  0284:65 12             aTop seconds 
  0286:32 067a            jmp code_0903 

        code_0289
  0289:3c                 dup 
  028a:35 0a              ldi a 
  028c:1a                 eq? 
  028d:30 000f            bnt code_029f 
  0290:38 0096          pushi 96 // $96 setCycle
  0293:7a               push2 
  0294:51 1a            class End 
  0296:36                push 
  0297:7c            pushSelf 
  0298:81 00              lag  
  029a:4a 08             send 8 

  029c:32 0664            jmp code_0903 

        code_029f
  029f:3c                 dup 
  02a0:35 0b              ldi b 
  02a2:1a                 eq? 
  02a3:30 0007            bnt code_02ad 
  02a6:35 04              ldi 4 
  02a8:65 12             aTop seconds 
  02aa:32 0656            jmp code_0903 

        code_02ad
  02ad:3c                 dup 
  02ae:35 0c              ldi c 
  02b0:1a                 eq? 
  02b1:30 001a            bnt code_02ce 
  02b4:81 19              lag  
  02b6:30 0005            bnt code_02be 
  02b9:39 6c            pushi 6c // $6c dispose
  02bb:76               push0 
  02bc:4a 04             send 4 


        code_02be
  02be:38 0096          pushi 96 // $96 setCycle
  02c1:7a               push2 
  02c2:51 1a            class End 
  02c4:36                push 
  02c5:7c            pushSelf 
  02c6:72 09c6          lofsa $09c6 // blinds
  02c9:4a 08             send 8 

  02cb:32 0635            jmp code_0903 

        code_02ce
  02ce:3c                 dup 
  02cf:35 0d              ldi d 
  02d1:1a                 eq? 
  02d2:30 0024            bnt code_02f9 
  02d5:7a               push2 
  02d6:38 0080          pushi 80 // $80 indexOf
  02d9:38 039c          pushi 39c // $39c sel_924
  02dc:43 00 04         callk Load 4 

  02df:7a               push2 
  02e0:38 0080          pushi 80 // $80 indexOf
  02e3:38 039d          pushi 39d // $39d sel_925
  02e6:43 00 04         callk Load 4 

  02e9:38 011d          pushi 11d // $11d stopUpd
  02ec:76               push0 
  02ed:72 09c6          lofsa $09c6 // blinds
  02f0:4a 04             send 4 

  02f2:35 04              ldi 4 
  02f4:65 12             aTop seconds 
  02f6:32 060a            jmp code_0903 

        code_02f9
  02f9:3c                 dup 
  02fa:35 0e              ldi e 
  02fc:1a                 eq? 
  02fd:30 00b6            bnt code_03b6 
  0300:39 69            pushi 69 // $69 hide
  0302:76               push0 
  0303:38 011b          pushi 11b // $11b setMotion
  0306:78               push1 
  0307:76               push0 
  0308:39 05            pushi 5 // $5 view
  030a:78               push1 
  030b:38 039c          pushi 39c // $39c sel_924
  030e:38 00db          pushi db // $db cycleSpeed
  0311:78               push1 
  0312:39 0c            pushi c // $c nsRight
  0314:38 0134          pushi 134 // $134 setStep
  0317:7a               push2 
  0318:39 03            pushi 3 // $3 y
  031a:3c                 dup 
  031b:38 00a2          pushi a2 // $a2 setLoop
  031e:78               push1 
  031f:76               push0 
  0320:38 0120          pushi 120 // $120 setCel
  0323:78               push1 
  0324:76               push0 
  0325:38 011c          pushi 11c // $11c posn
  0328:7a               push2 
  0329:39 4d            pushi 4d // $4d value
  032b:39 5d            pushi 5d // $5d handle
  032d:81 00              lag  
  032f:4a 32             send 32 

  0331:39 05            pushi 5 // $5 view
  0333:78               push1 
  0334:38 039d          pushi 39d // $39d sel_925
  0337:38 00a2          pushi a2 // $a2 setLoop
  033a:78               push1 
  033b:76               push0 
  033c:38 00db          pushi db // $db cycleSpeed
  033f:78               push1 
  0340:39 12            pushi 12 // $12 illegalBits
  0342:38 011c          pushi 11c // $11c posn
  0345:7a               push2 
  0346:38 00b0          pushi b0 // $b0 cycle
  0349:38 00a6          pushi a6 // $a6 playBed
  034c:38 0096          pushi 96 // $96 setCycle
  034f:78               push1 
  0350:51 17            class Fwd 
  0352:36                push 
  0353:39 42            pushi 42 // $42 setPri
  0355:78               push1 
  0356:39 0d            pushi d // $d lsTop
  0358:72 0948          lofsa $0948 // chiChi
  035b:4a 26             send 26 

  035d:38 00c2          pushi c2 // $c2 show
  0360:76               push0 
  0361:39 05            pushi 5 // $5 view
  0363:78               push1 
  0364:38 0398          pushi 398 // $398 sel_920
  0367:38 00a2          pushi a2 // $a2 setLoop
  036a:78               push1 
  036b:7a               push2 
  036c:38 0120          pushi 120 // $120 setCel
  036f:78               push1 
  0370:78               push1 
  0371:38 011c          pushi 11c // $11c posn
  0374:7a               push2 
  0375:38 00b4          pushi b4 // $b4 busy
  0378:38 009f          pushi 9f // $9f fade
  037b:38 011d          pushi 11d // $11d stopUpd
  037e:76               push0 
  037f:72 0a92          lofsa $0a92 // bars
  0382:4a 22             send 22 

  0384:39 05            pushi 5 // $5 view
  0386:78               push1 
  0387:38 0398          pushi 398 // $398 sel_920
  038a:38 00a2          pushi a2 // $a2 setLoop
  038d:78               push1 
  038e:7a               push2 
  038f:38 0120          pushi 120 // $120 setCel
  0392:78               push1 
  0393:76               push0 
  0394:38 011c          pushi 11c // $11c posn
  0397:7a               push2 
  0398:39 68            pushi 68 // $68 restart
  039a:38 0088          pushi 88 // $88 lastTicks
  039d:38 011d          pushi 11d // $11d stopUpd
  03a0:76               push0 
  03a1:72 0a2c          lofsa $0a2c // rope
  03a4:4a 1e             send 1e 

  03a6:38 0096          pushi 96 // $96 setCycle
  03a9:7a               push2 
  03aa:51 1b            class Beg 
  03ac:36                push 
  03ad:7c            pushSelf 
  03ae:72 09c6          lofsa $09c6 // blinds
  03b1:4a 08             send 8 

  03b3:32 054d            jmp code_0903 

        code_03b6
  03b6:3c                 dup 
  03b7:35 0f              ldi f 
  03b9:1a                 eq? 
  03ba:30 0010            bnt code_03cd 
  03bd:38 011d          pushi 11d // $11d stopUpd
  03c0:76               push0 
  03c1:72 09c6          lofsa $09c6 // blinds
  03c4:4a 04             send 4 

  03c6:35 04              ldi 4 
  03c8:65 12             aTop seconds 
  03ca:32 0536            jmp code_0903 

        code_03cd
  03cd:3c                 dup 
  03ce:35 10              ldi 10 
  03d0:1a                 eq? 
  03d1:30 003b            bnt code_040f 
  03d4:39 09            pushi 9 // $9 nsTop
  03d6:38 0398          pushi 398 // $398 sel_920
  03d9:39 03            pushi 3 // $3 y
  03db:39 43            pushi 43 // $43 at
  03dd:39 ff            pushi ff // $ff syncNum
  03df:39 0f            pushi f // $f lsBottom
  03e1:39 46            pushi 46 // $46 width
  03e3:38 0118          pushi 118 // $118 isNotHidden
  03e6:39 50            pushi 50 // $50 title
  03e8:72 0b52          lofsa $0b52 // Chi Chi
  03eb:36                push 
  03ec:45 0e 12         callb procedure_000e 12 //  

  03ef:38 00a2          pushi a2 // $a2 setLoop
  03f2:78               push1 
  03f3:78               push1 
  03f4:38 0120          pushi 120 // $120 setCel
  03f7:78               push1 
  03f8:76               push0 
  03f9:38 00db          pushi db // $db cycleSpeed
  03fc:78               push1 
  03fd:39 12            pushi 12 // $12 illegalBits
  03ff:38 0096          pushi 96 // $96 setCycle
  0402:7a               push2 
  0403:51 1a            class End 
  0405:36                push 
  0406:7c            pushSelf 
  0407:72 0948          lofsa $0948 // chiChi
  040a:4a 1a             send 1a 

  040c:32 04f4            jmp code_0903 

        code_040f
  040f:3c                 dup 
  0410:35 11              ldi 11 
  0412:1a                 eq? 
  0413:30 0015            bnt code_042b 
  0416:38 0120          pushi 120 // $120 setCel
  0419:78               push1 
  041a:76               push0 
  041b:38 0096          pushi 96 // $96 setCycle
  041e:7a               push2 
  041f:51 1a            class End 
  0421:36                push 
  0422:7c            pushSelf 
  0423:72 0948          lofsa $0948 // chiChi
  0426:4a 0e             send e 

  0428:32 04d8            jmp code_0903 

        code_042b
  042b:3c                 dup 
  042c:35 12              ldi 12 
  042e:1a                 eq? 
  042f:30 0007            bnt code_0439 
  0432:35 78              ldi 78 
  0434:65 16             aTop ticks 
  0436:32 04ca            jmp code_0903 

        code_0439
  0439:3c                 dup 
  043a:35 13              ldi 13 
  043c:1a                 eq? 
  043d:30 0017            bnt code_0457 
  0440:38 00c2          pushi c2 // $c2 show
  0443:76               push0 
  0444:38 0096          pushi 96 // $96 setCycle
  0447:39 04            pushi 4 // $4 x
  0449:51 19            class CT 
  044b:36                push 
  044c:39 04            pushi 4 // $4 x
  044e:78               push1 
  044f:7c            pushSelf 
  0450:81 00              lag  
  0452:4a 10             send 10 

  0454:32 04ac            jmp code_0903 

        code_0457
  0457:3c                 dup 
  0458:35 14              ldi 14 
  045a:1a                 eq? 
  045b:30 0029            bnt code_0487 
  045e:39 07            pushi 7 // $7 cel
  0460:38 0398          pushi 398 // $398 sel_920
  0463:39 04            pushi 4 // $4 x
  0465:39 43            pushi 43 // $43 at
  0467:39 ff            pushi ff // $ff syncNum
  0469:39 14            pushi 14 // $14 brLeft
  046b:39 50            pushi 50 // $50 title
  046d:72 0b52          lofsa $0b52 // Chi Chi
  0470:36                push 
  0471:45 0e 0e         callb procedure_000e e //  

  0474:38 0096          pushi 96 // $96 setCycle
  0477:39 04            pushi 4 // $4 x
  0479:51 19            class CT 
  047b:36                push 
  047c:39 0a            pushi a // $a nsLeft
  047e:78               push1 
  047f:7c            pushSelf 
  0480:81 00              lag  
  0482:4a 0c             send c 

  0484:32 047c            jmp code_0903 

        code_0487
  0487:3c                 dup 
  0488:35 15              ldi 15 
  048a:1a                 eq? 
  048b:30 0031            bnt code_04bf 
  048e:39 2b            pushi 2b // $2b number
  0490:78               push1 
  0491:38 01c0          pushi 1c0 // $1c0 endPal
  0494:39 06            pushi 6 // $6 loop
  0496:78               push1 
  0497:78               push1 
  0498:39 2a            pushi 2a // $2a play
  049a:76               push0 
  049b:81 67              lag  
  049d:4a 10             send 10 

  049f:38 0120          pushi 120 // $120 setCel
  04a2:78               push1 
  04a3:39 0b            pushi b // $b nsBottom
  04a5:38 00db          pushi db // $db cycleSpeed
  04a8:78               push1 
  04a9:39 0c            pushi c // $c nsRight
  04ab:38 0096          pushi 96 // $96 setCycle
  04ae:39 03            pushi 3 // $3 y
  04b0:51 5d            class MCyc 
  04b2:36                push 
  04b3:5b 02 00           lea 2 0 
  04b6:36                push 
  04b7:7c            pushSelf 
  04b8:81 00              lag  
  04ba:4a 16             send 16 

  04bc:32 0444            jmp code_0903 

        code_04bf
  04bf:3c                 dup 
  04c0:35 16              ldi 16 
  04c2:1a                 eq? 
  04c3:30 006a            bnt code_0530 
  04c6:39 2b            pushi 2b // $2b number
  04c8:78               push1 
  04c9:38 0391          pushi 391 // $391 sel_913
  04cc:39 06            pushi 6 // $6 loop
  04ce:78               push1 
  04cf:78               push1 
  04d0:39 2a            pushi 2a // $2a play
  04d2:76               push0 
  04d3:81 67              lag  
  04d5:4a 10             send 10 

  04d7:39 09            pushi 9 // $9 nsTop
  04d9:89 00              lsg  
  04db:38 0398          pushi 398 // $398 sel_920
  04de:39 05            pushi 5 // $5 view
  04e0:39 50            pushi 50 // $50 title
  04e2:72 0b5a          lofsa $0b5a // You
  04e5:36                push 
  04e6:39 43            pushi 43 // $43 at
  04e8:39 ff            pushi ff // $ff syncNum
  04ea:39 14            pushi 14 // $14 brLeft
  04ec:39 6c            pushi 6c // $6c dispose
  04ee:45 12 12         callb procedure_0012 12 //  

  04f1:39 69            pushi 69 // $69 hide
  04f3:76               push0 
  04f4:81 00              lag  
  04f6:4a 04             send 4 

  04f8:38 00c2          pushi c2 // $c2 show
  04fb:76               push0 
  04fc:39 05            pushi 5 // $5 view
  04fe:78               push1 
  04ff:38 0398          pushi 398 // $398 sel_920
  0502:38 00a2          pushi a2 // $a2 setLoop
  0505:78               push1 
  0506:78               push1 
  0507:38 0120          pushi 120 // $120 setCel
  050a:78               push1 
  050b:76               push0 
  050c:38 00db          pushi db // $db cycleSpeed
  050f:78               push1 
  0510:39 06            pushi 6 // $6 loop
  0512:38 011c          pushi 11c // $11c posn
  0515:7a               push2 
  0516:38 00f4          pushi f4 // $f4 nearestDist
  0519:39 3b            pushi 3b // $3b mover
  051b:39 42            pushi 42 // $42 setPri
  051d:78               push1 
  051e:39 0f            pushi f // $f lsBottom
  0520:38 0096          pushi 96 // $96 setCycle
  0523:7a               push2 
  0524:51 1a            class End 
  0526:36                push 
  0527:7c            pushSelf 
  0528:72 0aee          lofsa $0aee // crack
  052b:4a 32             send 32 

  052d:32 03d3            jmp code_0903 

        code_0530
  0530:3c                 dup 
  0531:35 17              ldi 17 
  0533:1a                 eq? 
  0534:30 0017            bnt code_054e 
  0537:7a               push2 
  0538:39 07            pushi 7 // $7 cel
  053a:7a               push2 
  053b:43 66 04         callk ShakeScreen 4 

  053e:38 0122          pushi 122 // $122 addToPic
  0541:76               push0 
  0542:72 0aee          lofsa $0aee // crack
  0545:4a 04             send 4 

  0547:35 04              ldi 4 
  0549:65 12             aTop seconds 
  054b:32 03b5            jmp code_0903 

        code_054e
  054e:3c                 dup 
  054f:35 18              ldi 18 
  0551:1a                 eq? 
  0552:30 001a            bnt code_056f 
  0555:81 19              lag  
  0557:30 0005            bnt code_055f 
  055a:39 6c            pushi 6c // $6c dispose
  055c:76               push0 
  055d:4a 04             send 4 


        code_055f
  055f:38 0096          pushi 96 // $96 setCycle
  0562:7a               push2 
  0563:51 1a            class End 
  0565:36                push 
  0566:7c            pushSelf 
  0567:72 09c6          lofsa $09c6 // blinds
  056a:4a 08             send 8 

  056c:32 0394            jmp code_0903 

        code_056f
  056f:3c                 dup 
  0570:35 19              ldi 19 
  0572:1a                 eq? 
  0573:30 0097            bnt code_060d 
  0576:7a               push2 
  0577:38 0080          pushi 80 // $80 indexOf
  057a:38 0399          pushi 399 // $399 sel_921
  057d:43 00 04         callk Load 4 

  0580:7a               push2 
  0581:38 0080          pushi 80 // $80 indexOf
  0584:38 039a          pushi 39a // $39a sel_922
  0587:43 00 04         callk Load 4 

  058a:39 6c            pushi 6c // $6c dispose
  058c:76               push0 
  058d:72 0a2c          lofsa $0a2c // rope
  0590:4a 04             send 4 

  0592:39 42            pushi 42 // $42 setPri
  0594:78               push1 
  0595:39 04            pushi 4 // $4 x
  0597:38 011c          pushi 11c // $11c posn
  059a:7a               push2 
  059b:38 0083          pushi 83 // $83 timer
  059e:38 00a1          pushi a1 // $a1 setVol
  05a1:38 0120          pushi 120 // $120 setCel
  05a4:78               push1 
  05a5:7a               push2 
  05a6:38 00a2          pushi a2 // $a2 setLoop
  05a9:78               push1 
  05aa:7a               push2 
  05ab:38 011d          pushi 11d // $11d stopUpd
  05ae:76               push0 
  05af:72 0a92          lofsa $0a92 // bars
  05b2:4a 1e             send 1e 

  05b4:38 00c2          pushi c2 // $c2 show
  05b7:76               push0 
  05b8:39 05            pushi 5 // $5 view
  05ba:78               push1 
  05bb:38 0399          pushi 399 // $399 sel_921
  05be:38 011c          pushi 11c // $11c posn
  05c1:7a               push2 
  05c2:39 55            pushi 55 // $55 z
  05c4:39 7c            pushi 7c // $7c prev
  05c6:38 00a2          pushi a2 // $a2 setLoop
  05c9:78               push1 
  05ca:39 03            pushi 3 // $3 y
  05cc:38 0120          pushi 120 // $120 setCel
  05cf:78               push1 
  05d0:76               push0 
  05d1:81 00              lag  
  05d3:4a 1e             send 1e 

  05d5:39 05            pushi 5 // $5 view
  05d7:78               push1 
  05d8:38 039a          pushi 39a // $39a sel_922
  05db:38 011c          pushi 11c // $11c posn
  05de:7a               push2 
  05df:39 66            pushi 66 // $66 flags
  05e1:39 7b            pushi 7b // $7b last
  05e3:38 00db          pushi db // $db cycleSpeed
  05e6:78               push1 
  05e7:39 09            pushi 9 // $9 nsTop
  05e9:39 38            pushi 38 // $38 moveSpeed
  05eb:78               push1 
  05ec:39 09            pushi 9 // $9 nsTop
  05ee:38 00a2          pushi a2 // $a2 setLoop
  05f1:78               push1 
  05f2:76               push0 
  05f3:38 0120          pushi 120 // $120 setCel
  05f6:78               push1 
  05f7:76               push0 
  05f8:72 0948          lofsa $0948 // chiChi
  05fb:4a 26             send 26 

  05fd:38 011d          pushi 11d // $11d stopUpd
  0600:76               push0 
  0601:72 09c6          lofsa $09c6 // blinds
  0604:4a 04             send 4 

  0606:35 04              ldi 4 
  0608:65 12             aTop seconds 
  060a:32 02f6            jmp code_0903 

        code_060d
  060d:3c                 dup 
  060e:35 1a              ldi 1a 
  0610:1a                 eq? 
  0611:30 0010            bnt code_0624 
  0614:38 0096          pushi 96 // $96 setCycle
  0617:7a               push2 
  0618:51 1b            class Beg 
  061a:36                push 
  061b:7c            pushSelf 
  061c:72 09c6          lofsa $09c6 // blinds
  061f:4a 08             send 8 

  0621:32 02df            jmp code_0903 

        code_0624
  0624:3c                 dup 
  0625:35 1b              ldi 1b 
  0627:1a                 eq? 
  0628:30 0010            bnt code_063b 
  062b:38 011d          pushi 11d // $11d stopUpd
  062e:76               push0 
  062f:72 09c6          lofsa $09c6 // blinds
  0632:4a 04             send 4 

  0634:35 1e              ldi 1e 
  0636:65 16             aTop ticks 
  0638:32 02c8            jmp code_0903 

        code_063b
  063b:3c                 dup 
  063c:35 1c              ldi 1c 
  063e:1a                 eq? 
  063f:30 002a            bnt code_066c 
  0642:38 0134          pushi 134 // $134 setStep
  0645:7a               push2 
  0646:7a               push2 
  0647:7a               push2 
  0648:38 0096          pushi 96 // $96 setCycle
  064b:78               push1 
  064c:51 18            class Walk 
  064e:36                push 
  064f:38 011b          pushi 11b // $11b setMotion
  0652:39 04            pushi 4 // $4 x
  0654:51 1e            class MoveTo 
  0656:36                push 
  0657:38 0096          pushi 96 // $96 setCycle
  065a:39 03            pushi 3 // $3 y
  065c:76               push0 
  065d:72 0948          lofsa $0948 // chiChi
  0660:4a 04             send 4 

  0662:36                push 
  0663:7c            pushSelf 
  0664:72 0948          lofsa $0948 // chiChi
  0667:4a 1a             send 1a 

  0669:32 0297            jmp code_0903 

        code_066c
  066c:3c                 dup 
  066d:35 1d              ldi 1d 
  066f:1a                 eq? 
  0670:30 0024            bnt code_0697 
  0673:38 00a2          pushi a2 // $a2 setLoop
  0676:78               push1 
  0677:78               push1 
  0678:38 0120          pushi 120 // $120 setCel
  067b:78               push1 
  067c:76               push0 
  067d:38 00db          pushi db // $db cycleSpeed
  0680:78               push1 
  0681:39 0c            pushi c // $c nsRight
  0683:38 0096          pushi 96 // $96 setCycle
  0686:39 04            pushi 4 // $4 x
  0688:51 19            class CT 
  068a:36                push 
  068b:39 07            pushi 7 // $7 cel
  068d:78               push1 
  068e:7c            pushSelf 
  068f:72 0948          lofsa $0948 // chiChi
  0692:4a 1e             send 1e 

  0694:32 026c            jmp code_0903 

        code_0697
  0697:3c                 dup 
  0698:35 1e              ldi 1e 
  069a:1a                 eq? 
  069b:30 0007            bnt code_06a5 
  069e:35 1e              ldi 1e 
  06a0:65 16             aTop ticks 
  06a2:32 025e            jmp code_0903 

        code_06a5
  06a5:3c                 dup 
  06a6:35 1f              ldi 1f 
  06a8:1a                 eq? 
  06a9:30 0010            bnt code_06bc 
  06ac:38 0096          pushi 96 // $96 setCycle
  06af:7a               push2 
  06b0:51 1a            class End 
  06b2:36                push 
  06b3:7c            pushSelf 
  06b4:72 0948          lofsa $0948 // chiChi
  06b7:4a 08             send 8 

  06b9:32 0247            jmp code_0903 

        code_06bc
  06bc:3c                 dup 
  06bd:35 20              ldi 20 
  06bf:1a                 eq? 
  06c0:30 0007            bnt code_06ca 
  06c3:35 5a              ldi 5a 
  06c5:65 16             aTop ticks 
  06c7:32 0239            jmp code_0903 

        code_06ca
  06ca:3c                 dup 
  06cb:35 21              ldi 21 
  06cd:1a                 eq? 
  06ce:30 0022            bnt code_06f3 
  06d1:39 09            pushi 9 // $9 nsTop
  06d3:38 0398          pushi 398 // $398 sel_920
  06d6:39 06            pushi 6 // $6 loop
  06d8:39 50            pushi 50 // $50 title
  06da:72 0b52          lofsa $0b52 // Chi Chi
  06dd:36                push 
  06de:39 43            pushi 43 // $43 at
  06e0:39 ff            pushi ff // $ff syncNum
  06e2:39 0f            pushi f // $f lsBottom
  06e4:39 46            pushi 46 // $46 width
  06e6:38 0118          pushi 118 // $118 isNotHidden
  06e9:45 0e 12         callb procedure_000e 12 //  

  06ec:35 5a              ldi 5a 
  06ee:65 16             aTop ticks 
  06f0:32 0210            jmp code_0903 

        code_06f3
  06f3:3c                 dup 
  06f4:35 22              ldi 22 
  06f6:1a                 eq? 
  06f7:30 001a            bnt code_0714 
  06fa:38 00db          pushi db // $db cycleSpeed
  06fd:78               push1 
  06fe:39 0b            pushi b // $b nsBottom
  0700:39 38            pushi 38 // $38 moveSpeed
  0702:78               push1 
  0703:39 0b            pushi b // $b nsBottom
  0705:38 0096          pushi 96 // $96 setCycle
  0708:7a               push2 
  0709:51 1a            class End 
  070b:36                push 
  070c:7c            pushSelf 
  070d:81 00              lag  
  070f:4a 14             send 14 

  0711:32 01ef            jmp code_0903 

        code_0714
  0714:3c                 dup 
  0715:35 23              ldi 23 
  0717:1a                 eq? 
  0718:30 0007            bnt code_0722 
  071b:35 1e              ldi 1e 
  071d:65 16             aTop ticks 
  071f:32 01e1            jmp code_0903 

        code_0722
  0722:3c                 dup 
  0723:35 24              ldi 24 
  0725:1a                 eq? 
  0726:30 002c            bnt code_0755 
  0729:38 0096          pushi 96 // $96 setCycle
  072c:78               push1 
  072d:51 18            class Walk 
  072f:36                push 
  0730:38 00a2          pushi a2 // $a2 setLoop
  0733:78               push1 
  0734:76               push0 
  0735:38 0134          pushi 134 // $134 setStep
  0738:7a               push2 
  0739:78               push1 
  073a:78               push1 
  073b:38 011b          pushi 11b // $11b setMotion
  073e:39 04            pushi 4 // $4 x
  0740:51 1e            class MoveTo 
  0742:36                push 
  0743:39 74            pushi 74 // $74 eachElementDo
  0745:39 03            pushi 3 // $3 y
  0747:76               push0 
  0748:81 00              lag  
  074a:4a 04             send 4 

  074c:36                push 
  074d:7c            pushSelf 
  074e:81 00              lag  
  0750:4a 20             send 20 

  0752:32 01ae            jmp code_0903 

        code_0755
  0755:3c                 dup 
  0756:35 25              ldi 25 
  0758:1a                 eq? 
  0759:30 001d            bnt code_0779 
  075c:38 00a2          pushi a2 // $a2 setLoop
  075f:78               push1 
  0760:78               push1 
  0761:38 0120          pushi 120 // $120 setCel
  0764:78               push1 
  0765:76               push0 
  0766:38 0096          pushi 96 // $96 setCycle
  0769:39 04            pushi 4 // $4 x
  076b:51 19            class CT 
  076d:36                push 
  076e:39 03            pushi 3 // $3 y
  0770:78               push1 
  0771:7c            pushSelf 
  0772:81 00              lag  
  0774:4a 18             send 18 

  0776:32 018a            jmp code_0903 

        code_0779
  0779:3c                 dup 
  077a:35 26              ldi 26 
  077c:1a                 eq? 
  077d:30 0039            bnt code_07b9 
  0780:39 2b            pushi 2b // $2b number
  0782:78               push1 
  0783:38 0392          pushi 392 // $392 sel_914
  0786:39 06            pushi 6 // $6 loop
  0788:78               push1 
  0789:78               push1 
  078a:39 2a            pushi 2a // $2a play
  078c:76               push0 
  078d:81 67              lag  
  078f:4a 10             send 10 

  0791:39 09            pushi 9 // $9 nsTop
  0793:89 00              lsg  
  0795:38 0398          pushi 398 // $398 sel_920
  0798:39 07            pushi 7 // $7 cel
  079a:39 50            pushi 50 // $50 title
  079c:72 0b5a          lofsa $0b5a // You
  079f:36                push 
  07a0:39 43            pushi 43 // $43 at
  07a2:39 ff            pushi ff // $ff syncNum
  07a4:39 14            pushi 14 // $14 brLeft
  07a6:39 6c            pushi 6c // $6c dispose
  07a8:45 12 12         callb procedure_0012 12 //  

  07ab:7a               push2 
  07ac:39 05            pushi 5 // $5 view
  07ae:7a               push2 
  07af:43 66 04         callk ShakeScreen 4 

  07b2:35 5a              ldi 5a 
  07b4:65 16             aTop ticks 
  07b6:32 014a            jmp code_0903 

        code_07b9
  07b9:3c                 dup 
  07ba:35 27              ldi 27 
  07bc:1a                 eq? 
  07bd:30 000f            bnt code_07cf 
  07c0:38 0096          pushi 96 // $96 setCycle
  07c3:7a               push2 
  07c4:51 1a            class End 
  07c6:36                push 
  07c7:7c            pushSelf 
  07c8:81 00              lag  
  07ca:4a 08             send 8 

  07cc:32 0134            jmp code_0903 

        code_07cf
  07cf:3c                 dup 
  07d0:35 28              ldi 28 
  07d2:1a                 eq? 
  07d3:30 0007            bnt code_07dd 
  07d6:35 5a              ldi 5a 
  07d8:65 16             aTop ticks 
  07da:32 0126            jmp code_0903 

        code_07dd
  07dd:3c                 dup 
  07de:35 29              ldi 29 
  07e0:1a                 eq? 
  07e1:30 003a            bnt code_081e 
  07e4:81 19              lag  
  07e6:30 0005            bnt code_07ee 
  07e9:39 6c            pushi 6c // $6c dispose
  07eb:76               push0 
  07ec:4a 04             send 4 


        code_07ee
  07ee:39 2b            pushi 2b // $2b number
  07f0:78               push1 
  07f1:38 0393          pushi 393 // $393 sel_915
  07f4:39 06            pushi 6 // $6 loop
  07f6:78               push1 
  07f7:78               push1 
  07f8:39 2a            pushi 2a // $2a play
  07fa:76               push0 
  07fb:81 67              lag  
  07fd:4a 10             send 10 

  07ff:38 00a2          pushi a2 // $a2 setLoop
  0802:78               push1 
  0803:7a               push2 
  0804:38 0120          pushi 120 // $120 setCel
  0807:78               push1 
  0808:76               push0 
  0809:38 00db          pushi db // $db cycleSpeed
  080c:78               push1 
  080d:39 0c            pushi c // $c nsRight
  080f:38 0096          pushi 96 // $96 setCycle
  0812:7a               push2 
  0813:51 1a            class End 
  0815:36                push 
  0816:7c            pushSelf 
  0817:81 00              lag  
  0819:4a 1a             send 1a 

  081b:32 00e5            jmp code_0903 

        code_081e
  081e:3c                 dup 
  081f:35 2a              ldi 2a 
  0821:1a                 eq? 
  0822:30 0007            bnt code_082c 
  0825:35 04              ldi 4 
  0827:65 12             aTop seconds 
  0829:32 00d7            jmp code_0903 

        code_082c
  082c:3c                 dup 
  082d:35 2b              ldi 2b 
  082f:1a                 eq? 
  0830:30 0010            bnt code_0843 
  0833:38 0096          pushi 96 // $96 setCycle
  0836:7a               push2 
  0837:51 1a            class End 
  0839:36                push 
  083a:7c            pushSelf 
  083b:72 09c6          lofsa $09c6 // blinds
  083e:4a 08             send 8 

  0840:32 00c0            jmp code_0903 

        code_0843
  0843:3c                 dup 
  0844:35 2c              ldi 2c 
  0846:1a                 eq? 
  0847:30 0008            bnt code_0852 
  084a:34 00b4            ldi b4 
  084d:65 16             aTop ticks 
  084f:32 00b1            jmp code_0903 

        code_0852
  0852:3c                 dup 
  0853:35 2d              ldi 2d 
  0855:1a                 eq? 
  0856:30 003d            bnt code_0896 
  0859:39 69            pushi 69 // $69 hide
  085b:76               push0 
  085c:81 00              lag  
  085e:4a 04             send 4 

  0860:39 6c            pushi 6c // $6c dispose
  0862:76               push0 
  0863:72 0948          lofsa $0948 // chiChi
  0866:4a 04             send 4 

  0868:39 6c            pushi 6c // $6c dispose
  086a:76               push0 
  086b:72 0a92          lofsa $0a92 // bars
  086e:4a 04             send 4 

  0870:39 6c            pushi 6c // $6c dispose
  0872:76               push0 
  0873:72 09c6          lofsa $09c6 // blinds
  0876:4a 04             send 4 

  0878:7a               push2 
  0879:78               push1 
  087a:39 06            pushi 6 // $6 loop
  087c:43 08 04         callk DrawPic 4 

  087f:38 009f          pushi 9f // $9f fade
  0882:76               push0 
  0883:81 66              lag  
  0885:4a 04             send 4 

  0887:38 009f          pushi 9f // $9f fade
  088a:76               push0 
  088b:81 67              lag  
  088d:4a 04             send 4 

  088f:35 03              ldi 3 
  0891:65 12             aTop seconds 
  0893:32 006d            jmp code_0903 

        code_0896
  0896:3c                 dup 
  0897:35 2e              ldi 2e 
  0899:1a                 eq? 
  089a:30 0066            bnt code_0903 
  089d:7a               push2 
  089e:39 28            pushi 28 // $28 message
  08a0:38 00a5          pushi a5 // $a5 clean
  08a3:45 0a 04         callb procedure_000a 4 //  

  08a6:7a               push2 
  08a7:38 0398          pushi 398 // $398 sel_920
  08aa:39 08            pushi 8 // $8 underBits
  08ac:45 0e 04         callb procedure_000e 4 //  

  08af:39 20            pushi 20 // $20 state
  08b1:76               push0 
  08b2:39 43            pushi 43 // $43 at
  08b4:78               push1 
  08b5:76               push0 
  08b6:51 40            class Inv 
  08b8:4a 06             send 6 

  08ba:4a 04             send 4 

  08bc:36                push 
  08bd:35 64              ldi 64 
  08bf:20                 ge? 
  08c0:30 002c            bnt code_08ef 
  08c3:78               push1 
  08c4:39 04            pushi 4 // $4 x
  08c6:45 09 02         callb procedure_0009 2 //  

  08c9:7a               push2 
  08ca:39 14            pushi 14 // $14 brLeft
  08cc:38 00a7          pushi a7 // $a7 enable
  08cf:45 0a 04         callb procedure_000a 4 //  

  08d2:7a               push2 
  08d3:38 0398          pushi 398 // $398 sel_920
  08d6:39 09            pushi 9 // $9 nsTop
  08d8:45 0e 04         callb procedure_000e 4 //  

  08db:39 05            pushi 5 // $5 view
  08dd:38 0398          pushi 398 // $398 sel_920
  08e0:39 0a            pushi a // $a nsLeft
  08e2:39 43            pushi 43 // $43 at
  08e4:39 ff            pushi ff // $ff syncNum
  08e6:38 00b9          pushi b9 // $b9 bottom
  08e9:45 0e 0a         callb procedure_000e a //  

  08ec:32 0009            jmp code_08f8 

        code_08ef
  08ef:7a               push2 
  08f0:38 0398          pushi 398 // $398 sel_920
  08f3:39 0b            pushi b // $b nsBottom
  08f5:45 0e 04         callb procedure_000e 4 //  


        code_08f8
  08f8:38 0179          pushi 179 // $179 newRoom
  08fb:78               push1 
  08fc:38 0384          pushi 384 // $384 sel_900
  08ff:81 02              lag  
  0901:4a 06             send 6 


        code_0903
  0903:3a                toss 
  0904:48                 ret 
  0905:00                bnot 
    )

)

// 0942
(instance chiChi of Actor
    (properties
        x $80
        y $6c
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $b67
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $b77
        yStep $2
        view $39a
        loop $2
        cel $0
        priority $7
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $8
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)

// 09c0
(instance blinds of Prop
    (properties
        x $80
        y $9e
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $bb9
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $bcd
        yStep $2
        view $398
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $a
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0a26
(instance rope of Prop
    (properties
        x $88
        y $2c
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $c1b
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $c24
        yStep $2
        view $39b
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $8
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0a8c
(instance bars of View
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $398
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
)

// 0ae8
(instance crack of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $398
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)



