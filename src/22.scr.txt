(script 22)

(string
    string_066e "sPlugCharger"
    string_067b "sPlugCamcorder"
    string_068a "sUnplugCharger"
    string_0699 "sGetShocked"
    string_06a5 "shockSound"
    string_06b0 "the battery charger"
    string_06c4 "Camcorder Battery Strength"
    string_06df "charger"
    string_06e7 ""
)

(said
)

(local
    local0 = $00a0
    local1 = $0040
    local2 = $006c
    local3 = $0104
    local4 = $0013
    local5 = $0092
    local6 = $0000
)

// 0116
(instance publicsPlugCharger of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_001a
  001a:3f 01             link 1 // (var $1)
  001c:87 01              lap param1 
  001e:65 0a             aTop state 
  0020:36                push 
  0021:3c                 dup 
  0022:35 00              ldi 0 
  0024:1a                 eq? 
  0025:30 0032            bnt code_005a 
  0028:76               push0 
  0029:45 02 00         callb procedure_0002 0 //  

  002c:39 05            pushi 5 // $5 view
  002e:78               push1 
  002f:38 00a1          pushi a1 // $a1 setVol
  0032:38 00a2          pushi a2 // $a2 setLoop
  0035:78               push1 
  0036:76               push0 
  0037:38 0120          pushi 120 // $120 setCel
  003a:78               push1 
  003b:76               push0 
  003c:38 00db          pushi db // $db cycleSpeed
  003f:78               push1 
  0040:39 0a            pushi a // $a nsLeft
  0042:38 0121          pushi 121 // $121 ignoreActors
  0045:78               push1 
  0046:78               push1 
  0047:39 12            pushi 12 // $12 illegalBits
  0049:78               push1 
  004a:76               push0 
  004b:38 0096          pushi 96 // $96 setCycle
  004e:7a               push2 
  004f:51 1a            class End 
  0051:36                push 
  0052:7c            pushSelf 
  0053:81 00              lag  
  0055:4a 2c             send 2c 

  0057:32 00b3            jmp code_010d 

        code_005a
  005a:3c                 dup 
  005b:35 01              ldi 1 
  005d:1a                 eq? 
  005e:30 0019            bnt code_007a 
  0061:38 00a2          pushi a2 // $a2 setLoop
  0064:78               push1 
  0065:78               push1 
  0066:38 0120          pushi 120 // $120 setCel
  0069:78               push1 
  006a:76               push0 
  006b:38 0096          pushi 96 // $96 setCycle
  006e:7a               push2 
  006f:51 1a            class End 
  0071:36                push 
  0072:7c            pushSelf 
  0073:81 00              lag  
  0075:4a 14             send 14 

  0077:32 0093            jmp code_010d 

        code_007a
  007a:3c                 dup 
  007b:35 02              ldi 2 
  007d:1a                 eq? 
  007e:30 0059            bnt code_00da 
  0081:35 00              ldi 0 
  0083:a5 00              sat temp0 

        code_0085
  0085:85 00              lat temp0 
  0087:9b 00             lsli local0 
  0089:35 00              ldi 0 
  008b:1c                 ne? 
  008c:30 0030            bnt code_00bf 
  008f:85 00              lat temp0 
  0091:9b 00             lsli local0 
  0093:81 0b              lag  
  0095:1a                 eq? 
  0096:30 001c            bnt code_00b5 
  0099:39 04            pushi 4 // $4 x
  009b:78               push1 
  009c:c5 00              +at temp0 
  009e:9b 00             lsli local0 
  00a0:39 03            pushi 3 // $3 y
  00a2:78               push1 
  00a3:c5 00              +at temp0 
  00a5:9b 00             lsli local0 
  00a7:39 6b            pushi 6b // $6b init
  00a9:76               push0 
  00aa:72 0612          lofsa $0612 // charger
  00ad:4a 10             send 10 

  00af:32 000d            jmp code_00bf 
  00b2:32 ffd0            jmp code_0085 

        code_00b5
  00b5:8d 00              lst temp0 
  00b7:35 03              ldi 3 
  00b9:02                 add 
  00ba:a5 00              sat temp0 
  00bc:32 ffc6            jmp code_0085 

        code_00bf
  00bf:38 00a2          pushi a2 // $a2 setLoop
  00c2:78               push1 
  00c3:76               push0 
  00c4:38 0120          pushi 120 // $120 setCel
  00c7:78               push1 
  00c8:38 00ff          pushi ff // $ff syncNum
  00cb:38 0096          pushi 96 // $96 setCycle
  00ce:7a               push2 
  00cf:51 1b            class Beg 
  00d1:36                push 
  00d2:7c            pushSelf 
  00d3:81 00              lag  
  00d5:4a 14             send 14 

  00d7:32 0033            jmp code_010d 

        code_00da
  00da:3c                 dup 
  00db:35 03              ldi 3 
  00dd:1a                 eq? 
  00de:30 002c            bnt code_010d 
  00e1:38 0148          pushi 148 // $148 put
  00e4:7a               push2 
  00e5:78               push1 
  00e6:89 02              lsg  
  00e8:38 00a2          pushi a2 // $a2 setLoop
  00eb:78               push1 
  00ec:78               push1 
  00ed:38 020a          pushi 20a // $20a normalize
  00f0:76               push0 
  00f1:81 00              lag  
  00f3:4a 12             send 12 

  00f5:7a               push2 
  00f6:39 08            pushi 8 // $8 underBits
  00f8:39 41            pushi 41 // $41 replay
  00fa:45 0a 04         callb procedure_000a 4 //  

  00fd:7a               push2 
  00fe:39 16            pushi 16 // $16 brRight
  0100:76               push0 
  0101:45 0e 04         callb procedure_000e 4 //  

  0104:76               push0 
  0105:45 03 00         callb procedure_0003 0 //  

  0108:39 6c            pushi 6c // $6c dispose
  010a:76               push0 
  010b:54 04             self 4 


        code_010d
  010d:3a                toss 
  010e:48                 ret 
  010f:00                bnot 
    )

)

// 0226
(instance sPlugCamcorder of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_014a
  014a:87 01              lap param1 
  014c:65 0a             aTop state 
  014e:36                push 
  014f:3c                 dup 
  0150:35 00              ldi 0 
  0152:1a                 eq? 
  0153:30 0032            bnt code_0188 
  0156:76               push0 
  0157:45 02 00         callb procedure_0002 0 //  

  015a:39 05            pushi 5 // $5 view
  015c:78               push1 
  015d:38 00a1          pushi a1 // $a1 setVol
  0160:38 00a2          pushi a2 // $a2 setLoop
  0163:78               push1 
  0164:76               push0 
  0165:38 0120          pushi 120 // $120 setCel
  0168:78               push1 
  0169:76               push0 
  016a:38 00db          pushi db // $db cycleSpeed
  016d:78               push1 
  016e:39 0a            pushi a // $a nsLeft
  0170:38 0121          pushi 121 // $121 ignoreActors
  0173:78               push1 
  0174:78               push1 
  0175:39 12            pushi 12 // $12 illegalBits
  0177:78               push1 
  0178:76               push0 
  0179:38 0096          pushi 96 // $96 setCycle
  017c:7a               push2 
  017d:51 1a            class End 
  017f:36                push 
  0180:7c            pushSelf 
  0181:81 00              lag  
  0183:4a 2c             send 2c 

  0185:32 0095            jmp code_021d 

        code_0188
  0188:3c                 dup 
  0189:35 01              ldi 1 
  018b:1a                 eq? 
  018c:30 0019            bnt code_01a8 
  018f:38 00a2          pushi a2 // $a2 setLoop
  0192:78               push1 
  0193:7a               push2 
  0194:38 0120          pushi 120 // $120 setCel
  0197:78               push1 
  0198:76               push0 
  0199:38 0096          pushi 96 // $96 setCycle
  019c:7a               push2 
  019d:51 1a            class End 
  019f:36                push 
  01a0:7c            pushSelf 
  01a1:81 00              lag  
  01a3:4a 14             send 14 

  01a5:32 0075            jmp code_021d 

        code_01a8
  01a8:3c                 dup 
  01a9:35 02              ldi 2 
  01ab:1a                 eq? 
  01ac:30 0026            bnt code_01d5 
  01af:38 00a2          pushi a2 // $a2 setLoop
  01b2:78               push1 
  01b3:39 04            pushi 4 // $4 x
  01b5:72 0612          lofsa $0612 // charger
  01b8:4a 06             send 6 

  01ba:38 00a2          pushi a2 // $a2 setLoop
  01bd:78               push1 
  01be:76               push0 
  01bf:38 0120          pushi 120 // $120 setCel
  01c2:78               push1 
  01c3:38 00ff          pushi ff // $ff syncNum
  01c6:38 0096          pushi 96 // $96 setCycle
  01c9:7a               push2 
  01ca:51 1b            class Beg 
  01cc:36                push 
  01cd:7c            pushSelf 
  01ce:81 00              lag  
  01d0:4a 14             send 14 

  01d2:32 0048            jmp code_021d 

        code_01d5
  01d5:3c                 dup 
  01d6:35 03              ldi 3 
  01d8:1a                 eq? 
  01d9:30 0041            bnt code_021d 
  01dc:38 0148          pushi 148 // $148 put
  01df:7a               push2 
  01e0:76               push0 
  01e1:39 43            pushi 43 // $43 at
  01e3:78               push1 
  01e4:78               push1 
  01e5:51 40            class Inv 
  01e7:4a 06             send 6 

  01e9:36                push 
  01ea:38 00a2          pushi a2 // $a2 setLoop
  01ed:78               push1 
  01ee:78               push1 
  01ef:38 020a          pushi 20a // $20a normalize
  01f2:76               push0 
  01f3:81 00              lag  
  01f5:4a 12             send 12 

  01f7:38 0119          pushi 119 // $119 approachVerbs
  01fa:39 03            pushi 3 // $3 y
  01fc:3c                 dup 
  01fd:39 04            pushi 4 // $4 x
  01ff:7a               push2 
  0200:72 0612          lofsa $0612 // charger
  0203:4a 0a             send a 

  0205:7a               push2 
  0206:39 03            pushi 3 // $3 y
  0208:39 42            pushi 42 // $42 setPri
  020a:45 0a 04         callb procedure_000a 4 //  

  020d:7a               push2 
  020e:39 16            pushi 16 // $16 brRight
  0210:78               push1 
  0211:45 0e 04         callb procedure_000e 4 //  

  0214:76               push0 
  0215:45 03 00         callb procedure_0003 0 //  

  0218:39 6c            pushi 6c // $6c dispose
  021a:76               push0 
  021b:54 04             self 4 


        code_021d
  021d:3a                toss 
  021e:48                 ret 
  021f:00                bnot 
    )

)

// 037a
(instance publicsUnplugCharger of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_025a
  025a:3f 01             link 1 // (var $1)
  025c:87 01              lap param1 
  025e:65 0a             aTop state 
  0260:36                push 
  0261:3c                 dup 
  0262:35 00              ldi 0 
  0264:1a                 eq? 
  0265:30 0032            bnt code_029a 
  0268:76               push0 
  0269:45 02 00         callb procedure_0002 0 //  

  026c:39 05            pushi 5 // $5 view
  026e:78               push1 
  026f:38 00a1          pushi a1 // $a1 setVol
  0272:38 00a2          pushi a2 // $a2 setLoop
  0275:78               push1 
  0276:76               push0 
  0277:38 0120          pushi 120 // $120 setCel
  027a:78               push1 
  027b:76               push0 
  027c:38 00db          pushi db // $db cycleSpeed
  027f:78               push1 
  0280:39 0a            pushi a // $a nsLeft
  0282:38 0121          pushi 121 // $121 ignoreActors
  0285:78               push1 
  0286:78               push1 
  0287:39 12            pushi 12 // $12 illegalBits
  0289:78               push1 
  028a:76               push0 
  028b:38 0096          pushi 96 // $96 setCycle
  028e:7a               push2 
  028f:51 1a            class End 
  0291:36                push 
  0292:7c            pushSelf 
  0293:81 00              lag  
  0295:4a 2c             send 2c 

  0297:32 00d8            jmp code_0372 

        code_029a
  029a:3c                 dup 
  029b:35 01              ldi 1 
  029d:1a                 eq? 
  029e:30 0023            bnt code_02c4 
  02a1:39 6c            pushi 6c // $6c dispose
  02a3:76               push0 
  02a4:72 0612          lofsa $0612 // charger
  02a7:4a 04             send 4 

  02a9:38 00a2          pushi a2 // $a2 setLoop
  02ac:78               push1 
  02ad:78               push1 
  02ae:38 0120          pushi 120 // $120 setCel
  02b1:78               push1 
  02b2:38 00ff          pushi ff // $ff syncNum
  02b5:38 0096          pushi 96 // $96 setCycle
  02b8:7a               push2 
  02b9:51 1b            class Beg 
  02bb:36                push 
  02bc:7c            pushSelf 
  02bd:81 00              lag  
  02bf:4a 14             send 14 

  02c1:32 00ae            jmp code_0372 

        code_02c4
  02c4:3c                 dup 
  02c5:35 02              ldi 2 
  02c7:1a                 eq? 
  02c8:30 001b            bnt code_02e6 
  02cb:38 00a2          pushi a2 // $a2 setLoop
  02ce:78               push1 
  02cf:76               push0 
  02d0:38 0120          pushi 120 // $120 setCel
  02d3:78               push1 
  02d4:38 00ff          pushi ff // $ff syncNum
  02d7:38 0096          pushi 96 // $96 setCycle
  02da:7a               push2 
  02db:51 1b            class Beg 
  02dd:36                push 
  02de:7c            pushSelf 
  02df:81 00              lag  
  02e1:4a 14             send 14 

  02e3:32 008c            jmp code_0372 

        code_02e6
  02e6:3c                 dup 
  02e7:35 03              ldi 3 
  02e9:1a                 eq? 
  02ea:30 0085            bnt code_0372 
  02ed:38 0147          pushi 147 // $147 get
  02f0:78               push1 
  02f1:78               push1 
  02f2:38 0147          pushi 147 // $147 get
  02f5:78               push1 
  02f6:76               push0 
  02f7:38 00a2          pushi a2 // $a2 setLoop
  02fa:78               push1 
  02fb:78               push1 
  02fc:38 020a          pushi 20a // $20a normalize
  02ff:76               push0 
  0300:81 00              lag  
  0302:4a 16             send 16 

  0304:38 009b          pushi 9b // $9b owner
  0307:78               push1 
  0308:39 17            pushi 17 // $17 name
  030a:39 43            pushi 43 // $43 at
  030c:78               push1 
  030d:76               push0 
  030e:51 40            class Inv 
  0310:4a 06             send 6 

  0312:4a 06             send 6 

  0314:38 00a2          pushi a2 // $a2 setLoop
  0317:78               push1 
  0318:39 03            pushi 3 // $3 y
  031a:38 0119          pushi 119 // $119 approachVerbs
  031d:7a               push2 
  031e:39 03            pushi 3 // $3 y
  0320:39 04            pushi 4 // $4 x
  0322:72 0612          lofsa $0612 // charger
  0325:4a 0e             send e 

  0327:7a               push2 
  0328:78               push1 
  0329:39 43            pushi 43 // $43 at
  032b:45 0a 04         callb procedure_000a 4 //  

  032e:39 06            pushi 6 // $6 loop
  0330:76               push0 
  0331:72 0612          lofsa $0612 // charger
  0334:4a 04             send 4 

  0336:36                push 
  0337:35 04              ldi 4 
  0339:1a                 eq? 
  033a:30 000a            bnt code_0347 
  033d:7a               push2 
  033e:39 16            pushi 16 // $16 brRight
  0340:7a               push2 
  0341:45 0e 04         callb procedure_000e 4 //  

  0344:32 0008            jmp code_034f 

        code_0347
  0347:7a               push2 
  0348:39 16            pushi 16 // $16 brRight
  034a:39 03            pushi 3 // $3 y
  034c:45 0e 04         callb procedure_000e 4 //  


        code_034f
  034f:76               push0 
  0350:45 03 00         callb procedure_0003 0 //  

  0353:38 012c          pushi 12c // $12c ignoreHorizon
  0356:89 96              lsg  
  0358:35 14              ldi 14 
  035a:08                 div 
  035b:06                 mul 
  035c:a5 00              sat temp0 
  035e:38 0097          pushi 97 // $97 setReal
  0361:7a               push2 
  0362:89 b7              lsg  
  0364:36                push 
  0365:35 64              ldi 64 
  0367:08                 div 
  0368:36                push 
  0369:81 b7              lag  
  036b:4a 08             send 8 

  036d:39 6c            pushi 6c // $6c dispose
  036f:76               push0 
  0370:54 04             self 4 


        code_0372
  0372:3a                toss 
  0373:48                 ret 
    )

)

// 04ba
(instance publicsGetShocked of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_03ae
  03ae:87 01              lap param1 
  03b0:65 0a             aTop state 
  03b2:36                push 
  03b3:3c                 dup 
  03b4:35 00              ldi 0 
  03b6:1a                 eq? 
  03b7:30 0041            bnt code_03fb 
  03ba:76               push0 
  03bb:45 02 00         callb procedure_0002 0 //  

  03be:38 011c          pushi 11c // $11c posn
  03c1:7a               push2 
  03c2:39 04            pushi 4 // $4 x
  03c4:76               push0 
  03c5:81 00              lag  
  03c7:4a 04             send 4 

  03c9:36                push 
  03ca:39 03            pushi 3 // $3 y
  03cc:76               push0 
  03cd:81 00              lag  
  03cf:4a 04             send 4 

  03d1:36                push 
  03d2:35 02              ldi 2 
  03d4:04                 sub 
  03d5:36                push 
  03d6:39 05            pushi 5 // $5 view
  03d8:78               push1 
  03d9:38 0230          pushi 230 // $230 sel_560
  03dc:38 00a2          pushi a2 // $a2 setLoop
  03df:78               push1 
  03e0:76               push0 
  03e1:38 0120          pushi 120 // $120 setCel
  03e4:78               push1 
  03e5:76               push0 
  03e6:38 00db          pushi db // $db cycleSpeed
  03e9:78               push1 
  03ea:39 0a            pushi a // $a nsLeft
  03ec:38 0096          pushi 96 // $96 setCycle
  03ef:7a               push2 
  03f0:51 1a            class End 
  03f2:36                push 
  03f3:7c            pushSelf 
  03f4:81 00              lag  
  03f6:4a 28             send 28 

  03f8:32 00b6            jmp code_04b1 

        code_03fb
  03fb:3c                 dup 
  03fc:35 01              ldi 1 
  03fe:1a                 eq? 
  03ff:30 0035            bnt code_0437 
  0402:39 2b            pushi 2b // $2b number
  0404:78               push1 
  0405:38 0231          pushi 231 // $231 sel_561
  0408:38 00a2          pushi a2 // $a2 setLoop
  040b:78               push1 
  040c:78               push1 
  040d:39 2a            pushi 2a // $2a play
  040f:76               push0 
  0410:72 04f6          lofsa $04f6 // shockSound
  0413:4a 10             send 10 

  0415:39 42            pushi 42 // $42 setPri
  0417:78               push1 
  0418:39 0d            pushi d // $d lsTop
  041a:38 00a2          pushi a2 // $a2 setLoop
  041d:78               push1 
  041e:78               push1 
  041f:38 0096          pushi 96 // $96 setCycle
  0422:78               push1 
  0423:51 17            class Fwd 
  0425:36                push 
  0426:81 00              lag  
  0428:4a 12             send 12 

  042a:7a               push2 
  042b:39 19            pushi 19 // $19 time
  042d:39 28            pushi 28 // $28 message
  042f:43 3c 04         callk Random 4 

  0432:65 10             aTop cycles 
  0434:32 007a            jmp code_04b1 

        code_0437
  0437:3c                 dup 
  0438:35 02              ldi 2 
  043a:1a                 eq? 
  043b:30 0027            bnt code_0465 
  043e:39 2b            pushi 2b // $2b number
  0440:78               push1 
  0441:38 0093          pushi 93 // $93 ticksToDo
  0444:39 2a            pushi 2a // $2a play
  0446:76               push0 
  0447:72 04f6          lofsa $04f6 // shockSound
  044a:4a 0a             send a 

  044c:38 00a2          pushi a2 // $a2 setLoop
  044f:78               push1 
  0450:7a               push2 
  0451:38 0120          pushi 120 // $120 setCel
  0454:78               push1 
  0455:76               push0 
  0456:38 0096          pushi 96 // $96 setCycle
  0459:7a               push2 
  045a:51 1a            class End 
  045c:36                push 
  045d:7c            pushSelf 
  045e:81 00              lag  
  0460:4a 14             send 14 

  0462:32 004c            jmp code_04b1 

        code_0465
  0465:3c                 dup 
  0466:35 03              ldi 3 
  0468:1a                 eq? 
  0469:30 001a            bnt code_0486 
  046c:38 00a2          pushi a2 // $a2 setLoop
  046f:78               push1 
  0470:39 03            pushi 3 // $3 y
  0472:38 0120          pushi 120 // $120 setCel
  0475:78               push1 
  0476:76               push0 
  0477:38 0096          pushi 96 // $96 setCycle
  047a:7a               push2 
  047b:51 1a            class End 
  047d:36                push 
  047e:7c            pushSelf 
  047f:81 00              lag  
  0481:4a 14             send 14 

  0483:32 002b            jmp code_04b1 

        code_0486
  0486:3c                 dup 
  0487:35 04              ldi 4 
  0489:1a                 eq? 
  048a:30 0014            bnt code_04a1 
  048d:38 00a2          pushi a2 // $a2 setLoop
  0490:78               push1 
  0491:7a               push2 
  0492:38 020a          pushi 20a // $20a normalize
  0495:76               push0 
  0496:81 00              lag  
  0498:4a 0a             send a 

  049a:35 3c              ldi 3c 
  049c:65 16             aTop ticks 
  049e:32 0010            jmp code_04b1 

        code_04a1
  04a1:3c                 dup 
  04a2:35 05              ldi 5 
  04a4:1a                 eq? 
  04a5:30 0009            bnt code_04b1 
  04a8:76               push0 
  04a9:45 03 00         callb procedure_0003 0 //  

  04ac:39 6c            pushi 6c // $6c dispose
  04ae:76               push0 
  04af:54 04             self 4 


        code_04b1
  04b1:3a                toss 
  04b2:48                 ret 
  04b3:00                bnot 
    )

)

// 04f0
(instance shockSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $231
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 060c
(instance publiccharger of View
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $6b0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $a1
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $101
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (init) // method_0524
  0524:39 6b            pushi 6b // $6b init
  0526:76               push0 
  0527:57 2e 04         super View 4 

  052a:38 0119          pushi 119 // $119 approachVerbs
  052d:7a               push2 
  052e:39 03            pushi 3 // $3 y
  0530:39 04            pushi 4 // $4 x
  0532:54 08             self 8 

  0534:67 08             pTos x 
  0536:35 0c              ldi c 
  0538:02                 add 
  0539:65 22             aTop approachX 
  053b:67 0a             pTos y 
  053d:35 01              ldi 1 
  053f:02                 add 
  0540:65 24             aTop approachY 
  0542:48                 ret 
    )

    (method (doVerb) // method_0543
  0543:3f 32             link 32 // (var $32)
  0545:8f 01              lsp param1 
  0547:3c                 dup 
  0548:35 02              ldi 2 
  054a:1a                 eq? 
  054b:30 0050            bnt code_059e 
  054e:38 009b          pushi 9b // $9b owner
  0551:76               push0 
  0552:39 43            pushi 43 // $43 at
  0554:78               push1 
  0555:76               push0 
  0556:51 40            class Inv 
  0558:4a 06             send 6 

  055a:4a 04             send 4 

  055c:36                push 
  055d:39 43            pushi 43 // $43 at
  055f:78               push1 
  0560:78               push1 
  0561:51 40            class Inv 
  0563:4a 06             send 6 

  0565:1a                 eq? 
  0566:30 002a            bnt code_0593 
  0569:39 05            pushi 5 // $5 view
  056b:5b 04 00           lea 4 0 
  056e:36                push 
  056f:39 16            pushi 16 // $16 brRight
  0571:39 04            pushi 4 // $4 x
  0573:89 96              lsg  
  0575:35 14              ldi 14 
  0577:08                 div 
  0578:36                push 
  0579:39 25            pushi 25 // $25 max
  057b:43 48 0a         callk Format a 

  057e:39 05            pushi 5 // $5 view
  0580:5b 04 00           lea 4 0 
  0583:36                push 
  0584:39 1e            pushi 1e // $1e mode
  0586:78               push1 
  0587:39 50            pushi 50 // $50 title
  0589:72 06c4          lofsa $06c4 // Camcorder Battery Strength
  058c:36                push 
  058d:45 0e 0a         callb procedure_000e a //  

  0590:32 0070            jmp code_0603 

        code_0593
  0593:7a               push2 
  0594:39 16            pushi 16 // $16 brRight
  0596:39 05            pushi 5 // $5 view
  0598:45 0e 04         callb procedure_000e 4 //  

  059b:32 0065            jmp code_0603 

        code_059e
  059e:3c                 dup 
  059f:35 03              ldi 3 
  05a1:1a                 eq? 
  05a2:30 000f            bnt code_05b4 
  05a5:38 008e          pushi 8e // $8e setScript
  05a8:78               push1 
  05a9:72 0380          lofsa $0380 // sUnplugCharger
  05ac:36                push 
  05ad:81 02              lag  
  05af:4a 06             send 6 

  05b1:32 004f            jmp code_0603 

        code_05b4
  05b4:3c                 dup 
  05b5:35 04              ldi 4 
  05b7:1a                 eq? 
  05b8:30 0029            bnt code_05e4 
  05bb:8f 02              lsp param2 
  05bd:3c                 dup 
  05be:35 00              ldi 0 
  05c0:1a                 eq? 
  05c1:30 000f            bnt code_05d3 
  05c4:38 008e          pushi 8e // $8e setScript
  05c7:78               push1 
  05c8:72 022c          lofsa $022c // sPlugCamcorder
  05cb:36                push 
  05cc:81 02              lag  
  05ce:4a 06             send 6 

  05d0:32 000d            jmp code_05e0 

        code_05d3
  05d3:38 010c          pushi 10c // $10c doVerb
  05d6:7a               push2 
  05d7:8f 01              lsp param1 
  05d9:8f 02              lsp param2 
  05db:59 03            &rest 3 
  05dd:57 2e 08         super View 8 


        code_05e0
  05e0:3a                toss 
  05e1:32 001f            jmp code_0603 

        code_05e4
  05e4:3c                 dup 
  05e5:35 0a              ldi a 
  05e7:1a                 eq? 
  05e8:30 000b            bnt code_05f6 
  05eb:7a               push2 
  05ec:39 16            pushi 16 // $16 brRight
  05ee:39 06            pushi 6 // $6 loop
  05f0:45 0e 04         callb procedure_000e 4 //  

  05f3:32 000d            jmp code_0603 

        code_05f6
  05f6:38 010c          pushi 10c // $10c doVerb
  05f9:7a               push2 
  05fa:8f 01              lsp param1 
  05fc:8f 02              lsp param2 
  05fe:59 03            &rest 3 
  0600:57 2e 08         super View 8 


        code_0603
  0603:3a                toss 
  0604:48                 ret 
  0605:00                bnot 
    )

)



