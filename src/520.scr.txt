(script 520)

(string
    string_060e "You are looking at \"The Hard Disk Cafe's\" exclusive paper membership tape reader. It controls admittance to the club."
    string_0684 "rm520"
    string_068a "sLobby"
    string_0691 "sCafe"
    string_0697 "sTapeout"
    string_06a0 "your tape"
    string_06aa "Your membership tape hangs from the machine's open lip."
    string_06e2 "tape"
    string_06e7 "sucking"
    string_06ef ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
)

// 0076
(instance publicrm520 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $60e
        picture $208
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $0
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:7a               push2 
  000f:38 0084          pushi 84 // $84 cycles
  0012:38 0102          pushi 102 // $102 syncStop
  0015:43 00 04         callk Load 4 

  0018:76               push0 
  0019:45 02 00         callb procedure_0002 0 //  

  001c:78               push1 
  001d:78               push1 
  001e:45 16 02         callb procedure_0016 2 //  

  0021:39 6b            pushi 6b // $6b init
  0023:76               push0 
  0024:57 72 04         super LLRoom 4 

  0027:39 69            pushi 69 // $69 hide
  0029:76               push0 
  002a:81 00              lag  
  002c:4a 04             send 4 

  002e:89 0c              lsg  
  0030:3c                 dup 
  0031:34 01fe            ldi 1fe 
  0034:1a                 eq? 
  0035:30 000d            bnt code_0045 
  0038:38 008e          pushi 8e // $8e setScript
  003b:78               push1 
  003c:72 026e          lofsa $026e // sLobby
  003f:36                push 
  0040:54 06             self 6 

  0042:32 000a            jmp code_004f 

        code_0045
  0045:38 008e          pushi 8e // $8e setScript
  0048:78               push1 
  0049:72 043a          lofsa $043a // sCafe
  004c:36                push 
  004d:54 06             self 6 


        code_004f
  004f:3a                toss 
  0050:48                 ret 
    )

    (method (doVerb) // method_0051
  0051:38 008e          pushi 8e // $8e setScript
  0054:39 03            pushi 3 // $3 y
  0056:72 050a          lofsa $050a // sTapeout
  0059:36                push 
  005a:76               push0 
  005b:89 0c              lsg  
  005d:54 0a             self a 

  005f:48                 ret 
    )

    (method (newRoom) // method_0060
  0060:78               push1 
  0061:76               push0 
  0062:45 16 02         callb procedure_0016 2 //  

  0065:38 0179          pushi 179 // $179 newRoom
  0068:78               push1 
  0069:8f 01              lsp param1 
  006b:57 72 06         super LLRoom 6 

  006e:48                 ret 
  006f:00                bnot 
    )

)

// 0268
(instance sLobby of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_00be
  00be:3f 02             link 2 // (var $2)
  00c0:87 01              lap param1 
  00c2:65 0a             aTop state 
  00c4:36                push 
  00c5:3c                 dup 
  00c6:35 00              ldi 0 
  00c8:1a                 eq? 
  00c9:30 001c            bnt code_00e8 
  00cc:38 00d5          pushi d5 // $d5 has
  00cf:78               push1 
  00d0:39 0e            pushi e // $e lsLeft
  00d2:81 00              lag  
  00d4:4a 06             send 6 

  00d6:18                 not 
  00d7:30 0007            bnt code_00e1 
  00da:67 0a             pTos state 
  00dc:35 02              ldi 2 
  00de:02                 add 
  00df:65 0a             aTop state 

        code_00e1
  00e1:35 02              ldi 2 
  00e3:65 10             aTop cycles 
  00e5:32 0178            jmp code_0260 

        code_00e8
  00e8:3c                 dup 
  00e9:35 01              ldi 1 
  00eb:1a                 eq? 
  00ec:30 0030            bnt code_011f 
  00ef:7a               push2 
  00f0:38 0208          pushi 208 // $208 skating
  00f3:76               push0 
  00f4:45 0e 04         callb procedure_000e 4 //  

  00f7:39 6b            pushi 6b // $6b init
  00f9:76               push0 
  00fa:38 0096          pushi 96 // $96 setCycle
  00fd:78               push1 
  00fe:51 1a            class End 
  0100:36                push 
  0101:38 011b          pushi 11b // $11b setMotion
  0104:39 04            pushi 4 // $4 x
  0106:51 1e            class MoveTo 
  0108:36                push 
  0109:38 0139          pushi 139 // $139 alterEgo
  010c:39 12            pushi 12 // $12 illegalBits
  010e:7c            pushSelf 
  010f:72 0562          lofsa $0562 // tape
  0112:4a 16             send 16 

  0114:39 2a            pushi 2a // $2a play
  0116:76               push0 
  0117:72 05e0          lofsa $05e0 // sucking
  011a:4a 04             send 4 

  011c:32 0141            jmp code_0260 

        code_011f
  011f:3c                 dup 
  0120:35 02              ldi 2 
  0122:1a                 eq? 
  0123:30 0007            bnt code_012d 
  0126:35 02              ldi 2 
  0128:65 12             aTop seconds 
  012a:32 0133            jmp code_0260 

        code_012d
  012d:3c                 dup 
  012e:35 03              ldi 3 
  0130:1a                 eq? 
  0131:30 005a            bnt code_018e 
  0134:38 00d5          pushi d5 // $d5 has
  0137:78               push1 
  0138:39 0e            pushi e // $e lsLeft
  013a:81 00              lag  
  013c:4a 06             send 6 

  013e:18                 not 
  013f:30 0023            bnt code_0165 
  0142:39 0b            pushi b // $b nsBottom
  0144:38 0208          pushi 208 // $208 skating
  0147:78               push1 
  0148:39 64            pushi 64 // $64 moveDone
  014a:39 4b            pushi 4b // $4b said
  014c:39 3c            pushi 3c // $3c doit
  014e:39 66            pushi 66 // $66 flags
  0150:89 88              lsg  
  0152:39 6a            pushi 6a // $6a new
  0154:38 0096          pushi 96 // $96 setCycle
  0157:39 69            pushi 69 // $69 hide
  0159:89 17              lsg  
  015b:43 1b 16         callk Display 16 

  015e:35 05              ldi 5 
  0160:65 12             aTop seconds 
  0162:32 00fb            jmp code_0260 

        code_0165
  0165:39 0c            pushi c // $c nsRight
  0167:38 0208          pushi 208 // $208 skating
  016a:7a               push2 
  016b:39 64            pushi 64 // $64 moveDone
  016d:39 4b            pushi 4b // $4b said
  016f:39 3c            pushi 3c // $3c doit
  0171:39 66            pushi 66 // $66 flags
  0173:89 88              lsg  
  0175:39 6a            pushi 6a // $6a new
  0177:38 0096          pushi 96 // $96 setCycle
  017a:39 69            pushi 69 // $69 hide
  017c:89 17              lsg  
  017e:39 6b            pushi 6b // $6b init
  0180:43 1b 18         callk Display 18 

  0183:a3 00              sal local0 
  0185:6b 0a            ipToa state 
  0187:35 03              ldi 3 
  0189:65 12             aTop seconds 
  018b:32 00d2            jmp code_0260 

        code_018e
  018e:3c                 dup 
  018f:35 04              ldi 4 
  0191:1a                 eq? 
  0192:30 001f            bnt code_01b4 
  0195:39 05            pushi 5 // $5 view
  0197:38 0208          pushi 208 // $208 skating
  019a:39 03            pushi 3 // $3 y
  019c:39 43            pushi 43 // $43 at
  019e:39 ff            pushi ff // $ff syncNum
  01a0:38 00b9          pushi b9 // $b9 bottom
  01a3:45 0e 0a         callb procedure_000e a //  

  01a6:38 0179          pushi 179 // $179 newRoom
  01a9:78               push1 
  01aa:38 01fe          pushi 1fe // $1fe bust
  01ad:81 02              lag  
  01af:4a 06             send 6 

  01b1:32 00ac            jmp code_0260 

        code_01b4
  01b4:3c                 dup 
  01b5:35 05              ldi 5 
  01b7:1a                 eq? 
  01b8:30 008d            bnt code_0248 
  01bb:76               push0 
  01bc:45 03 00         callb procedure_0003 0 //  

  01bf:39 20            pushi 20 // $20 state
  01c1:76               push0 
  01c2:39 43            pushi 43 // $43 at
  01c4:78               push1 
  01c5:39 0e            pushi e // $e lsLeft
  01c7:51 40            class Inv 
  01c9:4a 06             send 6 

  01cb:4a 04             send 4 

  01cd:36                push 
  01ce:3c                 dup 
  01cf:35 01              ldi 1 
  01d1:1a                 eq? 
  01d2:30 0020            bnt code_01f5 
  01d5:39 0b            pushi b // $b nsBottom
  01d7:38 0208          pushi 208 // $208 skating
  01da:39 04            pushi 4 // $4 x
  01dc:39 64            pushi 64 // $64 moveDone
  01de:39 4b            pushi 4b // $4b said
  01e0:39 48            pushi 48 // $48 syntaxFail
  01e2:39 66            pushi 66 // $66 flags
  01e4:89 88              lsg  
  01e6:39 6a            pushi 6a // $6a new
  01e8:38 0096          pushi 96 // $96 setCycle
  01eb:39 69            pushi 69 // $69 hide
  01ed:89 17              lsg  
  01ef:43 1b 16         callk Display 16 

  01f2:32 004b            jmp code_0240 

        code_01f5
  01f5:3c                 dup 
  01f6:35 02              ldi 2 
  01f8:1a                 eq? 
  01f9:30 0020            bnt code_021c 
  01fc:39 0b            pushi b // $b nsBottom
  01fe:38 0208          pushi 208 // $208 skating
  0201:39 05            pushi 5 // $5 view
  0203:39 64            pushi 64 // $64 moveDone
  0205:39 4b            pushi 4b // $4b said
  0207:39 48            pushi 48 // $48 syntaxFail
  0209:39 66            pushi 66 // $66 flags
  020b:89 88              lsg  
  020d:39 6a            pushi 6a // $6a new
  020f:38 0096          pushi 96 // $96 setCycle
  0212:39 69            pushi 69 // $69 hide
  0214:89 17              lsg  
  0216:43 1b 16         callk Display 16 

  0219:32 0024            jmp code_0240 

        code_021c
  021c:3c                 dup 
  021d:35 03              ldi 3 
  021f:1a                 eq? 
  0220:30 001d            bnt code_0240 
  0223:39 0b            pushi b // $b nsBottom
  0225:38 0208          pushi 208 // $208 skating
  0228:39 06            pushi 6 // $6 loop
  022a:39 64            pushi 64 // $64 moveDone
  022c:39 4b            pushi 4b // $4b said
  022e:39 48            pushi 48 // $48 syntaxFail
  0230:39 66            pushi 66 // $66 flags
  0232:89 88              lsg  
  0234:39 6a            pushi 6a // $6a new
  0236:38 0096          pushi 96 // $96 setCycle
  0239:39 69            pushi 69 // $69 hide
  023b:89 17              lsg  
  023d:43 1b 16         callk Display 16 


        code_0240
  0240:3a                toss 
  0241:35 05              ldi 5 
  0243:65 12             aTop seconds 
  0245:32 0018            jmp code_0260 

        code_0248
  0248:3c                 dup 
  0249:35 06              ldi 6 
  024b:1a                 eq? 
  024c:30 0011            bnt code_0260 
  024f:38 008e          pushi 8e // $8e setScript
  0252:39 03            pushi 3 // $3 y
  0254:72 050a          lofsa $050a // sTapeout
  0257:36                push 
  0258:76               push0 
  0259:38 01fe          pushi 1fe // $1fe bust
  025c:81 02              lag  
  025e:4a 0a             send a 


        code_0260
  0260:3a                toss 
  0261:48                 ret 
    )

)

// 0434
(instance sCafe of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_029c
  029c:3f 02             link 2 // (var $2)
  029e:87 01              lap param1 
  02a0:65 0a             aTop state 
  02a2:36                push 
  02a3:3c                 dup 
  02a4:35 00              ldi 0 
  02a6:1a                 eq? 
  02a7:30 0007            bnt code_02b1 
  02aa:35 02              ldi 2 
  02ac:65 10             aTop cycles 
  02ae:32 017b            jmp code_042c 

        code_02b1
  02b1:3c                 dup 
  02b2:35 01              ldi 1 
  02b4:1a                 eq? 
  02b5:30 0030            bnt code_02e8 
  02b8:7a               push2 
  02b9:38 0208          pushi 208 // $208 skating
  02bc:76               push0 
  02bd:45 0e 04         callb procedure_000e 4 //  

  02c0:39 6b            pushi 6b // $6b init
  02c2:76               push0 
  02c3:38 0096          pushi 96 // $96 setCycle
  02c6:78               push1 
  02c7:51 1a            class End 
  02c9:36                push 
  02ca:38 011b          pushi 11b // $11b setMotion
  02cd:39 04            pushi 4 // $4 x
  02cf:51 1e            class MoveTo 
  02d1:36                push 
  02d2:38 0139          pushi 139 // $139 alterEgo
  02d5:39 12            pushi 12 // $12 illegalBits
  02d7:7c            pushSelf 
  02d8:72 0562          lofsa $0562 // tape
  02db:4a 16             send 16 

  02dd:39 2a            pushi 2a // $2a play
  02df:76               push0 
  02e0:72 05e0          lofsa $05e0 // sucking
  02e3:4a 04             send 4 

  02e5:32 0144            jmp code_042c 

        code_02e8
  02e8:3c                 dup 
  02e9:35 02              ldi 2 
  02eb:1a                 eq? 
  02ec:30 0007            bnt code_02f6 
  02ef:35 02              ldi 2 
  02f1:65 12             aTop seconds 
  02f3:32 0136            jmp code_042c 

        code_02f6
  02f6:3c                 dup 
  02f7:35 03              ldi 3 
  02f9:1a                 eq? 
  02fa:30 0027            bnt code_0324 
  02fd:39 0c            pushi c // $c nsRight
  02ff:38 0208          pushi 208 // $208 skating
  0302:7a               push2 
  0303:39 64            pushi 64 // $64 moveDone
  0305:39 4b            pushi 4b // $4b said
  0307:39 3c            pushi 3c // $3c doit
  0309:39 66            pushi 66 // $66 flags
  030b:89 88              lsg  
  030d:39 6a            pushi 6a // $6a new
  030f:38 0096          pushi 96 // $96 setCycle
  0312:39 69            pushi 69 // $69 hide
  0314:89 17              lsg  
  0316:39 6b            pushi 6b // $6b init
  0318:43 1b 18         callk Display 18 

  031b:a3 00              sal local0 
  031d:35 03              ldi 3 
  031f:65 12             aTop seconds 
  0321:32 0108            jmp code_042c 

        code_0324
  0324:3c                 dup 
  0325:35 04              ldi 4 
  0327:1a                 eq? 
  0328:30 00a9            bnt code_03d4 
  032b:39 20            pushi 20 // $20 state
  032d:76               push0 
  032e:39 43            pushi 43 // $43 at
  0330:78               push1 
  0331:39 0e            pushi e // $e lsLeft
  0333:51 40            class Inv 
  0335:4a 06             send 6 

  0337:4a 04             send 4 

  0339:36                push 
  033a:3c                 dup 
  033b:35 01              ldi 1 
  033d:1a                 eq? 
  033e:30 0028            bnt code_0369 
  0341:39 0c            pushi c // $c nsRight
  0343:38 0208          pushi 208 // $208 skating
  0346:39 07            pushi 7 // $7 cel
  0348:39 64            pushi 64 // $64 moveDone
  034a:39 4b            pushi 4b // $4b said
  034c:39 48            pushi 48 // $48 syntaxFail
  034e:39 66            pushi 66 // $66 flags
  0350:89 88              lsg  
  0352:39 6a            pushi 6a // $6a new
  0354:38 0096          pushi 96 // $96 setCycle
  0357:39 69            pushi 69 // $69 hide
  0359:89 17              lsg  
  035b:39 6b            pushi 6b // $6b init
  035d:43 1b 18         callk Display 18 

  0360:a3 01              sal local1 
  0362:35 01              ldi 1 
  0364:65 1a             aTop register 
  0366:32 0063            jmp code_03cc 

        code_0369
  0369:3c                 dup 
  036a:35 02              ldi 2 
  036c:1a                 eq? 
  036d:30 002c            bnt code_039c 
  0370:76               push0 
  0371:45 03 00         callb procedure_0003 0 //  

  0374:7a               push2 
  0375:39 08            pushi 8 // $8 underBits
  0377:39 6f            pushi 6f // $6f isKindOf
  0379:45 0a 04         callb procedure_000a 4 //  

  037c:39 0b            pushi b // $b nsBottom
  037e:38 0208          pushi 208 // $208 skating
  0381:39 08            pushi 8 // $8 underBits
  0383:39 64            pushi 64 // $64 moveDone
  0385:39 4b            pushi 4b // $4b said
  0387:39 48            pushi 48 // $48 syntaxFail
  0389:39 66            pushi 66 // $66 flags
  038b:89 88              lsg  
  038d:39 6a            pushi 6a // $6a new
  038f:38 0096          pushi 96 // $96 setCycle
  0392:39 69            pushi 69 // $69 hide
  0394:89 17              lsg  
  0396:43 1b 16         callk Display 16 

  0399:32 0030            jmp code_03cc 

        code_039c
  039c:3c                 dup 
  039d:35 03              ldi 3 
  039f:1a                 eq? 
  03a0:30 0029            bnt code_03cc 
  03a3:76               push0 
  03a4:45 03 00         callb procedure_0003 0 //  

  03a7:7a               push2 
  03a8:39 0c            pushi c // $c nsRight
  03aa:39 6f            pushi 6f // $6f isKindOf
  03ac:45 0a 04         callb procedure_000a 4 //  

  03af:39 0b            pushi b // $b nsBottom
  03b1:38 0208          pushi 208 // $208 skating
  03b4:39 09            pushi 9 // $9 nsTop
  03b6:39 64            pushi 64 // $64 moveDone
  03b8:39 4b            pushi 4b // $4b said
  03ba:39 48            pushi 48 // $48 syntaxFail
  03bc:39 66            pushi 66 // $66 flags
  03be:89 88              lsg  
  03c0:39 6a            pushi 6a // $6a new
  03c2:38 0096          pushi 96 // $96 setCycle
  03c5:39 69            pushi 69 // $69 hide
  03c7:89 17              lsg  
  03c9:43 1b 16         callk Display 16 


        code_03cc
  03cc:3a                toss 
  03cd:35 05              ldi 5 
  03cf:65 12             aTop seconds 
  03d1:32 0058            jmp code_042c 

        code_03d4
  03d4:3c                 dup 
  03d5:35 05              ldi 5 
  03d7:1a                 eq? 
  03d8:30 0039            bnt code_0414 
  03db:63 1a             pToa register 
  03dd:30 002d            bnt code_040d 
  03e0:76               push0 
  03e1:40 0153 00        call proc_0538 0 

  03e5:39 0b            pushi b // $b nsBottom
  03e7:38 0208          pushi 208 // $208 skating
  03ea:39 0a            pushi a // $a nsLeft
  03ec:39 64            pushi 64 // $64 moveDone
  03ee:39 4b            pushi 4b // $4b said
  03f0:39 48            pushi 48 // $48 syntaxFail
  03f2:39 66            pushi 66 // $66 flags
  03f4:89 88              lsg  
  03f6:39 6a            pushi 6a // $6a new
  03f8:38 0096          pushi 96 // $96 setCycle
  03fb:39 69            pushi 69 // $69 hide
  03fd:89 17              lsg  
  03ff:43 1b 16         callk Display 16 

  0402:76               push0 
  0403:45 03 00         callb procedure_0003 0 //  

  0406:35 06              ldi 6 
  0408:65 12             aTop seconds 
  040a:32 001f            jmp code_042c 

        code_040d
  040d:35 01              ldi 1 
  040f:65 10             aTop cycles 
  0411:32 0018            jmp code_042c 

        code_0414
  0414:3c                 dup 
  0415:35 06              ldi 6 
  0417:1a                 eq? 
  0418:30 0011            bnt code_042c 
  041b:38 008e          pushi 8e // $8e setScript
  041e:39 03            pushi 3 // $3 y
  0420:72 050a          lofsa $050a // sTapeout
  0423:36                push 
  0424:76               push0 
  0425:38 020d          pushi 20d // $20d entranceTo
  0428:81 02              lag  
  042a:4a 0a             send a 


        code_042c
  042c:3a                toss 
  042d:48                 ret 
    )

)

// 0504
(instance sTapeout of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0468
  0468:87 01              lap param1 
  046a:65 0a             aTop state 
  046c:36                push 
  046d:3c                 dup 
  046e:35 00              ldi 0 
  0470:1a                 eq? 
  0471:30 0077            bnt code_04eb 
  0474:39 20            pushi 20 // $20 state
  0476:76               push0 
  0477:39 43            pushi 43 // $43 at
  0479:78               push1 
  047a:39 0e            pushi e // $e lsLeft
  047c:51 40            class Inv 
  047e:4a 06             send 6 

  0480:4a 04             send 4 

  0482:36                push 
  0483:35 01              ldi 1 
  0485:1e                 gt? 
  0486:30 003d            bnt code_04c6 
  0489:89 0c              lsg  
  048b:34 020d            ldi 20d 
  048e:1a                 eq? 
  048f:30 0034            bnt code_04c6 
  0492:7a               push2 
  0493:38 0208          pushi 208 // $208 skating
  0496:39 0b            pushi b // $b nsBottom
  0498:45 0e 04         callb procedure_000e 4 //  

  049b:7a               push2 
  049c:38 0208          pushi 208 // $208 skating
  049f:39 0c            pushi c // $c nsRight
  04a1:45 0e 04         callb procedure_000e 4 //  

  04a4:39 20            pushi 20 // $20 state
  04a6:78               push1 
  04a7:39 04            pushi 4 // $4 x
  04a9:39 43            pushi 43 // $43 at
  04ab:78               push1 
  04ac:39 0e            pushi e // $e lsLeft
  04ae:51 40            class Inv 
  04b0:4a 06             send 6 

  04b2:4a 06             send 6 

  04b4:38 0148          pushi 148 // $148 put
  04b7:7a               push2 
  04b8:39 0e            pushi e // $e lsLeft
  04ba:76               push0 
  04bb:81 00              lag  
  04bd:4a 08             send 8 

  04bf:35 01              ldi 1 
  04c1:65 10             aTop cycles 
  04c3:32 0036            jmp code_04fc 

        code_04c6
  04c6:39 2a            pushi 2a // $2a play
  04c8:76               push0 
  04c9:72 05e0          lofsa $05e0 // sucking
  04cc:4a 04             send 4 

  04ce:38 0096          pushi 96 // $96 setCycle
  04d1:78               push1 
  04d2:51 1b            class Beg 
  04d4:36                push 
  04d5:38 011b          pushi 11b // $11b setMotion
  04d8:39 04            pushi 4 // $4 x
  04da:51 1e            class MoveTo 
  04dc:36                push 
  04dd:38 012e          pushi 12e // $12e ignoreControl
  04e0:39 37            pushi 37 // $37 yStep
  04e2:7c            pushSelf 
  04e3:72 0562          lofsa $0562 // tape
  04e6:4a 12             send 12 

  04e8:32 0011            jmp code_04fc 

        code_04eb
  04eb:3c                 dup 
  04ec:35 01              ldi 1 
  04ee:1a                 eq? 
  04ef:30 000a            bnt code_04fc 
  04f2:38 0179          pushi 179 // $179 newRoom
  04f5:78               push1 
  04f6:67 1a             pTos register 
  04f8:81 02              lag  
  04fa:4a 06             send 6 


        code_04fc
  04fc:3a                toss 
  04fd:48                 ret 
    )

)

// 055c
(instance tape of Actor
    (properties
        x $12e
        y $37
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $6a0
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $6aa
        yStep $2
        view $208
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $7810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $14
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
)

// 05da
(instance sucking of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $102
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)



(procedure proc_0538
  0538:39 04            pushi 4 // $4 x
  053a:38 0208          pushi 208 // $208 skating
  053d:39 0d            pushi d // $d lsTop
  053f:39 6c            pushi 6c // $6c dispose
  0541:8b 00              lsl local0 
  0543:43 1b 08         callk Display 8 

  0546:39 04            pushi 4 // $4 x
  0548:38 0208          pushi 208 // $208 skating
  054b:39 0d            pushi d // $d lsTop
  054d:39 6c            pushi 6c // $6c dispose
  054f:8b 01              lsl local1 
  0551:43 1b 08         callk Display 8 

  0554:48                 ret 
  0555:00                bnot 
)

