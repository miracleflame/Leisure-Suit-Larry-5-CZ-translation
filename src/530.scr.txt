(script 530)

(string
    string_155e "Now you understand why this is such an exclusive room. It's quiet, lovely and private."
    string_15b5 "rm530"
    string_15bb "sTalk"
    string_15c1 "her ice cream"
    string_15cf "iceCream"
    string_15d8 "the couple"
    string_15e3 "extra1"
    string_15ea "extra2"
    string_15f1 "extra3"
    string_15f8 "extra4"
    string_15ff "extra5"
    string_1606 "her"
    string_160a "michelle"
    string_1613 "your chair"
    string_161e "It's the only place you've got to sit. And you like it!"
    string_1656 "chair"
    string_165c "the cactus"
    string_1667 "Isn't it funny how this cactus blooms when none of the others do."
    string_16a9 "cactus"
    string_16b0 "the table"
    string_16ba "Here's another couple having a wonderful evening while you wander around all alone again!"
    string_1714 "table1"
    string_171b "Here's another couple having a wonderful evening while you wander around New York City all alone!"
    string_177d "table2"
    string_1784 "table3"
    string_178b "A breathtakingly beautiful black woman sits alone at a booth, playing slowly and sensually with her dessert. It's Michelle Milken. You've found her, Larry!"
    string_1827 "theTable"
    string_1830 "the serving cart"
    string_1841 "It looks like this cart is the only table available."
    string_1876 "cart"
    string_187b "the lamp"
    string_1884 "It casts an even illumination."
    string_18a3 "light"
    string_18a9 "sEnter"
    string_18b0 "sCloseCurtain"
    string_18be "sDoMichelle"
    string_18ca "sMichelleEating"
    string_18da "sOpenCurtain"
    string_18e7 "the curtain"
    string_18f3 "drape1"
    string_18fa "drape2"
    string_1901 "drape3"
    string_1908 "drape4"
    string_190f "Michelle Milken"
    string_191f "talkerBust"
    string_192a "talkerEyes"
    string_1935 "talkerMouth"
    string_1941 ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
)

// 0282
(instance publicrm530 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $155e
        picture $212
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $20d
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 03            pushi 3 // $3 y
  0010:38 0080          pushi 80 // $80 indexOf
  0013:38 0213          pushi 213 // $213 moveToX
  0016:38 05fa          pushi 5fa // $5fa sel_1530
  0019:46 03be 0000 06  calle 3be procedure_0000 6 //  

  001f:39 6b            pushi 6b // $6b init
  0021:76               push0 
  0022:57 72 04         super LLRoom 4 

  0025:38 0176          pushi 176 // $176 addObstacle
  0028:39 03            pushi 3 // $3 y
  002a:39 22            pushi 22 // $22 type
  002c:78               push1 
  002d:7a               push2 
  002e:39 6b            pushi 6b // $6b init
  0030:39 1c            pushi 1c // $1c color
  0032:76               push0 
  0033:76               push0 
  0034:38 013f          pushi 13f // $13f inputLineAddr
  0037:76               push0 
  0038:38 013f          pushi 13f // $13f inputLineAddr
  003b:38 00bd          pushi bd // $bd maskView
  003e:38 00ef          pushi ef // $ef lastBumped
  0041:38 00bd          pushi bd // $bd maskView
  0044:38 00ff          pushi ff // $ff syncNum
  0047:38 0094          pushi 94 // $94 lastTime
  004a:38 00d0          pushi d0 // $d0 prevIcon
  004d:39 7b            pushi 7b // $7b last
  004f:38 00b7          pushi b7 // $b7 top
  0052:39 78            pushi 78 // $78 isEmpty
  0054:38 00a6          pushi a6 // $a6 playBed
  0057:39 6a            pushi 6a // $6a new
  0059:39 5c            pushi 5c // $5c dataInc
  005b:39 6a            pushi 6a // $6a new
  005d:39 35            pushi 35 // $35 b-incr
  005f:38 008a          pushi 8a // $8a script
  0062:39 37            pushi 37 // $37 yStep
  0064:38 009f          pushi 9f // $9f fade
  0067:38 0080          pushi 80 // $80 indexOf
  006a:38 00aa          pushi aa // $aa setSize
  006d:38 0081          pushi 81 // $81 handleEvent
  0070:38 00bd          pushi bd // $bd maskView
  0073:76               push0 
  0074:38 00bd          pushi bd // $bd maskView
  0077:39 72            pushi 72 // $72 yourself
  0079:76               push0 
  007a:39 6a            pushi 6a // $6a new
  007c:76               push0 
  007d:51 23            class Polygon 
  007f:4a 04             send 4 

  0081:4a 46             send 46 

  0083:36                push 
  0084:39 22            pushi 22 // $22 type
  0086:78               push1 
  0087:7a               push2 
  0088:39 6b            pushi 6b // $6b init
  008a:39 0c            pushi c // $c nsRight
  008c:38 00af          pushi af // $af checkState
  008f:38 008d          pushi 8d // $8d cue
  0092:38 00cb          pushi cb // $cb height
  0095:38 0089          pushi 89 // $89 register
  0098:38 00e2          pushi e2 // $e2 setTarget
  009b:38 008d          pushi 8d // $8d cue
  009e:38 00f9          pushi f9 // $f9 motionInited
  00a1:38 009a          pushi 9a // $9a prevSignal
  00a4:38 00ec          pushi ec // $ec pickLoop
  00a7:38 00a3          pushi a3 // $a3 send
  00aa:38 00dc          pushi dc // $dc cycler
  00ad:38 00a6          pushi a6 // $a6 playBed
  00b0:39 72            pushi 72 // $72 yourself
  00b2:76               push0 
  00b3:39 6a            pushi 6a // $6a new
  00b5:76               push0 
  00b6:51 23            class Polygon 
  00b8:4a 04             send 4 

  00ba:4a 26             send 26 

  00bc:36                push 
  00bd:39 22            pushi 22 // $22 type
  00bf:78               push1 
  00c0:7a               push2 
  00c1:39 6b            pushi 6b // $6b init
  00c3:39 0a            pushi a // $a nsLeft
  00c5:38 00ca          pushi ca // $ca noClickHelp
  00c8:38 00a0          pushi a0 // $a0 mute
  00cb:38 00bb          pushi bb // $bb setCursor
  00ce:38 00a8          pushi a8 // $a8 select
  00d1:38 00a1          pushi a1 // $a1 setVol
  00d4:38 00a3          pushi a3 // $a3 send
  00d7:38 0096          pushi 96 // $96 setCycle
  00da:38 0099          pushi 99 // $99 timeLeft
  00dd:38 00bb          pushi bb // $bb setCursor
  00e0:38 0099          pushi 99 // $99 timeLeft
  00e3:39 72            pushi 72 // $72 yourself
  00e5:76               push0 
  00e6:39 6a            pushi 6a // $6a new
  00e8:76               push0 
  00e9:51 23            class Polygon 
  00eb:4a 04             send 4 

  00ed:4a 22             send 22 

  00ef:36                push 
  00f0:54 0a             self a 

  00f2:39 6b            pushi 6b // $6b init
  00f4:76               push0 
  00f5:38 011d          pushi 11d // $11d stopUpd
  00f8:76               push0 
  00f9:72 1074          lofsa $1074 // drape1
  00fc:4a 08             send 8 

  00fe:39 6b            pushi 6b // $6b init
  0100:76               push0 
  0101:38 011d          pushi 11d // $11d stopUpd
  0104:76               push0 
  0105:72 11aa          lofsa $11aa // drape2
  0108:4a 08             send 8 

  010a:39 6b            pushi 6b // $6b init
  010c:76               push0 
  010d:38 011d          pushi 11d // $11d stopUpd
  0110:76               push0 
  0111:72 12c0          lofsa $12c0 // drape3
  0114:4a 08             send 8 

  0116:39 6b            pushi 6b // $6b init
  0118:76               push0 
  0119:72 06ae          lofsa $06ae // cactus
  011c:4a 04             send 4 

  011e:39 6b            pushi 6b // $6b init
  0120:76               push0 
  0121:72 0aa2          lofsa $0aa2 // cart
  0124:4a 04             send 4 

  0126:39 6b            pushi 6b // $6b init
  0128:76               push0 
  0129:72 0af8          lofsa $0af8 // light
  012c:4a 04             send 4 

  012e:39 6b            pushi 6b // $6b init
  0130:76               push0 
  0131:72 0a3a          lofsa $0a3a // theTable
  0134:4a 04             send 4 

  0136:39 6b            pushi 6b // $6b init
  0138:76               push0 
  0139:72 0642          lofsa $0642 // chair
  013c:4a 04             send 4 

  013e:39 6b            pushi 6b // $6b init
  0140:76               push0 
  0141:72 03da          lofsa $03da // iceCream
  0144:4a 04             send 4 

  0146:89 0c              lsg  
  0148:34 0217            ldi 217 
  014b:1c                 ne? 
  014c:30 0083            bnt code_01d2 
  014f:39 6b            pushi 6b // $6b init
  0151:76               push0 
  0152:72 075c          lofsa $075c // table1
  0155:4a 04             send 4 

  0157:39 6b            pushi 6b // $6b init
  0159:76               push0 
  015a:72 080a          lofsa $080a // table2
  015d:4a 04             send 4 

  015f:39 6b            pushi 6b // $6b init
  0161:76               push0 
  0162:72 08ae          lofsa $08ae // table3
  0165:4a 04             send 4 

  0167:39 6b            pushi 6b // $6b init
  0169:76               push0 
  016a:72 0422          lofsa $0422 // extra1
  016d:4a 04             send 4 

  016f:39 6b            pushi 6b // $6b init
  0171:76               push0 
  0172:72 046a          lofsa $046a // extra2
  0175:4a 04             send 4 

  0177:39 6b            pushi 6b // $6b init
  0179:76               push0 
  017a:72 04b2          lofsa $04b2 // extra3
  017d:4a 04             send 4 

  017f:39 6b            pushi 6b // $6b init
  0181:76               push0 
  0182:72 04fa          lofsa $04fa // extra4
  0185:4a 04             send 4 

  0187:39 6b            pushi 6b // $6b init
  0189:76               push0 
  018a:72 0542          lofsa $0542 // extra5
  018d:4a 04             send 4 

  018f:39 6b            pushi 6b // $6b init
  0191:76               push0 
  0192:38 020a          pushi 20a // $20a normalize
  0195:76               push0 
  0196:38 011c          pushi 11c // $11c posn
  0199:7a               push2 
  019a:38 0097          pushi 97 // $97 setReal
  019d:38 00ea          pushi ea // $ea obstacles
  01a0:38 0146          pushi 146 // $146 edgeHit
  01a3:78               push1 
  01a4:76               push0 
  01a5:81 00              lag  
  01a7:4a 16             send 16 

  01a9:39 6b            pushi 6b // $6b init
  01ab:76               push0 
  01ac:38 008e          pushi 8e // $8e setScript
  01af:78               push1 
  01b0:72 0ed8          lofsa $0ed8 // sMichelleEating
  01b3:36                push 
  01b4:72 059c          lofsa $059c // michelle
  01b7:4a 0a             send a 

  01b9:39 6b            pushi 6b // $6b init
  01bb:76               push0 
  01bc:38 011d          pushi 11d // $11d stopUpd
  01bf:76               push0 
  01c0:72 133e          lofsa $133e // drape4
  01c3:4a 08             send 8 

  01c5:38 008e          pushi 8e // $8e setScript
  01c8:78               push1 
  01c9:72 0bf6          lofsa $0bf6 // sEnter
  01cc:36                push 
  01cd:54 06             self 6 

  01cf:32 007b            jmp code_024d 

        code_01d2
  01d2:39 6b            pushi 6b // $6b init
  01d4:76               push0 
  01d5:72 059c          lofsa $059c // michelle
  01d8:4a 04             send 4 

  01da:39 6b            pushi 6b // $6b init
  01dc:76               push0 
  01dd:39 05            pushi 5 // $5 view
  01df:78               push1 
  01e0:38 0213          pushi 213 // $213 moveToX
  01e3:38 00a2          pushi a2 // $a2 setLoop
  01e6:78               push1 
  01e7:78               push1 
  01e8:38 011c          pushi 11c // $11c posn
  01eb:7a               push2 
  01ec:38 0104          pushi 104 // $104 gx
  01ef:38 008f          pushi 8f // $8f port
  01f2:38 0120          pushi 120 // $120 setCel
  01f5:78               push1 
  01f6:38 00ff          pushi ff // $ff syncNum
  01f9:38 0096          pushi 96 // $96 setCycle
  01fc:78               push1 
  01fd:76               push0 
  01fe:81 00              lag  
  0200:4a 24             send 24 

  0202:78               push1 
  0203:39 10            pushi 10 // $10 lsRight
  0205:45 06 02         callb procedure_0006 2 //  

  0208:18                 not 
  0209:30 0024            bnt code_0230 
  020c:78               push1 
  020d:39 10            pushi 10 // $10 lsRight
  020f:45 07 02         callb procedure_0007 2 //  

  0212:39 6b            pushi 6b // $6b init
  0214:76               push0 
  0215:38 0120          pushi 120 // $120 setCel
  0218:78               push1 
  0219:76               push0 
  021a:38 011d          pushi 11d // $11d stopUpd
  021d:76               push0 
  021e:72 133e          lofsa $133e // drape4
  0221:4a 0e             send e 

  0223:38 008e          pushi 8e // $8e setScript
  0226:78               push1 
  0227:72 0cb6          lofsa $0cb6 // sCloseCurtain
  022a:36                push 
  022b:54 06             self 6 

  022d:32 001d            jmp code_024d 

        code_0230
  0230:39 6b            pushi 6b // $6b init
  0232:76               push0 
  0233:38 0120          pushi 120 // $120 setCel
  0236:78               push1 
  0237:38 00ff          pushi ff // $ff syncNum
  023a:38 011d          pushi 11d // $11d stopUpd
  023d:76               push0 
  023e:72 133e          lofsa $133e // drape4
  0241:4a 0e             send e 

  0243:38 008e          pushi 8e // $8e setScript
  0246:78               push1 
  0247:72 0f64          lofsa $0f64 // sOpenCurtain
  024a:36                push 
  024b:54 06             self 6 


        code_024d
  024d:39 3c            pushi 3c // $3c doit
  024f:76               push0 
  0250:81 0a              lag  
  0252:4a 04             send 4 

  0254:39 2b            pushi 2b // $2b number
  0256:76               push0 
  0257:81 66              lag  
  0259:4a 04             send 4 

  025b:36                push 
  025c:34 0217            ldi 217 
  025f:1c                 ne? 
  0260:30 0017            bnt code_027a 
  0263:39 2b            pushi 2b // $2b number
  0265:78               push1 
  0266:38 0217          pushi 217 // $217 closeScript
  0269:38 00a2          pushi a2 // $a2 setLoop
  026c:78               push1 
  026d:39 ff            pushi ff // $ff syncNum
  026f:39 66            pushi 66 // $66 flags
  0271:78               push1 
  0272:78               push1 
  0273:39 2a            pushi 2a // $2a play
  0275:76               push0 
  0276:81 66              lag  
  0278:4a 16             send 16 


        code_027a
  027a:48                 ret 
  027b:00                bnot 
    )

)

// 039e
(instance sTalk of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_02c2
  02c2:87 01              lap param1 
  02c4:65 0a             aTop state 
  02c6:36                push 
  02c7:3c                 dup 
  02c8:35 00              ldi 0 
  02ca:1a                 eq? 
  02cb:30 005a            bnt code_0328 
  02ce:67 1a             pTos register 
  02d0:3c                 dup 
  02d1:35 00              ldi 0 
  02d3:1a                 eq? 
  02d4:30 0016            bnt code_02ed 
  02d7:39 06            pushi 6 // $6 loop
  02d9:72 13c2          lofsa $13c2 // Michelle Milken
  02dc:36                push 
  02dd:38 0212          pushi 212 // $212 forceOpen
  02e0:76               push0 
  02e1:39 6c            pushi 6c // $6c dispose
  02e3:38 008b          pushi 8b // $8b caller
  02e6:7c            pushSelf 
  02e7:45 12 0c         callb procedure_0012 c //  

  02ea:32 0037            jmp code_0324 

        code_02ed
  02ed:3c                 dup 
  02ee:35 01              ldi 1 
  02f0:1a                 eq? 
  02f1:30 0016            bnt code_030a 
  02f4:39 06            pushi 6 // $6 loop
  02f6:72 13c2          lofsa $13c2 // Michelle Milken
  02f9:36                push 
  02fa:38 0212          pushi 212 // $212 forceOpen
  02fd:78               push1 
  02fe:39 6c            pushi 6c // $6c dispose
  0300:38 008b          pushi 8b // $8b caller
  0303:7c            pushSelf 
  0304:45 12 0c         callb procedure_0012 c //  

  0307:32 001a            jmp code_0324 

        code_030a
  030a:3c                 dup 
  030b:35 02              ldi 2 
  030d:1a                 eq? 
  030e:30 0013            bnt code_0324 
  0311:39 06            pushi 6 // $6 loop
  0313:72 13c2          lofsa $13c2 // Michelle Milken
  0316:36                push 
  0317:38 0212          pushi 212 // $212 forceOpen
  031a:7a               push2 
  031b:39 6c            pushi 6c // $6c dispose
  031d:38 008b          pushi 8b // $8b caller
  0320:7c            pushSelf 
  0321:45 12 0c         callb procedure_0012 c //  


        code_0324
  0324:3a                toss 
  0325:32 006e            jmp code_0396 

        code_0328
  0328:3c                 dup 
  0329:35 01              ldi 1 
  032b:1a                 eq? 
  032c:30 0067            bnt code_0396 
  032f:67 1a             pTos register 
  0331:3c                 dup 
  0332:35 00              ldi 0 
  0334:1a                 eq? 
  0335:30 0019            bnt code_0351 
  0338:39 05            pushi 5 // $5 view
  033a:38 0212          pushi 212 // $212 forceOpen
  033d:39 03            pushi 3 // $3 y
  033f:39 43            pushi 43 // $43 at
  0341:39 ff            pushi ff // $ff syncNum
  0343:38 00b9          pushi b9 // $b9 bottom
  0346:45 0e 0a         callb procedure_000e a //  

  0349:39 6c            pushi 6c // $6c dispose
  034b:76               push0 
  034c:54 04             self 4 

  034e:32 0044            jmp code_0395 

        code_0351
  0351:3c                 dup 
  0352:35 01              ldi 1 
  0354:1a                 eq? 
  0355:30 0019            bnt code_0371 
  0358:39 05            pushi 5 // $5 view
  035a:38 0212          pushi 212 // $212 forceOpen
  035d:39 04            pushi 4 // $4 x
  035f:39 43            pushi 43 // $43 at
  0361:39 ff            pushi ff // $ff syncNum
  0363:38 00b9          pushi b9 // $b9 bottom
  0366:45 0e 0a         callb procedure_000e a //  

  0369:39 6c            pushi 6c // $6c dispose
  036b:76               push0 
  036c:54 04             self 4 

  036e:32 0024            jmp code_0395 

        code_0371
  0371:3c                 dup 
  0372:35 02              ldi 2 
  0374:1a                 eq? 
  0375:30 001d            bnt code_0395 
  0378:39 05            pushi 5 // $5 view
  037a:38 0212          pushi 212 // $212 forceOpen
  037d:39 05            pushi 5 // $5 view
  037f:39 43            pushi 43 // $43 at
  0381:39 ff            pushi ff // $ff syncNum
  0383:38 00b9          pushi b9 // $b9 bottom
  0386:45 0e 0a         callb procedure_000e a //  

  0389:38 008e          pushi 8e // $8e setScript
  038c:78               push1 
  038d:72 0da8          lofsa $0da8 // sDoMichelle
  0390:36                push 
  0391:81 02              lag  
  0393:4a 06             send 6 


        code_0395
  0395:3a                toss 

        code_0396
  0396:3a                toss 
  0397:48                 ret 
    )

)

// 03d4
(instance iceCream of PicView
    (properties
        x $f4
        y $6d
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15c1
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $5
        priority $ffff
        signal $1800
        palette $0
    )
)

// 041c
(instance extra1 of PicView
    (properties
        x $3f
        y $59
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15d8
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $1
        priority $5
        signal $1810
        palette $0
    )
)

// 0464
(instance extra2 of PicView
    (properties
        x $50
        y $58
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15d8
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $2
        priority $5
        signal $1810
        palette $0
    )
)

// 04ac
(instance extra3 of PicView
    (properties
        x $b8
        y $58
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15d8
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $0
        priority $4
        signal $1810
        palette $0
    )
)

// 04f4
(instance extra4 of PicView
    (properties
        x $77
        y $4e
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15d8
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $3
        priority $4
        signal $1810
        palette $0
    )
)

// 053c
(instance extra5 of PicView
    (properties
        x $8c
        y $4d
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $15d8
        sightAngle $5a
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        view $212
        loop $6
        cel $4
        priority $5
        signal $1810
        palette $0
    )
)

// 0596
(instance michelle of Prop
    (properties
        x $ed
        y $8f
        z $28
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $1606
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $212
        loop $5
        cel $0
        priority $1
        underBits $0
        signal $810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0582
  0582:38 010c          pushi 10c // $10c doVerb
  0585:7a               push2 
  0586:8f 01              lsp param1 
  0588:8f 02              lsp param2 
  058a:72 0a3a          lofsa $0a3a // theTable
  058d:4a 08             send 8 

  058f:48                 ret 
    )

)

// 063c
(instance chair of Feature
    (properties
        x $b3
        y $90
        z $0
        heading $0
        noun $0
        nsTop $7e
        nsLeft $a2
        nsBottom $a3
        nsRight $c4
        description $1613
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $161e
    )
    (method (doVerb) // method_05fe
  05fe:8f 01              lsp param1 
  0600:3c                 dup 
  0601:35 03              ldi 3 
  0603:1a                 eq? 
  0604:30 000c            bnt code_0613 
  0607:7a               push2 
  0608:38 0212          pushi 212 // $212 forceOpen
  060b:39 06            pushi 6 // $6 loop
  060d:45 0e 04         callb procedure_000e 4 //  

  0610:32 0020            jmp code_0633 

        code_0613
  0613:3c                 dup 
  0614:35 01              ldi 1 
  0616:1a                 eq? 
  0617:30 000c            bnt code_0626 
  061a:7a               push2 
  061b:38 0212          pushi 212 // $212 forceOpen
  061e:39 07            pushi 7 // $7 cel
  0620:45 0e 04         callb procedure_000e 4 //  

  0623:32 000d            jmp code_0633 

        code_0626
  0626:38 010c          pushi 10c // $10c doVerb
  0629:7a               push2 
  062a:8f 01              lsp param1 
  062c:8f 02              lsp param2 
  062e:59 03            &rest 3 
  0630:57 2c 08         super Feature 8 


        code_0633
  0633:3a                toss 
  0634:48                 ret 
  0635:00                bnot 
    )

)

// 06a8
(instance cactus of Feature
    (properties
        x $5b
        y $8f
        z $0
        heading $0
        noun $0
        nsTop $6b
        nsLeft $2b
        nsBottom $b4
        nsRight $8c
        description $165c
        sightAngle $28
        actions $0
        onMeCheck $4
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1667
    )
    (method (doVerb) // method_067a
  067a:8f 01              lsp param1 
  067c:3c                 dup 
  067d:35 03              ldi 3 
  067f:1a                 eq? 
  0680:30 000f            bnt code_0692 
  0683:39 03            pushi 3 // $3 y
  0685:89 00              lsg  
  0687:38 0212          pushi 212 // $212 forceOpen
  068a:39 08            pushi 8 // $8 underBits
  068c:45 12 06         callb procedure_0012 6 //  

  068f:32 000d            jmp code_069f 

        code_0692
  0692:38 010c          pushi 10c // $10c doVerb
  0695:7a               push2 
  0696:8f 01              lsp param1 
  0698:8f 02              lsp param2 
  069a:59 03            &rest 3 
  069c:57 2c 08         super Feature 8 


        code_069f
  069f:3a                toss 
  06a0:48                 ret 
  06a1:00                bnot 
    )

)

// 0756
(instance table1 of Feature
    (properties
        x $43
        y $5f
        z $0
        heading $0
        noun $0
        nsTop $49
        nsLeft $2d
        nsBottom $6b
        nsRight $5a
        description $16b0
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $16ba
    )
    (method (doVerb) // method_06e6
  06e6:8f 01              lsp param1 
  06e8:3c                 dup 
  06e9:35 03              ldi 3 
  06eb:1a                 eq? 
  06ec:30 000c            bnt code_06fb 
  06ef:7a               push2 
  06f0:38 0212          pushi 212 // $212 forceOpen
  06f3:39 09            pushi 9 // $9 nsTop
  06f5:45 0e 04         callb procedure_000e 4 //  

  06f8:32 0052            jmp code_074d 

        code_06fb
  06fb:3c                 dup 
  06fc:35 05              ldi 5 
  06fe:1a                 eq? 
  06ff:30 003e            bnt code_0740 
  0702:83 01              lal local1 
  0704:18                 not 
  0705:30 002a            bnt code_0732 
  0708:76               push0 
  0709:45 02 00         callb procedure_0002 0 //  

  070c:39 06            pushi 6 // $6 loop
  070e:89 00              lsg  
  0710:38 0212          pushi 212 // $212 forceOpen
  0713:39 0a            pushi a // $a nsLeft
  0715:39 43            pushi 43 // $43 at
  0717:39 ff            pushi ff // $ff syncNum
  0719:38 00b9          pushi b9 // $b9 bottom
  071c:45 12 0c         callb procedure_0012 c //  

  071f:39 04            pushi 4 // $4 x
  0721:38 0212          pushi 212 // $212 forceOpen
  0724:39 0b            pushi b // $b nsBottom
  0726:39 6c            pushi 6c // $6c dispose
  0728:72 1074          lofsa $1074 // drape1
  072b:36                push 
  072c:45 0e 08         callb procedure_000e 8 //  

  072f:32 001b            jmp code_074d 

        code_0732
  0732:38 010c          pushi 10c // $10c doVerb
  0735:7a               push2 
  0736:8f 01              lsp param1 
  0738:8f 02              lsp param2 
  073a:57 2c 08         super Feature 8 

  073d:32 000d            jmp code_074d 

        code_0740
  0740:38 010c          pushi 10c // $10c doVerb
  0743:7a               push2 
  0744:8f 01              lsp param1 
  0746:8f 02              lsp param2 
  0748:59 03            &rest 3 
  074a:57 2c 08         super Feature 8 


        code_074d
  074d:3a                toss 
  074e:48                 ret 
  074f:00                bnot 
    )

)

// 0804
(instance table2 of Feature
    (properties
        x $84
        y $c3
        z $0
        heading $0
        noun $0
        nsTop $3c
        nsLeft $6d
        nsBottom $5c
        nsRight $9b
        description $16b0
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $171b
    )
    (method (doVerb) // method_0794
  0794:8f 01              lsp param1 
  0796:3c                 dup 
  0797:35 03              ldi 3 
  0799:1a                 eq? 
  079a:30 000c            bnt code_07a9 
  079d:7a               push2 
  079e:38 0212          pushi 212 // $212 forceOpen
  07a1:39 09            pushi 9 // $9 nsTop
  07a3:45 0e 04         callb procedure_000e 4 //  

  07a6:32 0052            jmp code_07fb 

        code_07a9
  07a9:3c                 dup 
  07aa:35 05              ldi 5 
  07ac:1a                 eq? 
  07ad:30 003e            bnt code_07ee 
  07b0:83 02              lal local2 
  07b2:18                 not 
  07b3:30 002a            bnt code_07e0 
  07b6:76               push0 
  07b7:45 02 00         callb procedure_0002 0 //  

  07ba:39 06            pushi 6 // $6 loop
  07bc:89 00              lsg  
  07be:38 0212          pushi 212 // $212 forceOpen
  07c1:39 0c            pushi c // $c nsRight
  07c3:39 43            pushi 43 // $43 at
  07c5:39 ff            pushi ff // $ff syncNum
  07c7:38 00b9          pushi b9 // $b9 bottom
  07ca:45 12 0c         callb procedure_0012 c //  

  07cd:39 04            pushi 4 // $4 x
  07cf:38 0212          pushi 212 // $212 forceOpen
  07d2:39 0d            pushi d // $d lsTop
  07d4:39 6c            pushi 6c // $6c dispose
  07d6:72 11aa          lofsa $11aa // drape2
  07d9:36                push 
  07da:45 0e 08         callb procedure_000e 8 //  

  07dd:32 001b            jmp code_07fb 

        code_07e0
  07e0:38 010c          pushi 10c // $10c doVerb
  07e3:7a               push2 
  07e4:8f 01              lsp param1 
  07e6:8f 02              lsp param2 
  07e8:57 2c 08         super Feature 8 

  07eb:32 000d            jmp code_07fb 

        code_07ee
  07ee:38 010c          pushi 10c // $10c doVerb
  07f1:7a               push2 
  07f2:8f 01              lsp param1 
  07f4:8f 02              lsp param2 
  07f6:59 03            &rest 3 
  07f8:57 2c 08         super Feature 8 


        code_07fb
  07fb:3a                toss 
  07fc:48                 ret 
  07fd:00                bnot 
    )

)

// 08a8
(instance table3 of Feature
    (properties
        x $bb
        y $5f
        z $0
        heading $0
        noun $0
        nsTop $43
        nsLeft $ad
        nsBottom $68
        nsRight $c9
        description $16b0
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $16ba
    )
    (method (doVerb) // method_0842
  0842:8f 01              lsp param1 
  0844:3c                 dup 
  0845:35 03              ldi 3 
  0847:1a                 eq? 
  0848:30 000c            bnt code_0857 
  084b:7a               push2 
  084c:38 0212          pushi 212 // $212 forceOpen
  084f:39 09            pushi 9 // $9 nsTop
  0851:45 0e 04         callb procedure_000e 4 //  

  0854:32 0048            jmp code_089f 

        code_0857
  0857:3c                 dup 
  0858:35 05              ldi 5 
  085a:1a                 eq? 
  085b:30 0034            bnt code_0892 
  085e:83 03              lal local3 
  0860:18                 not 
  0861:30 0020            bnt code_0884 
  0864:76               push0 
  0865:45 02 00         callb procedure_0002 0 //  

  0868:39 08            pushi 8 // $8 underBits
  086a:89 00              lsg  
  086c:38 0212          pushi 212 // $212 forceOpen
  086f:39 0e            pushi e // $e lsLeft
  0871:39 43            pushi 43 // $43 at
  0873:39 ff            pushi ff // $ff syncNum
  0875:38 00b9          pushi b9 // $b9 bottom
  0878:39 6c            pushi 6c // $6c dispose
  087a:72 12c0          lofsa $12c0 // drape3
  087d:36                push 
  087e:45 12 10         callb procedure_0012 10 //  

  0881:32 001b            jmp code_089f 

        code_0884
  0884:38 010c          pushi 10c // $10c doVerb
  0887:7a               push2 
  0888:8f 01              lsp param1 
  088a:8f 02              lsp param2 
  088c:57 2c 08         super Feature 8 

  088f:32 000d            jmp code_089f 

        code_0892
  0892:38 010c          pushi 10c // $10c doVerb
  0895:7a               push2 
  0896:8f 01              lsp param1 
  0898:8f 02              lsp param2 
  089a:59 03            &rest 3 
  089c:57 2c 08         super Feature 8 


        code_089f
  089f:3a                toss 
  08a0:48                 ret 
  08a1:00                bnot 
    )

)

// 0a34
(instance theTable of Feature
    (properties
        x $f6
        y $8c
        z $0
        heading $0
        noun $0
        nsTop $4b
        nsLeft $d6
        nsBottom $84
        nsRight $117
        description $16b0
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $178b
    )
    (method (doVerb) // method_08e6
  08e6:8f 01              lsp param1 
  08e8:3c                 dup 
  08e9:35 03              ldi 3 
  08eb:1a                 eq? 
  08ec:30 000c            bnt code_08fb 
  08ef:7a               push2 
  08f0:38 0212          pushi 212 // $212 forceOpen
  08f3:39 0f            pushi f // $f lsBottom
  08f5:45 0e 04         callb procedure_000e 4 //  

  08f8:32 0131            jmp code_0a2c 

        code_08fb
  08fb:3c                 dup 
  08fc:35 04              ldi 4 
  08fe:1a                 eq? 
  08ff:30 000c            bnt code_090e 
  0902:7a               push2 
  0903:38 0212          pushi 212 // $212 forceOpen
  0906:39 10            pushi 10 // $10 lsRight
  0908:45 0e 04         callb procedure_000e 4 //  

  090b:32 011e            jmp code_0a2c 

        code_090e
  090e:3c                 dup 
  090f:35 0a              ldi a 
  0911:1a                 eq? 
  0912:30 000c            bnt code_0921 
  0915:7a               push2 
  0916:38 0212          pushi 212 // $212 forceOpen
  0919:39 11            pushi 11 // $11 signal
  091b:45 0e 04         callb procedure_000e 4 //  

  091e:32 010b            jmp code_0a2c 

        code_0921
  0921:3c                 dup 
  0922:35 05              ldi 5 
  0924:1a                 eq? 
  0925:30 00f7            bnt code_0a1f 
  0928:c3 00              +al local0 
  092a:36                push 
  092b:3c                 dup 
  092c:35 01              ldi 1 
  092e:1a                 eq? 
  092f:30 002f            bnt code_0961 
  0932:39 06            pushi 6 // $6 loop
  0934:89 00              lsg  
  0936:38 0212          pushi 212 // $212 forceOpen
  0939:39 12            pushi 12 // $12 illegalBits
  093b:39 43            pushi 43 // $43 at
  093d:39 ff            pushi ff // $ff syncNum
  093f:38 00b9          pushi b9 // $b9 bottom
  0942:45 12 0c         callb procedure_0012 c //  

  0945:7a               push2 
  0946:38 0212          pushi 212 // $212 forceOpen
  0949:39 13            pushi 13 // $13 brTop
  094b:45 0e 04         callb procedure_000e 4 //  

  094e:39 04            pushi 4 // $4 x
  0950:72 13c2          lofsa $13c2 // Michelle Milken
  0953:36                push 
  0954:38 0212          pushi 212 // $212 forceOpen
  0957:39 14            pushi 14 // $14 brLeft
  0959:39 6c            pushi 6c // $6c dispose
  095b:45 12 08         callb procedure_0012 8 //  

  095e:32 00ba            jmp code_0a1b 

        code_0961
  0961:3c                 dup 
  0962:35 02              ldi 2 
  0964:1a                 eq? 
  0965:30 0025            bnt code_098d 
  0968:39 06            pushi 6 // $6 loop
  096a:89 00              lsg  
  096c:38 0212          pushi 212 // $212 forceOpen
  096f:39 15            pushi 15 // $15 brBottom
  0971:39 43            pushi 43 // $43 at
  0973:39 ff            pushi ff // $ff syncNum
  0975:38 00b9          pushi b9 // $b9 bottom
  0978:45 12 0c         callb procedure_0012 c //  

  097b:38 008e          pushi 8e // $8e setScript
  097e:39 03            pushi 3 // $3 y
  0980:72 03a4          lofsa $03a4 // sTalk
  0983:36                push 
  0984:76               push0 
  0985:76               push0 
  0986:81 02              lag  
  0988:4a 0a             send a 

  098a:32 008e            jmp code_0a1b 

        code_098d
  098d:3c                 dup 
  098e:35 03              ldi 3 
  0990:1a                 eq? 
  0991:30 0038            bnt code_09cc 
  0994:39 06            pushi 6 // $6 loop
  0996:89 00              lsg  
  0998:38 0212          pushi 212 // $212 forceOpen
  099b:39 16            pushi 16 // $16 brRight
  099d:39 43            pushi 43 // $43 at
  099f:39 ff            pushi ff // $ff syncNum
  09a1:38 00b9          pushi b9 // $b9 bottom
  09a4:45 12 0c         callb procedure_0012 c //  

  09a7:39 06            pushi 6 // $6 loop
  09a9:89 00              lsg  
  09ab:38 0212          pushi 212 // $212 forceOpen
  09ae:39 17            pushi 17 // $17 name
  09b0:39 43            pushi 43 // $43 at
  09b2:39 ff            pushi ff // $ff syncNum
  09b4:38 00b9          pushi b9 // $b9 bottom
  09b7:45 12 0c         callb procedure_0012 c //  

  09ba:38 008e          pushi 8e // $8e setScript
  09bd:39 03            pushi 3 // $3 y
  09bf:72 03a4          lofsa $03a4 // sTalk
  09c2:36                push 
  09c3:76               push0 
  09c4:78               push1 
  09c5:81 02              lag  
  09c7:4a 0a             send a 

  09c9:32 004f            jmp code_0a1b 

        code_09cc
  09cc:3c                 dup 
  09cd:35 04              ldi 4 
  09cf:1a                 eq? 
  09d0:30 0026            bnt code_09f9 
  09d3:39 06            pushi 6 // $6 loop
  09d5:89 00              lsg  
  09d7:38 0212          pushi 212 // $212 forceOpen
  09da:39 18            pushi 18 // $18 key
  09dc:39 43            pushi 43 // $43 at
  09de:39 ff            pushi ff // $ff syncNum
  09e0:38 00b9          pushi b9 // $b9 bottom
  09e3:45 12 0c         callb procedure_0012 c //  

  09e6:39 04            pushi 4 // $4 x
  09e8:72 13c2          lofsa $13c2 // Michelle Milken
  09eb:36                push 
  09ec:38 0212          pushi 212 // $212 forceOpen
  09ef:39 19            pushi 19 // $19 time
  09f1:39 6c            pushi 6c // $6c dispose
  09f3:45 12 08         callb procedure_0012 8 //  

  09f6:32 0022            jmp code_0a1b 

        code_09f9
  09f9:39 06            pushi 6 // $6 loop
  09fb:89 00              lsg  
  09fd:38 0212          pushi 212 // $212 forceOpen
  0a00:39 1a            pushi 1a // $1a text
  0a02:39 43            pushi 43 // $43 at
  0a04:39 ff            pushi ff // $ff syncNum
  0a06:38 00b9          pushi b9 // $b9 bottom
  0a09:45 12 0c         callb procedure_0012 c //  

  0a0c:38 008e          pushi 8e // $8e setScript
  0a0f:39 03            pushi 3 // $3 y
  0a11:72 03a4          lofsa $03a4 // sTalk
  0a14:36                push 
  0a15:76               push0 
  0a16:7a               push2 
  0a17:81 02              lag  
  0a19:4a 0a             send a 


        code_0a1b
  0a1b:3a                toss 
  0a1c:32 000d            jmp code_0a2c 

        code_0a1f
  0a1f:38 010c          pushi 10c // $10c doVerb
  0a22:7a               push2 
  0a23:8f 01              lsp param1 
  0a25:8f 02              lsp param2 
  0a27:59 03            &rest 3 
  0a29:57 2c 08         super Feature 8 


        code_0a2c
  0a2c:3a                toss 
  0a2d:48                 ret 
    )

)

// 0a9c
(instance cart of Feature
    (properties
        x $ce
        y $8b
        z $0
        heading $0
        noun $0
        nsTop $7d
        nsLeft $bc
        nsBottom $9a
        nsRight $e1
        description $1830
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1841
    )
    (method (doVerb) // method_0a72
  0a72:8f 01              lsp param1 
  0a74:3c                 dup 
  0a75:35 03              ldi 3 
  0a77:1a                 eq? 
  0a78:30 000c            bnt code_0a87 
  0a7b:7a               push2 
  0a7c:38 0212          pushi 212 // $212 forceOpen
  0a7f:39 1b            pushi 1b // $1b elements
  0a81:45 0e 04         callb procedure_000e 4 //  

  0a84:32 000d            jmp code_0a94 

        code_0a87
  0a87:38 010c          pushi 10c // $10c doVerb
  0a8a:7a               push2 
  0a8b:8f 01              lsp param1 
  0a8d:8f 02              lsp param2 
  0a8f:59 03            &rest 3 
  0a91:57 2c 08         super Feature 8 


        code_0a94
  0a94:3a                toss 
  0a95:48                 ret 
    )

)

// 0af2
(instance light of Feature
    (properties
        x $90
        y $8c
        z $56
        heading $0
        noun $0
        nsTop $28
        nsLeft $79
        nsBottom $41
        nsRight $a7
        description $187b
        sightAngle $28
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $1884
    )
    (method (doVerb) // method_0ada
  0ada:8f 01              lsp param1 
  0adc:38 010c          pushi 10c // $10c doVerb
  0adf:7a               push2 
  0ae0:8f 01              lsp param1 
  0ae2:8f 02              lsp param2 
  0ae4:59 03            &rest 3 
  0ae6:57 2c 08         super Feature 8 

  0ae9:3a                toss 
  0aea:48                 ret 
  0aeb:00                bnot 
    )

)

// 0bf0
(instance sEnter of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0b30
  0b30:3f 02             link 2 // (var $2)
  0b32:87 01              lap param1 
  0b34:65 0a             aTop state 
  0b36:36                push 
  0b37:3c                 dup 
  0b38:35 00              ldi 0 
  0b3a:1a                 eq? 
  0b3b:30 001a            bnt code_0b58 
  0b3e:76               push0 
  0b3f:45 02 00         callb procedure_0002 0 //  

  0b42:38 011b          pushi 11b // $11b setMotion
  0b45:39 04            pushi 4 // $4 x
  0b47:51 24            class PolyPath 
  0b49:36                push 
  0b4a:38 00c7          pushi c7 // $c7 advanceCurIcon
  0b4d:38 009b          pushi 9b // $9b owner
  0b50:7c            pushSelf 
  0b51:81 00              lag  
  0b53:4a 0c             send c 

  0b55:32 008f            jmp code_0be7 

        code_0b58
  0b58:3c                 dup 
  0b59:35 01              ldi 1 
  0b5b:1a                 eq? 
  0b5c:30 002a            bnt code_0b89 
  0b5f:39 05            pushi 5 // $5 view
  0b61:78               push1 
  0b62:38 0213          pushi 213 // $213 moveToX
  0b65:38 011c          pushi 11c // $11c posn
  0b68:7a               push2 
  0b69:38 00c1          pushi c1 // $c1 lowlightColor
  0b6c:38 0097          pushi 97 // $97 setReal
  0b6f:38 00a2          pushi a2 // $a2 setLoop
  0b72:78               push1 
  0b73:76               push0 
  0b74:38 0120          pushi 120 // $120 setCel
  0b77:78               push1 
  0b78:76               push0 
  0b79:38 0096          pushi 96 // $96 setCycle
  0b7c:78               push1 
  0b7d:76               push0 
  0b7e:81 00              lag  
  0b80:4a 20             send 20 

  0b82:35 01              ldi 1 
  0b84:65 10             aTop cycles 
  0b86:32 005e            jmp code_0be7 

        code_0b89
  0b89:3c                 dup 
  0b8a:35 02              ldi 2 
  0b8c:1a                 eq? 
  0b8d:30 001a            bnt code_0baa 
  0b90:38 00a2          pushi a2 // $a2 setLoop
  0b93:78               push1 
  0b94:76               push0 
  0b95:38 0120          pushi 120 // $120 setCel
  0b98:78               push1 
  0b99:78               push1 
  0b9a:39 42            pushi 42 // $42 setPri
  0b9c:78               push1 
  0b9d:39 0e            pushi e // $e lsLeft
  0b9f:81 00              lag  
  0ba1:4a 12             send 12 

  0ba3:35 01              ldi 1 
  0ba5:65 10             aTop cycles 
  0ba7:32 003d            jmp code_0be7 

        code_0baa
  0baa:3c                 dup 
  0bab:35 03              ldi 3 
  0bad:1a                 eq? 
  0bae:30 0014            bnt code_0bc5 
  0bb1:38 00a2          pushi a2 // $a2 setLoop
  0bb4:78               push1 
  0bb5:76               push0 
  0bb6:38 0096          pushi 96 // $96 setCycle
  0bb9:7a               push2 
  0bba:51 1a            class End 
  0bbc:36                push 
  0bbd:7c            pushSelf 
  0bbe:81 00              lag  
  0bc0:4a 0e             send e 

  0bc2:32 0022            jmp code_0be7 

        code_0bc5
  0bc5:3c                 dup 
  0bc6:35 04              ldi 4 
  0bc8:1a                 eq? 
  0bc9:30 001b            bnt code_0be7 
  0bcc:76               push0 
  0bcd:45 03 00         callb procedure_0003 0 //  

  0bd0:38 011a          pushi 11a // $11a canControl
  0bd3:78               push1 
  0bd4:76               push0 
  0bd5:51 31            class User 
  0bd7:4a 06             send 6 

  0bd9:38 00c9          pushi c9 // $c9 disable
  0bdc:78               push1 
  0bdd:76               push0 
  0bde:81 45              lag  
  0be0:4a 06             send 6 

  0be2:39 6c            pushi 6c // $6c dispose
  0be4:76               push0 
  0be5:54 04             self 4 


        code_0be7
  0be7:3a                toss 
  0be8:48                 ret 
  0be9:00                bnot 
    )

)

// 0cb0
(instance sCloseCurtain of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_0c24
  0c24:39 3c            pushi 3c // $3c doit
  0c26:76               push0 
  0c27:59 01            &rest 1 
  0c29:57 06 04         super Script 4 

  0c2c:39 2b            pushi 2b // $2b number
  0c2e:76               push0 
  0c2f:81 66              lag  
  0c31:4a 04             send 4 

  0c33:36                push 
  0c34:34 0217            ldi 217 
  0c37:1a                 eq? 
  0c38:30 001c            bnt code_0c57 
  0c3b:38 009a          pushi 9a // $9a prevSignal
  0c3e:76               push0 
  0c3f:81 66              lag  
  0c41:4a 04             send 4 

  0c43:36                push 
  0c44:35 0a              ldi a 
  0c46:1a                 eq? 
  0c47:30 000d            bnt code_0c57 
  0c4a:39 2b            pushi 2b // $2b number
  0c4c:78               push1 
  0c4d:38 021a          pushi 21a // $21a lastSound
  0c50:39 2a            pushi 2a // $2a play
  0c52:76               push0 
  0c53:81 66              lag  
  0c55:4a 0a             send a 


        code_0c57
  0c57:48                 ret 
    )

    (method (changeState) // method_0c58
  0c58:3f 02             link 2 // (var $2)
  0c5a:87 01              lap param1 
  0c5c:65 0a             aTop state 
  0c5e:36                push 
  0c5f:3c                 dup 
  0c60:35 00              ldi 0 
  0c62:1a                 eq? 
  0c63:30 000b            bnt code_0c71 
  0c66:76               push0 
  0c67:45 02 00         callb procedure_0002 0 //  

  0c6a:35 02              ldi 2 
  0c6c:65 12             aTop seconds 
  0c6e:32 0037            jmp code_0ca8 

        code_0c71
  0c71:3c                 dup 
  0c72:35 01              ldi 1 
  0c74:1a                 eq? 
  0c75:30 0010            bnt code_0c88 
  0c78:38 0096          pushi 96 // $96 setCycle
  0c7b:7a               push2 
  0c7c:51 1a            class End 
  0c7e:36                push 
  0c7f:7c            pushSelf 
  0c80:72 133e          lofsa $133e // drape4
  0c83:4a 08             send 8 

  0c85:32 0020            jmp code_0ca8 

        code_0c88
  0c88:3c                 dup 
  0c89:35 02              ldi 2 
  0c8b:1a                 eq? 
  0c8c:30 0007            bnt code_0c96 
  0c8f:35 04              ldi 4 
  0c91:65 12             aTop seconds 
  0c93:32 0012            jmp code_0ca8 

        code_0c96
  0c96:3c                 dup 
  0c97:35 03              ldi 3 
  0c99:1a                 eq? 
  0c9a:30 000b            bnt code_0ca8 
  0c9d:38 0179          pushi 179 // $179 newRoom
  0ca0:78               push1 
  0ca1:38 0217          pushi 217 // $217 closeScript
  0ca4:81 02              lag  
  0ca6:4a 06             send 6 


        code_0ca8
  0ca8:3a                toss 
  0ca9:48                 ret 
    )

)

// 0da2
(instance sDoMichelle of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0ce8
  0ce8:3f 02             link 2 // (var $2)
  0cea:87 01              lap param1 
  0cec:65 0a             aTop state 
  0cee:36                push 
  0cef:3c                 dup 
  0cf0:35 00              ldi 0 
  0cf2:1a                 eq? 
  0cf3:30 0013            bnt code_0d09 
  0cf6:76               push0 
  0cf7:45 02 00         callb procedure_0002 0 //  

  0cfa:38 0096          pushi 96 // $96 setCycle
  0cfd:7a               push2 
  0cfe:51 1b            class Beg 
  0d00:36                push 
  0d01:7c            pushSelf 
  0d02:81 00              lag  
  0d04:4a 08             send 8 

  0d06:32 0090            jmp code_0d99 

        code_0d09
  0d09:3c                 dup 
  0d0a:35 01              ldi 1 
  0d0c:1a                 eq? 
  0d0d:30 001a            bnt code_0d2a 
  0d10:38 020a          pushi 20a // $20a normalize
  0d13:76               push0 
  0d14:38 011b          pushi 11b // $11b setMotion
  0d17:39 04            pushi 4 // $4 x
  0d19:51 24            class PolyPath 
  0d1b:36                push 
  0d1c:38 0104          pushi 104 // $104 gx
  0d1f:38 008f          pushi 8f // $8f port
  0d22:7c            pushSelf 
  0d23:81 00              lag  
  0d25:4a 10             send 10 

  0d27:32 006f            jmp code_0d99 

        code_0d2a
  0d2a:3c                 dup 
  0d2b:35 02              ldi 2 
  0d2d:1a                 eq? 
  0d2e:30 001f            bnt code_0d50 
  0d31:39 05            pushi 5 // $5 view
  0d33:78               push1 
  0d34:38 0213          pushi 213 // $213 moveToX
  0d37:38 00a2          pushi a2 // $a2 setLoop
  0d3a:78               push1 
  0d3b:78               push1 
  0d3c:38 0120          pushi 120 // $120 setCel
  0d3f:78               push1 
  0d40:76               push0 
  0d41:38 0096          pushi 96 // $96 setCycle
  0d44:7a               push2 
  0d45:51 1a            class End 
  0d47:36                push 
  0d48:7c            pushSelf 
  0d49:81 00              lag  
  0d4b:4a 1a             send 1a 

  0d4d:32 0049            jmp code_0d99 

        code_0d50
  0d50:3c                 dup 
  0d51:35 03              ldi 3 
  0d53:1a                 eq? 
  0d54:30 0022            bnt code_0d79 
  0d57:38 0120          pushi 120 // $120 setCel
  0d5a:78               push1 
  0d5b:39 07            pushi 7 // $7 cel
  0d5d:76               push0 
  0d5e:81 00              lag  
  0d60:4a 04             send 4 

  0d62:36                push 
  0d63:38 011b          pushi 11b // $11b setMotion
  0d66:39 04            pushi 4 // $4 x
  0d68:51 1e            class MoveTo 
  0d6a:36                push 
  0d6b:38 0107          pushi 107 // $107 waitApogeeY
  0d6e:38 008e          pushi 8e // $8e setScript
  0d71:7c            pushSelf 
  0d72:81 00              lag  
  0d74:4a 12             send 12 

  0d76:32 0020            jmp code_0d99 

        code_0d79
  0d79:3c                 dup 
  0d7a:35 04              ldi 4 
  0d7c:1a                 eq? 
  0d7d:30 0007            bnt code_0d87 
  0d80:35 05              ldi 5 
  0d82:65 12             aTop seconds 
  0d84:32 0012            jmp code_0d99 

        code_0d87
  0d87:3c                 dup 
  0d88:35 05              ldi 5 
  0d8a:1a                 eq? 
  0d8b:30 000b            bnt code_0d99 
  0d8e:38 0179          pushi 179 // $179 newRoom
  0d91:78               push1 
  0d92:38 0217          pushi 217 // $217 closeScript
  0d95:81 02              lag  
  0d97:4a 06             send 6 


        code_0d99
  0d99:3a                toss 
  0d9a:48                 ret 
  0d9b:00                bnot 
    )

)

// 0ed2
(instance sMichelleEating of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0dd6
  0dd6:3f 02             link 2 // (var $2)
  0dd8:87 01              lap param1 
  0dda:65 0a             aTop state 
  0ddc:36                push 
  0ddd:3c                 dup 
  0dde:35 00              ldi 0 
  0de0:1a                 eq? 
  0de1:30 0032            bnt code_0e16 
  0de4:7a               push2 
  0de5:78               push1 
  0de6:39 04            pushi 4 // $4 x
  0de8:43 3c 04         callk Random 4 

  0deb:36                push 
  0dec:3c                 dup 
  0ded:35 01              ldi 1 
  0def:1a                 eq? 
  0df0:30 0009            bnt code_0dfc 
  0df3:35 01              ldi 1 
  0df5:65 0a             aTop state 
  0df7:65 10             aTop cycles 
  0df9:32 0016            jmp code_0e12 

        code_0dfc
  0dfc:3c                 dup 
  0dfd:35 02              ldi 2 
  0dff:1a                 eq? 
  0e00:30 0007            bnt code_0e0a 
  0e03:35 04              ldi 4 
  0e05:65 12             aTop seconds 
  0e07:32 0008            jmp code_0e12 

        code_0e0a
  0e0a:35 06              ldi 6 
  0e0c:65 0a             aTop state 
  0e0e:35 01              ldi 1 
  0e10:65 10             aTop cycles 

        code_0e12
  0e12:3a                toss 
  0e13:32 00b4            jmp code_0eca 

        code_0e16
  0e16:3c                 dup 
  0e17:35 01              ldi 1 
  0e19:1a                 eq? 
  0e1a:30 0008            bnt code_0e25 
  0e1d:39 6b            pushi 6b // $6b init
  0e1f:76               push0 
  0e20:54 04             self 4 

  0e22:32 00a5            jmp code_0eca 

        code_0e25
  0e25:3c                 dup 
  0e26:35 02              ldi 2 
  0e28:1a                 eq? 
  0e29:30 001b            bnt code_0e47 
  0e2c:38 00a2          pushi a2 // $a2 setLoop
  0e2f:78               push1 
  0e30:39 04            pushi 4 // $4 x
  0e32:38 0120          pushi 120 // $120 setCel
  0e35:78               push1 
  0e36:76               push0 
  0e37:38 0096          pushi 96 // $96 setCycle
  0e3a:7a               push2 
  0e3b:51 1a            class End 
  0e3d:36                push 
  0e3e:7c            pushSelf 
  0e3f:72 059c          lofsa $059c // michelle
  0e42:4a 14             send 14 

  0e44:32 0083            jmp code_0eca 

        code_0e47
  0e47:3c                 dup 
  0e48:35 03              ldi 3 
  0e4a:1a                 eq? 
  0e4b:30 000c            bnt code_0e5a 
  0e4e:7a               push2 
  0e4f:7a               push2 
  0e50:39 04            pushi 4 // $4 x
  0e52:43 3c 04         callk Random 4 

  0e55:65 12             aTop seconds 
  0e57:32 0070            jmp code_0eca 

        code_0e5a
  0e5a:3c                 dup 
  0e5b:35 04              ldi 4 
  0e5d:1a                 eq? 
  0e5e:30 0010            bnt code_0e71 
  0e61:38 0096          pushi 96 // $96 setCycle
  0e64:7a               push2 
  0e65:51 1b            class Beg 
  0e67:36                push 
  0e68:7c            pushSelf 
  0e69:72 059c          lofsa $059c // michelle
  0e6c:4a 08             send 8 

  0e6e:32 0059            jmp code_0eca 

        code_0e71
  0e71:3c                 dup 
  0e72:35 05              ldi 5 
  0e74:1a                 eq? 
  0e75:30 0007            bnt code_0e7f 
  0e78:35 02              ldi 2 
  0e7a:65 12             aTop seconds 
  0e7c:32 004b            jmp code_0eca 

        code_0e7f
  0e7f:3c                 dup 
  0e80:35 06              ldi 6 
  0e82:1a                 eq? 
  0e83:30 0008            bnt code_0e8e 
  0e86:39 6b            pushi 6b // $6b init
  0e88:76               push0 
  0e89:54 04             self 4 

  0e8b:32 003c            jmp code_0eca 

        code_0e8e
  0e8e:3c                 dup 
  0e8f:35 07              ldi 7 
  0e91:1a                 eq? 
  0e92:30 001b            bnt code_0eb0 
  0e95:38 00a2          pushi a2 // $a2 setLoop
  0e98:78               push1 
  0e99:39 05            pushi 5 // $5 view
  0e9b:38 0120          pushi 120 // $120 setCel
  0e9e:78               push1 
  0e9f:76               push0 
  0ea0:38 0096          pushi 96 // $96 setCycle
  0ea3:7a               push2 
  0ea4:51 1a            class End 
  0ea6:36                push 
  0ea7:7c            pushSelf 
  0ea8:72 059c          lofsa $059c // michelle
  0eab:4a 14             send 14 

  0ead:32 001a            jmp code_0eca 

        code_0eb0
  0eb0:3c                 dup 
  0eb1:35 08              ldi 8 
  0eb3:1a                 eq? 
  0eb4:30 0007            bnt code_0ebe 
  0eb7:35 02              ldi 2 
  0eb9:65 12             aTop seconds 
  0ebb:32 000c            jmp code_0eca 

        code_0ebe
  0ebe:3c                 dup 
  0ebf:35 09              ldi 9 
  0ec1:1a                 eq? 
  0ec2:30 0005            bnt code_0eca 
  0ec5:39 6b            pushi 6b // $6b init
  0ec7:76               push0 
  0ec8:54 04             self 4 


        code_0eca
  0eca:3a                toss 
  0ecb:48                 ret 
    )

)

// 0f5e
(instance sOpenCurtain of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_0f06
  0f06:3f 02             link 2 // (var $2)
  0f08:87 01              lap param1 
  0f0a:65 0a             aTop state 
  0f0c:36                push 
  0f0d:3c                 dup 
  0f0e:35 00              ldi 0 
  0f10:1a                 eq? 
  0f11:30 0007            bnt code_0f1b 
  0f14:35 02              ldi 2 
  0f16:65 10             aTop cycles 
  0f18:32 003a            jmp code_0f55 

        code_0f1b
  0f1b:3c                 dup 
  0f1c:35 01              ldi 1 
  0f1e:1a                 eq? 
  0f1f:30 0020            bnt code_0f42 
  0f22:39 04            pushi 4 // $4 x
  0f24:72 13c2          lofsa $13c2 // Michelle Milken
  0f27:36                push 
  0f28:38 0212          pushi 212 // $212 forceOpen
  0f2b:39 1c            pushi 1c // $1c color
  0f2d:39 6c            pushi 6c // $6c dispose
  0f2f:45 12 08         callb procedure_0012 8 //  

  0f32:38 0096          pushi 96 // $96 setCycle
  0f35:7a               push2 
  0f36:51 1b            class Beg 
  0f38:36                push 
  0f39:7c            pushSelf 
  0f3a:72 133e          lofsa $133e // drape4
  0f3d:4a 08             send 8 

  0f3f:32 0013            jmp code_0f55 

        code_0f42
  0f42:3c                 dup 
  0f43:35 02              ldi 2 
  0f45:1a                 eq? 
  0f46:30 000c            bnt code_0f55 
  0f49:76               push0 
  0f4a:45 03 00         callb procedure_0003 0 //  

  0f4d:38 020a          pushi 20a // $20a normalize
  0f50:76               push0 
  0f51:81 00              lag  
  0f53:4a 04             send 4 


        code_0f55
  0f55:3a                toss 
  0f56:48                 ret 
  0f57:00                bnot 
    )

)

// 106e
(instance drape1 of Prop
    (properties
        x $59
        y $24
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $18e7
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $212
        loop $1
        cel $0
        priority $7
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0fd5
  0fd5:8f 01              lsp param1 
  0fd7:3c                 dup 
  0fd8:35 02              ldi 2 
  0fda:1a                 eq? 
  0fdb:30 000c            bnt code_0fea 
  0fde:7a               push2 
  0fdf:38 0212          pushi 212 // $212 forceOpen
  0fe2:39 1d            pushi 1d // $1d back
  0fe4:45 0e 04         callb procedure_000e 4 //  

  0fe7:32 007c            jmp code_1066 

        code_0fea
  0fea:3c                 dup 
  0feb:35 03              ldi 3 
  0fed:1a                 eq? 
  0fee:30 000c            bnt code_0ffd 
  0ff1:7a               push2 
  0ff2:38 0212          pushi 212 // $212 forceOpen
  0ff5:39 1e            pushi 1e // $1e mode
  0ff7:45 0e 04         callb procedure_000e 4 //  

  0ffa:32 0069            jmp code_1066 

        code_0ffd
  0ffd:3c                 dup 
  0ffe:35 05              ldi 5 
  1000:1a                 eq? 
  1001:30 0055            bnt code_1059 
  1004:83 01              lal local1 
  1006:30 0042            bnt code_104b 
  1009:7a               push2 
  100a:78               push1 
  100b:39 03            pushi 3 // $3 y
  100d:43 3c 04         callk Random 4 

  1010:36                push 
  1011:3c                 dup 
  1012:35 01              ldi 1 
  1014:1a                 eq? 
  1015:30 000c            bnt code_1024 
  1018:7a               push2 
  1019:38 0212          pushi 212 // $212 forceOpen
  101c:39 1f            pushi 1f // $1f style
  101e:45 0e 04         callb procedure_000e 4 //  

  1021:32 0023            jmp code_1047 

        code_1024
  1024:3c                 dup 
  1025:35 02              ldi 2 
  1027:1a                 eq? 
  1028:30 000c            bnt code_1037 
  102b:7a               push2 
  102c:38 0212          pushi 212 // $212 forceOpen
  102f:39 20            pushi 20 // $20 state
  1031:45 0e 04         callb procedure_000e 4 //  

  1034:32 0010            jmp code_1047 

        code_1037
  1037:3c                 dup 
  1038:35 03              ldi 3 
  103a:1a                 eq? 
  103b:30 0009            bnt code_1047 
  103e:7a               push2 
  103f:38 0212          pushi 212 // $212 forceOpen
  1042:39 21            pushi 21 // $21 font
  1044:45 0e 04         callb procedure_000e 4 //  


        code_1047
  1047:3a                toss 
  1048:32 001b            jmp code_1066 

        code_104b
  104b:38 010c          pushi 10c // $10c doVerb
  104e:78               push1 
  104f:39 05            pushi 5 // $5 view
  1051:72 075c          lofsa $075c // table1
  1054:4a 06             send 6 

  1056:32 000d            jmp code_1066 

        code_1059
  1059:38 010c          pushi 10c // $10c doVerb
  105c:7a               push2 
  105d:8f 01              lsp param1 
  105f:8f 02              lsp param2 
  1061:59 03            &rest 3 
  1063:57 2f 08         super Prop 8 


        code_1066
  1066:3a                toss 
  1067:48                 ret 
    )

    (method (cue) // method_0f92
  0f92:38 008d          pushi 8d // $8d cue
  0f95:76               push0 
  0f96:57 2f 04         super Prop 4 

  0f99:38 0096          pushi 96 // $96 setCycle
  0f9c:78               push1 
  0f9d:51 1a            class End 
  0f9f:36                push 
  0fa0:54 06             self 6 

  0fa2:39 6c            pushi 6c // $6c dispose
  0fa4:76               push0 
  0fa5:72 075c          lofsa $075c // table1
  0fa8:4a 04             send 4 

  0faa:39 6c            pushi 6c // $6c dispose
  0fac:76               push0 
  0fad:72 0422          lofsa $0422 // extra1
  0fb0:4a 04             send 4 

  0fb2:39 6c            pushi 6c // $6c dispose
  0fb4:76               push0 
  0fb5:72 046a          lofsa $046a // extra2
  0fb8:4a 04             send 4 

  0fba:35 01              ldi 1 
  0fbc:a3 01              sal local1 
  0fbe:76               push0 
  0fbf:45 03 00         callb procedure_0003 0 //  

  0fc2:38 011a          pushi 11a // $11a canControl
  0fc5:78               push1 
  0fc6:76               push0 
  0fc7:51 31            class User 
  0fc9:4a 06             send 6 

  0fcb:38 00c9          pushi c9 // $c9 disable
  0fce:78               push1 
  0fcf:76               push0 
  0fd0:81 45              lag  
  0fd2:4a 06             send 6 

  0fd4:48                 ret 
    )

)

// 11a4
(instance drape2 of Prop
    (properties
        x $86
        y $65
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $18e7
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $212
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $4000
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_113f
  113f:8f 01              lsp param1 
  1141:3c                 dup 
  1142:35 03              ldi 3 
  1144:1a                 eq? 
  1145:30 000c            bnt code_1154 
  1148:7a               push2 
  1149:38 0212          pushi 212 // $212 forceOpen
  114c:39 1e            pushi 1e // $1e mode
  114e:45 0e 04         callb procedure_000e 4 //  

  1151:32 0048            jmp code_119c 

        code_1154
  1154:3c                 dup 
  1155:35 02              ldi 2 
  1157:1a                 eq? 
  1158:30 000c            bnt code_1167 
  115b:7a               push2 
  115c:38 0212          pushi 212 // $212 forceOpen
  115f:39 1d            pushi 1d // $1d back
  1161:45 0e 04         callb procedure_000e 4 //  

  1164:32 0035            jmp code_119c 

        code_1167
  1167:3c                 dup 
  1168:35 05              ldi 5 
  116a:1a                 eq? 
  116b:30 0021            bnt code_118f 
  116e:83 02              lal local2 
  1170:30 000e            bnt code_1181 
  1173:38 010c          pushi 10c // $10c doVerb
  1176:78               push1 
  1177:39 05            pushi 5 // $5 view
  1179:72 1074          lofsa $1074 // drape1
  117c:4a 06             send 6 

  117e:32 001b            jmp code_119c 

        code_1181
  1181:38 010c          pushi 10c // $10c doVerb
  1184:78               push1 
  1185:39 05            pushi 5 // $5 view
  1187:72 080a          lofsa $080a // table2
  118a:4a 06             send 6 

  118c:32 000d            jmp code_119c 

        code_118f
  118f:38 010c          pushi 10c // $10c doVerb
  1192:7a               push2 
  1193:8f 01              lsp param1 
  1195:8f 02              lsp param2 
  1197:59 03            &rest 3 
  1199:57 2f 08         super Prop 8 


        code_119c
  119c:3a                toss 
  119d:48                 ret 
    )

    (method (cue) // method_10da
  10da:38 008d          pushi 8d // $8d cue
  10dd:76               push0 
  10de:57 2f 04         super Prop 4 

  10e1:c3 04              +al local4 
  10e3:36                push 
  10e4:3c                 dup 
  10e5:35 01              ldi 1 
  10e7:1a                 eq? 
  10e8:30 0010            bnt code_10fb 
  10eb:39 04            pushi 4 // $4 x
  10ed:38 0212          pushi 212 // $212 forceOpen
  10f0:39 22            pushi 22 // $22 type
  10f2:39 6c            pushi 6c // $6c dispose
  10f4:7c            pushSelf 
  10f5:45 0e 08         callb procedure_000e 8 //  

  10f8:32 0042            jmp code_113d 

        code_10fb
  10fb:3c                 dup 
  10fc:35 02              ldi 2 
  10fe:1a                 eq? 
  10ff:30 003b            bnt code_113d 
  1102:38 0096          pushi 96 // $96 setCycle
  1105:78               push1 
  1106:51 1a            class End 
  1108:36                push 
  1109:54 06             self 6 

  110b:39 6c            pushi 6c // $6c dispose
  110d:76               push0 
  110e:72 080a          lofsa $080a // table2
  1111:4a 04             send 4 

  1113:39 6c            pushi 6c // $6c dispose
  1115:76               push0 
  1116:72 04fa          lofsa $04fa // extra4
  1119:4a 04             send 4 

  111b:39 6c            pushi 6c // $6c dispose
  111d:76               push0 
  111e:72 0542          lofsa $0542 // extra5
  1121:4a 04             send 4 

  1123:35 01              ldi 1 
  1125:a3 02              sal local2 
  1127:76               push0 
  1128:45 03 00         callb procedure_0003 0 //  

  112b:38 011a          pushi 11a // $11a canControl
  112e:78               push1 
  112f:76               push0 
  1130:51 31            class User 
  1132:4a 06             send 6 

  1134:38 00c9          pushi c9 // $c9 disable
  1137:78               push1 
  1138:76               push0 
  1139:81 45              lag  
  113b:4a 06             send 6 


        code_113d
  113d:3a                toss 
  113e:48                 ret 
    )

)

// 12ba
(instance drape3 of Prop
    (properties
        x $d3
        y $23
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $18e7
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $212
        loop $2
        cel $0
        priority $7
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1254
  1254:8f 01              lsp param1 
  1256:3c                 dup 
  1257:35 03              ldi 3 
  1259:1a                 eq? 
  125a:30 000c            bnt code_1269 
  125d:7a               push2 
  125e:38 0212          pushi 212 // $212 forceOpen
  1261:39 1e            pushi 1e // $1e mode
  1263:45 0e 04         callb procedure_000e 4 //  

  1266:32 0048            jmp code_12b1 

        code_1269
  1269:3c                 dup 
  126a:35 02              ldi 2 
  126c:1a                 eq? 
  126d:30 000c            bnt code_127c 
  1270:7a               push2 
  1271:38 0212          pushi 212 // $212 forceOpen
  1274:39 1d            pushi 1d // $1d back
  1276:45 0e 04         callb procedure_000e 4 //  

  1279:32 0035            jmp code_12b1 

        code_127c
  127c:3c                 dup 
  127d:35 05              ldi 5 
  127f:1a                 eq? 
  1280:30 0021            bnt code_12a4 
  1283:83 03              lal local3 
  1285:30 000e            bnt code_1296 
  1288:38 010c          pushi 10c // $10c doVerb
  128b:78               push1 
  128c:39 05            pushi 5 // $5 view
  128e:72 1074          lofsa $1074 // drape1
  1291:4a 06             send 6 

  1293:32 001b            jmp code_12b1 

        code_1296
  1296:38 010c          pushi 10c // $10c doVerb
  1299:78               push1 
  129a:39 05            pushi 5 // $5 view
  129c:72 08ae          lofsa $08ae // table3
  129f:4a 06             send 6 

  12a1:32 000d            jmp code_12b1 

        code_12a4
  12a4:38 010c          pushi 10c // $10c doVerb
  12a7:7a               push2 
  12a8:8f 01              lsp param1 
  12aa:8f 02              lsp param2 
  12ac:59 03            &rest 3 
  12ae:57 2f 08         super Prop 8 


        code_12b1
  12b1:3a                toss 
  12b2:48                 ret 
  12b3:00                bnot 
    )

    (method (cue) // method_1210
  1210:38 008d          pushi 8d // $8d cue
  1213:76               push0 
  1214:57 2f 04         super Prop 4 

  1217:7a               push2 
  1218:38 0212          pushi 212 // $212 forceOpen
  121b:39 23            pushi 23 // $23 window
  121d:45 0e 04         callb procedure_000e 4 //  

  1220:38 0096          pushi 96 // $96 setCycle
  1223:78               push1 
  1224:51 1a            class End 
  1226:36                push 
  1227:54 06             self 6 

  1229:39 6c            pushi 6c // $6c dispose
  122b:76               push0 
  122c:72 08ae          lofsa $08ae // table3
  122f:4a 04             send 4 

  1231:39 6c            pushi 6c // $6c dispose
  1233:76               push0 
  1234:72 04b2          lofsa $04b2 // extra3
  1237:4a 04             send 4 

  1239:35 01              ldi 1 
  123b:a3 03              sal local3 
  123d:76               push0 
  123e:45 03 00         callb procedure_0003 0 //  

  1241:38 011a          pushi 11a // $11a canControl
  1244:78               push1 
  1245:76               push0 
  1246:51 31            class User 
  1248:4a 06             send 6 

  124a:38 00c9          pushi c9 // $c9 disable
  124d:78               push1 
  124e:76               push0 
  124f:81 45              lag  
  1251:4a 06             send 6 

  1253:48                 ret 
    )

)

// 1338
(instance drape4 of Prop
    (properties
        x $117
        y $37
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $18e7
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $212
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1326
  1326:38 010c          pushi 10c // $10c doVerb
  1329:78               push1 
  132a:8f 01              lsp param1 
  132c:72 1074          lofsa $1074 // drape1
  132f:4a 06             send 6 

  1331:48                 ret 
    )

)

// 13bc
(instance Michelle Milken of Talker
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $f
        nsLeft $1e
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5fa
        loop $3
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        bust $0
        eyes $0
        mouth $0
        ticks $0
        disposeWhenDone $1
        caller $0
        viewInPrint $1
        useFrame $0
        talkWidth $13e
    )
    (method (init) // method_13a0
  13a0:72 143e          lofsa $143e // talkerBust
  13a3:65 56             aTop bust 
  13a5:72 149a          lofsa $149a // talkerEyes
  13a8:65 58             aTop eyes 
  13aa:72 1500          lofsa $1500 // talkerMouth
  13ad:65 5a             aTop mouth 
  13af:39 6b            pushi 6b // $6b init
  13b1:76               push0 
  13b2:57 6f 04         super Talker 4 

  13b5:48                 ret 
    )

)

// 1438
(instance talkerBust of View
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5fa
        loop $1
        cel $0
        priority $0
        underBits $0
        signal $101
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
)

// 1494
(instance talkerEyes of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $1b
        nsLeft $14
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5fa
        loop $2
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $1e
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 14fa
(instance talkerMouth of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $25
        nsLeft $1a
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $5fa
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)



