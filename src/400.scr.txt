(script 400)

(string
    string_051c "rm400"
    string_0522 "patrons"
    string_052a "stepSound"
    string_0534 "sToManager"
    string_053f "sFromManager"
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
)

// 0178
(instance publicrm400 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $0
        picture $190
        style $ffff
        horizon $0
        controls $0
        north $0
        east $195
        south $0
        west $19a
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:39 03            pushi 3 // $3 y
  0010:38 0080          pushi 80 // $80 indexOf
  0013:38 0190          pushi 190 // $190 roomToEdge
  0016:38 0191          pushi 191 // $191 cycleType
  0019:46 03be 0000 06  calle 3be procedure_0000 6 //  

  001f:39 05            pushi 5 // $5 view
  0021:38 0084          pushi 84 // $84 cycles
  0024:38 0191          pushi 191 // $191 cycleType
  0027:38 0192          pushi 192 // $192 hesitation
  002a:38 0193          pushi 193 // $193 pauseCel
  002d:38 0194          pushi 194 // $194 minPause
  0030:46 03be 0000 0a  calle 3be procedure_0000 a //  

  0036:39 6b            pushi 6b // $6b init
  0038:76               push0 
  0039:81 00              lag  
  003b:4a 04             send 4 

  003d:76               push0 
  003e:45 02 00         callb procedure_0002 0 //  

  0041:89 0c              lsg  
  0043:3c                 dup 
  0044:63 1e             pToa east 
  0046:1a                 eq? 
  0047:30 0023            bnt code_006d 
  004a:38 011c          pushi 11c // $11c posn
  004d:7a               push2 
  004e:38 011d          pushi 11d // $11d stopUpd
  0051:39 64            pushi 64 // $64 moveDone
  0053:38 020a          pushi 20a // $20a normalize
  0056:78               push1 
  0057:38 023a          pushi 23a // $23a sel_570
  005a:81 00              lag  
  005c:4a 0e             send e 

  005e:38 008e          pushi 8e // $8e setScript
  0061:78               push1 
  0062:72 04ee          lofsa $04ee // sFromManager
  0065:36                push 
  0066:81 00              lag  
  0068:4a 06             send 6 

  006a:32 0040            jmp code_00ad 

        code_006d
  006d:38 009c          pushi 9c // $9c stop
  0070:76               push0 
  0071:81 66              lag  
  0073:4a 04             send 4 

  0075:38 009c          pushi 9c // $9c stop
  0078:76               push0 
  0079:81 67              lag  
  007b:4a 04             send 4 

  007d:39 1f            pushi 1f // $1f style
  007f:78               push1 
  0080:39 09            pushi 9 // $9 nsTop
  0082:54 06             self 6 

  0084:39 06            pushi 6 // $6 loop
  0086:78               push1 
  0087:39 03            pushi 3 // $3 y
  0089:39 07            pushi 7 // $7 cel
  008b:78               push1 
  008c:7a               push2 
  008d:38 011c          pushi 11c // $11c posn
  0090:7a               push2 
  0091:38 00c3          pushi c3 // $c3 highlight
  0094:39 60            pushi 60 // $60 frame
  0096:38 020a          pushi 20a // $20a normalize
  0099:78               push1 
  009a:38 0191          pushi 191 // $191 cycleType
  009d:81 00              lag  
  009f:4a 1a             send 1a 

  00a1:38 008e          pushi 8e // $8e setScript
  00a4:78               push1 
  00a5:72 043e          lofsa $043e // sToManager
  00a8:36                push 
  00a9:81 00              lag  
  00ab:4a 06             send 6 


        code_00ad
  00ad:3a                toss 
  00ae:39 6b            pushi 6b // $6b init
  00b0:76               push0 
  00b1:57 72 04         super LLRoom 4 

  00b4:78               push1 
  00b5:38 01ae          pushi 1ae // $1ae loopIndex
  00b8:45 0d 02         callb procedure_000d 2 //  

  00bb:48                 ret 
    )

    (method (doit) // method_00bc
  00bc:39 3c            pushi 3c // $3c doit
  00be:76               push0 
  00bf:57 72 04         super LLRoom 4 

  00c2:39 3b            pushi 3b // $3b mover
  00c4:76               push0 
  00c5:81 00              lag  
  00c7:4a 04             send 4 

  00c9:30 008c            bnt code_0158 
  00cc:39 07            pushi 7 // $7 cel
  00ce:76               push0 
  00cf:81 00              lag  
  00d1:4a 04             send 4 

  00d3:36                push 
  00d4:3c                 dup 
  00d5:35 00              ldi 0 
  00d7:1a                 eq? 
  00d8:30 003c            bnt code_0117 
  00db:39 2b            pushi 2b // $2b number
  00dd:76               push0 
  00de:72 0290          lofsa $0290 // stepSound
  00e1:4a 04             send 4 

  00e3:36                push 
  00e4:34 0194            ldi 194 
  00e7:1a                 eq? 
  00e8:30 0011            bnt code_00fc 
  00eb:39 2b            pushi 2b // $2b number
  00ed:78               push1 
  00ee:38 0192          pushi 192 // $192 hesitation
  00f1:39 2a            pushi 2a // $2a play
  00f3:76               push0 
  00f4:72 0290          lofsa $0290 // stepSound
  00f7:4a 0a             send a 

  00f9:32 005b            jmp code_0157 

        code_00fc
  00fc:39 2b            pushi 2b // $2b number
  00fe:78               push1 
  00ff:39 2b            pushi 2b // $2b number
  0101:76               push0 
  0102:72 0290          lofsa $0290 // stepSound
  0105:4a 04             send 4 

  0107:36                push 
  0108:35 01              ldi 1 
  010a:02                 add 
  010b:36                push 
  010c:39 2a            pushi 2a // $2a play
  010e:76               push0 
  010f:72 0290          lofsa $0290 // stepSound
  0112:4a 0a             send a 

  0114:32 0040            jmp code_0157 

        code_0117
  0117:3c                 dup 
  0118:35 04              ldi 4 
  011a:1a                 eq? 
  011b:30 0039            bnt code_0157 
  011e:39 2b            pushi 2b // $2b number
  0120:76               push0 
  0121:72 0290          lofsa $0290 // stepSound
  0124:4a 04             send 4 

  0126:36                push 
  0127:34 0194            ldi 194 
  012a:1a                 eq? 
  012b:30 0011            bnt code_013f 
  012e:39 2b            pushi 2b // $2b number
  0130:78               push1 
  0131:38 0192          pushi 192 // $192 hesitation
  0134:39 2a            pushi 2a // $2a play
  0136:76               push0 
  0137:72 0290          lofsa $0290 // stepSound
  013a:4a 0a             send a 

  013c:32 0018            jmp code_0157 

        code_013f
  013f:39 2b            pushi 2b // $2b number
  0141:78               push1 
  0142:39 2b            pushi 2b // $2b number
  0144:76               push0 
  0145:72 0290          lofsa $0290 // stepSound
  0148:4a 04             send 4 

  014a:36                push 
  014b:35 01              ldi 1 
  014d:02                 add 
  014e:36                push 
  014f:39 2a            pushi 2a // $2a play
  0151:76               push0 
  0152:72 0290          lofsa $0290 // stepSound
  0155:4a 0a             send a 


        code_0157
  0157:3a                toss 

        code_0158
  0158:48                 ret 
    )

    (method (dispose) // method_0159
  0159:38 009f          pushi 9f // $9f fade
  015c:39 04            pushi 4 // $4 x
  015e:76               push0 
  015f:39 0f            pushi f // $f lsBottom
  0161:39 0c            pushi c // $c nsRight
  0163:78               push1 
  0164:81 66              lag  
  0166:4a 0c             send c 

  0168:39 6c            pushi 6c // $6c dispose
  016a:76               push0 
  016b:59 01            &rest 1 
  016d:57 72 04         super LLRoom 4 

  0170:48                 ret 
  0171:00                bnot 
    )

)

// 0220
(instance patrons of Prop
    (properties
        x $b7
        y $51
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $190
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $12
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doit) // method_01c0
  01c0:8b 02              lsl local2 
  01c2:35 04              ldi 4 
  01c4:22                 lt? 
  01c5:30 0037            bnt code_01ff 
  01c8:39 07            pushi 7 // $7 cel
  01ca:76               push0 
  01cb:54 04             self 4 

  01cd:36                push 
  01ce:35 01              ldi 1 
  01d0:1a                 eq? 
  01d1:30 0024            bnt code_01f8 
  01d4:83 01              lal local1 
  01d6:18                 not 
  01d7:30 0038            bnt code_0212 
  01da:39 2b            pushi 2b // $2b number
  01dc:78               push1 
  01dd:38 0191          pushi 191 // $191 cycleType
  01e0:39 66            pushi 66 // $66 flags
  01e2:78               push1 
  01e3:78               push1 
  01e4:39 06            pushi 6 // $6 loop
  01e6:78               push1 
  01e7:76               push0 
  01e8:39 2a            pushi 2a // $2a play
  01ea:76               push0 
  01eb:81 66              lag  
  01ed:4a 16             send 16 

  01ef:c3 02              +al local2 
  01f1:35 01              ldi 1 
  01f3:a3 01              sal local1 
  01f5:32 001a            jmp code_0212 

        code_01f8
  01f8:35 00              ldi 0 
  01fa:a3 01              sal local1 
  01fc:32 0013            jmp code_0212 

        code_01ff
  01ff:8b 02              lsl local2 
  0201:35 04              ldi 4 
  0203:1a                 eq? 
  0204:30 000b            bnt code_0212 
  0207:38 0096          pushi 96 // $96 setCycle
  020a:78               push1 
  020b:76               push0 
  020c:38 011d          pushi 11d // $11d stopUpd
  020f:76               push0 
  0210:54 0a             self a 


        code_0212
  0212:39 3c            pushi 3c // $3c doit
  0214:76               push0 
  0215:57 2f 04         super Prop 4 

  0218:48                 ret 
  0219:00                bnot 
    )

)

// 028a
(instance stepSound of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $194
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 0438
(instance sToManager of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_02be
  02be:87 01              lap param1 
  02c0:65 0a             aTop state 
  02c2:36                push 
  02c3:3c                 dup 
  02c4:35 00              ldi 0 
  02c6:1a                 eq? 
  02c7:30 0029            bnt code_02f3 
  02ca:39 6b            pushi 6b // $6b init
  02cc:76               push0 
  02cd:38 0096          pushi 96 // $96 setCycle
  02d0:78               push1 
  02d1:51 17            class Fwd 
  02d3:36                push 
  02d4:72 0226          lofsa $0226 // patrons
  02d7:4a 0a             send a 

  02d9:38 00a2          pushi a2 // $a2 setLoop
  02dc:78               push1 
  02dd:76               push0 
  02de:38 0096          pushi 96 // $96 setCycle
  02e1:7a               push2 
  02e2:51 1a            class End 
  02e4:36                push 
  02e5:7c            pushSelf 
  02e6:38 00db          pushi db // $db cycleSpeed
  02e9:78               push1 
  02ea:39 0c            pushi c // $c nsRight
  02ec:81 00              lag  
  02ee:4a 14             send 14 

  02f0:32 013c            jmp code_042f 

        code_02f3
  02f3:3c                 dup 
  02f4:35 01              ldi 1 
  02f6:1a                 eq? 
  02f7:30 000f            bnt code_0309 
  02fa:38 0096          pushi 96 // $96 setCycle
  02fd:7a               push2 
  02fe:51 1b            class Beg 
  0300:36                push 
  0301:7c            pushSelf 
  0302:81 00              lag  
  0304:4a 08             send 8 

  0306:32 0126            jmp code_042f 

        code_0309
  0309:3c                 dup 
  030a:35 02              ldi 2 
  030c:1a                 eq? 
  030d:30 001d            bnt code_032d 
  0310:39 05            pushi 5 // $5 view
  0312:78               push1 
  0313:38 023a          pushi 23a // $23a sel_570
  0316:38 00a2          pushi a2 // $a2 setLoop
  0319:78               push1 
  031a:39 08            pushi 8 // $8 underBits
  031c:38 0120          pushi 120 // $120 setCel
  031f:78               push1 
  0320:39 06            pushi 6 // $6 loop
  0322:81 00              lag  
  0324:4a 12             send 12 

  0326:35 04              ldi 4 
  0328:65 12             aTop seconds 
  032a:32 0102            jmp code_042f 

        code_032d
  032d:3c                 dup 
  032e:35 03              ldi 3 
  0330:1a                 eq? 
  0331:30 001d            bnt code_0351 
  0334:39 08            pushi 8 // $8 underBits
  0336:89 00              lsg  
  0338:38 0190          pushi 190 // $190 roomToEdge
  033b:76               push0 
  033c:39 43            pushi 43 // $43 at
  033e:39 ff            pushi ff // $ff syncNum
  0340:39 0f            pushi f // $f lsBottom
  0342:39 46            pushi 46 // $46 width
  0344:38 0118          pushi 118 // $118 isNotHidden
  0347:45 12 10         callb procedure_0012 10 //  

  034a:35 1e              ldi 1e 
  034c:65 16             aTop ticks 
  034e:32 00de            jmp code_042f 

        code_0351
  0351:3c                 dup 
  0352:35 04              ldi 4 
  0354:1a                 eq? 
  0355:30 001d            bnt code_0375 
  0358:39 08            pushi 8 // $8 underBits
  035a:89 00              lsg  
  035c:38 0190          pushi 190 // $190 roomToEdge
  035f:78               push1 
  0360:39 43            pushi 43 // $43 at
  0362:39 ff            pushi ff // $ff syncNum
  0364:39 0f            pushi f // $f lsBottom
  0366:39 46            pushi 46 // $46 width
  0368:38 0118          pushi 118 // $118 isNotHidden
  036b:45 12 10         callb procedure_0012 10 //  

  036e:35 1e              ldi 1e 
  0370:65 16             aTop ticks 
  0372:32 00ba            jmp code_042f 

        code_0375
  0375:3c                 dup 
  0376:35 05              ldi 5 
  0378:1a                 eq? 
  0379:30 001d            bnt code_0399 
  037c:39 08            pushi 8 // $8 underBits
  037e:89 00              lsg  
  0380:38 0190          pushi 190 // $190 roomToEdge
  0383:7a               push2 
  0384:39 43            pushi 43 // $43 at
  0386:39 ff            pushi ff // $ff syncNum
  0388:39 0f            pushi f // $f lsBottom
  038a:39 46            pushi 46 // $46 width
  038c:38 0118          pushi 118 // $118 isNotHidden
  038f:45 12 10         callb procedure_0012 10 //  

  0392:35 03              ldi 3 
  0394:65 12             aTop seconds 
  0396:32 0096            jmp code_042f 

        code_0399
  0399:3c                 dup 
  039a:35 06              ldi 6 
  039c:1a                 eq? 
  039d:30 0018            bnt code_03b8 
  03a0:39 05            pushi 5 // $5 view
  03a2:38 0190          pushi 190 // $190 roomToEdge
  03a5:39 03            pushi 3 // $3 y
  03a7:39 43            pushi 43 // $43 at
  03a9:39 ff            pushi ff // $ff syncNum
  03ab:38 00b9          pushi b9 // $b9 bottom
  03ae:45 0e 0a         callb procedure_000e a //  

  03b1:35 03              ldi 3 
  03b3:65 12             aTop seconds 
  03b5:32 0077            jmp code_042f 

        code_03b8
  03b8:3c                 dup 
  03b9:35 07              ldi 7 
  03bb:1a                 eq? 
  03bc:30 003b            bnt code_03fa 
  03bf:39 08            pushi 8 // $8 underBits
  03c1:89 00              lsg  
  03c3:38 0190          pushi 190 // $190 roomToEdge
  03c6:39 04            pushi 4 // $4 x
  03c8:39 43            pushi 43 // $43 at
  03ca:39 ff            pushi ff // $ff syncNum
  03cc:39 0f            pushi f // $f lsBottom
  03ce:39 46            pushi 46 // $46 width
  03d0:38 0118          pushi 118 // $118 isNotHidden
  03d3:45 12 10         callb procedure_0012 10 //  

  03d6:38 020a          pushi 20a // $20a normalize
  03d9:76               push0 
  03da:38 00db          pushi db // $db cycleSpeed
  03dd:78               push1 
  03de:39 06            pushi 6 // $6 loop
  03e0:39 38            pushi 38 // $38 moveSpeed
  03e2:78               push1 
  03e3:39 06            pushi 6 // $6 loop
  03e5:38 011b          pushi 11b // $11b setMotion
  03e8:39 04            pushi 4 // $4 x
  03ea:51 1e            class MoveTo 
  03ec:36                push 
  03ed:38 010e          pushi 10e // $10e description
  03f0:39 5f            pushi 5f // $5f sec
  03f2:7c            pushSelf 
  03f3:81 00              lag  
  03f5:4a 1c             send 1c 

  03f7:32 0035            jmp code_042f 

        code_03fa
  03fa:3c                 dup 
  03fb:35 08              ldi 8 
  03fd:1a                 eq? 
  03fe:30 002e            bnt code_042f 
  0401:39 03            pushi 3 // $3 y
  0403:89 00              lsg  
  0405:38 0190          pushi 190 // $190 roomToEdge
  0408:39 05            pushi 5 // $5 view
  040a:45 12 06         callb procedure_0012 6 //  

  040d:39 05            pushi 5 // $5 view
  040f:38 0190          pushi 190 // $190 roomToEdge
  0412:39 06            pushi 6 // $6 loop
  0414:39 43            pushi 43 // $43 at
  0416:39 ff            pushi ff // $ff syncNum
  0418:38 00b9          pushi b9 // $b9 bottom
  041b:45 0e 0a         callb procedure_000e a //  

  041e:38 0179          pushi 179 // $179 newRoom
  0421:78               push1 
  0422:38 0185          pushi 185 // $185 east
  0425:76               push0 
  0426:81 02              lag  
  0428:4a 04             send 4 

  042a:36                push 
  042b:81 02              lag  
  042d:4a 06             send 6 


        code_042f
  042f:3a                toss 
  0430:48                 ret 
  0431:00                bnot 
    )

)

// 04e8
(instance sFromManager of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_046c
  046c:87 01              lap param1 
  046e:65 0a             aTop state 
  0470:36                push 
  0471:3c                 dup 
  0472:35 00              ldi 0 
  0474:1a                 eq? 
  0475:30 0020            bnt code_0498 
  0478:38 00db          pushi db // $db cycleSpeed
  047b:78               push1 
  047c:39 06            pushi 6 // $6 loop
  047e:39 38            pushi 38 // $38 moveSpeed
  0480:78               push1 
  0481:39 06            pushi 6 // $6 loop
  0483:38 011b          pushi 11b // $11b setMotion
  0486:39 04            pushi 4 // $4 x
  0488:51 1e            class MoveTo 
  048a:36                push 
  048b:38 00a0          pushi a0 // $a0 mute
  048e:39 64            pushi 64 // $64 moveDone
  0490:7c            pushSelf 
  0491:81 00              lag  
  0493:4a 18             send 18 

  0495:32 0048            jmp code_04e0 

        code_0498
  0498:3c                 dup 
  0499:35 01              ldi 1 
  049b:1a                 eq? 
  049c:30 0020            bnt code_04bf 
  049f:39 03            pushi 3 // $3 y
  04a1:89 00              lsg  
  04a3:38 0190          pushi 190 // $190 roomToEdge
  04a6:39 07            pushi 7 // $7 cel
  04a8:45 12 06         callb procedure_0012 6 //  

  04ab:38 011b          pushi 11b // $11b setMotion
  04ae:39 04            pushi 4 // $4 x
  04b0:51 1e            class MoveTo 
  04b2:36                push 
  04b3:39 20            pushi 20 // $20 state
  04b5:39 64            pushi 64 // $64 moveDone
  04b7:7c            pushSelf 
  04b8:81 00              lag  
  04ba:4a 0c             send c 

  04bc:32 0021            jmp code_04e0 

        code_04bf
  04bf:3c                 dup 
  04c0:35 02              ldi 2 
  04c2:1a                 eq? 
  04c3:30 001a            bnt code_04e0 
  04c6:7a               push2 
  04c7:38 0190          pushi 190 // $190 roomToEdge
  04ca:39 08            pushi 8 // $8 underBits
  04cc:45 0e 04         callb procedure_000e 4 //  

  04cf:38 0179          pushi 179 // $179 newRoom
  04d2:78               push1 
  04d3:38 0187          pushi 187 // $187 west
  04d6:76               push0 
  04d7:81 02              lag  
  04d9:4a 04             send 4 

  04db:36                push 
  04dc:81 02              lag  
  04de:4a 06             send 6 


        code_04e0
  04e0:3a                toss 
  04e1:48                 ret 
    )

)



