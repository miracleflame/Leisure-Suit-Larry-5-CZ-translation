(script 200)

(string
    string_2f70 "You've always wondered what it would be like to travel by limousine."
    string_2fb5 "Bobbi"
    string_2fbb "Bobby"
    string_2fc1 "rm200"
    string_2fc7 "sFishScript"
    string_2fd3 "the fish"
    string_2fdc "There's a carsick goldfish in the limousine's aquarium."
    string_3014 "fish"
    string_3019 "the privacy window"
    string_302c "A piece of soundproof glass blocks conversation between you and your driver."
    string_3079 "glass"
    string_307f "the DayTrotter"
    string_308f "dayTrotter"
    string_309a "your leg"
    string_30a3 "You've always felt your legs were one of your better assets."
    string_30e0 "legs"
    string_30e5 "the television set"
    string_30f8 "theTv"
    string_30fe "tv"
    string_3101 "the telephone"
    string_310f "phone"
    string_3115 "dreamProp1"
    string_3120 "dreamProp2"
    string_312b "dreamProp3"
    string_3136 "arm"
    string_313a "the champagne bottle"
    string_314f "bottle"
    string_3156 "the fax"
    string_315e "faxPaper"
    string_3167 "the video recorder"
    string_317a "A professional quality videotape player rests above the television set."
    string_31c2 "vcr"
    string_31c6 "the video tapes"
    string_31d6 "There are many videotapes in that rack that you would love to see. Unfortunately, the VCR is broken!"
    string_323b "tapes"
    string_3241 "the aquarium"
    string_324e "How bizarre! A limousine with an aquarium!"
    string_3279 "fishTank"
    string_3282 "dreamBubble"
    string_328e "the bottles and glasses"
    string_32a6 "There are enough bottles of liquor and glasses to throw a party. All you need now is some friends!"
    string_3309 "bottles&Glasses"
    string_3319 "the stereo"
    string_3324 "The limousine's stereo has both a cassette tape player and a CD."
    string_3365 "stereo"
    string_336c "the cabinet door"
    string_337d "A small, locked liquor compartment rests beneath the right front passenger's seat. You wonder when it will be your turn to live high on the hog."
    string_340e "rightDoor"
    string_3418 "sRoll"
    string_341e "Desmond"
    string_3426 "ReverseBiaz"
    string_3432 "PCHammer"
    string_343b "You"
    string_343f "sPhone"
    string_3446 "the mirror"
    string_3451 "driverEyes"
    string_345c "sLegs"
    string_3462 "the window"
    string_346d "windowL"
    string_3475 "tvSnd"
    string_347b "the fax machine"
    string_348b "faxMachine"
    string_3496 "sFax"
    string_349b "your limo driver"
    string_34ac "driverBody"
    string_34b7 "You are sealed off from your driver by that big soundproof glass window."
    string_3500 "driversWindow"
    string_350e "sGetBottle"
    string_3519 "sDrive"
    string_3520 "Sh"
    string_3523 "H"
    string_3525 "sh"
    string_3528 "h"
    string_352a "driver"
    string_3531 "Donald"
    string_3538 "The Donald"
    string_3543 "Willie"
    string_354a "Sir Francis"
    string_3556 "sDream"
    string_355d ""
)

(said
)

(local
    local0 = $0000
    local1 = $0000
    local2 = $0000
    local3 = $0000
    local4 = $0000
    local5 = $0005
    local6 = $0000
    local7 = $0000
    local8 = $0000
    local9 = $0000
    local10 = $0000
    local11 = $0000
    local12 = $0000
    local13 = $0000
    local14 = $0000
    local15 = $0000
    local16 = $0000
    local17 = $0001
    local18 = $0075
    local19 = $0078
    local20 = $0000
    local21 = $0002
    local22 = $0094
    local23 = $0062
    local24 = $0000
    local25 = $0003
    local26 = $00c3
    local27 = $0073
    local28 = $0000
    local29 = $0004
    local30 = $00c7
    local31 = $007c
    local32 = $8000
    local33 = $0000
    local34 = $0000
    local35 = $0000
    local36 = $0000
)

// 055e
(instance publicrm200 of LLRoom
    (properties
        script $0
        number $0
        timer $0
        keep $0
        initialized $0
        lookStr $2f70
        picture $c8
        style $ffff
        horizon $0
        controls $0
        north $0
        east $0
        south $0
        west $0
        curPic $0
        picAngle $0
        vanishingX $a0
        vanishingY $8ad0
        obstacles $0
    )
    (method (init) // method_000e
  000e:3f 01             link 1 // (var $1)
  0010:89 0c              lsg  
  0012:34 00cd            ldi cd 
  0015:1c                 ne? 
  0016:30 0018            bnt code_0031 
  0019:39 2b            pushi 2b // $2b number
  001b:78               push1 
  001c:76               push0 
  001d:38 009c          pushi 9c // $9c stop
  0020:76               push0 
  0021:81 66              lag  
  0023:4a 0a             send a 

  0025:39 2b            pushi 2b // $2b number
  0027:78               push1 
  0028:76               push0 
  0029:38 009c          pushi 9c // $9c stop
  002c:76               push0 
  002d:81 67              lag  
  002f:4a 0a             send a 


        code_0031
  0031:39 03            pushi 3 // $3 y
  0033:38 0080          pushi 80 // $80 indexOf
  0036:38 00c8          pushi c8 // $c8 dispatchEvent
  0039:38 00ce          pushi ce // $ce curIcon
  003c:46 03be 0000 06  calle 3be procedure_0000 6 //  

  0042:76               push0 
  0043:45 03 00         callb procedure_0003 0 //  

  0046:78               push1 
  0047:78               push1 
  0048:45 16 02         callb procedure_0016 2 //  

  004b:38 011a          pushi 11a // $11a canControl
  004e:78               push1 
  004f:76               push0 
  0050:51 31            class User 
  0052:4a 06             send 6 

  0054:89 0c              lsg  
  0056:3c                 dup 
  0057:34 01f4            ldi 1f4 
  005a:1a                 eq? 
  005b:30 0009            bnt code_0067 
  005e:78               push1 
  005f:39 09            pushi 9 // $9 nsTop
  0061:45 07 02         callb procedure_0007 2 //  

  0064:32 0067            jmp code_00ce 

        code_0067
  0067:3c                 dup 
  0068:34 0258            ldi 258 
  006b:1a                 eq? 
  006c:30 0007            bnt code_0076 
  006f:35 01              ldi 1 
  0071:a1 a1              sag  
  0073:32 0058            jmp code_00ce 

        code_0076
  0076:3c                 dup 
  0077:34 02b2            ldi 2b2 
  007a:1a                 eq? 
  007b:30 000d            bnt code_008b 
  007e:35 01              ldi 1 
  0080:a1 a1              sag  
  0082:78               push1 
  0083:39 1d            pushi 1d // $1d back
  0085:45 07 02         callb procedure_0007 2 //  

  0088:32 0043            jmp code_00ce 

        code_008b
  008b:3c                 dup 
  008c:34 02bc            ldi 2bc 
  008f:1a                 eq? 
  0090:30 0009            bnt code_009c 
  0093:78               push1 
  0094:39 0a            pushi a // $a nsLeft
  0096:45 07 02         callb procedure_0007 2 //  

  0099:32 0032            jmp code_00ce 

        code_009c
  009c:3c                 dup 
  009d:34 0320            ldi 320 
  00a0:1a                 eq? 
  00a1:30 0007            bnt code_00ab 
  00a4:35 02              ldi 2 
  00a6:a1 a1              sag  
  00a8:32 0023            jmp code_00ce 

        code_00ab
  00ab:3c                 dup 
  00ac:34 037a            ldi 37a 
  00af:1a                 eq? 
  00b0:30 000d            bnt code_00c0 
  00b3:35 02              ldi 2 
  00b5:a1 a1              sag  
  00b7:78               push1 
  00b8:39 1c            pushi 1c // $1c color
  00ba:45 07 02         callb procedure_0007 2 //  

  00bd:32 000e            jmp code_00ce 

        code_00c0
  00c0:3c                 dup 
  00c1:34 0384            ldi 384 
  00c4:1a                 eq? 
  00c5:30 0006            bnt code_00ce 
  00c8:78               push1 
  00c9:39 0b            pushi b // $b nsBottom
  00cb:45 07 02         callb procedure_0007 2 //  


        code_00ce
  00ce:3a                toss 
  00cf:81 b3              lag  
  00d1:30 00ca            bnt code_019e 
  00d4:39 03            pushi 3 // $3 y
  00d6:38 0080          pushi 80 // $80 indexOf
  00d9:38 00cc          pushi cc // $cc oldMouseX
  00dc:38 00c9          pushi c9 // $c9 disable
  00df:46 03be 0000 06  calle 3be procedure_0000 6 //  

  00e5:39 6b            pushi 6b // $6b init
  00e7:76               push0 
  00e8:39 05            pushi 5 // $5 view
  00ea:78               push1 
  00eb:38 00c9          pushi c9 // $c9 disable
  00ee:38 011c          pushi 11c // $11c posn
  00f1:39 03            pushi 3 // $3 y
  00f3:39 43            pushi 43 // $43 at
  00f5:39 58            pushi 58 // $58 subtitleLang
  00f7:39 9c            pushi 9c // $9c stop
  00f9:39 42            pushi 42 // $42 setPri
  00fb:78               push1 
  00fc:39 0e            pushi e // $e lsLeft
  00fe:38 0096          pushi 96 // $96 setCycle
  0101:78               push1 
  0102:76               push0 
  0103:38 00a2          pushi a2 // $a2 setLoop
  0106:78               push1 
  0107:76               push0 
  0108:38 00db          pushi db // $db cycleSpeed
  010b:78               push1 
  010c:39 06            pushi 6 // $6 loop
  010e:38 0120          pushi 120 // $120 setCel
  0111:78               push1 
  0112:76               push0 
  0113:38 00c2          pushi c2 // $c2 show
  0116:76               push0 
  0117:38 011e          pushi 11e // $11e forceUpd
  011a:76               push0 
  011b:81 00              lag  
  011d:4a 3a             send 3a 

  011f:89 0c              lsg  
  0121:34 00cd            ldi cd 
  0124:1c                 ne? 
  0125:30 000d            bnt code_0135 
  0128:76               push0 
  0129:45 02 00         callb procedure_0002 0 //  

  012c:39 03            pushi 3 // $3 y
  012e:7a               push2 
  012f:7a               push2 
  0130:89 02              lsg  
  0132:45 11 06         callb procedure_0011 6 //  


        code_0135
  0135:39 6b            pushi 6b // $6b init
  0137:76               push0 
  0138:39 05            pushi 5 // $5 view
  013a:78               push1 
  013b:38 00cc          pushi cc // $cc oldMouseX
  013e:38 00a2          pushi a2 // $a2 setLoop
  0141:78               push1 
  0142:7a               push2 
  0143:38 011d          pushi 11d // $11d stopUpd
  0146:76               push0 
  0147:72 2b80          lofsa $2b80 // driver
  014a:4a 14             send 14 

  014c:39 6b            pushi 6b // $6b init
  014e:76               push0 
  014f:39 05            pushi 5 // $5 view
  0151:78               push1 
  0152:38 00cc          pushi cc // $cc oldMouseX
  0155:38 0120          pushi 120 // $120 setCel
  0158:78               push1 
  0159:78               push1 
  015a:38 00a2          pushi a2 // $a2 setLoop
  015d:78               push1 
  015e:76               push0 
  015f:72 1d2a          lofsa $1d2a // driverBody
  0162:4a 16             send 16 

  0164:39 6b            pushi 6b // $6b init
  0166:76               push0 
  0167:39 05            pushi 5 // $5 view
  0169:78               push1 
  016a:38 00cc          pushi cc // $cc oldMouseX
  016d:72 1974          lofsa $1974 // driverEyes
  0170:4a 0a             send a 

  0172:89 0c              lsg  
  0174:34 00fa            ldi fa 
  0177:1c                 ne? 
  0178:30 000c            bnt code_0187 
  017b:38 00c9          pushi c9 // $c9 disable
  017e:78               push1 
  017f:76               push0 
  0180:81 45              lag  
  0182:4a 06             send 6 

  0184:32 0004            jmp code_018b 

        code_0187
  0187:35 01              ldi 1 
  0189:a3 0f              sal local15 

        code_018b
  018b:39 6b            pushi 6b // $6b init
  018d:76               push0 
  018e:38 010e          pushi 10e // $10e description
  0191:78               push1 
  0192:72 2fb5          lofsa $2fb5 // Bobbi
  0195:36                push 
  0196:72 1da0          lofsa $1da0 // driversWindow
  0199:4a 0a             send a 

  019b:32 011e            jmp code_02bc 

        code_019e
  019e:39 03            pushi 3 // $3 y
  01a0:38 0080          pushi 80 // $80 indexOf
  01a3:38 00cb          pushi cb // $cb height
  01a6:38 00ca          pushi ca // $ca noClickHelp
  01a9:46 03be 0000 06  calle 3be procedure_0000 6 //  

  01af:39 04            pushi 4 // $4 x
  01b1:89 0c              lsg  
  01b3:38 0320          pushi 320 // $320 sel_800
  01b6:38 0258          pushi 258 // $258 sel_600
  01b9:38 01a9          pushi 1a9 // $1a9 surrogate
  01bc:46 03e7 0005 08  calle 3e7 procedure_0005 8 //  

  01c2:30 0010            bnt code_01d5 
  01c5:38 00a7          pushi a7 // $a7 enable
  01c8:78               push1 
  01c9:76               push0 
  01ca:81 45              lag  
  01cc:4a 06             send 6 

  01ce:35 01              ldi 1 
  01d0:a3 0f              sal local15 
  01d2:32 0009            jmp code_01de 

        code_01d5
  01d5:38 00c9          pushi c9 // $c9 disable
  01d8:78               push1 
  01d9:76               push0 
  01da:81 45              lag  
  01dc:4a 06             send 6 


        code_01de
  01de:39 6b            pushi 6b // $6b init
  01e0:76               push0 
  01e1:39 05            pushi 5 // $5 view
  01e3:78               push1 
  01e4:38 00cb          pushi cb // $cb height
  01e7:38 00a2          pushi a2 // $a2 setLoop
  01ea:78               push1 
  01eb:7a               push2 
  01ec:72 2b80          lofsa $2b80 // driver
  01ef:4a 10             send 10 

  01f1:39 6b            pushi 6b // $6b init
  01f3:76               push0 
  01f4:39 05            pushi 5 // $5 view
  01f6:78               push1 
  01f7:38 00cb          pushi cb // $cb height
  01fa:38 0120          pushi 120 // $120 setCel
  01fd:78               push1 
  01fe:78               push1 
  01ff:38 00a2          pushi a2 // $a2 setLoop
  0202:78               push1 
  0203:76               push0 
  0204:72 1d2a          lofsa $1d2a // driverBody
  0207:4a 16             send 16 

  0209:39 6b            pushi 6b // $6b init
  020b:76               push0 
  020c:39 05            pushi 5 // $5 view
  020e:78               push1 
  020f:38 00cb          pushi cb // $cb height
  0212:72 1974          lofsa $1974 // driverEyes
  0215:4a 0a             send a 

  0217:39 6b            pushi 6b // $6b init
  0219:76               push0 
  021a:39 05            pushi 5 // $5 view
  021c:78               push1 
  021d:38 00ca          pushi ca // $ca noClickHelp
  0220:38 00a2          pushi a2 // $a2 setLoop
  0223:78               push1 
  0224:39 06            pushi 6 // $6 loop
  0226:38 011c          pushi 11c // $11c posn
  0229:39 03            pushi 3 // $3 y
  022b:39 41            pushi 41 // $41 replay
  022d:39 58            pushi 58 // $58 subtitleLang
  022f:39 9c            pushi 9c // $9c stop
  0231:39 42            pushi 42 // $42 setPri
  0233:78               push1 
  0234:39 0e            pushi e // $e lsLeft
  0236:38 0120          pushi 120 // $120 setCel
  0239:78               push1 
  023a:76               push0 
  023b:38 0096          pushi 96 // $96 setCycle
  023e:78               push1 
  023f:76               push0 
  0240:38 0121          pushi 121 // $121 ignoreActors
  0243:78               push1 
  0244:78               push1 
  0245:38 00c2          pushi c2 // $c2 show
  0248:76               push0 
  0249:38 00db          pushi db // $db cycleSpeed
  024c:78               push1 
  024d:39 06            pushi 6 // $6 loop
  024f:38 011e          pushi 11e // $11e forceUpd
  0252:76               push0 
  0253:81 00              lag  
  0255:4a 40             send 40 

  0257:39 6b            pushi 6b // $6b init
  0259:76               push0 
  025a:38 008e          pushi 8e // $8e setScript
  025d:78               push1 
  025e:72 1a4e          lofsa $1a4e // sLegs
  0261:36                push 
  0262:72 0a54          lofsa $0a54 // legs
  0265:4a 0a             send a 

  0267:78               push1 
  0268:39 1e            pushi 1e // $1e mode
  026a:45 06 02         callb procedure_0006 2 //  

  026d:18                 not 
  026e:30 000c            bnt code_027d 
  0271:39 6b            pushi 6b // $6b init
  0273:76               push0 
  0274:38 011d          pushi 11d // $11d stopUpd
  0277:76               push0 
  0278:72 0f96          lofsa $0f96 // bottle
  027b:4a 08             send 8 


        code_027d
  027d:78               push1 
  027e:39 1c            pushi 1c // $1c color
  0280:45 06 02         callb procedure_0006 2 //  

  0283:30 001b            bnt code_02a1 
  0286:78               push1 
  0287:39 1d            pushi 1d // $1d back
  0289:45 06 02         callb procedure_0006 2 //  

  028c:30 0012            bnt code_02a1 
  028f:39 03            pushi 3 // $3 y
  0291:39 14            pushi 14 // $14 brLeft
  0293:78               push1 
  0294:89 02              lsg  
  0296:45 11 06         callb procedure_0011 6 //  

  0299:76               push0 
  029a:45 02 00         callb procedure_0002 0 //  

  029d:35 03              ldi 3 
  029f:a1 9d              sag  

        code_02a1
  02a1:39 6b            pushi 6b // $6b init
  02a3:76               push0 
  02a4:38 010e          pushi 10e // $10e description
  02a7:78               push1 
  02a8:72 2fbb          lofsa $2fbb // Bobby
  02ab:36                push 
  02ac:72 1da0          lofsa $1da0 // driversWindow
  02af:4a 0a             send a 

  02b1:39 6b            pushi 6b // $6b init
  02b3:76               push0 
  02b4:39 69            pushi 69 // $69 hide
  02b6:76               push0 
  02b7:72 0bd2          lofsa $0bd2 // tv
  02ba:4a 08             send 8 


        code_02bc
  02bc:39 6b            pushi 6b // $6b init
  02be:76               push0 
  02bf:38 011d          pushi 11d // $11d stopUpd
  02c2:76               push0 
  02c3:72 0c7c          lofsa $0c7c // phone
  02c6:4a 08             send 8 

  02c8:39 6b            pushi 6b // $6b init
  02ca:76               push0 
  02cb:38 011d          pushi 11d // $11d stopUpd
  02ce:76               push0 
  02cf:72 0908          lofsa $0908 // glass
  02d2:4a 08             send 8 

  02d4:39 6b            pushi 6b // $6b init
  02d6:76               push0 
  02d7:72 0b64          lofsa $0b64 // theTv
  02da:4a 04             send 4 

  02dc:39 6b            pushi 6b // $6b init
  02de:76               push0 
  02df:72 1474          lofsa $1474 // rightDoor
  02e2:4a 04             send 4 

  02e4:39 6b            pushi 6b // $6b init
  02e6:76               push0 
  02e7:72 140c          lofsa $140c // stereo
  02ea:4a 04             send 4 

  02ec:39 6b            pushi 6b // $6b init
  02ee:76               push0 
  02ef:72 13a4          lofsa $13a4 // bottles&Glasses
  02f2:4a 04             send 4 

  02f4:39 6b            pushi 6b // $6b init
  02f6:76               push0 
  02f7:72 12ba          lofsa $12ba // fishTank
  02fa:4a 04             send 4 

  02fc:39 6b            pushi 6b // $6b init
  02fe:76               push0 
  02ff:72 123a          lofsa $123a // tapes
  0302:4a 04             send 4 

  0304:39 6b            pushi 6b // $6b init
  0306:76               push0 
  0307:72 11d2          lofsa $11d2 // vcr
  030a:4a 04             send 4 

  030c:39 6b            pushi 6b // $6b init
  030e:76               push0 
  030f:72 1bda          lofsa $1bda // faxMachine
  0312:4a 04             send 4 

  0314:39 6b            pushi 6b // $6b init
  0316:76               push0 
  0317:38 0096          pushi 96 // $96 setCycle
  031a:78               push1 
  031b:51 17            class Fwd 
  031d:36                push 
  031e:38 011c          pushi 11c // $11c posn
  0321:7a               push2 
  0322:7a               push2 
  0323:38 00f1          pushi f1 // $f1 escaping
  0326:38 0130          pushi 130 // $130 ignoreBlocks
  0329:43 3c 04         callk Random 4 

  032c:36                push 
  032d:7a               push2 
  032e:39 57            pushi 57 // $57 printLang
  0330:39 6a            pushi 6a // $6a new
  0332:43 3c 04         callk Random 4 

  0335:36                push 
  0336:38 008e          pushi 8e // $8e setScript
  0339:78               push1 
  033a:72 07a8          lofsa $07a8 // sFishScript
  033d:36                push 
  033e:72 082c          lofsa $082c // fish
  0341:4a 18             send 18 

  0343:89 a0              lsg  
  0345:35 01              ldi 1 
  0347:1a                 eq? 
  0348:30 001b            bnt code_0366 
  034b:78               push1 
  034c:39 1f            pushi 1f // $1f style
  034e:45 06 02         callb procedure_0006 2 //  

  0351:18                 not 
  0352:30 0011            bnt code_0366 
  0355:89 0c              lsg  
  0357:34 00fa            ldi fa 
  035a:1a                 eq? 
  035b:30 0008            bnt code_0366 
  035e:39 6b            pushi 6b // $6b init
  0360:76               push0 
  0361:72 09f4          lofsa $09f4 // dayTrotter
  0364:4a 04             send 4 


        code_0366
  0366:7a               push2 
  0367:38 0081          pushi 81 // $81 handleEvent
  036a:78               push1 
  036b:43 00 04         callk Load 4 

  036e:7a               push2 
  036f:38 0082          pushi 82 // $82 start
  0372:38 03ad          pushi 3ad // $3ad sel_941
  0375:43 00 04         callk Load 4 

  0378:39 6b            pushi 6b // $6b init
  037a:76               push0 
  037b:57 72 04         super LLRoom 4 

  037e:89 0c              lsg  
  0380:3c                 dup 
  0381:34 00cd            ldi cd 
  0384:1a                 eq? 
  0385:30 0020            bnt code_03a8 
  0388:76               push0 
  0389:45 02 00         callb procedure_0002 0 //  

  038c:35 01              ldi 1 
  038e:a3 07              sal local7 
  0390:38 018c          pushi 18c // $18c drawPic
  0393:7a               push2 
  0394:38 00c8          pushi c8 // $c8 dispatchEvent
  0397:39 0b            pushi b // $b nsBottom
  0399:38 008e          pushi 8e // $8e setScript
  039c:78               push1 
  039d:72 227c          lofsa $227c // sDrive
  03a0:36                push 
  03a1:81 02              lag  
  03a3:4a 0e             send e 

  03a5:32 0023            jmp code_03cb 

        code_03a8
  03a8:3c                 dup 
  03a9:34 037a            ldi 37a 
  03ac:1a                 eq? 
  03ad:30 0010            bnt code_03c0 
  03b0:38 018c          pushi 18c // $18c drawPic
  03b3:7a               push2 
  03b4:38 00c8          pushi c8 // $c8 dispatchEvent
  03b7:39 07            pushi 7 // $7 cel
  03b9:81 02              lag  
  03bb:4a 08             send 8 

  03bd:32 000b            jmp code_03cb 

        code_03c0
  03c0:38 018c          pushi 18c // $18c drawPic
  03c3:78               push1 
  03c4:38 00c8          pushi c8 // $c8 dispatchEvent
  03c7:81 02              lag  
  03c9:4a 06             send 6 


        code_03cb
  03cb:3a                toss 
  03cc:48                 ret 
    )

    (method (doit) // method_0421
  0421:39 3c            pushi 3c // $3c doit
  0423:76               push0 
  0424:57 72 04         super LLRoom 4 

  0427:83 08              lal local8 
  0429:30 000c            bnt code_0438 
  042c:39 04            pushi 4 // $4 x
  042e:39 06            pushi 6 // $6 loop
  0430:39 38            pushi 38 // $38 moveSpeed
  0432:39 3f            pushi 3f // $3f priority
  0434:7a               push2 
  0435:43 6f 08         callk Palette 8 


        code_0438
  0438:48                 ret 
    )

    (method (doVerb) // method_051a
  051a:8f 01              lsp param1 
  051c:3c                 dup 
  051d:35 01              ldi 1 
  051f:1a                 eq? 
  0520:30 0027            bnt code_054a 
  0523:39 24            pushi 24 // $24 cursor
  0525:76               push0 
  0526:39 43            pushi 43 // $43 at
  0528:78               push1 
  0529:76               push0 
  052a:81 45              lag  
  052c:4a 06             send 6 

  052e:4a 04             send 4 

  0530:36                push 
  0531:35 06              ldi 6 
  0533:1a                 eq? 
  0534:30 001e            bnt code_0555 
  0537:83 07              lal local7 
  0539:18                 not 
  053a:30 0018            bnt code_0555 
  053d:38 0179          pushi 179 // $179 newRoom
  0540:78               push1 
  0541:89 0c              lsg  
  0543:81 02              lag  
  0545:4a 06             send 6 

  0547:32 000b            jmp code_0555 

        code_054a
  054a:38 010c          pushi 10c // $10c doVerb
  054d:78               push1 
  054e:8f 01              lsp param1 
  0550:59 02            &rest 2 
  0552:57 72 06         super LLRoom 6 


        code_0555
  0555:3a                toss 
  0556:48                 ret 
  0557:00                bnot 
    )

    (method (cue) // method_0439
  0439:81 b3              lag  
  043b:30 0089            bnt code_04c7 
  043e:c3 00              +al local0 
  0440:36                push 
  0441:3c                 dup 
  0442:35 01              ldi 1 
  0444:1a                 eq? 
  0445:30 002f            bnt code_0477 
  0448:39 03            pushi 3 // $3 y
  044a:89 0c              lsg  
  044c:38 00be          pushi be // $be maskLoop
  044f:38 00fa          pushi fa // $fa outOfTouch
  0452:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  0458:30 000b            bnt code_0466 
  045b:39 03            pushi 3 // $3 y
  045d:7a               push2 
  045e:78               push1 
  045f:7c            pushSelf 
  0460:45 11 06         callb procedure_0011 6 //  

  0463:32 005d            jmp code_04c3 

        code_0466
  0466:39 05            pushi 5 // $5 view
  0468:89 00              lsg  
  046a:38 00c8          pushi c8 // $c8 dispatchEvent
  046d:76               push0 
  046e:39 6c            pushi 6c // $6c dispose
  0470:7c            pushSelf 
  0471:45 12 0a         callb procedure_0012 a //  

  0474:32 004c            jmp code_04c3 

        code_0477
  0477:3c                 dup 
  0478:35 02              ldi 2 
  047a:1a                 eq? 
  047b:30 002b            bnt code_04a9 
  047e:39 03            pushi 3 // $3 y
  0480:89 0c              lsg  
  0482:38 00cd          pushi cd // $cd oldMouseY
  0485:38 00fa          pushi fa // $fa outOfTouch
  0488:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  048e:18                 not 
  048f:18                 not 
  0490:30 000b            bnt code_049e 
  0493:35 00              ldi 0 
  0495:a3 00              sal local0 
  0497:76               push0 
  0498:45 03 00         callb procedure_0003 0 //  

  049b:32 0025            jmp code_04c3 

        code_049e
  049e:39 03            pushi 3 // $3 y
  04a0:7a               push2 
  04a1:78               push1 
  04a2:7c            pushSelf 
  04a3:45 11 06         callb procedure_0011 6 //  

  04a6:32 001a            jmp code_04c3 

        code_04a9
  04a9:3c                 dup 
  04aa:35 03              ldi 3 
  04ac:1a                 eq? 
  04ad:30 0013            bnt code_04c3 
  04b0:78               push1 
  04b1:39 08            pushi 8 // $8 underBits
  04b3:45 07 02         callb procedure_0007 2 //  

  04b6:38 010c          pushi 10c // $10c doVerb
  04b9:7a               push2 
  04ba:39 04            pushi 4 // $4 x
  04bc:39 07            pushi 7 // $7 cel
  04be:72 2b80          lofsa $2b80 // driver
  04c1:4a 08             send 8 


        code_04c3
  04c3:3a                toss 
  04c4:32 0020            jmp code_04e7 

        code_04c7
  04c7:76               push0 
  04c8:45 02 00         callb procedure_0002 0 //  

  04cb:39 03            pushi 3 // $3 y
  04cd:89 00              lsg  
  04cf:38 00c8          pushi c8 // $c8 dispatchEvent
  04d2:78               push1 
  04d3:45 12 06         callb procedure_0012 6 //  

  04d6:34 01a9            ldi 1a9 
  04d9:a1 b0              sag  
  04db:38 008e          pushi 8e // $8e setScript
  04de:78               push1 
  04df:72 2f42          lofsa $2f42 // sDream
  04e2:36                push 
  04e3:81 02              lag  
  04e5:4a 06             send 6 


        code_04e7
  04e7:48                 ret 
    )

    (method (newRoom) // method_03cd
  03cd:8f 01              lsp param1 
  03cf:34 00cd            ldi cd 
  03d2:1a                 eq? 
  03d3:30 0012            bnt code_03e8 
  03d6:38 009f          pushi 9f // $9f fade
  03d9:39 04            pushi 4 // $4 x
  03db:76               push0 
  03dc:39 0f            pushi f // $f lsBottom
  03de:39 0a            pushi a // $a nsLeft
  03e0:78               push1 
  03e1:81 66              lag  
  03e3:4a 0c             send c 

  03e5:32 000c            jmp code_03f4 

        code_03e8
  03e8:38 009c          pushi 9c // $9c stop
  03eb:76               push0 
  03ec:81 66              lag  
  03ee:4a 04             send 4 

  03f0:35 00              ldi 0 
  03f2:a1 b0              sag  

        code_03f4
  03f4:38 009c          pushi 9c // $9c stop
  03f7:76               push0 
  03f8:81 67              lag  
  03fa:4a 04             send 4 

  03fc:38 009c          pushi 9c // $9c stop
  03ff:76               push0 
  0400:39 6c            pushi 6c // $6c dispose
  0402:76               push0 
  0403:72 1b3a          lofsa $1b3a // tvSnd
  0406:4a 08             send 8 

  0408:78               push1 
  0409:76               push0 
  040a:45 16 02         callb procedure_0016 2 //  

  040d:39 6c            pushi 6c // $6c dispose
  040f:76               push0 
  0410:39 54            pushi 54 // $54 delete
  0412:76               push0 
  0413:81 aa              lag  
  0415:4a 08             send 8 

  0417:38 0179          pushi 179 // $179 newRoom
  041a:78               push1 
  041b:8f 01              lsp param1 
  041d:57 72 06         super LLRoom 6 

  0420:48                 ret 
    )

    (method (notify) // method_04e8
  04e8:35 00              ldi 0 
  04ea:a3 09              sal local9 
  04ec:8f 01              lsp param1 
  04ee:3c                 dup 
  04ef:34 0adb            ldi adb 
  04f2:1a                 eq? 
  04f3:30 0007            bnt code_04fd 
  04f6:35 01              ldi 1 
  04f8:a3 09              sal local9 
  04fa:32 001b            jmp code_0518 

        code_04fd
  04fd:3c                 dup 
  04fe:35 ff              ldi ff 
  0500:1a                 eq? 
  0501:30 000b            bnt code_050f 
  0504:7a               push2 
  0505:38 00c8          pushi c8 // $c8 dispatchEvent
  0508:7a               push2 
  0509:45 0e 04         callb procedure_000e 4 //  

  050c:32 0009            jmp code_0518 

        code_050f
  050f:7a               push2 
  0510:38 00c8          pushi c8 // $c8 dispatchEvent
  0513:39 03            pushi 3 // $3 y
  0515:45 0e 04         callb procedure_000e 4 //  


        code_0518
  0518:3a                toss 
  0519:48                 ret 
    )

)

// 07a2
(instance sFishScript of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_05b2
  05b2:3f 02             link 2 // (var $2)
  05b4:87 01              lap param1 
  05b6:65 0a             aTop state 
  05b8:36                push 
  05b9:3c                 dup 
  05ba:35 00              ldi 0 
  05bc:1a                 eq? 
  05bd:30 0038            bnt code_05f8 
  05c0:89 ac              lsg  
  05c2:35 03              ldi 3 
  05c4:22                 lt? 
  05c5:30 000d            bnt code_05d5 
  05c8:38 00a2          pushi a2 // $a2 setLoop
  05cb:78               push1 
  05cc:78               push1 
  05cd:72 082c          lofsa $082c // fish
  05d0:4a 06             send 6 

  05d2:32 000b            jmp code_05e0 

        code_05d5
  05d5:38 00a2          pushi a2 // $a2 setLoop
  05d8:78               push1 
  05d9:39 03            pushi 3 // $3 y
  05db:72 082c          lofsa $082c // fish
  05de:4a 06             send 6 


        code_05e0
  05e0:81 b3              lag  
  05e2:18                 not 
  05e3:30 000b            bnt code_05f1 
  05e6:38 008c          pushi 8c // $8c changeState
  05e9:78               push1 
  05ea:39 0a            pushi a // $a nsLeft
  05ec:54 06             self 6 

  05ee:32 01a8            jmp code_0799 

        code_05f1
  05f1:35 01              ldi 1 
  05f3:65 10             aTop cycles 
  05f5:32 01a1            jmp code_0799 

        code_05f8
  05f8:3c                 dup 
  05f9:35 01              ldi 1 
  05fb:1a                 eq? 
  05fc:30 000b            bnt code_060a 
  05ff:63 0a             pToa state 
  0601:65 0c             aTop start 
  0603:35 01              ldi 1 
  0605:65 10             aTop cycles 
  0607:32 018f            jmp code_0799 

        code_060a
  060a:3c                 dup 
  060b:35 02              ldi 2 
  060d:1a                 eq? 
  060e:30 0099            bnt code_06aa 
  0611:39 04            pushi 4 // $4 x
  0613:76               push0 
  0614:72 082c          lofsa $082c // fish
  0617:4a 04             send 4 

  0619:36                push 
  061a:34 0106            ldi 106 
  061d:22                 lt? 
  061e:30 0045            bnt code_0666 
  0621:89 ac              lsg  
  0623:35 03              ldi 3 
  0625:22                 lt? 
  0626:30 000d            bnt code_0636 
  0629:38 00a2          pushi a2 // $a2 setLoop
  062c:78               push1 
  062d:78               push1 
  062e:72 082c          lofsa $082c // fish
  0631:4a 06             send 6 

  0633:32 000b            jmp code_0641 

        code_0636
  0636:38 00a2          pushi a2 // $a2 setLoop
  0639:78               push1 
  063a:39 03            pushi 3 // $3 y
  063c:72 082c          lofsa $082c // fish
  063f:4a 06             send 6 


        code_0641
  0641:38 011b          pushi 11b // $11b setMotion
  0644:39 04            pushi 4 // $4 x
  0646:51 1e            class MoveTo 
  0648:36                push 
  0649:7a               push2 
  064a:38 010e          pushi 10e // $10e description
  064d:38 0130          pushi 130 // $130 ignoreBlocks
  0650:43 3c 04         callk Random 4 

  0653:36                push 
  0654:7a               push2 
  0655:39 57            pushi 57 // $57 printLang
  0657:39 6a            pushi 6a // $6a new
  0659:43 3c 04         callk Random 4 

  065c:36                push 
  065d:7c            pushSelf 
  065e:72 082c          lofsa $082c // fish
  0661:4a 0c             send c 

  0663:32 0133            jmp code_0799 

        code_0666
  0666:89 ac              lsg  
  0668:35 03              ldi 3 
  066a:22                 lt? 
  066b:30 000d            bnt code_067b 
  066e:38 00a2          pushi a2 // $a2 setLoop
  0671:78               push1 
  0672:76               push0 
  0673:72 082c          lofsa $082c // fish
  0676:4a 06             send 6 

  0678:32 000a            jmp code_0685 

        code_067b
  067b:38 00a2          pushi a2 // $a2 setLoop
  067e:78               push1 
  067f:7a               push2 
  0680:72 082c          lofsa $082c // fish
  0683:4a 06             send 6 


        code_0685
  0685:38 011b          pushi 11b // $11b setMotion
  0688:39 04            pushi 4 // $4 x
  068a:51 1e            class MoveTo 
  068c:36                push 
  068d:7a               push2 
  068e:38 00f1          pushi f1 // $f1 escaping
  0691:38 00fa          pushi fa // $fa outOfTouch
  0694:43 3c 04         callk Random 4 

  0697:36                push 
  0698:7a               push2 
  0699:39 57            pushi 57 // $57 printLang
  069b:39 6a            pushi 6a // $6a new
  069d:43 3c 04         callk Random 4 

  06a0:36                push 
  06a1:7c            pushSelf 
  06a2:72 082c          lofsa $082c // fish
  06a5:4a 0c             send c 

  06a7:32 00ef            jmp code_0799 

        code_06aa
  06aa:3c                 dup 
  06ab:35 03              ldi 3 
  06ad:1a                 eq? 
  06ae:30 0007            bnt code_06b8 
  06b1:35 02              ldi 2 
  06b3:65 12             aTop seconds 
  06b5:32 00e1            jmp code_0799 

        code_06b8
  06b8:3c                 dup 
  06b9:35 04              ldi 4 
  06bb:1a                 eq? 
  06bc:30 0008            bnt code_06c7 
  06bf:39 6b            pushi 6b // $6b init
  06c1:76               push0 
  06c2:54 04             self 4 

  06c4:32 00d2            jmp code_0799 

        code_06c7
  06c7:3c                 dup 
  06c8:35 0a              ldi a 
  06ca:1a                 eq? 
  06cb:30 000b            bnt code_06d9 
  06ce:63 0a             pToa state 
  06d0:65 0c             aTop start 
  06d2:35 01              ldi 1 
  06d4:65 10             aTop cycles 
  06d6:32 00c0            jmp code_0799 

        code_06d9
  06d9:3c                 dup 
  06da:35 0b              ldi b 
  06dc:1a                 eq? 
  06dd:30 006c            bnt code_074c 
  06e0:39 04            pushi 4 // $4 x
  06e2:76               push0 
  06e3:72 082c          lofsa $082c // fish
  06e6:4a 04             send 4 

  06e8:36                push 
  06e9:34 0106            ldi 106 
  06ec:22                 lt? 
  06ed:30 002e            bnt code_071e 
  06f0:35 01              ldi 1 
  06f2:65 1a             aTop register 
  06f4:38 00a2          pushi a2 // $a2 setLoop
  06f7:78               push1 
  06f8:78               push1 
  06f9:38 011b          pushi 11b // $11b setMotion
  06fc:39 04            pushi 4 // $4 x
  06fe:51 1e            class MoveTo 
  0700:36                push 
  0701:7a               push2 
  0702:38 010e          pushi 10e // $10e description
  0705:38 0130          pushi 130 // $130 ignoreBlocks
  0708:43 3c 04         callk Random 4 

  070b:36                push 
  070c:7a               push2 
  070d:39 57            pushi 57 // $57 printLang
  070f:39 6a            pushi 6a // $6a new
  0711:43 3c 04         callk Random 4 

  0714:36                push 
  0715:7c            pushSelf 
  0716:72 082c          lofsa $082c // fish
  0719:4a 12             send 12 

  071b:32 007b            jmp code_0799 

        code_071e
  071e:35 00              ldi 0 
  0720:65 1a             aTop register 
  0722:38 00a2          pushi a2 // $a2 setLoop
  0725:78               push1 
  0726:76               push0 
  0727:38 011b          pushi 11b // $11b setMotion
  072a:39 04            pushi 4 // $4 x
  072c:51 1e            class MoveTo 
  072e:36                push 
  072f:7a               push2 
  0730:38 00f1          pushi f1 // $f1 escaping
  0733:38 00fa          pushi fa // $fa outOfTouch
  0736:43 3c 04         callk Random 4 

  0739:36                push 
  073a:7a               push2 
  073b:39 57            pushi 57 // $57 printLang
  073d:39 6a            pushi 6a // $6a new
  073f:43 3c 04         callk Random 4 

  0742:36                push 
  0743:7c            pushSelf 
  0744:72 082c          lofsa $082c // fish
  0747:4a 12             send 12 

  0749:32 004d            jmp code_0799 

        code_074c
  074c:3c                 dup 
  074d:35 0c              ldi c 
  074f:1a                 eq? 
  0750:30 003a            bnt code_078d 
  0753:7a               push2 
  0754:76               push0 
  0755:7a               push2 
  0756:43 3c 04         callk Random 4 

  0759:18                 not 
  075a:30 0029            bnt code_0786 
  075d:63 1a             pToa register 
  075f:30 000e            bnt code_0770 
  0762:38 00a2          pushi a2 // $a2 setLoop
  0765:78               push1 
  0766:39 03            pushi 3 // $3 y
  0768:72 082c          lofsa $082c // fish
  076b:4a 06             send 6 

  076d:32 000a            jmp code_077a 

        code_0770
  0770:38 00a2          pushi a2 // $a2 setLoop
  0773:78               push1 
  0774:7a               push2 
  0775:72 082c          lofsa $082c // fish
  0778:4a 06             send 6 


        code_077a
  077a:7a               push2 
  077b:78               push1 
  077c:39 03            pushi 3 // $3 y
  077e:43 3c 04         callk Random 4 

  0781:65 12             aTop seconds 
  0783:32 0013            jmp code_0799 

        code_0786
  0786:35 01              ldi 1 
  0788:65 12             aTop seconds 
  078a:32 000c            jmp code_0799 

        code_078d
  078d:3c                 dup 
  078e:35 0d              ldi d 
  0790:1a                 eq? 
  0791:30 0005            bnt code_0799 
  0794:39 6b            pushi 6b // $6b init
  0796:76               push0 
  0797:54 04             self 4 


        code_0799
  0799:3a                toss 
  079a:48                 ret 
  079b:00                bnot 
    )

)

// 0826
(instance fish of Actor
    (properties
        x $f5
        y $64
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $2fd3
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $2fdc
        yStep $2
        view $ce
        loop $0
        cel $0
        priority $0
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $3
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (doVerb) // method_07d6
  07d6:8f 01              lsp param1 
  07d8:3c                 dup 
  07d9:35 03              ldi 3 
  07db:1a                 eq? 
  07dc:30 000c            bnt code_07eb 
  07df:7a               push2 
  07e0:38 00c8          pushi c8 // $c8 dispatchEvent
  07e3:39 04            pushi 4 // $4 x
  07e5:45 0e 04         callb procedure_000e 4 //  

  07e8:32 0033            jmp code_081e 

        code_07eb
  07eb:3c                 dup 
  07ec:35 05              ldi 5 
  07ee:1a                 eq? 
  07ef:30 000c            bnt code_07fe 
  07f2:7a               push2 
  07f3:38 00c8          pushi c8 // $c8 dispatchEvent
  07f6:39 05            pushi 5 // $5 view
  07f8:45 0e 04         callb procedure_000e 4 //  

  07fb:32 0020            jmp code_081e 

        code_07fe
  07fe:3c                 dup 
  07ff:35 0a              ldi a 
  0801:1a                 eq? 
  0802:30 000c            bnt code_0811 
  0805:7a               push2 
  0806:38 00c8          pushi c8 // $c8 dispatchEvent
  0809:39 06            pushi 6 // $6 loop
  080b:45 0e 04         callb procedure_000e 4 //  

  080e:32 000d            jmp code_081e 

        code_0811
  0811:38 010c          pushi 10c // $10c doVerb
  0814:7a               push2 
  0815:8f 01              lsp param1 
  0817:8f 02              lsp param2 
  0819:59 03            &rest 3 
  081b:57 30 08         super Actor 8 


        code_081e
  081e:3a                toss 
  081f:48                 ret 
    )

)

// 0902
(instance glass of Actor
    (properties
        x $9c
        y $26
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3019
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $302c
        yStep $4
        view $c8
        loop $0
        cel $3
        priority $3
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $0
        xLast $0
        yLast $0
        xStep $4
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (cue) // method_08a6
  08a6:38 008d          pushi 8d // $8d cue
  08a9:76               push0 
  08aa:57 30 04         super Actor 4 

  08ad:83 04              lal local4 
  08af:18                 not 
  08b0:30 0007            bnt code_08ba 
  08b3:35 01              ldi 1 
  08b5:a3 04              sal local4 
  08b7:32 0004            jmp code_08be 

        code_08ba
  08ba:35 00              ldi 0 
  08bc:a3 04              sal local4 

        code_08be
  08be:38 011d          pushi 11d // $11d stopUpd
  08c1:76               push0 
  08c2:54 04             self 4 

  08c4:76               push0 
  08c5:45 03 00         callb procedure_0003 0 //  

  08c8:38 011a          pushi 11a // $11a canControl
  08cb:78               push1 
  08cc:76               push0 
  08cd:51 31            class User 
  08cf:4a 06             send 6 

  08d1:83 07              lal local7 
  08d3:2e 0018             bt code_08ee 
  08d6:83 0f              lal local15 
  08d8:18                 not 
  08d9:2e 0012             bt code_08ee 
  08dc:39 24            pushi 24 // $24 cursor
  08de:76               push0 
  08df:39 43            pushi 43 // $43 at
  08e1:78               push1 
  08e2:76               push0 
  08e3:81 45              lag  
  08e5:4a 06             send 6 

  08e7:4a 04             send 4 

  08e9:36                push 
  08ea:35 06              ldi 6 
  08ec:1a                 eq? 
  08ed:18                 not 

        code_08ee
  08ee:30 0009            bnt code_08fa 
  08f1:38 00c9          pushi c9 // $c9 disable
  08f4:78               push1 
  08f5:76               push0 
  08f6:81 45              lag  
  08f8:4a 06             send 6 


        code_08fa
  08fa:48                 ret 
  08fb:00                bnot 
    )

)

// 09ee
(instance dayTrotter of View
    (properties
        x $8
        y $bb
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $307f
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $c8
        loop $0
        cel $1
        priority $4
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_0982
  0982:8f 01              lsp param1 
  0984:3c                 dup 
  0985:35 02              ldi 2 
  0987:1a                 eq? 
  0988:30 0010            bnt code_099b 
  098b:7a               push2 
  098c:38 00c8          pushi c8 // $c8 dispatchEvent
  098f:39 07            pushi 7 // $7 cel
  0991:45 0e 04         callb procedure_000e 4 //  

  0994:35 01              ldi 1 
  0996:a3 0b              sal local11 
  0998:32 004a            jmp code_09e5 

        code_099b
  099b:3c                 dup 
  099c:35 03              ldi 3 
  099e:1a                 eq? 
  099f:30 0036            bnt code_09d8 
  09a2:76               push0 
  09a3:45 02 00         callb procedure_0002 0 //  

  09a6:39 6b            pushi 6b // $6b init
  09a8:76               push0 
  09a9:39 05            pushi 5 // $5 view
  09ab:78               push1 
  09ac:38 00c9          pushi c9 // $c9 disable
  09af:38 00a2          pushi a2 // $a2 setLoop
  09b2:78               push1 
  09b3:7a               push2 
  09b4:38 0120          pushi 120 // $120 setCel
  09b7:78               push1 
  09b8:76               push0 
  09b9:38 011c          pushi 11c // $11c posn
  09bc:7a               push2 
  09bd:39 43            pushi 43 // $43 at
  09bf:38 00a4          pushi a4 // $a4 check
  09c2:38 0096          pushi 96 // $96 setCycle
  09c5:39 04            pushi 4 // $4 x
  09c7:51 19            class CT 
  09c9:36                push 
  09ca:7a               push2 
  09cb:78               push1 
  09cc:72 0ee4          lofsa $0ee4 // arm
  09cf:36                push 
  09d0:72 0ee4          lofsa $0ee4 // arm
  09d3:4a 2a             send 2a 

  09d5:32 000d            jmp code_09e5 

        code_09d8
  09d8:38 010c          pushi 10c // $10c doVerb
  09db:7a               push2 
  09dc:8f 01              lsp param1 
  09de:8f 02              lsp param2 
  09e0:59 03            &rest 3 
  09e2:57 2e 08         super View 8 


        code_09e5
  09e5:3a                toss 
  09e6:48                 ret 
  09e7:00                bnot 
    )

)

// 0a4e
(instance legs of Prop
    (properties
        x $49
        y $b5
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $309a
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $30a3
        yStep $2
        view $ca
        loop $3
        cel $0
        priority $d
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0b5e
(instance theTv of Feature
    (properties
        x $a1
        y $5b
        z $0
        heading $0
        noun $0
        nsTop $40
        nsLeft $75
        nsBottom $76
        nsRight $cd
        description $30e5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_0ab2
  0ab2:8f 01              lsp param1 
  0ab4:3c                 dup 
  0ab5:35 02              ldi 2 
  0ab7:1a                 eq? 
  0ab8:30 002e            bnt code_0ae9 
  0abb:83 03              lal local3 
  0abd:30 000c            bnt code_0acc 
  0ac0:7a               push2 
  0ac1:38 00c8          pushi c8 // $c8 dispatchEvent
  0ac4:39 08            pushi 8 // $8 underBits
  0ac6:45 0e 04         callb procedure_000e 4 //  

  0ac9:32 008a            jmp code_0b56 

        code_0acc
  0acc:7a               push2 
  0acd:38 00c8          pushi c8 // $c8 dispatchEvent
  0ad0:39 09            pushi 9 // $9 nsTop
  0ad2:45 0e 04         callb procedure_000e 4 //  

  0ad5:39 05            pushi 5 // $5 view
  0ad7:38 00c8          pushi c8 // $c8 dispatchEvent
  0ada:39 0a            pushi a // $a nsLeft
  0adc:39 43            pushi 43 // $43 at
  0ade:39 ff            pushi ff // $ff syncNum
  0ae0:38 00b9          pushi b9 // $b9 bottom
  0ae3:45 0e 0a         callb procedure_000e a //  

  0ae6:32 006d            jmp code_0b56 

        code_0ae9
  0ae9:3c                 dup 
  0aea:35 03              ldi 3 
  0aec:1a                 eq? 
  0aed:30 0059            bnt code_0b49 
  0af0:81 b3              lag  
  0af2:30 0048            bnt code_0b3d 
  0af5:39 2b            pushi 2b // $2b number
  0af7:78               push1 
  0af8:38 00c9          pushi c9 // $c9 disable
  0afb:39 06            pushi 6 // $6 loop
  0afd:78               push1 
  0afe:78               push1 
  0aff:39 2a            pushi 2a // $2a play
  0b01:76               push0 
  0b02:72 1b3a          lofsa $1b3a // tvSnd
  0b05:4a 10             send 10 

  0b07:83 03              lal local3 
  0b09:30 0018            bnt code_0b24 
  0b0c:35 00              ldi 0 
  0b0e:a3 03              sal local3 
  0b10:39 69            pushi 69 // $69 hide
  0b12:76               push0 
  0b13:72 0bd2          lofsa $0bd2 // tv
  0b16:4a 04             send 4 

  0b18:7a               push2 
  0b19:38 00c8          pushi c8 // $c8 dispatchEvent
  0b1c:39 0b            pushi b // $b nsBottom
  0b1e:45 0e 04         callb procedure_000e 4 //  

  0b21:32 0032            jmp code_0b56 

        code_0b24
  0b24:35 01              ldi 1 
  0b26:a3 03              sal local3 
  0b28:38 00c2          pushi c2 // $c2 show
  0b2b:76               push0 
  0b2c:72 0bd2          lofsa $0bd2 // tv
  0b2f:4a 04             send 4 

  0b31:7a               push2 
  0b32:38 00c8          pushi c8 // $c8 dispatchEvent
  0b35:39 0c            pushi c // $c nsRight
  0b37:45 0e 04         callb procedure_000e 4 //  

  0b3a:32 0019            jmp code_0b56 

        code_0b3d
  0b3d:7a               push2 
  0b3e:38 00c8          pushi c8 // $c8 dispatchEvent
  0b41:39 0d            pushi d // $d lsTop
  0b43:45 0e 04         callb procedure_000e 4 //  

  0b46:32 000d            jmp code_0b56 

        code_0b49
  0b49:38 010c          pushi 10c // $10c doVerb
  0b4c:7a               push2 
  0b4d:8f 01              lsp param1 
  0b4f:8f 02              lsp param2 
  0b51:59 03            &rest 3 
  0b53:57 2c 08         super Feature 8 


        code_0b56
  0b56:3a                toss 
  0b57:48                 ret 
    )

)

// 0bcc
(instance tv of Prop
    (properties
        x $a2
        y $6e
        z $0
        heading $0
        noun $0
        nsTop $3f
        nsLeft $74
        nsBottom $76
        nsRight $ce
        description $30e5
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $cd
        loop $0
        cel $0
        priority $7
        underBits $0
        signal $0
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doit) // method_0b9c
  0b9c:39 3c            pushi 3c // $3c doit
  0b9e:76               push0 
  0b9f:57 2f 04         super Prop 4 

  0ba2:83 03              lal local3 
  0ba4:30 0011            bnt code_0bb8 
  0ba7:38 0120          pushi 120 // $120 setCel
  0baa:78               push1 
  0bab:7a               push2 
  0bac:76               push0 
  0bad:39 03            pushi 3 // $3 y
  0baf:43 3c 04         callk Random 4 

  0bb2:36                push 
  0bb3:72 0bd2          lofsa $0bd2 // tv
  0bb6:4a 06             send 6 


        code_0bb8
  0bb8:48                 ret 
    )

    (method (doVerb) // method_0bb9
  0bb9:38 010c          pushi 10c // $10c doVerb
  0bbc:76               push0 
  0bbd:59 01            &rest 1 
  0bbf:72 0b64          lofsa $0b64 // theTv
  0bc2:4a 04             send 4 

  0bc4:48                 ret 
  0bc5:00                bnot 
    )

)

// 0c76
(instance phone of Prop
    (properties
        x $a1
        y $10f
        z $64
        heading $0
        noun $0
        nsTop $a2
        nsLeft $8f
        nsBottom $ae
        nsRight $ba
        description $3101
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $c8
        loop $1
        cel $0
        priority $a
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_0c38
  0c38:8f 01              lsp param1 
  0c3a:3c                 dup 
  0c3b:35 02              ldi 2 
  0c3d:1a                 eq? 
  0c3e:30 000c            bnt code_0c4d 
  0c41:7a               push2 
  0c42:38 00c8          pushi c8 // $c8 dispatchEvent
  0c45:39 0e            pushi e // $e lsLeft
  0c47:45 0e 04         callb procedure_000e 4 //  

  0c4a:32 0021            jmp code_0c6e 

        code_0c4d
  0c4d:3c                 dup 
  0c4e:35 03              ldi 3 
  0c50:1a                 eq? 
  0c51:30 000d            bnt code_0c61 
  0c54:38 008e          pushi 8e // $8e setScript
  0c57:78               push1 
  0c58:72 193e          lofsa $193e // sPhone
  0c5b:36                push 
  0c5c:54 06             self 6 

  0c5e:32 000d            jmp code_0c6e 

        code_0c61
  0c61:38 010c          pushi 10c // $10c doVerb
  0c64:7a               push2 
  0c65:8f 01              lsp param1 
  0c67:8f 02              lsp param2 
  0c69:59 03            &rest 3 
  0c6b:57 2f 08         super Prop 8 


        code_0c6e
  0c6e:3a                toss 
  0c6f:48                 ret 
    )

)

// 0ce0
(instance dreamProp1 of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $e7
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0d46
(instance dreamProp2 of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $e7
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0dac
(instance dreamProp3 of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $e7
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 0ede
(instance arm of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $c9
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $4010
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (cue) // method_0e10
  0e10:38 008d          pushi 8d // $8d cue
  0e13:76               push0 
  0e14:57 2f 04         super Prop 4 

  0e17:c3 0e              +al local14 
  0e19:36                push 
  0e1a:3c                 dup 
  0e1b:35 01              ldi 1 
  0e1d:1a                 eq? 
  0e1e:30 002f            bnt code_0e50 
  0e21:83 01              lal local1 
  0e23:18                 not 
  0e24:30 0006            bnt code_0e2d 
  0e27:78               push1 
  0e28:39 0c            pushi c // $c nsRight
  0e2a:45 0a 02         callb procedure_000a 2 //  


        code_0e2d
  0e2d:38 0147          pushi 147 // $147 get
  0e30:78               push1 
  0e31:39 0b            pushi b // $b nsBottom
  0e33:81 00              lag  
  0e35:4a 06             send 6 

  0e37:78               push1 
  0e38:39 1f            pushi 1f // $1f style
  0e3a:45 07 02         callb procedure_0007 2 //  

  0e3d:39 6c            pushi 6c // $6c dispose
  0e3f:76               push0 
  0e40:72 09f4          lofsa $09f4 // dayTrotter
  0e43:4a 04             send 4 

  0e45:39 03            pushi 3 // $3 y
  0e47:7a               push2 
  0e48:78               push1 
  0e49:7c            pushSelf 
  0e4a:45 11 06         callb procedure_0011 6 //  

  0e4d:32 0085            jmp code_0ed5 

        code_0e50
  0e50:3c                 dup 
  0e51:35 02              ldi 2 
  0e53:1a                 eq? 
  0e54:30 000d            bnt code_0e64 
  0e57:38 0096          pushi 96 // $96 setCycle
  0e5a:7a               push2 
  0e5b:51 1b            class Beg 
  0e5d:36                push 
  0e5e:7c            pushSelf 
  0e5f:54 08             self 8 

  0e61:32 0071            jmp code_0ed5 

        code_0e64
  0e64:3c                 dup 
  0e65:35 03              ldi 3 
  0e67:1a                 eq? 
  0e68:30 006a            bnt code_0ed5 
  0e6b:35 00              ldi 0 
  0e6d:a3 0e              sal local14 
  0e6f:83 0b              lal local11 
  0e71:18                 not 
  0e72:30 0009            bnt code_0e7e 
  0e75:7a               push2 
  0e76:38 00c8          pushi c8 // $c8 dispatchEvent
  0e79:39 07            pushi 7 // $7 cel
  0e7b:45 0e 04         callb procedure_000e 4 //  


        code_0e7e
  0e7e:7a               push2 
  0e7f:38 00c8          pushi c8 // $c8 dispatchEvent
  0e82:39 0f            pushi f // $f lsBottom
  0e84:45 0e 04         callb procedure_000e 4 //  

  0e87:83 01              lal local1 
  0e89:18                 not 
  0e8a:30 003e            bnt code_0ecb 
  0e8d:76               push0 
  0e8e:45 03 00         callb procedure_0003 0 //  

  0e91:38 011a          pushi 11a // $11a canControl
  0e94:78               push1 
  0e95:76               push0 
  0e96:51 31            class User 
  0e98:4a 06             send 6 

  0e9a:83 07              lal local7 
  0e9c:2e 0018             bt code_0eb7 
  0e9f:83 0f              lal local15 
  0ea1:18                 not 
  0ea2:2e 0012             bt code_0eb7 
  0ea5:39 24            pushi 24 // $24 cursor
  0ea7:76               push0 
  0ea8:39 43            pushi 43 // $43 at
  0eaa:78               push1 
  0eab:76               push0 
  0eac:81 45              lag  
  0eae:4a 06             send 6 

  0eb0:4a 04             send 4 

  0eb2:36                push 
  0eb3:35 06              ldi 6 
  0eb5:1a                 eq? 
  0eb6:18                 not 

        code_0eb7
  0eb7:30 001b            bnt code_0ed5 
  0eba:38 00c9          pushi c9 // $c9 disable
  0ebd:78               push1 
  0ebe:76               push0 
  0ebf:81 45              lag  
  0ec1:4a 06             send 6 

  0ec3:39 6c            pushi 6c // $6c dispose
  0ec5:76               push0 
  0ec6:54 04             self 4 

  0ec8:32 000a            jmp code_0ed5 

        code_0ecb
  0ecb:38 0179          pushi 179 // $179 newRoom
  0ece:78               push1 
  0ecf:89 b0              lsg  
  0ed1:81 02              lag  
  0ed3:4a 06             send 6 


        code_0ed5
  0ed5:3a                toss 
  0ed6:48                 ret 
  0ed7:00                bnot 
    )

)

// 0f90
(instance bottle of View
    (properties
        x $29
        y $6f
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $313a
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $c8
        loop $0
        cel $0
        priority $5
        underBits $0
        signal $810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
    )
    (method (doVerb) // method_0f46
  0f46:8f 01              lsp param1 
  0f48:3c                 dup 
  0f49:35 02              ldi 2 
  0f4b:1a                 eq? 
  0f4c:30 000c            bnt code_0f5b 
  0f4f:7a               push2 
  0f50:38 00c8          pushi c8 // $c8 dispatchEvent
  0f53:39 10            pushi 10 // $10 lsRight
  0f55:45 0e 04         callb procedure_000e 4 //  

  0f58:32 002d            jmp code_0f88 

        code_0f5b
  0f5b:3c                 dup 
  0f5c:35 03              ldi 3 
  0f5e:1a                 eq? 
  0f5f:30 0019            bnt code_0f7b 
  0f62:76               push0 
  0f63:45 02 00         callb procedure_0002 0 //  

  0f66:78               push1 
  0f67:39 1e            pushi 1e // $1e mode
  0f69:45 07 02         callb procedure_0007 2 //  

  0f6c:38 008e          pushi 8e // $8e setScript
  0f6f:78               push1 
  0f70:72 1efc          lofsa $1efc // sGetBottle
  0f73:36                push 
  0f74:81 00              lag  
  0f76:4a 06             send 6 

  0f78:32 000d            jmp code_0f88 

        code_0f7b
  0f7b:38 010c          pushi 10c // $10c doVerb
  0f7e:7a               push2 
  0f7f:8f 01              lsp param1 
  0f81:8f 02              lsp param2 
  0f83:59 03            &rest 3 
  0f85:57 2e 08         super View 8 


        code_0f88
  0f88:3a                toss 
  0f89:48                 ret 
    )

)

// 111e
(instance faxPaper of Actor
    (properties
        x $37
        y $e1
        z $64
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3156
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $1
        view $c8
        loop $0
        cel $2
        priority $6
        underBits $0
        signal $5810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
        illegalBits $8000
        xLast $0
        yLast $0
        xStep $1
        moveSpeed $6
        blocks $0
        baseSetter $0
        mover $0
        looper $0
        viewer $0
        avoider $0
        code $0
    )
    (method (doVerb) // method_10c9
  10c9:8f 01              lsp param1 
  10cb:3c                 dup 
  10cc:35 03              ldi 3 
  10ce:1a                 eq? 
  10cf:30 0036            bnt code_1108 
  10d2:38 0144          pushi 144 // $144 canInput
  10d5:76               push0 
  10d6:51 31            class User 
  10d8:4a 04             send 4 

  10da:36                push 
  10db:35 01              ldi 1 
  10dd:1a                 eq? 
  10de:30 0004            bnt code_10e5 
  10e1:76               push0 
  10e2:45 02 00         callb procedure_0002 0 //  


        code_10e5
  10e5:39 05            pushi 5 // $5 view
  10e7:78               push1 
  10e8:38 00ca          pushi ca // $ca noClickHelp
  10eb:38 00a2          pushi a2 // $a2 setLoop
  10ee:78               push1 
  10ef:78               push1 
  10f0:38 0120          pushi 120 // $120 setCel
  10f3:78               push1 
  10f4:76               push0 
  10f5:38 0096          pushi 96 // $96 setCycle
  10f8:39 04            pushi 4 // $4 x
  10fa:51 19            class CT 
  10fc:36                push 
  10fd:39 06            pushi 6 // $6 loop
  10ff:78               push1 
  1100:7c            pushSelf 
  1101:81 00              lag  
  1103:4a 1e             send 1e 

  1105:32 000d            jmp code_1115 

        code_1108
  1108:38 010c          pushi 10c // $10c doVerb
  110b:7a               push2 
  110c:8f 01              lsp param1 
  110e:8f 02              lsp param2 
  1110:59 03            &rest 3 
  1112:57 30 08         super Actor 8 


        code_1115
  1115:3a                toss 
  1116:48                 ret 
  1117:00                bnot 
    )

    (method (cue) // method_0fee
  0fee:38 008d          pushi 8d // $8d cue
  0ff1:76               push0 
  0ff2:57 30 04         super Actor 4 

  0ff5:c3 0c              +al local12 
  0ff7:36                push 
  0ff8:3c                 dup 
  0ff9:35 01              ldi 1 
  0ffb:1a                 eq? 
  0ffc:30 0018            bnt code_1017 
  0fff:76               push0 
  1000:45 02 00         callb procedure_0002 0 //  

  1003:39 69            pushi 69 // $69 hide
  1005:76               push0 
  1006:54 04             self 4 

  1008:38 0096          pushi 96 // $96 setCycle
  100b:7a               push2 
  100c:51 1a            class End 
  100e:36                push 
  100f:7c            pushSelf 
  1010:81 00              lag  
  1012:4a 08             send 8 

  1014:32 00b0            jmp code_10c7 

        code_1017
  1017:3c                 dup 
  1018:35 02              ldi 2 
  101a:1a                 eq? 
  101b:30 0015            bnt code_1033 
  101e:38 00a2          pushi a2 // $a2 setLoop
  1021:78               push1 
  1022:39 06            pushi 6 // $6 loop
  1024:81 00              lag  
  1026:4a 06             send 6 

  1028:39 03            pushi 3 // $3 y
  102a:7a               push2 
  102b:78               push1 
  102c:7c            pushSelf 
  102d:45 11 06         callb procedure_0011 6 //  

  1030:32 0094            jmp code_10c7 

        code_1033
  1033:3c                 dup 
  1034:35 03              ldi 3 
  1036:1a                 eq? 
  1037:30 008d            bnt code_10c7 
  103a:8b 0a              lsl local10 
  103c:3c                 dup 
  103d:35 01              ldi 1 
  103f:1a                 eq? 
  1040:30 001e            bnt code_1061 
  1043:7a               push2 
  1044:39 0d            pushi d // $d lsTop
  1046:39 67            pushi 67 // $67 quitGame
  1048:45 0a 04         callb procedure_000a 4 //  

  104b:7a               push2 
  104c:38 00c8          pushi c8 // $c8 dispatchEvent
  104f:39 11            pushi 11 // $11 signal
  1051:45 0e 04         callb procedure_000e 4 //  

  1054:38 0147          pushi 147 // $147 get
  1057:78               push1 
  1058:39 03            pushi 3 // $3 y
  105a:81 00              lag  
  105c:4a 06             send 6 

  105e:32 0022            jmp code_1083 

        code_1061
  1061:3c                 dup 
  1062:35 02              ldi 2 
  1064:1a                 eq? 
  1065:30 001b            bnt code_1083 
  1068:7a               push2 
  1069:39 0d            pushi d // $d lsTop
  106b:39 68            pushi 68 // $68 restart
  106d:45 0a 04         callb procedure_000a 4 //  

  1070:7a               push2 
  1071:38 00c8          pushi c8 // $c8 dispatchEvent
  1074:39 12            pushi 12 // $12 illegalBits
  1076:45 0e 04         callb procedure_000e 4 //  

  1079:38 0147          pushi 147 // $147 get
  107c:78               push1 
  107d:39 07            pushi 7 // $7 cel
  107f:81 00              lag  
  1081:4a 06             send 6 


        code_1083
  1083:3a                toss 
  1084:35 00              ldi 0 
  1086:a3 0c              sal local12 
  1088:35 00              ldi 0 
  108a:a3 0a              sal local10 
  108c:76               push0 
  108d:45 03 00         callb procedure_0003 0 //  

  1090:38 011a          pushi 11a // $11a canControl
  1093:78               push1 
  1094:76               push0 
  1095:51 31            class User 
  1097:4a 06             send 6 

  1099:83 07              lal local7 
  109b:2e 0018             bt code_10b6 
  109e:83 0f              lal local15 
  10a0:18                 not 
  10a1:2e 0012             bt code_10b6 
  10a4:39 24            pushi 24 // $24 cursor
  10a6:76               push0 
  10a7:39 43            pushi 43 // $43 at
  10a9:78               push1 
  10aa:76               push0 
  10ab:81 45              lag  
  10ad:4a 06             send 6 

  10af:4a 04             send 4 

  10b1:36                push 
  10b2:35 06              ldi 6 
  10b4:1a                 eq? 
  10b5:18                 not 

        code_10b6
  10b6:30 0009            bnt code_10c2 
  10b9:38 00c9          pushi c9 // $c9 disable
  10bc:78               push1 
  10bd:76               push0 
  10be:81 45              lag  
  10c0:4a 06             send 6 


        code_10c2
  10c2:39 6c            pushi 6c // $6c dispose
  10c4:76               push0 
  10c5:54 04             self 4 


        code_10c7
  10c7:3a                toss 
  10c8:48                 ret 
    )

)

// 11cc
(instance vcr of Feature
    (properties
        x $a2
        y $98
        z $64
        heading $0
        noun $0
        nsTop $2d
        nsLeft $72
        nsBottom $3c
        nsRight $d3
        description $3167
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $317a
    )
    (method (doVerb) // method_11a2
  11a2:8f 01              lsp param1 
  11a4:3c                 dup 
  11a5:35 03              ldi 3 
  11a7:1a                 eq? 
  11a8:30 000c            bnt code_11b7 
  11ab:7a               push2 
  11ac:38 00c8          pushi c8 // $c8 dispatchEvent
  11af:39 13            pushi 13 // $13 brTop
  11b1:45 0e 04         callb procedure_000e 4 //  

  11b4:32 000d            jmp code_11c4 

        code_11b7
  11b7:38 010c          pushi 10c // $10c doVerb
  11ba:7a               push2 
  11bb:8f 01              lsp param1 
  11bd:8f 02              lsp param2 
  11bf:59 03            &rest 3 
  11c1:57 2c 08         super Feature 8 


        code_11c4
  11c4:3a                toss 
  11c5:48                 ret 
    )

)

// 1234
(instance tapes of Feature
    (properties
        x $f5
        y $101
        z $c8
        heading $0
        noun $0
        nsTop $2d
        nsLeft $d3
        nsBottom $46
        nsRight $117
        description $31c6
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $31d6
    )
    (method (doVerb) // method_120a
  120a:8f 01              lsp param1 
  120c:3c                 dup 
  120d:35 03              ldi 3 
  120f:1a                 eq? 
  1210:30 000c            bnt code_121f 
  1213:7a               push2 
  1214:38 00c8          pushi c8 // $c8 dispatchEvent
  1217:39 14            pushi 14 // $14 brLeft
  1219:45 0e 04         callb procedure_000e 4 //  

  121c:32 000d            jmp code_122c 

        code_121f
  121f:38 010c          pushi 10c // $10c doVerb
  1222:7a               push2 
  1223:8f 01              lsp param1 
  1225:8f 02              lsp param2 
  1227:59 03            &rest 3 
  1229:57 2c 08         super Feature 8 


        code_122c
  122c:3a                toss 
  122d:48                 ret 
    )

)

// 12b4
(instance fishTank of Feature
    (properties
        x $10a
        y $5e
        z $0
        heading $0
        noun $0
        nsTop $47
        nsLeft $d9
        nsBottom $76
        nsRight $13c
        description $3241
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $324e
    )
    (method (doVerb) // method_1272
  1272:8f 01              lsp param1 
  1274:3c                 dup 
  1275:35 03              ldi 3 
  1277:1a                 eq? 
  1278:30 0023            bnt code_129e 
  127b:7a               push2 
  127c:76               push0 
  127d:39 0a            pushi a // $a nsLeft
  127f:43 3c 04         callk Random 4 

  1282:18                 not 
  1283:30 000c            bnt code_1292 
  1286:7a               push2 
  1287:38 00c8          pushi c8 // $c8 dispatchEvent
  128a:39 15            pushi 15 // $15 brBottom
  128c:45 0e 04         callb procedure_000e 4 //  

  128f:32 0019            jmp code_12ab 

        code_1292
  1292:7a               push2 
  1293:38 00c8          pushi c8 // $c8 dispatchEvent
  1296:39 04            pushi 4 // $4 x
  1298:45 0e 04         callb procedure_000e 4 //  

  129b:32 000d            jmp code_12ab 

        code_129e
  129e:38 010c          pushi 10c // $10c doVerb
  12a1:7a               push2 
  12a2:8f 01              lsp param1 
  12a4:8f 02              lsp param2 
  12a6:59 03            &rest 3 
  12a8:57 2c 08         super Feature 8 


        code_12ab
  12ab:3a                toss 
  12ac:48                 ret 
  12ad:00                bnot 
    )

)

// 12f4
(instance dreamBubble of Prop
    (properties
        x $0
        y $0
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $0
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $cf
        loop $0
        cel $0
        priority $f
        underBits $0
        signal $4810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 139e
(instance bottles&Glasses of Feature
    (properties
        x $49
        y $b2
        z $64
        heading $0
        noun $0
        nsTop $2e
        nsLeft $1f
        nsBottom $6f
        nsRight $73
        description $328e
        sightAngle $28
        actions $0
        onMeCheck $4
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $32a6
    )
    (method (doVerb) // method_1358
  1358:8f 01              lsp param1 
  135a:3c                 dup 
  135b:35 03              ldi 3 
  135d:1a                 eq? 
  135e:30 0028            bnt code_1389 
  1361:39 77            pushi 77 // $77 contains
  1363:78               push1 
  1364:72 0f96          lofsa $0f96 // bottle
  1367:36                push 
  1368:81 05              lag  
  136a:4a 06             send 6 

  136c:30 000e            bnt code_137d 
  136f:38 010c          pushi 10c // $10c doVerb
  1372:78               push1 
  1373:39 03            pushi 3 // $3 y
  1375:72 0f96          lofsa $0f96 // bottle
  1378:4a 06             send 6 

  137a:32 0019            jmp code_1396 

        code_137d
  137d:7a               push2 
  137e:38 00c8          pushi c8 // $c8 dispatchEvent
  1381:39 16            pushi 16 // $16 brRight
  1383:45 0e 04         callb procedure_000e 4 //  

  1386:32 000d            jmp code_1396 

        code_1389
  1389:38 010c          pushi 10c // $10c doVerb
  138c:7a               push2 
  138d:8f 01              lsp param1 
  138f:8f 02              lsp param2 
  1391:59 03            &rest 3 
  1393:57 2c 08         super Feature 8 


        code_1396
  1396:3a                toss 
  1397:48                 ret 
    )

)

// 1406
(instance stereo of Feature
    (properties
        x $a5
        y $f8
        z $64
        heading $0
        noun $0
        nsTop $75
        nsLeft $6e
        nsBottom $b2
        nsRight $de
        description $3319
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $3324
    )
    (method (doVerb) // method_13dc
  13dc:8f 01              lsp param1 
  13de:3c                 dup 
  13df:35 03              ldi 3 
  13e1:1a                 eq? 
  13e2:30 000c            bnt code_13f1 
  13e5:7a               push2 
  13e6:38 00c8          pushi c8 // $c8 dispatchEvent
  13e9:39 17            pushi 17 // $17 name
  13eb:45 0e 04         callb procedure_000e 4 //  

  13ee:32 000d            jmp code_13fe 

        code_13f1
  13f1:38 010c          pushi 10c // $10c doVerb
  13f4:7a               push2 
  13f5:8f 01              lsp param1 
  13f7:8f 02              lsp param2 
  13f9:59 03            &rest 3 
  13fb:57 2c 08         super Feature 8 


        code_13fe
  13fe:3a                toss 
  13ff:48                 ret 
    )

)

// 146e
(instance rightDoor of Feature
    (properties
        x $11e
        y $92
        z $0
        heading $0
        noun $0
        nsTop $7b
        nsLeft $fd
        nsBottom $aa
        nsRight $13f
        description $336c
        sightAngle $28
        actions $0
        onMeCheck $2
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $337d
    )
    (method (doVerb) // method_1444
  1444:8f 01              lsp param1 
  1446:3c                 dup 
  1447:35 03              ldi 3 
  1449:1a                 eq? 
  144a:30 000c            bnt code_1459 
  144d:7a               push2 
  144e:38 00c8          pushi c8 // $c8 dispatchEvent
  1451:39 18            pushi 18 // $18 key
  1453:45 0e 04         callb procedure_000e 4 //  

  1456:32 000d            jmp code_1466 

        code_1459
  1459:38 010c          pushi 10c // $10c doVerb
  145c:7a               push2 
  145d:8f 01              lsp param1 
  145f:8f 02              lsp param2 
  1461:59 03            &rest 3 
  1463:57 2c 08         super Feature 8 


        code_1466
  1466:3a                toss 
  1467:48                 ret 
    )

)

// 1528
(instance sRoll of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_14ac
  14ac:3f 02             link 2 // (var $2)
  14ae:87 01              lap param1 
  14b0:65 0a             aTop state 
  14b2:36                push 
  14b3:3c                 dup 
  14b4:35 00              ldi 0 
  14b6:1a                 eq? 
  14b7:30 001b            bnt code_14d5 
  14ba:38 00a2          pushi a2 // $a2 setLoop
  14bd:78               push1 
  14be:7a               push2 
  14bf:76               push0 
  14c0:78               push1 
  14c1:43 3c 04         callk Random 4 

  14c4:36                push 
  14c5:38 0096          pushi 96 // $96 setCycle
  14c8:7a               push2 
  14c9:51 1a            class End 
  14cb:36                push 
  14cc:7c            pushSelf 
  14cd:72 0ce6          lofsa $0ce6 // dreamProp1
  14d0:4a 0e             send e 

  14d2:32 004b            jmp code_1520 

        code_14d5
  14d5:3c                 dup 
  14d6:35 01              ldi 1 
  14d8:1a                 eq? 
  14d9:30 000d            bnt code_14e9 
  14dc:7a               push2 
  14dd:39 04            pushi 4 // $4 x
  14df:39 0a            pushi a // $a nsLeft
  14e1:43 3c 04         callk Random 4 

  14e4:65 10             aTop cycles 
  14e6:32 0037            jmp code_1520 

        code_14e9
  14e9:3c                 dup 
  14ea:35 02              ldi 2 
  14ec:1a                 eq? 
  14ed:30 0010            bnt code_1500 
  14f0:38 0096          pushi 96 // $96 setCycle
  14f3:7a               push2 
  14f4:51 1b            class Beg 
  14f6:36                push 
  14f7:7c            pushSelf 
  14f8:72 0ce6          lofsa $0ce6 // dreamProp1
  14fb:4a 08             send 8 

  14fd:32 0020            jmp code_1520 

        code_1500
  1500:3c                 dup 
  1501:35 03              ldi 3 
  1503:1a                 eq? 
  1504:30 000d            bnt code_1514 
  1507:7a               push2 
  1508:39 04            pushi 4 // $4 x
  150a:39 0a            pushi a // $a nsLeft
  150c:43 3c 04         callk Random 4 

  150f:65 10             aTop cycles 
  1511:32 000c            jmp code_1520 

        code_1514
  1514:3c                 dup 
  1515:35 04              ldi 4 
  1517:1a                 eq? 
  1518:30 0005            bnt code_1520 
  151b:39 6b            pushi 6b // $6b init
  151d:76               push0 
  151e:54 04             self 4 


        code_1520
  1520:3a                toss 
  1521:48                 ret 
    )

)

// 1938
(instance sPhone of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_155c
  155c:3f 02             link 2 // (var $2)
  155e:87 01              lap param1 
  1560:65 0a             aTop state 
  1562:36                push 
  1563:3c                 dup 
  1564:35 00              ldi 0 
  1566:1a                 eq? 
  1567:30 007f            bnt code_15e9 
  156a:76               push0 
  156b:45 02 00         callb procedure_0002 0 //  

  156e:7a               push2 
  156f:38 0084          pushi 84 // $84 cycles
  1572:39 24            pushi 24 // $24 cursor
  1574:43 00 04         callk Load 4 

  1577:35 01              ldi 1 
  1579:a3 06              sal local6 
  157b:81 b3              lag  
  157d:30 001d            bnt code_159d 
  1580:38 00db          pushi db // $db cycleSpeed
  1583:78               push1 
  1584:39 08            pushi 8 // $8 underBits
  1586:38 0096          pushi 96 // $96 setCycle
  1589:39 04            pushi 4 // $4 x
  158b:51 19            class CT 
  158d:36                push 
  158e:39 05            pushi 5 // $5 view
  1590:78               push1 
  1591:7c            pushSelf 
  1592:81 00              lag  
  1594:4a 12             send 12 

  1596:35 05              ldi 5 
  1598:65 1a             aTop register 
  159a:32 0393            jmp code_1930 

        code_159d
  159d:38 011d          pushi 11d // $11d stopUpd
  15a0:76               push0 
  15a1:81 00              lag  
  15a3:4a 04             send 4 

  15a5:39 6b            pushi 6b // $6b init
  15a7:76               push0 
  15a8:39 05            pushi 5 // $5 view
  15aa:78               push1 
  15ab:38 00ca          pushi ca // $ca noClickHelp
  15ae:38 011c          pushi 11c // $11c posn
  15b1:7a               push2 
  15b2:39 41            pushi 41 // $41 replay
  15b4:38 00bc          pushi bc // $bc helpStr
  15b7:38 00a2          pushi a2 // $a2 setLoop
  15ba:78               push1 
  15bb:76               push0 
  15bc:38 00db          pushi db // $db cycleSpeed
  15bf:78               push1 
  15c0:39 08            pushi 8 // $8 underBits
  15c2:38 0096          pushi 96 // $96 setCycle
  15c5:39 04            pushi 4 // $4 x
  15c7:51 19            class CT 
  15c9:36                push 
  15ca:39 03            pushi 3 // $3 y
  15cc:78               push1 
  15cd:7c            pushSelf 
  15ce:72 0ee4          lofsa $0ee4 // arm
  15d1:4a 2a             send 2a 

  15d3:38 008e          pushi 8e // $8e setScript
  15d6:78               push1 
  15d7:76               push0 
  15d8:38 0120          pushi 120 // $120 setCel
  15db:78               push1 
  15dc:76               push0 
  15dd:38 011d          pushi 11d // $11d stopUpd
  15e0:76               push0 
  15e1:72 0a54          lofsa $0a54 // legs
  15e4:4a 10             send 10 

  15e6:32 0347            jmp code_1930 

        code_15e9
  15e9:3c                 dup 
  15ea:35 01              ldi 1 
  15ec:1a                 eq? 
  15ed:30 003c            bnt code_162c 
  15f0:39 69            pushi 69 // $69 hide
  15f2:76               push0 
  15f3:72 0c7c          lofsa $0c7c // phone
  15f6:4a 04             send 4 

  15f8:39 2b            pushi 2b // $2b number
  15fa:78               push1 
  15fb:39 24            pushi 24 // $24 cursor
  15fd:39 06            pushi 6 // $6 loop
  15ff:78               push1 
  1600:78               push1 
  1601:39 2a            pushi 2a // $2a play
  1603:76               push0 
  1604:81 67              lag  
  1606:4a 10             send 10 

  1608:81 b3              lag  
  160a:30 000f            bnt code_161c 
  160d:38 0096          pushi 96 // $96 setCycle
  1610:7a               push2 
  1611:51 1a            class End 
  1613:36                push 
  1614:7c            pushSelf 
  1615:81 00              lag  
  1617:4a 08             send 8 

  1619:32 0314            jmp code_1930 

        code_161c
  161c:38 0096          pushi 96 // $96 setCycle
  161f:7a               push2 
  1620:51 1a            class End 
  1622:36                push 
  1623:7c            pushSelf 
  1624:72 0ee4          lofsa $0ee4 // arm
  1627:4a 08             send 8 

  1629:32 0304            jmp code_1930 

        code_162c
  162c:3c                 dup 
  162d:35 02              ldi 2 
  162f:1a                 eq? 
  1630:30 00af            bnt code_16e2 
  1633:81 b3              lag  
  1635:30 0035            bnt code_166d 
  1638:39 04            pushi 4 // $4 x
  163a:38 00c8          pushi c8 // $c8 dispatchEvent
  163d:39 19            pushi 19 // $19 time
  163f:39 50            pushi 50 // $50 title
  1641:72 2fb5          lofsa $2fb5 // Bobbi
  1644:36                push 
  1645:45 0e 08         callb procedure_000e 8 //  

  1648:39 04            pushi 4 // $4 x
  164a:38 00c8          pushi c8 // $c8 dispatchEvent
  164d:39 1a            pushi 1a // $1a text
  164f:39 50            pushi 50 // $50 title
  1651:72 2fb5          lofsa $2fb5 // Bobbi
  1654:36                push 
  1655:45 0e 08         callb procedure_000e 8 //  

  1658:39 03            pushi 3 // $3 y
  165a:89 00              lsg  
  165c:38 00c8          pushi c8 // $c8 dispatchEvent
  165f:39 1b            pushi 1b // $1b elements
  1661:45 12 06         callb procedure_0012 6 //  

  1664:6b 0a            ipToa state 
  1666:35 02              ldi 2 
  1668:65 10             aTop cycles 
  166a:32 02c3            jmp code_1930 

        code_166d
  166d:78               push1 
  166e:39 67            pushi 67 // $67 quitGame
  1670:45 06 02         callb procedure_0006 2 //  

  1673:30 0023            bnt code_1699 
  1676:78               push1 
  1677:39 68            pushi 68 // $68 restart
  1679:45 06 02         callb procedure_0006 2 //  

  167c:30 001a            bnt code_1699 
  167f:38 0144          pushi 144 // $144 canInput
  1682:78               push1 
  1683:78               push1 
  1684:51 31            class User 
  1686:4a 06             send 6 

  1688:39 6b            pushi 6b // $6b init
  168a:7a               push2 
  168b:78               push1 
  168c:7c            pushSelf 
  168d:7a               push2 
  168e:39 14            pushi 14 // $14 brLeft
  1690:76               push0 
  1691:43 02 04         callk ScriptID 4 

  1694:4a 08             send 8 

  1696:32 0297            jmp code_1930 

        code_1699
  1699:83 09              lal local9 
  169b:30 0012            bnt code_16b0 
  169e:7a               push2 
  169f:38 00c8          pushi c8 // $c8 dispatchEvent
  16a2:39 1c            pushi 1c // $1c color
  16a4:45 0e 04         callb procedure_000e 4 //  

  16a7:6b 0a            ipToa state 
  16a9:35 02              ldi 2 
  16ab:65 10             aTop cycles 
  16ad:32 0280            jmp code_1930 

        code_16b0
  16b0:83 0a              lal local10 
  16b2:18                 not 
  16b3:30 001a            bnt code_16d0 
  16b6:38 0144          pushi 144 // $144 canInput
  16b9:78               push1 
  16ba:78               push1 
  16bb:51 31            class User 
  16bd:4a 06             send 6 

  16bf:39 6b            pushi 6b // $6b init
  16c1:7a               push2 
  16c2:78               push1 
  16c3:7c            pushSelf 
  16c4:7a               push2 
  16c5:39 14            pushi 14 // $14 brLeft
  16c7:76               push0 
  16c8:43 02 04         callk ScriptID 4 

  16cb:4a 08             send 8 

  16cd:32 0260            jmp code_1930 

        code_16d0
  16d0:7a               push2 
  16d1:38 00c8          pushi c8 // $c8 dispatchEvent
  16d4:39 1d            pushi 1d // $1d back
  16d6:45 0e 04         callb procedure_000e 4 //  

  16d9:6b 0a            ipToa state 
  16db:35 02              ldi 2 
  16dd:65 10             aTop cycles 
  16df:32 024e            jmp code_1930 

        code_16e2
  16e2:3c                 dup 
  16e3:35 03              ldi 3 
  16e5:1a                 eq? 
  16e6:30 014c            bnt code_1835 
  16e9:38 00ce          pushi ce // $ce curIcon
  16ec:78               push1 
  16ed:39 43            pushi 43 // $43 at
  16ef:78               push1 
  16f0:7a               push2 
  16f1:81 45              lag  
  16f3:4a 06             send 6 

  16f5:36                push 
  16f6:81 45              lag  
  16f8:4a 06             send 6 

  16fa:38 00bb          pushi bb // $bb setCursor
  16fd:78               push1 
  16fe:39 24            pushi 24 // $24 cursor
  1700:76               push0 
  1701:38 00ce          pushi ce // $ce curIcon
  1704:76               push0 
  1705:81 45              lag  
  1707:4a 04             send 4 

  1709:4a 04             send 4 

  170b:36                push 
  170c:81 01              lag  
  170e:4a 06             send 6 

  1710:83 09              lal local9 
  1712:30 0119            bnt code_182e 
  1715:7a               push2 
  1716:38 00c8          pushi c8 // $c8 dispatchEvent
  1719:39 1e            pushi 1e // $1e mode
  171b:45 0e 04         callb procedure_000e 4 //  

  171e:39 04            pushi 4 // $4 x
  1720:38 00c8          pushi c8 // $c8 dispatchEvent
  1723:39 1f            pushi 1f // $1f style
  1725:39 50            pushi 50 // $50 title
  1727:72 341e          lofsa $341e // Desmond
  172a:36                push 
  172b:45 0e 08         callb procedure_000e 8 //  

  172e:78               push1 
  172f:39 67            pushi 67 // $67 quitGame
  1731:45 06 02         callb procedure_0006 2 //  

  1734:30 0034            bnt code_176b 
  1737:78               push1 
  1738:39 68            pushi 68 // $68 restart
  173a:45 06 02         callb procedure_0006 2 //  

  173d:30 002b            bnt code_176b 
  1740:39 03            pushi 3 // $3 y
  1742:89 00              lsg  
  1744:38 00c8          pushi c8 // $c8 dispatchEvent
  1747:39 20            pushi 20 // $20 state
  1749:45 12 06         callb procedure_0012 6 //  

  174c:39 04            pushi 4 // $4 x
  174e:38 00c8          pushi c8 // $c8 dispatchEvent
  1751:39 21            pushi 21 // $21 font
  1753:39 50            pushi 50 // $50 title
  1755:72 341e          lofsa $341e // Desmond
  1758:36                push 
  1759:45 0e 08         callb procedure_000e 8 //  

  175c:39 03            pushi 3 // $3 y
  175e:89 00              lsg  
  1760:38 00c8          pushi c8 // $c8 dispatchEvent
  1763:39 22            pushi 22 // $22 type
  1765:45 12 06         callb procedure_0012 6 //  

  1768:32 00ab            jmp code_1816 

        code_176b
  176b:78               push1 
  176c:39 67            pushi 67 // $67 quitGame
  176e:45 06 02         callb procedure_0006 2 //  

  1771:18                 not 
  1772:30 004c            bnt code_17c1 
  1775:78               push1 
  1776:39 68            pushi 68 // $68 restart
  1778:45 06 02         callb procedure_0006 2 //  

  177b:18                 not 
  177c:30 0042            bnt code_17c1 
  177f:39 03            pushi 3 // $3 y
  1781:89 00              lsg  
  1783:38 00c8          pushi c8 // $c8 dispatchEvent
  1786:39 23            pushi 23 // $23 window
  1788:45 12 06         callb procedure_0012 6 //  

  178b:39 04            pushi 4 // $4 x
  178d:38 00c8          pushi c8 // $c8 dispatchEvent
  1790:39 24            pushi 24 // $24 cursor
  1792:39 50            pushi 50 // $50 title
  1794:72 341e          lofsa $341e // Desmond
  1797:36                push 
  1798:45 0e 08         callb procedure_000e 8 //  

  179b:39 0a            pushi a // $a nsLeft
  179d:38 00c8          pushi c8 // $c8 dispatchEvent
  17a0:39 25            pushi 25 // $25 max
  17a2:39 51            pushi 51 // $51 button
  17a4:72 3426          lofsa $3426 // ReverseBiaz
  17a7:36                push 
  17a8:78               push1 
  17a9:39 51            pushi 51 // $51 button
  17ab:72 3432          lofsa $3432 // PCHammer
  17ae:36                push 
  17af:7a               push2 
  17b0:39 50            pushi 50 // $50 title
  17b2:72 343b          lofsa $343b // You
  17b5:36                push 
  17b6:47 ff 00 14      calle ff procedure_0000 14 //  

  17ba:36                push 
  17bb:3a                toss 
  17bc:a3 0a              sal local10 
  17be:32 0055            jmp code_1816 

        code_17c1
  17c1:78               push1 
  17c2:39 67            pushi 67 // $67 quitGame
  17c4:45 06 02         callb procedure_0006 2 //  

  17c7:30 0023            bnt code_17ed 
  17ca:39 03            pushi 3 // $3 y
  17cc:89 00              lsg  
  17ce:38 00c8          pushi c8 // $c8 dispatchEvent
  17d1:39 26            pushi 26 // $26 mark
  17d3:45 12 06         callb procedure_0012 6 //  

  17d6:39 04            pushi 4 // $4 x
  17d8:38 00c8          pushi c8 // $c8 dispatchEvent
  17db:39 27            pushi 27 // $27 who
  17dd:39 50            pushi 50 // $50 title
  17df:72 341e          lofsa $341e // Desmond
  17e2:36                push 
  17e3:45 0e 08         callb procedure_000e 8 //  

  17e6:35 02              ldi 2 
  17e8:a3 0a              sal local10 
  17ea:32 0029            jmp code_1816 

        code_17ed
  17ed:78               push1 
  17ee:39 68            pushi 68 // $68 restart
  17f0:45 06 02         callb procedure_0006 2 //  

  17f3:30 0020            bnt code_1816 
  17f6:39 03            pushi 3 // $3 y
  17f8:89 00              lsg  
  17fa:38 00c8          pushi c8 // $c8 dispatchEvent
  17fd:39 28            pushi 28 // $28 message
  17ff:45 12 06         callb procedure_0012 6 //  

  1802:39 04            pushi 4 // $4 x
  1804:38 00c8          pushi c8 // $c8 dispatchEvent
  1807:39 27            pushi 27 // $27 who
  1809:39 50            pushi 50 // $50 title
  180b:72 341e          lofsa $341e // Desmond
  180e:36                push 
  180f:45 0e 08         callb procedure_000e 8 //  

  1812:35 01              ldi 1 
  1814:a3 0a              sal local10 

        code_1816
  1816:83 0a              lal local10 
  1818:30 0013            bnt code_182e 
  181b:39 6b            pushi 6b // $6b init
  181d:76               push0 
  181e:39 69            pushi 69 // $69 hide
  1820:76               push0 
  1821:38 008e          pushi 8e // $8e setScript
  1824:78               push1 
  1825:72 1cf4          lofsa $1cf4 // sFax
  1828:36                push 
  1829:72 1124          lofsa $1124 // faxPaper
  182c:4a 0e             send e 


        code_182e
  182e:35 32              ldi 32 
  1830:65 16             aTop ticks 
  1832:32 00fb            jmp code_1930 

        code_1835
  1835:3c                 dup 
  1836:35 04              ldi 4 
  1838:1a                 eq? 
  1839:30 002e            bnt code_186a 
  183c:81 b3              lag  
  183e:30 0014            bnt code_1855 
  1841:38 0096          pushi 96 // $96 setCycle
  1844:39 04            pushi 4 // $4 x
  1846:51 19            class CT 
  1848:36                push 
  1849:39 05            pushi 5 // $5 view
  184b:39 ff            pushi ff // $ff syncNum
  184d:7c            pushSelf 
  184e:81 00              lag  
  1850:4a 0c             send c 

  1852:32 00db            jmp code_1930 

        code_1855
  1855:38 0096          pushi 96 // $96 setCycle
  1858:39 04            pushi 4 // $4 x
  185a:51 19            class CT 
  185c:36                push 
  185d:39 03            pushi 3 // $3 y
  185f:39 ff            pushi ff // $ff syncNum
  1861:7c            pushSelf 
  1862:72 0ee4          lofsa $0ee4 // arm
  1865:4a 0c             send c 

  1867:32 00c6            jmp code_1930 

        code_186a
  186a:3c                 dup 
  186b:35 05              ldi 5 
  186d:1a                 eq? 
  186e:30 003d            bnt code_18ae 
  1871:38 00c2          pushi c2 // $c2 show
  1874:76               push0 
  1875:72 0c7c          lofsa $0c7c // phone
  1878:4a 04             send 4 

  187a:39 2b            pushi 2b // $2b number
  187c:78               push1 
  187d:39 24            pushi 24 // $24 cursor
  187f:39 06            pushi 6 // $6 loop
  1881:78               push1 
  1882:78               push1 
  1883:39 2a            pushi 2a // $2a play
  1885:76               push0 
  1886:81 67              lag  
  1888:4a 10             send 10 

  188a:81 b3              lag  
  188c:30 000f            bnt code_189e 
  188f:38 0096          pushi 96 // $96 setCycle
  1892:7a               push2 
  1893:51 1b            class Beg 
  1895:36                push 
  1896:7c            pushSelf 
  1897:81 00              lag  
  1899:4a 08             send 8 

  189b:32 0092            jmp code_1930 

        code_189e
  189e:38 0096          pushi 96 // $96 setCycle
  18a1:7a               push2 
  18a2:51 1b            class Beg 
  18a4:36                push 
  18a5:7c            pushSelf 
  18a6:72 0ee4          lofsa $0ee4 // arm
  18a9:4a 08             send 8 

  18ab:32 0082            jmp code_1930 

        code_18ae
  18ae:3c                 dup 
  18af:35 06              ldi 6 
  18b1:1a                 eq? 
  18b2:30 0053            bnt code_1908 
  18b5:83 07              lal local7 
  18b7:2e 0018             bt code_18d2 
  18ba:83 0f              lal local15 
  18bc:18                 not 
  18bd:2e 0012             bt code_18d2 
  18c0:39 24            pushi 24 // $24 cursor
  18c2:76               push0 
  18c3:39 43            pushi 43 // $43 at
  18c5:78               push1 
  18c6:76               push0 
  18c7:81 45              lag  
  18c9:4a 06             send 6 

  18cb:4a 04             send 4 

  18cd:36                push 
  18ce:35 06              ldi 6 
  18d0:1a                 eq? 
  18d1:18                 not 

        code_18d2
  18d2:30 0009            bnt code_18de 
  18d5:38 00c9          pushi c9 // $c9 disable
  18d8:78               push1 
  18d9:76               push0 
  18da:81 45              lag  
  18dc:4a 06             send 6 


        code_18de
  18de:81 b3              lag  
  18e0:18                 not 
  18e1:30 0019            bnt code_18fd 
  18e4:38 011f          pushi 11f // $11f startUpd
  18e7:76               push0 
  18e8:38 008e          pushi 8e // $8e setScript
  18eb:78               push1 
  18ec:72 1a4e          lofsa $1a4e // sLegs
  18ef:36                push 
  18f0:72 0a54          lofsa $0a54 // legs
  18f3:4a 0a             send a 

  18f5:39 6c            pushi 6c // $6c dispose
  18f7:76               push0 
  18f8:72 0ee4          lofsa $0ee4 // arm
  18fb:4a 04             send 4 


        code_18fd
  18fd:35 00              ldi 0 
  18ff:a3 06              sal local6 
  1901:35 02              ldi 2 
  1903:65 10             aTop cycles 
  1905:32 0028            jmp code_1930 

        code_1908
  1908:3c                 dup 
  1909:35 07              ldi 7 
  190b:1a                 eq? 
  190c:30 0021            bnt code_1930 
  190f:76               push0 
  1910:45 03 00         callb procedure_0003 0 //  

  1913:38 011a          pushi 11a // $11a canControl
  1916:78               push1 
  1917:76               push0 
  1918:51 31            class User 
  191a:4a 06             send 6 

  191c:83 0f              lal local15 
  191e:18                 not 
  191f:30 0009            bnt code_192b 
  1922:38 00c9          pushi c9 // $c9 disable
  1925:78               push1 
  1926:76               push0 
  1927:81 45              lag  
  1929:4a 06             send 6 


        code_192b
  192b:39 6c            pushi 6c // $6c dispose
  192d:76               push0 
  192e:54 04             self 4 


        code_1930
  1930:3a                toss 
  1931:48                 ret 
    )

)

// 196e
(instance driverEyes of Prop
    (properties
        x $9b
        y $6
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3446
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $cc
        loop $1
        cel $0
        priority $1
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1a48
(instance sLegs of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_19d2
  19d2:87 01              lap param1 
  19d4:65 0a             aTop state 
  19d6:36                push 
  19d7:3c                 dup 
  19d8:35 00              ldi 0 
  19da:1a                 eq? 
  19db:30 0007            bnt code_19e5 
  19de:35 02              ldi 2 
  19e0:65 10             aTop cycles 
  19e2:32 005b            jmp code_1a40 

        code_19e5
  19e5:3c                 dup 
  19e6:35 01              ldi 1 
  19e8:1a                 eq? 
  19e9:30 0026            bnt code_1a12 
  19ec:38 0096          pushi 96 // $96 setCycle
  19ef:78               push1 
  19f0:51 17            class Fwd 
  19f2:36                push 
  19f3:38 00db          pushi db // $db cycleSpeed
  19f6:78               push1 
  19f7:7a               push2 
  19f8:39 06            pushi 6 // $6 loop
  19fa:39 0a            pushi a // $a nsLeft
  19fc:43 3c 04         callk Random 4 

  19ff:36                push 
  1a00:72 0a54          lofsa $0a54 // legs
  1a03:4a 0c             send c 

  1a05:7a               push2 
  1a06:39 14            pushi 14 // $14 brLeft
  1a08:39 28            pushi 28 // $28 message
  1a0a:43 3c 04         callk Random 4 

  1a0d:65 10             aTop cycles 
  1a0f:32 002e            jmp code_1a40 

        code_1a12
  1a12:3c                 dup 
  1a13:35 02              ldi 2 
  1a15:1a                 eq? 
  1a16:30 001b            bnt code_1a34 
  1a19:38 0120          pushi 120 // $120 setCel
  1a1c:78               push1 
  1a1d:76               push0 
  1a1e:38 011d          pushi 11d // $11d stopUpd
  1a21:76               push0 
  1a22:72 0a54          lofsa $0a54 // legs
  1a25:4a 0a             send a 

  1a27:7a               push2 
  1a28:39 0a            pushi a // $a nsLeft
  1a2a:39 1e            pushi 1e // $1e mode
  1a2c:43 3c 04         callk Random 4 

  1a2f:65 10             aTop cycles 
  1a31:32 000c            jmp code_1a40 

        code_1a34
  1a34:3c                 dup 
  1a35:35 03              ldi 3 
  1a37:1a                 eq? 
  1a38:30 0005            bnt code_1a40 
  1a3b:39 6b            pushi 6b // $6b init
  1a3d:76               push0 
  1a3e:54 04             self 4 


        code_1a40
  1a40:3a                toss 
  1a41:48                 ret 
    )

)

// 1aca
(instance windowL of Prop
    (properties
        x $11
        y $2e
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $3462
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $d0
        loop $0
        cel $0
        priority $e
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_1a7c
  1a7c:8f 01              lsp param1 
  1a7e:3c                 dup 
  1a7f:35 03              ldi 3 
  1a81:1a                 eq? 
  1a82:30 000c            bnt code_1a91 
  1a85:7a               push2 
  1a86:38 00c8          pushi c8 // $c8 dispatchEvent
  1a89:39 29            pushi 29 // $29 edit
  1a8b:45 0e 04         callb procedure_000e 4 //  

  1a8e:32 0031            jmp code_1ac2 

        code_1a91
  1a91:3c                 dup 
  1a92:35 02              ldi 2 
  1a94:1a                 eq? 
  1a95:30 001d            bnt code_1ab5 
  1a98:83 07              lal local7 
  1a9a:30 000c            bnt code_1aa9 
  1a9d:7a               push2 
  1a9e:38 00c8          pushi c8 // $c8 dispatchEvent
  1aa1:39 2a            pushi 2a // $2a play
  1aa3:45 0e 04         callb procedure_000e 4 //  

  1aa6:32 0019            jmp code_1ac2 

        code_1aa9
  1aa9:7a               push2 
  1aaa:38 00c8          pushi c8 // $c8 dispatchEvent
  1aad:39 2b            pushi 2b // $2b number
  1aaf:45 0e 04         callb procedure_000e 4 //  

  1ab2:32 000d            jmp code_1ac2 

        code_1ab5
  1ab5:38 010c          pushi 10c // $10c doVerb
  1ab8:7a               push2 
  1ab9:8f 01              lsp param1 
  1abb:8f 02              lsp param2 
  1abd:59 03            &rest 3 
  1abf:57 2f 08         super Prop 8 


        code_1ac2
  1ac2:3a                toss 
  1ac3:48                 ret 
    )

)

// 1b34
(instance tvSnd of Sound
    (properties
        nodePtr $0
        handle $0
        flags $0
        number $0
        vol $7f
        priority $0
        loop $1
        signal $0
        prevSignal $0
        dataInc $0
        min $0
        sec $0
        frame $0
        client $0
        owner $0
    )
)

// 1bd4
(instance faxMachine of Feature
    (properties
        x $3b
        y $d5
        z $64
        heading $0
        noun $0
        nsTop $65
        nsLeft $1f
        nsBottom $7d
        nsRight $57
        description $347b
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
    )
    (method (doVerb) // method_1b68
  1b68:8f 01              lsp param1 
  1b6a:3c                 dup 
  1b6b:35 02              ldi 2 
  1b6d:1a                 eq? 
  1b6e:30 001d            bnt code_1b8e 
  1b71:7a               push2 
  1b72:38 00c8          pushi c8 // $c8 dispatchEvent
  1b75:39 2c            pushi 2c // $2c nodePtr
  1b77:45 0e 04         callb procedure_000e 4 //  

  1b7a:39 05            pushi 5 // $5 view
  1b7c:38 00c8          pushi c8 // $c8 dispatchEvent
  1b7f:39 2d            pushi 2d // $2d client
  1b81:39 43            pushi 43 // $43 at
  1b83:39 ff            pushi ff // $ff syncNum
  1b85:38 00b9          pushi b9 // $b9 bottom
  1b88:45 0e 0a         callb procedure_000e a //  

  1b8b:32 003d            jmp code_1bcb 

        code_1b8e
  1b8e:3c                 dup 
  1b8f:35 03              ldi 3 
  1b91:1a                 eq? 
  1b92:30 0029            bnt code_1bbe 
  1b95:83 0a              lal local10 
  1b97:30 0018            bnt code_1bb2 
  1b9a:83 09              lal local9 
  1b9c:18                 not 
  1b9d:30 0012            bnt code_1bb2 
  1ba0:76               push0 
  1ba1:45 02 00         callb procedure_0002 0 //  

  1ba4:38 010c          pushi 10c // $10c doVerb
  1ba7:78               push1 
  1ba8:39 03            pushi 3 // $3 y
  1baa:72 1124          lofsa $1124 // faxPaper
  1bad:4a 06             send 6 

  1baf:32 0019            jmp code_1bcb 

        code_1bb2
  1bb2:7a               push2 
  1bb3:38 00c8          pushi c8 // $c8 dispatchEvent
  1bb6:39 2e            pushi 2e // $2e dx
  1bb8:45 0e 04         callb procedure_000e 4 //  

  1bbb:32 000d            jmp code_1bcb 

        code_1bbe
  1bbe:38 010c          pushi 10c // $10c doVerb
  1bc1:7a               push2 
  1bc2:8f 01              lsp param1 
  1bc4:8f 02              lsp param2 
  1bc6:59 03            &rest 3 
  1bc8:57 2c 08         super Feature 8 


        code_1bcb
  1bcb:3a                toss 
  1bcc:48                 ret 
  1bcd:00                bnot 
    )

)

// 1cee
(instance sFax of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1c12
  1c12:87 01              lap param1 
  1c14:65 0a             aTop state 
  1c16:36                push 
  1c17:3c                 dup 
  1c18:35 00              ldi 0 
  1c1a:1a                 eq? 
  1c1b:30 000d            bnt code_1c2b 
  1c1e:7a               push2 
  1c1f:39 04            pushi 4 // $4 x
  1c21:39 06            pushi 6 // $6 loop
  1c23:43 3c 04         callk Random 4 

  1c26:65 12             aTop seconds 
  1c28:32 00bb            jmp code_1ce6 

        code_1c2b
  1c2b:3c                 dup 
  1c2c:35 01              ldi 1 
  1c2e:1a                 eq? 
  1c2f:30 0015            bnt code_1c47 
  1c32:76               push0 
  1c33:45 02 00         callb procedure_0002 0 //  

  1c36:7a               push2 
  1c37:38 0084          pushi 84 // $84 cycles
  1c3a:38 00cb          pushi cb // $cb height
  1c3d:43 00 04         callk Load 4 

  1c40:35 02              ldi 2 
  1c42:65 10             aTop cycles 
  1c44:32 009f            jmp code_1ce6 

        code_1c47
  1c47:3c                 dup 
  1c48:35 02              ldi 2 
  1c4a:1a                 eq? 
  1c4b:30 001e            bnt code_1c6c 
  1c4e:39 2b            pushi 2b // $2b number
  1c50:78               push1 
  1c51:38 00cb          pushi cb // $cb height
  1c54:39 06            pushi 6 // $6 loop
  1c56:78               push1 
  1c57:78               push1 
  1c58:39 2a            pushi 2a // $2a play
  1c5a:78               push1 
  1c5b:7c            pushSelf 
  1c5c:81 66              lag  
  1c5e:4a 12             send 12 

  1c60:7a               push2 
  1c61:38 00c8          pushi c8 // $c8 dispatchEvent
  1c64:39 2f            pushi 2f // $2f dy
  1c66:45 0e 04         callb procedure_000e 4 //  

  1c69:32 007a            jmp code_1ce6 

        code_1c6c
  1c6c:3c                 dup 
  1c6d:35 03              ldi 3 
  1c6f:1a                 eq? 
  1c70:30 002d            bnt code_1ca0 
  1c73:38 00c2          pushi c2 // $c2 show
  1c76:76               push0 
  1c77:38 0121          pushi 121 // $121 ignoreActors
  1c7a:78               push1 
  1c7b:78               push1 
  1c7c:39 38            pushi 38 // $38 moveSpeed
  1c7e:78               push1 
  1c7f:39 05            pushi 5 // $5 view
  1c81:38 011c          pushi 11c // $11c posn
  1c84:7a               push2 
  1c85:39 37            pushi 37 // $37 yStep
  1c87:38 00e1          pushi e1 // $e1 yLast
  1c8a:38 011b          pushi 11b // $11b setMotion
  1c8d:39 04            pushi 4 // $4 x
  1c8f:51 1e            class MoveTo 
  1c91:36                push 
  1c92:39 37            pushi 37 // $37 yStep
  1c94:38 00d7          pushi d7 // $d7 completed
  1c97:7c            pushSelf 
  1c98:72 1124          lofsa $1124 // faxPaper
  1c9b:4a 24             send 24 

  1c9d:32 0046            jmp code_1ce6 

        code_1ca0
  1ca0:3c                 dup 
  1ca1:35 04              ldi 4 
  1ca3:1a                 eq? 
  1ca4:30 003f            bnt code_1ce6 
  1ca7:35 00              ldi 0 
  1ca9:a3 09              sal local9 
  1cab:76               push0 
  1cac:45 03 00         callb procedure_0003 0 //  

  1caf:38 011a          pushi 11a // $11a canControl
  1cb2:78               push1 
  1cb3:76               push0 
  1cb4:51 31            class User 
  1cb6:4a 06             send 6 

  1cb8:83 07              lal local7 
  1cba:2e 0018             bt code_1cd5 
  1cbd:83 0f              lal local15 
  1cbf:18                 not 
  1cc0:2e 0012             bt code_1cd5 
  1cc3:39 24            pushi 24 // $24 cursor
  1cc5:76               push0 
  1cc6:39 43            pushi 43 // $43 at
  1cc8:78               push1 
  1cc9:76               push0 
  1cca:81 45              lag  
  1ccc:4a 06             send 6 

  1cce:4a 04             send 4 

  1cd0:36                push 
  1cd1:35 06              ldi 6 
  1cd3:1a                 eq? 
  1cd4:18                 not 

        code_1cd5
  1cd5:30 0009            bnt code_1ce1 
  1cd8:38 00c9          pushi c9 // $c9 disable
  1cdb:78               push1 
  1cdc:76               push0 
  1cdd:81 45              lag  
  1cdf:4a 06             send 6 


        code_1ce1
  1ce1:39 6c            pushi 6c // $6c dispose
  1ce3:76               push0 
  1ce4:54 04             self 4 


        code_1ce6
  1ce6:3a                toss 
  1ce7:48                 ret 
    )

)

// 1d24
(instance driverBody of Prop
    (properties
        x $72
        y $22
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $349b
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $cc
        loop $0
        cel $0
        priority $1
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
)

// 1d9a
(instance driversWindow of Feature
    (properties
        x $a0
        y $77
        z $64
        heading $0
        noun $0
        nsTop $ffff
        nsLeft $31
        nsBottom $2a
        nsRight $10d
        description $0
        sightAngle $28
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $34b7
    )
    (method (doVerb) // method_1d88
  1d88:38 010c          pushi 10c // $10c doVerb
  1d8b:76               push0 
  1d8c:59 01            &rest 1 
  1d8e:72 2b80          lofsa $2b80 // driver
  1d91:4a 04             send 4 

  1d93:48                 ret 
    )

)

// 1ef6
(instance sGetBottle of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_1dd8
  1dd8:87 01              lap param1 
  1dda:65 0a             aTop state 
  1ddc:36                push 
  1ddd:3c                 dup 
  1dde:35 00              ldi 0 
  1de0:1a                 eq? 
  1de1:30 002d            bnt code_1e11 
  1de4:76               push0 
  1de5:45 02 00         callb procedure_0002 0 //  

  1de8:39 05            pushi 5 // $5 view
  1dea:78               push1 
  1deb:38 00ca          pushi ca // $ca noClickHelp
  1dee:38 00a2          pushi a2 // $a2 setLoop
  1df1:78               push1 
  1df2:78               push1 
  1df3:38 0120          pushi 120 // $120 setCel
  1df6:78               push1 
  1df7:76               push0 
  1df8:38 00db          pushi db // $db cycleSpeed
  1dfb:78               push1 
  1dfc:39 06            pushi 6 // $6 loop
  1dfe:38 0096          pushi 96 // $96 setCycle
  1e01:39 04            pushi 4 // $4 x
  1e03:51 19            class CT 
  1e05:36                push 
  1e06:39 03            pushi 3 // $3 y
  1e08:78               push1 
  1e09:7c            pushSelf 
  1e0a:81 00              lag  
  1e0c:4a 24             send 24 

  1e0e:32 00dc            jmp code_1eed 

        code_1e11
  1e11:3c                 dup 
  1e12:35 01              ldi 1 
  1e14:1a                 eq? 
  1e15:30 0015            bnt code_1e2d 
  1e18:38 00a2          pushi a2 // $a2 setLoop
  1e1b:78               push1 
  1e1c:7a               push2 
  1e1d:38 0120          pushi 120 // $120 setCel
  1e20:78               push1 
  1e21:76               push0 
  1e22:81 00              lag  
  1e24:4a 0c             send c 

  1e26:35 01              ldi 1 
  1e28:65 10             aTop cycles 
  1e2a:32 00c0            jmp code_1eed 

        code_1e2d
  1e2d:3c                 dup 
  1e2e:35 02              ldi 2 
  1e30:1a                 eq? 
  1e31:30 0019            bnt code_1e4d 
  1e34:38 00db          pushi db // $db cycleSpeed
  1e37:78               push1 
  1e38:39 06            pushi 6 // $6 loop
  1e3a:38 0096          pushi 96 // $96 setCycle
  1e3d:39 04            pushi 4 // $4 x
  1e3f:51 19            class CT 
  1e41:36                push 
  1e42:39 03            pushi 3 // $3 y
  1e44:78               push1 
  1e45:7c            pushSelf 
  1e46:81 00              lag  
  1e48:4a 12             send 12 

  1e4a:32 00a0            jmp code_1eed 

        code_1e4d
  1e4d:3c                 dup 
  1e4e:35 03              ldi 3 
  1e50:1a                 eq? 
  1e51:30 0017            bnt code_1e6b 
  1e54:39 6c            pushi 6c // $6c dispose
  1e56:76               push0 
  1e57:72 0f96          lofsa $0f96 // bottle
  1e5a:4a 04             send 4 

  1e5c:38 0096          pushi 96 // $96 setCycle
  1e5f:7a               push2 
  1e60:51 1a            class End 
  1e62:36                push 
  1e63:7c            pushSelf 
  1e64:81 00              lag  
  1e66:4a 08             send 8 

  1e68:32 0082            jmp code_1eed 

        code_1e6b
  1e6b:3c                 dup 
  1e6c:35 04              ldi 4 
  1e6e:1a                 eq? 
  1e6f:30 0053            bnt code_1ec5 
  1e72:38 00a2          pushi a2 // $a2 setLoop
  1e75:78               push1 
  1e76:39 06            pushi 6 // $6 loop
  1e78:38 0120          pushi 120 // $120 setCel
  1e7b:78               push1 
  1e7c:76               push0 
  1e7d:38 011c          pushi 11c // $11c posn
  1e80:7a               push2 
  1e81:39 41            pushi 41 // $41 replay
  1e83:39 58            pushi 58 // $58 subtitleLang
  1e85:38 0147          pushi 147 // $147 get
  1e88:78               push1 
  1e89:39 04            pushi 4 // $4 x
  1e8b:81 00              lag  
  1e8d:4a 1a             send 1a 

  1e8f:83 07              lal local7 
  1e91:2e 0018             bt code_1eac 
  1e94:83 0f              lal local15 
  1e96:18                 not 
  1e97:2e 0012             bt code_1eac 
  1e9a:39 24            pushi 24 // $24 cursor
  1e9c:76               push0 
  1e9d:39 43            pushi 43 // $43 at
  1e9f:78               push1 
  1ea0:76               push0 
  1ea1:81 45              lag  
  1ea3:4a 06             send 6 

  1ea5:4a 04             send 4 

  1ea7:36                push 
  1ea8:35 06              ldi 6 
  1eaa:1a                 eq? 
  1eab:18                 not 

        code_1eac
  1eac:30 0009            bnt code_1eb8 
  1eaf:38 00c9          pushi c9 // $c9 disable
  1eb2:78               push1 
  1eb3:76               push0 
  1eb4:81 45              lag  
  1eb6:4a 06             send 6 


        code_1eb8
  1eb8:78               push1 
  1eb9:39 06            pushi 6 // $6 loop
  1ebb:45 0a 02         callb procedure_000a 2 //  

  1ebe:35 02              ldi 2 
  1ec0:65 10             aTop cycles 
  1ec2:32 0028            jmp code_1eed 

        code_1ec5
  1ec5:3c                 dup 
  1ec6:35 05              ldi 5 
  1ec8:1a                 eq? 
  1ec9:30 0021            bnt code_1eed 
  1ecc:76               push0 
  1ecd:45 03 00         callb procedure_0003 0 //  

  1ed0:38 011a          pushi 11a // $11a canControl
  1ed3:78               push1 
  1ed4:76               push0 
  1ed5:51 31            class User 
  1ed7:4a 06             send 6 

  1ed9:83 0f              lal local15 
  1edb:18                 not 
  1edc:30 0009            bnt code_1ee8 
  1edf:38 00c9          pushi c9 // $c9 disable
  1ee2:78               push1 
  1ee3:76               push0 
  1ee4:81 45              lag  
  1ee6:4a 06             send 6 


        code_1ee8
  1ee8:39 6c            pushi 6c // $6c dispose
  1eea:76               push0 
  1eeb:54 04             self 4 


        code_1eed
  1eed:3a                toss 
  1eee:48                 ret 
  1eef:00                bnot 
    )

)

// 2276
(instance sDrive of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (doit) // method_1f2a
  1f2a:3f 0a             link a // (var $a)
  1f2c:39 3c            pushi 3c // $3c doit
  1f2e:76               push0 
  1f2f:57 06 04         super Script 4 

  1f32:e3 05              -al local5 
  1f34:18                 not 
  1f35:30 001a            bnt code_1f52 
  1f38:38 0120          pushi 120 // $120 setCel
  1f3b:78               push1 
  1f3c:7a               push2 
  1f3d:76               push0 
  1f3e:7a               push2 
  1f3f:43 3c 04         callk Random 4 

  1f42:36                push 
  1f43:72 1d2a          lofsa $1d2a // driverBody
  1f46:4a 06             send 6 

  1f48:7a               push2 
  1f49:39 05            pushi 5 // $5 view
  1f4b:39 0a            pushi a // $a nsLeft
  1f4d:43 3c 04         callk Random 4 

  1f50:a3 05              sal local5 

        code_1f52
  1f52:48                 ret 
    )

    (method (changeState) // method_1f53
  1f53:87 01              lap param1 
  1f55:65 0a             aTop state 
  1f57:36                push 
  1f58:3c                 dup 
  1f59:35 00              ldi 0 
  1f5b:1a                 eq? 
  1f5c:30 0078            bnt code_1fd7 
  1f5f:35 01              ldi 1 
  1f61:a3 07              sal local7 
  1f63:81 b3              lag  
  1f65:30 0016            bnt code_1f7e 
  1f68:76               push0 
  1f69:45 03 00         callb procedure_0003 0 //  

  1f6c:38 011a          pushi 11a // $11a canControl
  1f6f:78               push1 
  1f70:76               push0 
  1f71:51 31            class User 
  1f73:4a 06             send 6 

  1f75:38 00c9          pushi c9 // $c9 disable
  1f78:78               push1 
  1f79:76               push0 
  1f7a:81 45              lag  
  1f7c:4a 06             send 6 


        code_1f7e
  1f7e:39 2b            pushi 2b // $2b number
  1f80:78               push1 
  1f81:38 00cc          pushi cc // $cc oldMouseX
  1f84:39 06            pushi 6 // $6 loop
  1f86:78               push1 
  1f87:39 ff            pushi ff // $ff syncNum
  1f89:39 2a            pushi 2a // $2a play
  1f8b:78               push1 
  1f8c:39 7f            pushi 7f // $7f addAfter
  1f8e:81 66              lag  
  1f90:4a 12             send 12 

  1f92:89 0c              lsg  
  1f94:34 00cd            ldi cd 
  1f97:1a                 eq? 
  1f98:30 0020            bnt code_1fbb 
  1f9b:39 6b            pushi 6b // $6b init
  1f9d:76               push0 
  1f9e:38 00db          pushi db // $db cycleSpeed
  1fa1:78               push1 
  1fa2:39 03            pushi 3 // $3 y
  1fa4:38 0096          pushi 96 // $96 setCycle
  1fa7:78               push1 
  1fa8:51 17            class Fwd 
  1faa:36                push 
  1fab:72 1ad0          lofsa $1ad0 // windowL
  1fae:4a 10             send 10 

  1fb0:35 1d              ldi 1d 
  1fb2:65 0a             aTop state 
  1fb4:35 03              ldi 3 
  1fb6:65 12             aTop seconds 
  1fb8:32 02b2            jmp code_226d 

        code_1fbb
  1fbb:39 6b            pushi 6b // $6b init
  1fbd:76               push0 
  1fbe:38 00db          pushi db // $db cycleSpeed
  1fc1:78               push1 
  1fc2:39 06            pushi 6 // $6 loop
  1fc4:38 0096          pushi 96 // $96 setCycle
  1fc7:78               push1 
  1fc8:51 17            class Fwd 
  1fca:36                push 
  1fcb:72 1ad0          lofsa $1ad0 // windowL
  1fce:4a 10             send 10 

  1fd0:35 05              ldi 5 
  1fd2:65 12             aTop seconds 
  1fd4:32 0296            jmp code_226d 

        code_1fd7
  1fd7:3c                 dup 
  1fd8:35 01              ldi 1 
  1fda:1a                 eq? 
  1fdb:30 0012            bnt code_1ff0 
  1fde:38 00db          pushi db // $db cycleSpeed
  1fe1:78               push1 
  1fe2:39 03            pushi 3 // $3 y
  1fe4:72 1ad0          lofsa $1ad0 // windowL
  1fe7:4a 06             send 6 

  1fe9:35 05              ldi 5 
  1feb:65 12             aTop seconds 
  1fed:32 027d            jmp code_226d 

        code_1ff0
  1ff0:3c                 dup 
  1ff1:35 02              ldi 2 
  1ff3:1a                 eq? 
  1ff4:30 001d            bnt code_2014 
  1ff7:38 00db          pushi db // $db cycleSpeed
  1ffa:78               push1 
  1ffb:76               push0 
  1ffc:72 1ad0          lofsa $1ad0 // windowL
  1fff:4a 06             send 6 

  2001:81 b3              lag  
  2003:30 0007            bnt code_200d 
  2006:35 04              ldi 4 
  2008:65 12             aTop seconds 
  200a:32 0260            jmp code_226d 

        code_200d
  200d:35 0c              ldi c 
  200f:65 12             aTop seconds 
  2011:32 0259            jmp code_226d 

        code_2014
  2014:3c                 dup 
  2015:35 03              ldi 3 
  2017:1a                 eq? 
  2018:30 000b            bnt code_2026 
  201b:63 0a             pToa state 
  201d:65 0c             aTop start 
  201f:35 02              ldi 2 
  2021:65 10             aTop cycles 
  2023:32 0247            jmp code_226d 

        code_2026
  2026:3c                 dup 
  2027:35 04              ldi 4 
  2029:1a                 eq? 
  202a:30 004f            bnt code_207c 
  202d:83 06              lal local6 
  202f:30 0008            bnt code_203a 
  2032:39 6b            pushi 6b // $6b init
  2034:76               push0 
  2035:54 04             self 4 

  2037:32 0233            jmp code_226d 

        code_203a
  203a:81 b3              lag  
  203c:18                 not 
  203d:30 000e            bnt code_204e 
  2040:83 21              lal local33 
  2042:18                 not 
  2043:30 0008            bnt code_204e 
  2046:39 6b            pushi 6b // $6b init
  2048:76               push0 
  2049:54 04             self 4 

  204b:32 021f            jmp code_226d 

        code_204e
  204e:81 b3              lag  
  2050:30 0022            bnt code_2075 
  2053:39 03            pushi 3 // $3 y
  2055:89 0c              lsg  
  2057:38 00cd          pushi cd // $cd oldMouseY
  205a:38 00fa          pushi fa // $fa outOfTouch
  205d:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  2063:18                 not 
  2064:30 000e            bnt code_2075 
  2067:38 0179          pushi 179 // $179 newRoom
  206a:78               push1 
  206b:38 00cd          pushi cd // $cd oldMouseY
  206e:81 02              lag  
  2070:4a 06             send 6 

  2072:32 01f8            jmp code_226d 

        code_2075
  2075:35 03              ldi 3 
  2077:65 12             aTop seconds 
  2079:32 01f1            jmp code_226d 

        code_207c
  207c:3c                 dup 
  207d:35 05              ldi 5 
  207f:1a                 eq? 
  2080:30 0012            bnt code_2095 
  2083:38 00db          pushi db // $db cycleSpeed
  2086:78               push1 
  2087:39 03            pushi 3 // $3 y
  2089:72 1ad0          lofsa $1ad0 // windowL
  208c:4a 06             send 6 

  208e:35 03              ldi 3 
  2090:65 12             aTop seconds 
  2092:32 01d8            jmp code_226d 

        code_2095
  2095:3c                 dup 
  2096:35 06              ldi 6 
  2098:1a                 eq? 
  2099:30 000b            bnt code_20a7 
  209c:63 0a             pToa state 
  209e:65 0c             aTop start 
  20a0:35 01              ldi 1 
  20a2:65 10             aTop cycles 
  20a4:32 01c6            jmp code_226d 

        code_20a7
  20a7:3c                 dup 
  20a8:35 07              ldi 7 
  20aa:1a                 eq? 
  20ab:30 0034            bnt code_20e2 
  20ae:83 06              lal local6 
  20b0:30 0008            bnt code_20bb 
  20b3:39 6b            pushi 6b // $6b init
  20b5:76               push0 
  20b6:54 04             self 4 

  20b8:32 01b2            jmp code_226d 

        code_20bb
  20bb:76               push0 
  20bc:45 02 00         callb procedure_0002 0 //  

  20bf:38 0096          pushi 96 // $96 setCycle
  20c2:78               push1 
  20c3:51 1a            class End 
  20c5:36                push 
  20c6:72 2b80          lofsa $2b80 // driver
  20c9:4a 06             send 6 

  20cb:38 0096          pushi 96 // $96 setCycle
  20ce:78               push1 
  20cf:51 1a            class End 
  20d1:36                push 
  20d2:72 1974          lofsa $1974 // driverEyes
  20d5:4a 06             send 6 

  20d7:35 1d              ldi 1d 
  20d9:65 0a             aTop state 
  20db:35 02              ldi 2 
  20dd:65 10             aTop cycles 
  20df:32 018b            jmp code_226d 

        code_20e2
  20e2:3c                 dup 
  20e3:35 1e              ldi 1e 
  20e5:1a                 eq? 
  20e6:30 004d            bnt code_2136 
  20e9:81 19              lag  
  20eb:30 0005            bnt code_20f3 
  20ee:39 6c            pushi 6c // $6c dispose
  20f0:76               push0 
  20f1:4a 04             send 4 


        code_20f3
  20f3:38 009f          pushi 9f // $9f fade
  20f6:39 04            pushi 4 // $4 x
  20f8:76               push0 
  20f9:39 0f            pushi f // $f lsBottom
  20fb:39 0a            pushi a // $a nsLeft
  20fd:76               push0 
  20fe:81 66              lag  
  2100:4a 0c             send c 

  2102:81 b3              lag  
  2104:30 0017            bnt code_211e 
  2107:39 04            pushi 4 // $4 x
  2109:38 00c8          pushi c8 // $c8 dispatchEvent
  210c:39 30            pushi 30 // $30 b-moveCnt
  210e:39 50            pushi 50 // $50 title
  2110:72 2fb5          lofsa $2fb5 // Bobbi
  2113:36                push 
  2114:45 0e 08         callb procedure_000e 8 //  

  2117:35 02              ldi 2 
  2119:65 10             aTop cycles 
  211b:32 014f            jmp code_226d 

        code_211e
  211e:6b 0a            ipToa state 
  2120:38 009f          pushi 9f // $9f fade
  2123:39 04            pushi 4 // $4 x
  2125:76               push0 
  2126:39 0f            pushi f // $f lsBottom
  2128:39 0a            pushi a // $a nsLeft
  212a:78               push1 
  212b:81 67              lag  
  212d:4a 0c             send c 

  212f:35 02              ldi 2 
  2131:65 12             aTop seconds 
  2133:32 0137            jmp code_226d 

        code_2136
  2136:3c                 dup 
  2137:35 1f              ldi 1f 
  2139:1a                 eq? 
  213a:30 00ba            bnt code_21f7 
  213d:78               push1 
  213e:78               push1 
  213f:45 08 02         callb procedure_0008 2 //  

  2142:89 b0              lsg  
  2144:34 00fa            ldi fa 
  2147:1c                 ne? 
  2148:30 0006            bnt code_2151 
  214b:78               push1 
  214c:39 26            pushi 26 // $26 mark
  214e:45 08 02         callb procedure_0008 2 //  


        code_2151
  2151:89 b0              lsg  
  2153:34 0384            ldi 384 
  2156:1a                 eq? 
  2157:30 0027            bnt code_2181 
  215a:38 00d5          pushi d5 // $d5 has
  215d:78               push1 
  215e:39 0a            pushi a // $a nsLeft
  2160:81 00              lag  
  2162:4a 06             send 6 

  2164:30 001a            bnt code_2181 
  2167:39 03            pushi 3 // $3 y
  2169:89 00              lsg  
  216b:38 00c8          pushi c8 // $c8 dispatchEvent
  216e:39 31            pushi 31 // $31 b-i1
  2170:45 12 06         callb procedure_0012 6 //  

  2173:38 0148          pushi 148 // $148 put
  2176:78               push1 
  2177:39 0a            pushi a // $a nsLeft
  2179:81 00              lag  
  217b:4a 06             send 6 

  217d:35 00              ldi 0 
  217f:a1 a8              sag  

        code_2181
  2181:89 b0              lsg  
  2183:34 01f4            ldi 1f4 
  2186:1a                 eq? 
  2187:30 002b            bnt code_21b5 
  218a:38 00d5          pushi d5 // $d5 has
  218d:78               push1 
  218e:39 0b            pushi b // $b nsBottom
  2190:81 00              lag  
  2192:4a 06             send 6 

  2194:18                 not 
  2195:30 001d            bnt code_21b5 
  2198:7a               push2 
  2199:38 00c8          pushi c8 // $c8 dispatchEvent
  219c:39 32            pushi 32 // $32 b-i2
  219e:45 0e 04         callb procedure_000e 4 //  

  21a1:35 01              ldi 1 
  21a3:a3 01              sal local1 
  21a5:38 010c          pushi 10c // $10c doVerb
  21a8:78               push1 
  21a9:39 03            pushi 3 // $3 y
  21ab:59 02            &rest 2 
  21ad:72 09f4          lofsa $09f4 // dayTrotter
  21b0:4a 06             send 6 

  21b2:32 00b8            jmp code_226d 

        code_21b5
  21b5:78               push1 
  21b6:39 09            pushi 9 // $9 nsTop
  21b8:45 06 02         callb procedure_0006 2 //  

  21bb:30 002c            bnt code_21ea 
  21be:38 00d5          pushi d5 // $d5 has
  21c1:78               push1 
  21c2:39 0b            pushi b // $b nsBottom
  21c4:81 00              lag  
  21c6:4a 06             send 6 

  21c8:30 001f            bnt code_21ea 
  21cb:38 0148          pushi 148 // $148 put
  21ce:78               push1 
  21cf:39 0b            pushi b // $b nsBottom
  21d1:38 0148          pushi 148 // $148 put
  21d4:78               push1 
  21d5:39 0d            pushi d // $d lsTop
  21d7:38 0148          pushi 148 // $148 put
  21da:78               push1 
  21db:39 0c            pushi c // $c nsRight
  21dd:81 00              lag  
  21df:4a 12             send 12 

  21e1:7a               push2 
  21e2:38 00c8          pushi c8 // $c8 dispatchEvent
  21e5:39 33            pushi 33 // $33 b-di
  21e7:45 0e 04         callb procedure_000e 4 //  


        code_21ea
  21ea:38 0179          pushi 179 // $179 newRoom
  21ed:78               push1 
  21ee:89 b0              lsg  
  21f0:81 02              lag  
  21f2:4a 06             send 6 

  21f4:32 0076            jmp code_226d 

        code_21f7
  21f7:3c                 dup 
  21f8:35 20              ldi 20 
  21fa:1a                 eq? 
  21fb:30 0032            bnt code_2230 
  21fe:81 19              lag  
  2200:30 0005            bnt code_2208 
  2203:39 6c            pushi 6c // $6c dispose
  2205:76               push0 
  2206:4a 04             send 4 


        code_2208
  2208:39 74            pushi 74 // $74 eachElementDo
  220a:78               push1 
  220b:39 69            pushi 69 // $69 hide
  220d:81 05              lag  
  220f:4a 06             send 6 

  2211:38 018c          pushi 18c // $18c drawPic
  2214:7a               push2 
  2215:78               push1 
  2216:39 0a            pushi a // $a nsLeft
  2218:81 02              lag  
  221a:4a 08             send 8 

  221c:39 04            pushi 4 // $4 x
  221e:7a               push2 
  221f:89 80              lsg  
  2221:38 00c8          pushi c8 // $c8 dispatchEvent
  2224:39 34            pushi 34 // $34 b-xAxis
  2226:45 19 08         callb procedure_0019 8 //  

  2229:35 03              ldi 3 
  222b:65 12             aTop seconds 
  222d:32 003d            jmp code_226d 

        code_2230
  2230:3c                 dup 
  2231:35 21              ldi 21 
  2233:1a                 eq? 
  2234:30 0036            bnt code_226d 
  2237:89 b0              lsg  
  2239:3c                 dup 
  223a:34 01a9            ldi 1a9 
  223d:1a                 eq? 
  223e:30 0005            bnt code_2246 
  2241:35 00              ldi 0 
  2243:32 001b            jmp code_2261 

        code_2246
  2246:3c                 dup 
  2247:34 0320            ldi 320 
  224a:1a                 eq? 
  224b:30 0007            bnt code_2255 
  224e:35 02              ldi 2 
  2250:a1 a1              sag  
  2252:32 000c            jmp code_2261 

        code_2255
  2255:3c                 dup 
  2256:34 0258            ldi 258 
  2259:1a                 eq? 
  225a:30 0004            bnt code_2261 
  225d:35 01              ldi 1 
  225f:a1 a1              sag  

        code_2261
  2261:3a                toss 
  2262:38 0179          pushi 179 // $179 newRoom
  2265:78               push1 
  2266:38 0140          pushi 140 // $140 mapKeyToDir
  2269:81 02              lag  
  226b:4a 06             send 6 


        code_226d
  226d:3a                toss 
  226e:48                 ret 
  226f:00                bnot 
    )

)

// 2b7a
(instance driver of Prop
    (properties
        x $72
        y $22
        z $0
        heading $0
        noun $0
        nsTop $0
        nsLeft $0
        nsBottom $0
        nsRight $0
        description $349b
        sightAngle $6789
        actions $0
        onMeCheck $6789
        approachX $0
        approachY $0
        approachDist $0
        _approachVerbs $6789
        lookStr $0
        yStep $2
        view $cc
        loop $0
        cel $0
        priority $2
        underBits $0
        signal $6810
        lsTop $0
        lsLeft $0
        lsBottom $0
        lsRight $0
        brTop $0
        brLeft $0
        brBottom $0
        brRight $0
        palette $0
        cycleSpeed $6
        script $0
        cycler $0
        timer $0
        detailLevel $0
    )
    (method (doVerb) // method_2444
  2444:3f 50             link 50 // (var $50)
  2446:8f 01              lsp param1 
  2448:3c                 dup 
  2449:35 02              ldi 2 
  244b:1a                 eq? 
  244c:30 0060            bnt code_24af 
  244f:81 b3              lag  
  2451:30 004f            bnt code_24a3 
  2454:89 a0              lsg  
  2456:3c                 dup 
  2457:35 00              ldi 0 
  2459:1a                 eq? 
  245a:30 000c            bnt code_2469 
  245d:7a               push2 
  245e:38 00c8          pushi c8 // $c8 dispatchEvent
  2461:39 3b            pushi 3b // $3b mover
  2463:45 0e 04         callb procedure_000e 4 //  

  2466:32 0036            jmp code_249f 

        code_2469
  2469:3c                 dup 
  246a:35 01              ldi 1 
  246c:1a                 eq? 
  246d:30 000c            bnt code_247c 
  2470:7a               push2 
  2471:38 00c8          pushi c8 // $c8 dispatchEvent
  2474:39 3c            pushi 3c // $3c doit
  2476:45 0e 04         callb procedure_000e 4 //  

  2479:32 0023            jmp code_249f 

        code_247c
  247c:3c                 dup 
  247d:35 02              ldi 2 
  247f:1a                 eq? 
  2480:30 000c            bnt code_248f 
  2483:7a               push2 
  2484:38 00c8          pushi c8 // $c8 dispatchEvent
  2487:39 3d            pushi 3d // $3d isBlocked
  2489:45 0e 04         callb procedure_000e 4 //  

  248c:32 0010            jmp code_249f 

        code_248f
  248f:3c                 dup 
  2490:35 03              ldi 3 
  2492:1a                 eq? 
  2493:30 0009            bnt code_249f 
  2496:7a               push2 
  2497:38 00c8          pushi c8 // $c8 dispatchEvent
  249a:39 3e            pushi 3e // $3e looper
  249c:45 0e 04         callb procedure_000e 4 //  


        code_249f
  249f:3a                toss 
  24a0:32 06ce            jmp code_2b71 

        code_24a3
  24a3:7a               push2 
  24a4:38 00c8          pushi c8 // $c8 dispatchEvent
  24a7:39 3f            pushi 3f // $3f priority
  24a9:45 0e 04         callb procedure_000e 4 //  

  24ac:32 06c2            jmp code_2b71 

        code_24af
  24af:3c                 dup 
  24b0:35 03              ldi 3 
  24b2:1a                 eq? 
  24b3:30 007b            bnt code_2531 
  24b6:83 07              lal local7 
  24b8:30 000c            bnt code_24c7 
  24bb:7a               push2 
  24bc:38 00c8          pushi c8 // $c8 dispatchEvent
  24bf:39 40            pushi 40 // $40 modifiers
  24c1:45 0e 04         callb procedure_000e 4 //  

  24c4:32 06aa            jmp code_2b71 

        code_24c7
  24c7:81 b3              lag  
  24c9:30 000c            bnt code_24d8 
  24cc:7a               push2 
  24cd:38 00c8          pushi c8 // $c8 dispatchEvent
  24d0:39 41            pushi 41 // $41 replay
  24d2:45 0e 04         callb procedure_000e 4 //  

  24d5:32 0699            jmp code_2b71 

        code_24d8
  24d8:76               push0 
  24d9:45 02 00         callb procedure_0002 0 //  

  24dc:39 2b            pushi 2b // $2b number
  24de:78               push1 
  24df:38 00ca          pushi ca // $ca noClickHelp
  24e2:39 06            pushi 6 // $6 loop
  24e4:78               push1 
  24e5:78               push1 
  24e6:39 2a            pushi 2a // $2a play
  24e8:76               push0 
  24e9:81 66              lag  
  24eb:4a 10             send 10 

  24ed:83 04              lal local4 
  24ef:18                 not 
  24f0:30 001f            bnt code_2512 
  24f3:38 011b          pushi 11b // $11b setMotion
  24f6:39 04            pushi 4 // $4 x
  24f8:51 1e            class MoveTo 
  24fa:36                push 
  24fb:39 04            pushi 4 // $4 x
  24fd:76               push0 
  24fe:72 0908          lofsa $0908 // glass
  2501:4a 04             send 4 

  2503:36                push 
  2504:39 4e            pushi 4e // $4e save
  2506:72 0908          lofsa $0908 // glass
  2509:36                push 
  250a:72 0908          lofsa $0908 // glass
  250d:4a 0c             send c 

  250f:32 065f            jmp code_2b71 

        code_2512
  2512:38 011b          pushi 11b // $11b setMotion
  2515:39 04            pushi 4 // $4 x
  2517:51 1e            class MoveTo 
  2519:36                push 
  251a:39 04            pushi 4 // $4 x
  251c:76               push0 
  251d:72 0908          lofsa $0908 // glass
  2520:4a 04             send 4 

  2522:36                push 
  2523:39 26            pushi 26 // $26 mark
  2525:72 0908          lofsa $0908 // glass
  2528:36                push 
  2529:72 0908          lofsa $0908 // glass
  252c:4a 0c             send c 

  252e:32 0640            jmp code_2b71 

        code_2531
  2531:3c                 dup 
  2532:35 05              ldi 5 
  2534:1a                 eq? 
  2535:30 009c            bnt code_25d4 
  2538:83 07              lal local7 
  253a:30 0037            bnt code_2574 
  253d:39 05            pushi 5 // $5 view
  253f:5b 04 00           lea 4 0 
  2542:36                push 
  2543:38 00c8          pushi c8 // $c8 dispatchEvent
  2546:39 42            pushi 42 // $42 setPri
  2548:81 b3              lag  
  254a:30 0006            bnt code_2553 
  254d:72 3520          lofsa $3520 // Sh
  2550:32 0003            jmp code_2556 

        code_2553
  2553:72 3523          lofsa $3523 // H

        code_2556
  2556:36                push 
  2557:81 b3              lag  
  2559:30 0006            bnt code_2562 
  255c:72 3525          lofsa $3525 // sh
  255f:32 0003            jmp code_2565 

        code_2562
  2562:72 3528          lofsa $3528 // h

        code_2565
  2565:36                push 
  2566:43 48 0a         callk Format a 

  2569:78               push1 
  256a:5b 04 00           lea 4 0 
  256d:36                push 
  256e:45 0e 02         callb procedure_000e 2 //  

  2571:32 05fd            jmp code_2b71 

        code_2574
  2574:81 b3              lag  
  2576:30 0037            bnt code_25b0 
  2579:7a               push2 
  257a:78               push1 
  257b:7a               push2 
  257c:43 3c 04         callk Random 4 

  257f:36                push 
  2580:3c                 dup 
  2581:35 01              ldi 1 
  2583:1a                 eq? 
  2584:30 000c            bnt code_2593 
  2587:7a               push2 
  2588:38 00c8          pushi c8 // $c8 dispatchEvent
  258b:39 43            pushi 43 // $43 at
  258d:45 0e 04         callb procedure_000e 4 //  

  2590:32 0010            jmp code_25a3 

        code_2593
  2593:3c                 dup 
  2594:35 02              ldi 2 
  2596:1a                 eq? 
  2597:30 0009            bnt code_25a3 
  259a:7a               push2 
  259b:38 00c8          pushi c8 // $c8 dispatchEvent
  259e:39 44            pushi 44 // $44 next
  25a0:45 0e 04         callb procedure_000e 4 //  


        code_25a3
  25a3:3a                toss 
  25a4:7a               push2 
  25a5:38 00c8          pushi c8 // $c8 dispatchEvent
  25a8:39 45            pushi 45 // $45 done
  25aa:45 0e 04         callb procedure_000e 4 //  

  25ad:32 05c1            jmp code_2b71 

        code_25b0
  25b0:83 04              lal local4 
  25b2:30 0013            bnt code_25c8 
  25b5:39 04            pushi 4 // $4 x
  25b7:38 00c8          pushi c8 // $c8 dispatchEvent
  25ba:39 46            pushi 46 // $46 width
  25bc:39 50            pushi 50 // $50 title
  25be:72 2fbb          lofsa $2fbb // Bobby
  25c1:36                push 
  25c2:45 0e 08         callb procedure_000e 8 //  

  25c5:32 05a9            jmp code_2b71 

        code_25c8
  25c8:7a               push2 
  25c9:38 00c8          pushi c8 // $c8 dispatchEvent
  25cc:39 47            pushi 47 // $47 wordFail
  25ce:45 0e 04         callb procedure_000e 4 //  

  25d1:32 059d            jmp code_2b71 

        code_25d4
  25d4:3c                 dup 
  25d5:35 0a              ldi a 
  25d7:1a                 eq? 
  25d8:30 0075            bnt code_2650 
  25db:81 b3              lag  
  25dd:30 0029            bnt code_2609 
  25e0:39 03            pushi 3 // $3 y
  25e2:89 00              lsg  
  25e4:38 00c8          pushi c8 // $c8 dispatchEvent
  25e7:39 48            pushi 48 // $48 syntaxFail
  25e9:45 12 06         callb procedure_0012 6 //  

  25ec:7a               push2 
  25ed:38 00c8          pushi c8 // $c8 dispatchEvent
  25f0:39 49            pushi 49 // $49 semanticFail
  25f2:45 0e 04         callb procedure_000e 4 //  

  25f5:39 05            pushi 5 // $5 view
  25f7:38 00c8          pushi c8 // $c8 dispatchEvent
  25fa:39 4a            pushi 4a // $4a pragmaFail
  25fc:39 43            pushi 43 // $43 at
  25fe:39 ff            pushi ff // $ff syncNum
  2600:38 00b9          pushi b9 // $b9 bottom
  2603:45 0e 0a         callb procedure_000e a //  

  2606:32 0568            jmp code_2b71 

        code_2609
  2609:78               push1 
  260a:39 1d            pushi 1d // $1d back
  260c:45 06 02         callb procedure_0006 2 //  

  260f:30 0013            bnt code_2625 
  2612:39 04            pushi 4 // $4 x
  2614:38 00c8          pushi c8 // $c8 dispatchEvent
  2617:39 4b            pushi 4b // $4b said
  2619:39 50            pushi 50 // $50 title
  261b:72 2fbb          lofsa $2fbb // Bobby
  261e:36                push 
  261f:45 0e 08         callb procedure_000e 8 //  

  2622:32 054c            jmp code_2b71 

        code_2625
  2625:83 07              lal local7 
  2627:30 0013            bnt code_263d 
  262a:39 04            pushi 4 // $4 x
  262c:38 00c8          pushi c8 // $c8 dispatchEvent
  262f:39 4c            pushi 4c // $4c claimed
  2631:39 50            pushi 50 // $50 title
  2633:72 2fbb          lofsa $2fbb // Bobby
  2636:36                push 
  2637:45 0e 08         callb procedure_000e 8 //  

  263a:32 0534            jmp code_2b71 

        code_263d
  263d:39 04            pushi 4 // $4 x
  263f:38 00c8          pushi c8 // $c8 dispatchEvent
  2642:39 4d            pushi 4d // $4d value
  2644:39 50            pushi 50 // $50 title
  2646:72 2fbb          lofsa $2fbb // Bobby
  2649:36                push 
  264a:45 0e 08         callb procedure_000e 8 //  

  264d:32 0521            jmp code_2b71 

        code_2650
  2650:3c                 dup 
  2651:35 04              ldi 4 
  2653:1a                 eq? 
  2654:30 050d            bnt code_2b64 
  2657:81 b3              lag  
  2659:30 0238            bnt code_2894 
  265c:81 b0              lag  
  265e:30 0013            bnt code_2674 
  2661:39 04            pushi 4 // $4 x
  2663:38 00c8          pushi c8 // $c8 dispatchEvent
  2666:39 4e            pushi 4e // $4e save
  2668:39 50            pushi 50 // $50 title
  266a:72 2fb5          lofsa $2fb5 // Bobbi
  266d:36                push 
  266e:45 0e 08         callb procedure_000e 8 //  

  2671:32 04fd            jmp code_2b71 

        code_2674
  2674:8f 02              lsp param2 
  2676:3c                 dup 
  2677:35 07              ldi 7 
  2679:1a                 eq? 
  267a:30 0053            bnt code_26d0 
  267d:89 0c              lsg  
  267f:34 00fa            ldi fa 
  2682:1a                 eq? 
  2683:30 0013            bnt code_2699 
  2686:39 04            pushi 4 // $4 x
  2688:38 00c8          pushi c8 // $c8 dispatchEvent
  268b:39 4f            pushi 4f // $4f restore
  268d:39 50            pushi 50 // $50 title
  268f:72 2fb5          lofsa $2fb5 // Bobbi
  2692:36                push 
  2693:45 0e 08         callb procedure_000e 8 //  

  2696:32 01f7            jmp code_2890 

        code_2699
  2699:39 6b            pushi 6b // $6b init
  269b:76               push0 
  269c:39 05            pushi 5 // $5 view
  269e:78               push1 
  269f:38 00c9          pushi c9 // $c9 disable
  26a2:38 00a2          pushi a2 // $a2 setLoop
  26a5:78               push1 
  26a6:78               push1 
  26a7:38 011c          pushi 11c // $11c posn
  26aa:7a               push2 
  26ab:39 60            pushi 60 // $60 frame
  26ad:38 00a3          pushi a3 // $a3 send
  26b0:38 0120          pushi 120 // $120 setCel
  26b3:78               push1 
  26b4:76               push0 
  26b5:38 00db          pushi db // $db cycleSpeed
  26b8:78               push1 
  26b9:39 08            pushi 8 // $8 underBits
  26bb:38 0096          pushi 96 // $96 setCycle
  26be:7a               push2 
  26bf:51 1a            class End 
  26c1:36                push 
  26c2:7c            pushSelf 
  26c3:72 0ee4          lofsa $0ee4 // arm
  26c6:4a 2c             send 2c 

  26c8:34 00fa            ldi fa 
  26cb:a1 b0              sag  
  26cd:32 01c0            jmp code_2890 

        code_26d0
  26d0:3c                 dup 
  26d1:35 06              ldi 6 
  26d3:1a                 eq? 
  26d4:30 008e            bnt code_2765 
  26d7:89 a0              lsg  
  26d9:35 01              ldi 1 
  26db:1c                 ne? 
  26dc:30 0012            bnt code_26f1 
  26df:39 04            pushi 4 // $4 x
  26e1:38 00c8          pushi c8 // $c8 dispatchEvent
  26e4:39 50            pushi 50 // $50 title
  26e6:3c                 dup 
  26e7:72 2fb5          lofsa $2fb5 // Bobbi
  26ea:36                push 
  26eb:45 0e 08         callb procedure_000e 8 //  

  26ee:32 019f            jmp code_2890 

        code_26f1
  26f1:39 03            pushi 3 // $3 y
  26f3:89 0c              lsg  
  26f5:38 00cd          pushi cd // $cd oldMouseY
  26f8:38 00fa          pushi fa // $fa outOfTouch
  26fb:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  2701:18                 not 
  2702:30 0013            bnt code_2718 
  2705:39 04            pushi 4 // $4 x
  2707:38 00c8          pushi c8 // $c8 dispatchEvent
  270a:39 51            pushi 51 // $51 button
  270c:39 50            pushi 50 // $50 title
  270e:72 2fb5          lofsa $2fb5 // Bobbi
  2711:36                push 
  2712:45 0e 08         callb procedure_000e 8 //  

  2715:32 0178            jmp code_2890 

        code_2718
  2718:78               push1 
  2719:39 09            pushi 9 // $9 nsTop
  271b:45 06 02         callb procedure_0006 2 //  

  271e:30 0013            bnt code_2734 
  2721:39 04            pushi 4 // $4 x
  2723:38 00c8          pushi c8 // $c8 dispatchEvent
  2726:39 52            pushi 52 // $52 icon
  2728:39 50            pushi 50 // $50 title
  272a:72 2fb5          lofsa $2fb5 // Bobbi
  272d:36                push 
  272e:45 0e 08         callb procedure_000e 8 //  

  2731:32 015c            jmp code_2890 

        code_2734
  2734:39 6b            pushi 6b // $6b init
  2736:76               push0 
  2737:39 05            pushi 5 // $5 view
  2739:78               push1 
  273a:38 00c9          pushi c9 // $c9 disable
  273d:38 00a2          pushi a2 // $a2 setLoop
  2740:78               push1 
  2741:78               push1 
  2742:38 011c          pushi 11c // $11c posn
  2745:7a               push2 
  2746:39 60            pushi 60 // $60 frame
  2748:38 00a3          pushi a3 // $a3 send
  274b:38 0120          pushi 120 // $120 setCel
  274e:78               push1 
  274f:76               push0 
  2750:38 0096          pushi 96 // $96 setCycle
  2753:7a               push2 
  2754:51 1a            class End 
  2756:36                push 
  2757:7c            pushSelf 
  2758:72 0ee4          lofsa $0ee4 // arm
  275b:4a 26             send 26 

  275d:34 01f4            ldi 1f4 
  2760:a1 b0              sag  
  2762:32 012b            jmp code_2890 

        code_2765
  2765:3c                 dup 
  2766:35 10              ldi 10 
  2768:1a                 eq? 
  2769:30 0088            bnt code_27f4 
  276c:89 a0              lsg  
  276e:35 02              ldi 2 
  2770:1c                 ne? 
  2771:30 0013            bnt code_2787 
  2774:39 04            pushi 4 // $4 x
  2776:38 00c8          pushi c8 // $c8 dispatchEvent
  2779:39 53            pushi 53 // $53 draw
  277b:39 50            pushi 50 // $50 title
  277d:72 2fb5          lofsa $2fb5 // Bobbi
  2780:36                push 
  2781:45 0e 08         callb procedure_000e 8 //  

  2784:32 0109            jmp code_2890 

        code_2787
  2787:39 03            pushi 3 // $3 y
  2789:89 0c              lsg  
  278b:38 00cd          pushi cd // $cd oldMouseY
  278e:38 00fa          pushi fa // $fa outOfTouch
  2791:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  2797:18                 not 
  2798:30 0013            bnt code_27ae 
  279b:39 04            pushi 4 // $4 x
  279d:38 00c8          pushi c8 // $c8 dispatchEvent
  27a0:39 51            pushi 51 // $51 button
  27a2:39 50            pushi 50 // $50 title
  27a4:72 2fb5          lofsa $2fb5 // Bobbi
  27a7:36                push 
  27a8:45 0e 08         callb procedure_000e 8 //  

  27ab:32 00e2            jmp code_2890 

        code_27ae
  27ae:78               push1 
  27af:39 0a            pushi a // $a nsLeft
  27b1:45 06 02         callb procedure_0006 2 //  

  27b4:30 000c            bnt code_27c3 
  27b7:7a               push2 
  27b8:38 00c8          pushi c8 // $c8 dispatchEvent
  27bb:39 54            pushi 54 // $54 delete
  27bd:45 0e 04         callb procedure_000e 4 //  

  27c0:32 00cd            jmp code_2890 

        code_27c3
  27c3:39 6b            pushi 6b // $6b init
  27c5:76               push0 
  27c6:39 05            pushi 5 // $5 view
  27c8:78               push1 
  27c9:38 00c9          pushi c9 // $c9 disable
  27cc:38 00a2          pushi a2 // $a2 setLoop
  27cf:78               push1 
  27d0:78               push1 
  27d1:38 011c          pushi 11c // $11c posn
  27d4:7a               push2 
  27d5:39 60            pushi 60 // $60 frame
  27d7:38 00a3          pushi a3 // $a3 send
  27da:38 0120          pushi 120 // $120 setCel
  27dd:78               push1 
  27de:76               push0 
  27df:38 0096          pushi 96 // $96 setCycle
  27e2:7a               push2 
  27e3:51 1a            class End 
  27e5:36                push 
  27e6:7c            pushSelf 
  27e7:72 0ee4          lofsa $0ee4 // arm
  27ea:4a 26             send 26 

  27ec:34 02bc            ldi 2bc 
  27ef:a1 b0              sag  
  27f1:32 009c            jmp code_2890 

        code_27f4
  27f4:3c                 dup 
  27f5:35 14              ldi 14 
  27f7:1a                 eq? 
  27f8:30 0088            bnt code_2883 
  27fb:89 a0              lsg  
  27fd:35 03              ldi 3 
  27ff:1c                 ne? 
  2800:30 0013            bnt code_2816 
  2803:39 04            pushi 4 // $4 x
  2805:38 00c8          pushi c8 // $c8 dispatchEvent
  2808:39 55            pushi 55 // $55 z
  280a:39 50            pushi 50 // $50 title
  280c:72 2fb5          lofsa $2fb5 // Bobbi
  280f:36                push 
  2810:45 0e 08         callb procedure_000e 8 //  

  2813:32 007a            jmp code_2890 

        code_2816
  2816:39 03            pushi 3 // $3 y
  2818:89 0c              lsg  
  281a:38 00cd          pushi cd // $cd oldMouseY
  281d:38 00fa          pushi fa // $fa outOfTouch
  2820:46 03e7 0005 06  calle 3e7 procedure_0005 6 //  

  2826:18                 not 
  2827:30 0013            bnt code_283d 
  282a:39 04            pushi 4 // $4 x
  282c:38 00c8          pushi c8 // $c8 dispatchEvent
  282f:39 51            pushi 51 // $51 button
  2831:39 50            pushi 50 // $50 title
  2833:72 2fb5          lofsa $2fb5 // Bobbi
  2836:36                push 
  2837:45 0e 08         callb procedure_000e 8 //  

  283a:32 0053            jmp code_2890 

        code_283d
  283d:78               push1 
  283e:39 0b            pushi b // $b nsBottom
  2840:45 06 02         callb procedure_0006 2 //  

  2843:30 000c            bnt code_2852 
  2846:7a               push2 
  2847:38 00c8          pushi c8 // $c8 dispatchEvent
  284a:39 56            pushi 56 // $56 parseLang
  284c:45 0e 04         callb procedure_000e 4 //  

  284f:32 003e            jmp code_2890 

        code_2852
  2852:39 6b            pushi 6b // $6b init
  2854:76               push0 
  2855:39 05            pushi 5 // $5 view
  2857:78               push1 
  2858:38 00c9          pushi c9 // $c9 disable
  285b:38 00a2          pushi a2 // $a2 setLoop
  285e:78               push1 
  285f:78               push1 
  2860:38 011c          pushi 11c // $11c posn
  2863:7a               push2 
  2864:39 60            pushi 60 // $60 frame
  2866:38 00a3          pushi a3 // $a3 send
  2869:38 0120          pushi 120 // $120 setCel
  286c:78               push1 
  286d:76               push0 
  286e:38 0096          pushi 96 // $96 setCycle
  2871:7a               push2 
  2872:51 1a            class End 
  2874:36                push 
  2875:7c            pushSelf 
  2876:72 0ee4          lofsa $0ee4 // arm
  2879:4a 26             send 26 

  287b:34 0384            ldi 384 
  287e:a1 b0              sag  
  2880:32 000d            jmp code_2890 

        code_2883
  2883:38 010c          pushi 10c // $10c doVerb
  2886:7a               push2 
  2887:8f 01              lsp param1 
  2889:8f 02              lsp param2 
  288b:59 03            &rest 3 
  288d:57 2f 08         super Prop 8 


        code_2890
  2890:3a                toss 
  2891:32 02dd            jmp code_2b71 

        code_2894
  2894:8f 02              lsp param2 
  2896:3c                 dup 
  2897:35 03              ldi 3 
  2899:1a                 eq? 
  289a:30 009e            bnt code_293b 
  289d:89 a1              lsg  
  289f:35 01              ldi 1 
  28a1:1a                 eq? 
  28a2:30 0013            bnt code_28b8 
  28a5:39 04            pushi 4 // $4 x
  28a7:38 00c8          pushi c8 // $c8 dispatchEvent
  28aa:39 57            pushi 57 // $57 printLang
  28ac:39 50            pushi 50 // $50 title
  28ae:72 2fbb          lofsa $2fbb // Bobby
  28b1:36                push 
  28b2:45 0e 08         callb procedure_000e 8 //  

  28b5:32 02a8            jmp code_2b60 

        code_28b8
  28b8:78               push1 
  28b9:39 1d            pushi 1d // $1d back
  28bb:45 06 02         callb procedure_0006 2 //  

  28be:30 0013            bnt code_28d4 
  28c1:39 04            pushi 4 // $4 x
  28c3:38 00c8          pushi c8 // $c8 dispatchEvent
  28c6:39 58            pushi 58 // $58 subtitleLang
  28c8:39 50            pushi 50 // $50 title
  28ca:72 2fbb          lofsa $2fbb // Bobby
  28cd:36                push 
  28ce:45 0e 08         callb procedure_000e 8 //  

  28d1:32 028c            jmp code_2b60 

        code_28d4
  28d4:81 b0              lag  
  28d6:30 0013            bnt code_28ec 
  28d9:39 04            pushi 4 // $4 x
  28db:38 00c8          pushi c8 // $c8 dispatchEvent
  28de:39 59            pushi 59 // $59 size
  28e0:39 50            pushi 50 // $50 title
  28e2:72 2fbb          lofsa $2fbb // Bobby
  28e5:36                push 
  28e6:45 0e 08         callb procedure_000e 8 //  

  28e9:32 0274            jmp code_2b60 

        code_28ec
  28ec:7a               push2 
  28ed:39 08            pushi 8 // $8 underBits
  28ef:39 5f            pushi 5f // $5f sec
  28f1:45 0a 04         callb procedure_000a 4 //  

  28f4:39 05            pushi 5 // $5 view
  28f6:78               push1 
  28f7:38 00ca          pushi ca // $ca noClickHelp
  28fa:39 6b            pushi 6b // $6b init
  28fc:76               push0 
  28fd:38 00a2          pushi a2 // $a2 setLoop
  2900:78               push1 
  2901:39 04            pushi 4 // $4 x
  2903:38 0120          pushi 120 // $120 setCel
  2906:78               push1 
  2907:76               push0 
  2908:38 011c          pushi 11c // $11c posn
  290b:7a               push2 
  290c:39 62            pushi 62 // $62 pri
  290e:38 00b6          pushi b6 // $b6 center
  2911:38 0096          pushi 96 // $96 setCycle
  2914:7a               push2 
  2915:51 1a            class End 
  2917:36                push 
  2918:7c            pushSelf 
  2919:72 0ee4          lofsa $0ee4 // arm
  291c:4a 26             send 26 

  291e:89 9d              lsg  
  2920:35 01              ldi 1 
  2922:02                 add 
  2923:a1 9d              sag  
  2925:34 0258            ldi 258 
  2928:a1 b0              sag  
  292a:35 00              ldi 0 
  292c:a3 09              sal local9 
  292e:38 008e          pushi 8e // $8e setScript
  2931:78               push1 
  2932:76               push0 
  2933:72 1124          lofsa $1124 // faxPaper
  2936:4a 06             send 6 

  2938:32 0225            jmp code_2b60 

        code_293b
  293b:3c                 dup 
  293c:35 07              ldi 7 
  293e:1a                 eq? 
  293f:30 009e            bnt code_29e0 
  2942:89 a1              lsg  
  2944:35 02              ldi 2 
  2946:1a                 eq? 
  2947:30 0013            bnt code_295d 
  294a:39 04            pushi 4 // $4 x
  294c:38 00c8          pushi c8 // $c8 dispatchEvent
  294f:39 57            pushi 57 // $57 printLang
  2951:39 50            pushi 50 // $50 title
  2953:72 2fbb          lofsa $2fbb // Bobby
  2956:36                push 
  2957:45 0e 08         callb procedure_000e 8 //  

  295a:32 0203            jmp code_2b60 

        code_295d
  295d:78               push1 
  295e:39 1c            pushi 1c // $1c color
  2960:45 06 02         callb procedure_0006 2 //  

  2963:30 0013            bnt code_2979 
  2966:39 04            pushi 4 // $4 x
  2968:38 00c8          pushi c8 // $c8 dispatchEvent
  296b:39 58            pushi 58 // $58 subtitleLang
  296d:39 50            pushi 50 // $50 title
  296f:72 2fbb          lofsa $2fbb // Bobby
  2972:36                push 
  2973:45 0e 08         callb procedure_000e 8 //  

  2976:32 01e7            jmp code_2b60 

        code_2979
  2979:81 b0              lag  
  297b:30 0013            bnt code_2991 
  297e:39 04            pushi 4 // $4 x
  2980:38 00c8          pushi c8 // $c8 dispatchEvent
  2983:39 59            pushi 59 // $59 size
  2985:39 50            pushi 50 // $50 title
  2987:72 2fbb          lofsa $2fbb // Bobby
  298a:36                push 
  298b:45 0e 08         callb procedure_000e 8 //  

  298e:32 01cf            jmp code_2b60 

        code_2991
  2991:7a               push2 
  2992:39 08            pushi 8 // $8 underBits
  2994:39 5f            pushi 5f // $5f sec
  2996:45 0a 04         callb procedure_000a 4 //  

  2999:39 05            pushi 5 // $5 view
  299b:78               push1 
  299c:38 00ca          pushi ca // $ca noClickHelp
  299f:39 6b            pushi 6b // $6b init
  29a1:76               push0 
  29a2:38 00a2          pushi a2 // $a2 setLoop
  29a5:78               push1 
  29a6:39 04            pushi 4 // $4 x
  29a8:38 0120          pushi 120 // $120 setCel
  29ab:78               push1 
  29ac:76               push0 
  29ad:38 011c          pushi 11c // $11c posn
  29b0:7a               push2 
  29b1:39 62            pushi 62 // $62 pri
  29b3:38 00b6          pushi b6 // $b6 center
  29b6:38 0096          pushi 96 // $96 setCycle
  29b9:7a               push2 
  29ba:51 1a            class End 
  29bc:36                push 
  29bd:7c            pushSelf 
  29be:72 0ee4          lofsa $0ee4 // arm
  29c1:4a 26             send 26 

  29c3:89 9d              lsg  
  29c5:35 02              ldi 2 
  29c7:02                 add 
  29c8:a1 9d              sag  
  29ca:34 0320            ldi 320 
  29cd:a1 b0              sag  
  29cf:35 00              ldi 0 
  29d1:a3 09              sal local9 
  29d3:38 008e          pushi 8e // $8e setScript
  29d6:78               push1 
  29d7:76               push0 
  29d8:72 1124          lofsa $1124 // faxPaper
  29db:4a 06             send 6 

  29dd:32 0180            jmp code_2b60 

        code_29e0
  29e0:3c                 dup 
  29e1:35 00              ldi 0 
  29e3:1a                 eq? 
  29e4:30 016c            bnt code_2b53 
  29e7:39 20            pushi 20 // $20 state
  29e9:76               push0 
  29ea:39 43            pushi 43 // $43 at
  29ec:78               push1 
  29ed:76               push0 
  29ee:51 40            class Inv 
  29f0:4a 06             send 6 

  29f2:4a 04             send 4 

  29f4:36                push 
  29f5:3c                 dup 
  29f6:35 00              ldi 0 
  29f8:1a                 eq? 
  29f9:30 000c            bnt code_2a08 
  29fc:7a               push2 
  29fd:38 00c8          pushi c8 // $c8 dispatchEvent
  2a00:39 5a            pushi 5a // $5a points
  2a02:45 0e 04         callb procedure_000e 4 //  

  2a05:32 0147            jmp code_2b4f 

        code_2a08
  2a08:3c                 dup 
  2a09:35 01              ldi 1 
  2a0b:1a                 eq? 
  2a0c:30 009e            bnt code_2aad 
  2a0f:89 a1              lsg  
  2a11:35 01              ldi 1 
  2a13:1a                 eq? 
  2a14:30 0013            bnt code_2a2a 
  2a17:39 04            pushi 4 // $4 x
  2a19:38 00c8          pushi c8 // $c8 dispatchEvent
  2a1c:39 57            pushi 57 // $57 printLang
  2a1e:39 50            pushi 50 // $50 title
  2a20:72 2fbb          lofsa $2fbb // Bobby
  2a23:36                push 
  2a24:45 0e 08         callb procedure_000e 8 //  

  2a27:32 0125            jmp code_2b4f 

        code_2a2a
  2a2a:78               push1 
  2a2b:39 1d            pushi 1d // $1d back
  2a2d:45 06 02         callb procedure_0006 2 //  

  2a30:30 0013            bnt code_2a46 
  2a33:39 04            pushi 4 // $4 x
  2a35:38 00c8          pushi c8 // $c8 dispatchEvent
  2a38:39 58            pushi 58 // $58 subtitleLang
  2a3a:39 50            pushi 50 // $50 title
  2a3c:72 2fbb          lofsa $2fbb // Bobby
  2a3f:36                push 
  2a40:45 0e 08         callb procedure_000e 8 //  

  2a43:32 0109            jmp code_2b4f 

        code_2a46
  2a46:81 b0              lag  
  2a48:30 0013            bnt code_2a5e 
  2a4b:39 04            pushi 4 // $4 x
  2a4d:38 00c8          pushi c8 // $c8 dispatchEvent
  2a50:39 59            pushi 59 // $59 size
  2a52:39 50            pushi 50 // $50 title
  2a54:72 2fbb          lofsa $2fbb // Bobby
  2a57:36                push 
  2a58:45 0e 08         callb procedure_000e 8 //  

  2a5b:32 00f1            jmp code_2b4f 

        code_2a5e
  2a5e:7a               push2 
  2a5f:39 08            pushi 8 // $8 underBits
  2a61:39 5f            pushi 5f // $5f sec
  2a63:45 0a 04         callb procedure_000a 4 //  

  2a66:39 05            pushi 5 // $5 view
  2a68:78               push1 
  2a69:38 00ca          pushi ca // $ca noClickHelp
  2a6c:39 6b            pushi 6b // $6b init
  2a6e:76               push0 
  2a6f:38 00a2          pushi a2 // $a2 setLoop
  2a72:78               push1 
  2a73:39 05            pushi 5 // $5 view
  2a75:38 0120          pushi 120 // $120 setCel
  2a78:78               push1 
  2a79:76               push0 
  2a7a:38 011c          pushi 11c // $11c posn
  2a7d:7a               push2 
  2a7e:39 60            pushi 60 // $60 frame
  2a80:38 00b8          pushi b8 // $b8 left
  2a83:38 0096          pushi 96 // $96 setCycle
  2a86:7a               push2 
  2a87:51 1a            class End 
  2a89:36                push 
  2a8a:7c            pushSelf 
  2a8b:72 0ee4          lofsa $0ee4 // arm
  2a8e:4a 26             send 26 

  2a90:89 9d              lsg  
  2a92:35 01              ldi 1 
  2a94:02                 add 
  2a95:a1 9d              sag  
  2a97:34 0258            ldi 258 
  2a9a:a1 b0              sag  
  2a9c:35 00              ldi 0 
  2a9e:a3 09              sal local9 
  2aa0:38 008e          pushi 8e // $8e setScript
  2aa3:78               push1 
  2aa4:76               push0 
  2aa5:72 1124          lofsa $1124 // faxPaper
  2aa8:4a 06             send 6 

  2aaa:32 00a2            jmp code_2b4f 

        code_2aad
  2aad:3c                 dup 
  2aae:35 02              ldi 2 
  2ab0:1a                 eq? 
  2ab1:30 009b            bnt code_2b4f 
  2ab4:89 a1              lsg  
  2ab6:35 02              ldi 2 
  2ab8:1a                 eq? 
  2ab9:30 0013            bnt code_2acf 
  2abc:39 04            pushi 4 // $4 x
  2abe:38 00c8          pushi c8 // $c8 dispatchEvent
  2ac1:39 57            pushi 57 // $57 printLang
  2ac3:39 50            pushi 50 // $50 title
  2ac5:72 2fbb          lofsa $2fbb // Bobby
  2ac8:36                push 
  2ac9:45 0e 08         callb procedure_000e 8 //  

  2acc:32 0080            jmp code_2b4f 

        code_2acf
  2acf:78               push1 
  2ad0:39 1c            pushi 1c // $1c color
  2ad2:45 06 02         callb procedure_0006 2 //  

  2ad5:30 0013            bnt code_2aeb 
  2ad8:39 04            pushi 4 // $4 x
  2ada:38 00c8          pushi c8 // $c8 dispatchEvent
  2add:39 58            pushi 58 // $58 subtitleLang
  2adf:39 50            pushi 50 // $50 title
  2ae1:72 2fbb          lofsa $2fbb // Bobby
  2ae4:36                push 
  2ae5:45 0e 08         callb procedure_000e 8 //  

  2ae8:32 0064            jmp code_2b4f 

        code_2aeb
  2aeb:81 b0              lag  
  2aed:30 0013            bnt code_2b03 
  2af0:39 04            pushi 4 // $4 x
  2af2:38 00c8          pushi c8 // $c8 dispatchEvent
  2af5:39 59            pushi 59 // $59 size
  2af7:39 50            pushi 50 // $50 title
  2af9:72 2fbb          lofsa $2fbb // Bobby
  2afc:36                push 
  2afd:45 0e 08         callb procedure_000e 8 //  

  2b00:32 004c            jmp code_2b4f 

        code_2b03
  2b03:7a               push2 
  2b04:39 08            pushi 8 // $8 underBits
  2b06:39 5f            pushi 5f // $5f sec
  2b08:45 0a 04         callb procedure_000a 4 //  

  2b0b:39 05            pushi 5 // $5 view
  2b0d:78               push1 
  2b0e:38 00ca          pushi ca // $ca noClickHelp
  2b11:39 6b            pushi 6b // $6b init
  2b13:76               push0 
  2b14:38 00a2          pushi a2 // $a2 setLoop
  2b17:78               push1 
  2b18:39 05            pushi 5 // $5 view
  2b1a:38 0120          pushi 120 // $120 setCel
  2b1d:78               push1 
  2b1e:76               push0 
  2b1f:38 011c          pushi 11c // $11c posn
  2b22:7a               push2 
  2b23:39 60            pushi 60 // $60 frame
  2b25:38 00b8          pushi b8 // $b8 left
  2b28:38 0096          pushi 96 // $96 setCycle
  2b2b:7a               push2 
  2b2c:51 1a            class End 
  2b2e:36                push 
  2b2f:7c            pushSelf 
  2b30:72 0ee4          lofsa $0ee4 // arm
  2b33:4a 26             send 26 

  2b35:89 9d              lsg  
  2b37:35 02              ldi 2 
  2b39:02                 add 
  2b3a:a1 9d              sag  
  2b3c:34 0320            ldi 320 
  2b3f:a1 b0              sag  
  2b41:35 00              ldi 0 
  2b43:a3 09              sal local9 
  2b45:38 008e          pushi 8e // $8e setScript
  2b48:78               push1 
  2b49:76               push0 
  2b4a:72 1124          lofsa $1124 // faxPaper
  2b4d:4a 06             send 6 


        code_2b4f
  2b4f:3a                toss 
  2b50:32 000d            jmp code_2b60 

        code_2b53
  2b53:38 010c          pushi 10c // $10c doVerb
  2b56:7a               push2 
  2b57:8f 01              lsp param1 
  2b59:8f 02              lsp param2 
  2b5b:59 03            &rest 3 
  2b5d:57 2f 08         super Prop 8 


        code_2b60
  2b60:3a                toss 
  2b61:32 000d            jmp code_2b71 

        code_2b64
  2b64:38 010c          pushi 10c // $10c doVerb
  2b67:7a               push2 
  2b68:8f 01              lsp param1 
  2b6a:8f 02              lsp param2 
  2b6c:59 03            &rest 3 
  2b6e:57 2f 08         super Prop 8 


        code_2b71
  2b71:3a                toss 
  2b72:48                 ret 
  2b73:00                bnot 
    )

    (method (cue) // method_22ae
  22ae:38 008d          pushi 8d // $8d cue
  22b1:76               push0 
  22b2:57 2f 04         super Prop 4 

  22b5:c3 0d              +al local13 
  22b7:36                push 
  22b8:3c                 dup 
  22b9:35 01              ldi 1 
  22bb:1a                 eq? 
  22bc:30 0027            bnt code_22e6 
  22bf:76               push0 
  22c0:45 02 00         callb procedure_0002 0 //  

  22c3:38 0096          pushi 96 // $96 setCycle
  22c6:78               push1 
  22c7:51 1a            class End 
  22c9:36                push 
  22ca:72 2b80          lofsa $2b80 // driver
  22cd:4a 06             send 6 

  22cf:38 0096          pushi 96 // $96 setCycle
  22d2:78               push1 
  22d3:51 1a            class End 
  22d5:36                push 
  22d6:72 1974          lofsa $1974 // driverEyes
  22d9:4a 06             send 6 

  22db:39 03            pushi 3 // $3 y
  22dd:7a               push2 
  22de:76               push0 
  22df:7c            pushSelf 
  22e0:45 11 06         callb procedure_0011 6 //  

  22e3:32 015c            jmp code_2442 

        code_22e6
  22e6:3c                 dup 
  22e7:35 02              ldi 2 
  22e9:1a                 eq? 
  22ea:30 00f3            bnt code_23e0 
  22ed:89 b0              lsg  
  22ef:3c                 dup 
  22f0:34 00fa            ldi fa 
  22f3:1a                 eq? 
  22f4:30 001b            bnt code_2312 
  22f7:39 04            pushi 4 // $4 x
  22f9:38 00c8          pushi c8 // $c8 dispatchEvent
  22fc:39 35            pushi 35 // $35 b-incr
  22fe:39 50            pushi 50 // $50 title
  2300:72 2fb5          lofsa $2fb5 // Bobbi
  2303:36                push 
  2304:45 0e 08         callb procedure_000e 8 //  

  2307:39 03            pushi 3 // $3 y
  2309:7a               push2 
  230a:78               push1 
  230b:7c            pushSelf 
  230c:45 11 06         callb procedure_0011 6 //  

  230f:32 00ca            jmp code_23dc 

        code_2312
  2312:3c                 dup 
  2313:34 01f4            ldi 1f4 
  2316:1a                 eq? 
  2317:30 001b            bnt code_2335 
  231a:39 04            pushi 4 // $4 x
  231c:38 00c8          pushi c8 // $c8 dispatchEvent
  231f:39 36            pushi 36 // $36 xStep
  2321:39 50            pushi 50 // $50 title
  2323:72 2fb5          lofsa $2fb5 // Bobbi
  2326:36                push 
  2327:45 0e 08         callb procedure_000e 8 //  

  232a:39 03            pushi 3 // $3 y
  232c:7a               push2 
  232d:78               push1 
  232e:7c            pushSelf 
  232f:45 11 06         callb procedure_0011 6 //  

  2332:32 00a7            jmp code_23dc 

        code_2335
  2335:3c                 dup 
  2336:34 02bc            ldi 2bc 
  2339:1a                 eq? 
  233a:30 001b            bnt code_2358 
  233d:39 04            pushi 4 // $4 x
  233f:38 00c8          pushi c8 // $c8 dispatchEvent
  2342:39 37            pushi 37 // $37 yStep
  2344:39 50            pushi 50 // $50 title
  2346:72 2fb5          lofsa $2fb5 // Bobbi
  2349:36                push 
  234a:45 0e 08         callb procedure_000e 8 //  

  234d:39 03            pushi 3 // $3 y
  234f:7a               push2 
  2350:78               push1 
  2351:7c            pushSelf 
  2352:45 11 06         callb procedure_0011 6 //  

  2355:32 0084            jmp code_23dc 

        code_2358
  2358:3c                 dup 
  2359:34 0384            ldi 384 
  235c:1a                 eq? 
  235d:30 001b            bnt code_237b 
  2360:39 04            pushi 4 // $4 x
  2362:38 00c8          pushi c8 // $c8 dispatchEvent
  2365:39 38            pushi 38 // $38 moveSpeed
  2367:39 50            pushi 50 // $50 title
  2369:72 2fb5          lofsa $2fb5 // Bobbi
  236c:36                push 
  236d:45 0e 08         callb procedure_000e 8 //  

  2370:39 03            pushi 3 // $3 y
  2372:7a               push2 
  2373:78               push1 
  2374:7c            pushSelf 
  2375:45 11 06         callb procedure_0011 6 //  

  2378:32 0061            jmp code_23dc 

        code_237b
  237b:3c                 dup 
  237c:34 0258            ldi 258 
  237f:1a                 eq? 
  2380:30 002a            bnt code_23ad 
  2383:39 04            pushi 4 // $4 x
  2385:38 00c8          pushi c8 // $c8 dispatchEvent
  2388:39 39            pushi 39 // $39 cantBeHere
  238a:39 50            pushi 50 // $50 title
  238c:72 2fbb          lofsa $2fbb // Bobby
  238f:36                push 
  2390:45 0e 08         callb procedure_000e 8 //  

  2393:89 0c              lsg  
  2395:34 0320            ldi 320 
  2398:1a                 eq? 
  2399:30 0006            bnt code_23a2 
  239c:78               push1 
  239d:39 1c            pushi 1c // $1c color
  239f:45 07 02         callb procedure_0007 2 //  


        code_23a2
  23a2:39 03            pushi 3 // $3 y
  23a4:7a               push2 
  23a5:78               push1 
  23a6:7c            pushSelf 
  23a7:45 11 06         callb procedure_0011 6 //  

  23aa:32 002f            jmp code_23dc 

        code_23ad
  23ad:3c                 dup 
  23ae:34 0320            ldi 320 
  23b1:1a                 eq? 
  23b2:30 0027            bnt code_23dc 
  23b5:39 04            pushi 4 // $4 x
  23b7:38 00c8          pushi c8 // $c8 dispatchEvent
  23ba:39 3a            pushi 3a // $3a heading
  23bc:39 50            pushi 50 // $50 title
  23be:72 2fbb          lofsa $2fbb // Bobby
  23c1:36                push 
  23c2:45 0e 08         callb procedure_000e 8 //  

  23c5:89 0c              lsg  
  23c7:34 0258            ldi 258 
  23ca:1a                 eq? 
  23cb:30 0006            bnt code_23d4 
  23ce:78               push1 
  23cf:39 1d            pushi 1d // $1d back
  23d1:45 07 02         callb procedure_0007 2 //  


        code_23d4
  23d4:39 03            pushi 3 // $3 y
  23d6:7a               push2 
  23d7:78               push1 
  23d8:7c            pushSelf 
  23d9:45 11 06         callb procedure_0011 6 //  


        code_23dc
  23dc:3a                toss 
  23dd:32 0062            jmp code_2442 

        code_23e0
  23e0:3c                 dup 
  23e1:35 03              ldi 3 
  23e3:1a                 eq? 
  23e4:30 0028            bnt code_240f 
  23e7:38 0096          pushi 96 // $96 setCycle
  23ea:78               push1 
  23eb:51 1b            class Beg 
  23ed:36                push 
  23ee:72 2b80          lofsa $2b80 // driver
  23f1:4a 06             send 6 

  23f3:38 0096          pushi 96 // $96 setCycle
  23f6:78               push1 
  23f7:51 1b            class Beg 
  23f9:36                push 
  23fa:72 1974          lofsa $1974 // driverEyes
  23fd:4a 06             send 6 

  23ff:38 0096          pushi 96 // $96 setCycle
  2402:7a               push2 
  2403:51 1b            class Beg 
  2405:36                push 
  2406:7c            pushSelf 
  2407:72 0ee4          lofsa $0ee4 // arm
  240a:4a 08             send 8 

  240c:32 0033            jmp code_2442 

        code_240f
  240f:3c                 dup 
  2410:35 04              ldi 4 
  2412:1a                 eq? 
  2413:30 002c            bnt code_2442 
  2416:35 00              ldi 0 
  2418:a3 0d              sal local13 
  241a:39 6c            pushi 6c // $6c dispose
  241c:76               push0 
  241d:72 0ee4          lofsa $0ee4 // arm
  2420:4a 04             send 4 

  2422:81 b3              lag  
  2424:30 000f            bnt code_2436 
  2427:38 008e          pushi 8e // $8e setScript
  242a:78               push1 
  242b:72 227c          lofsa $227c // sDrive
  242e:36                push 
  242f:81 02              lag  
  2431:4a 06             send 6 

  2433:32 000c            jmp code_2442 

        code_2436
  2436:38 008e          pushi 8e // $8e setScript
  2439:78               push1 
  243a:72 2f42          lofsa $2f42 // sDream
  243d:36                push 
  243e:81 02              lag  
  2440:4a 06             send 6 


        code_2442
  2442:3a                toss 
  2443:48                 ret 
    )

)

// 2f3c
(instance sDream of Script
    (properties
        client $0
        state $ffff
        start $0
        timer $0
        cycles $0
        seconds $0
        lastSeconds $0
        ticks $0
        lastTicks $0
        register $0
        script $0
        caller $0
        next $0
    )
    (method (changeState) // method_2be6
  2be6:87 01              lap param1 
  2be8:65 0a             aTop state 
  2bea:36                push 
  2beb:3c                 dup 
  2bec:35 00              ldi 0 
  2bee:1a                 eq? 
  2bef:30 0027            bnt code_2c19 
  2bf2:76               push0 
  2bf3:45 02 00         callb procedure_0002 0 //  

  2bf6:38 008e          pushi 8e // $8e setScript
  2bf9:78               push1 
  2bfa:72 227c          lofsa $227c // sDrive
  2bfd:36                push 
  2bfe:72 2b80          lofsa $2b80 // driver
  2c01:4a 06             send 6 

  2c03:38 008e          pushi 8e // $8e setScript
  2c06:78               push1 
  2c07:76               push0 
  2c08:38 0120          pushi 120 // $120 setCel
  2c0b:78               push1 
  2c0c:76               push0 
  2c0d:72 0a54          lofsa $0a54 // legs
  2c10:4a 0c             send c 

  2c12:35 08              ldi 8 
  2c14:65 12             aTop seconds 
  2c16:32 031b            jmp code_2f34 

        code_2c19
  2c19:3c                 dup 
  2c1a:35 01              ldi 1 
  2c1c:1a                 eq? 
  2c1d:30 0022            bnt code_2c42 
  2c20:35 01              ldi 1 
  2c22:a3 08              sal local8 
  2c24:38 009f          pushi 9f // $9f fade
  2c27:39 04            pushi 4 // $4 x
  2c29:76               push0 
  2c2a:39 0f            pushi f // $f lsBottom
  2c2c:39 05            pushi 5 // $5 view
  2c2e:76               push0 
  2c2f:81 66              lag  
  2c31:4a 0c             send c 

  2c33:38 009c          pushi 9c // $9c stop
  2c36:76               push0 
  2c37:81 67              lag  
  2c39:4a 04             send 4 

  2c3b:35 02              ldi 2 
  2c3d:65 12             aTop seconds 
  2c3f:32 02f2            jmp code_2f34 

        code_2c42
  2c42:3c                 dup 
  2c43:35 02              ldi 2 
  2c45:1a                 eq? 
  2c46:30 0069            bnt code_2cb2 
  2c49:39 2b            pushi 2b // $2b number
  2c4b:78               push1 
  2c4c:38 0140          pushi 140 // $140 mapKeyToDir
  2c4f:39 06            pushi 6 // $6 loop
  2c51:78               push1 
  2c52:39 ff            pushi ff // $ff syncNum
  2c54:39 2a            pushi 2a // $2a play
  2c56:78               push1 
  2c57:76               push0 
  2c58:38 009f          pushi 9f // $9f fade
  2c5b:39 04            pushi 4 // $4 x
  2c5d:39 7f            pushi 7f // $7f addAfter
  2c5f:39 0f            pushi f // $f lsBottom
  2c61:39 0a            pushi a // $a nsLeft
  2c63:76               push0 
  2c64:81 67              lag  
  2c66:4a 1e             send 1e 

  2c68:39 06            pushi 6 // $6 loop
  2c6a:38 00c8          pushi c8 // $c8 dispatchEvent
  2c6d:39 5b            pushi 5b // $5b palette
  2c6f:39 43            pushi 43 // $43 at
  2c71:39 ff            pushi ff // $ff syncNum
  2c73:38 00b9          pushi b9 // $b9 bottom
  2c76:39 6c            pushi 6c // $6c dispose
  2c78:45 0e 0c         callb procedure_000e c //  

  2c7b:39 6c            pushi 6c // $6c dispose
  2c7d:76               push0 
  2c7e:72 0bd2          lofsa $0bd2 // tv
  2c81:4a 04             send 4 

  2c83:38 008e          pushi 8e // $8e setScript
  2c86:78               push1 
  2c87:76               push0 
  2c88:38 011d          pushi 11d // $11d stopUpd
  2c8b:76               push0 
  2c8c:72 082c          lofsa $082c // fish
  2c8f:4a 0a             send a 

  2c91:39 6b            pushi 6b // $6b init
  2c93:76               push0 
  2c94:38 00a2          pushi a2 // $a2 setLoop
  2c97:78               push1 
  2c98:76               push0 
  2c99:38 0120          pushi 120 // $120 setCel
  2c9c:78               push1 
  2c9d:78               push1 
  2c9e:38 011c          pushi 11c // $11c posn
  2ca1:7a               push2 
  2ca2:39 75            pushi 75 // $75 firstTrue
  2ca4:39 78            pushi 78 // $78 isEmpty
  2ca6:72 12fa          lofsa $12fa // dreamBubble
  2ca9:4a 18             send 18 

  2cab:35 5a              ldi 5a 
  2cad:65 16             aTop ticks 
  2caf:32 0282            jmp code_2f34 

        code_2cb2
  2cb2:3c                 dup 
  2cb3:35 03              ldi 3 
  2cb5:1a                 eq? 
  2cb6:30 001a            bnt code_2cd3 
  2cb9:38 0120          pushi 120 // $120 setCel
  2cbc:78               push1 
  2cbd:7a               push2 
  2cbe:38 011c          pushi 11c // $11c posn
  2cc1:7a               push2 
  2cc2:38 0094          pushi 94 // $94 lastTime
  2cc5:39 62            pushi 62 // $62 pri
  2cc7:72 12fa          lofsa $12fa // dreamBubble
  2cca:4a 0e             send e 

  2ccc:35 5a              ldi 5a 
  2cce:65 16             aTop ticks 
  2cd0:32 0261            jmp code_2f34 

        code_2cd3
  2cd3:3c                 dup 
  2cd4:35 04              ldi 4 
  2cd6:1a                 eq? 
  2cd7:30 001b            bnt code_2cf5 
  2cda:38 0120          pushi 120 // $120 setCel
  2cdd:78               push1 
  2cde:39 03            pushi 3 // $3 y
  2ce0:38 011c          pushi 11c // $11c posn
  2ce3:7a               push2 
  2ce4:38 00c3          pushi c3 // $c3 highlight
  2ce7:39 73            pushi 73 // $73 add
  2ce9:72 12fa          lofsa $12fa // dreamBubble
  2cec:4a 0e             send e 

  2cee:35 5a              ldi 5a 
  2cf0:65 16             aTop ticks 
  2cf2:32 023f            jmp code_2f34 

        code_2cf5
  2cf5:3c                 dup 
  2cf6:35 05              ldi 5 
  2cf8:1a                 eq? 
  2cf9:30 001b            bnt code_2d17 
  2cfc:38 0120          pushi 120 // $120 setCel
  2cff:78               push1 
  2d00:39 04            pushi 4 // $4 x
  2d02:38 011c          pushi 11c // $11c posn
  2d05:7a               push2 
  2d06:38 00c7          pushi c7 // $c7 advanceCurIcon
  2d09:39 7c            pushi 7c // $7c prev
  2d0b:72 12fa          lofsa $12fa // dreamBubble
  2d0e:4a 0e             send e 

  2d10:35 5a              ldi 5a 
  2d12:65 16             aTop ticks 
  2d14:32 021d            jmp code_2f34 

        code_2d17
  2d17:3c                 dup 
  2d18:35 06              ldi 6 
  2d1a:1a                 eq? 
  2d1b:30 017d            bnt code_2e9b 
  2d1e:81 19              lag  
  2d20:30 0005            bnt code_2d28 
  2d23:39 6c            pushi 6c // $6c dispose
  2d25:76               push0 
  2d26:4a 04             send 4 


        code_2d28
  2d28:39 6c            pushi 6c // $6c dispose
  2d2a:76               push0 
  2d2b:72 12fa          lofsa $12fa // dreamBubble
  2d2e:4a 04             send 4 

  2d30:39 69            pushi 69 // $69 hide
  2d32:76               push0 
  2d33:72 082c          lofsa $082c // fish
  2d36:4a 04             send 4 

  2d38:39 69            pushi 69 // $69 hide
  2d3a:76               push0 
  2d3b:72 0f96          lofsa $0f96 // bottle
  2d3e:4a 04             send 4 

  2d40:39 69            pushi 69 // $69 hide
  2d42:76               push0 
  2d43:72 0bd2          lofsa $0bd2 // tv
  2d46:4a 04             send 4 

  2d48:c1 a2              +ag  
  2d4a:36                push 
  2d4b:3c                 dup 
  2d4c:35 01              ldi 1 
  2d4e:1a                 eq? 
  2d4f:30 0032            bnt code_2d84 
  2d52:38 018d          pushi 18d // $18d overlay
  2d55:78               push1 
  2d56:38 00e6          pushi e6 // $e6 distanceTo
  2d59:81 02              lag  
  2d5b:4a 06             send 6 

  2d5d:39 6b            pushi 6b // $6b init
  2d5f:76               push0 
  2d60:39 05            pushi 5 // $5 view
  2d62:78               push1 
  2d63:38 00e7          pushi e7 // $e7 dynamic
  2d66:38 00a2          pushi a2 // $a2 setLoop
  2d69:78               push1 
  2d6a:76               push0 
  2d6b:38 011c          pushi 11c // $11c posn
  2d6e:7a               push2 
  2d6f:38 00cd          pushi cd // $cd oldMouseY
  2d72:39 5a            pushi 5a // $5a points
  2d74:38 008e          pushi 8e // $8e setScript
  2d77:78               push1 
  2d78:72 152e          lofsa $152e // sRoll
  2d7b:36                push 
  2d7c:72 0ce6          lofsa $0ce6 // dreamProp1
  2d7f:4a 1e             send 1e 

  2d81:32 010f            jmp code_2e93 

        code_2d84
  2d84:3c                 dup 
  2d85:35 02              ldi 2 
  2d87:1a                 eq? 
  2d88:30 0055            bnt code_2de0 
  2d8b:38 018d          pushi 18d // $18d overlay
  2d8e:78               push1 
  2d8f:38 00eb          pushi eb // $eb incClientPos
  2d92:81 02              lag  
  2d94:4a 06             send 6 

  2d96:39 6b            pushi 6b // $6b init
  2d98:76               push0 
  2d99:39 05            pushi 5 // $5 view
  2d9b:78               push1 
  2d9c:38 00eb          pushi eb // $eb incClientPos
  2d9f:38 011c          pushi 11c // $11c posn
  2da2:7a               push2 
  2da3:39 7b            pushi 7b // $7b last
  2da5:39 45            pushi 45 // $45 done
  2da7:38 00db          pushi db // $db cycleSpeed
  2daa:78               push1 
  2dab:39 06            pushi 6 // $6 loop
  2dad:38 0096          pushi 96 // $96 setCycle
  2db0:78               push1 
  2db1:51 5e            class RandCycle 
  2db3:36                push 
  2db4:72 0ce6          lofsa $0ce6 // dreamProp1
  2db7:4a 1e             send 1e 

  2db9:39 6b            pushi 6b // $6b init
  2dbb:76               push0 
  2dbc:39 05            pushi 5 // $5 view
  2dbe:78               push1 
  2dbf:38 00ec          pushi ec // $ec pickLoop
  2dc2:38 011c          pushi 11c // $11c posn
  2dc5:7a               push2 
  2dc6:38 00e7          pushi e7 // $e7 dynamic
  2dc9:39 57            pushi 57 // $57 printLang
  2dcb:38 00db          pushi db // $db cycleSpeed
  2dce:78               push1 
  2dcf:39 08            pushi 8 // $8 underBits
  2dd1:38 0096          pushi 96 // $96 setCycle
  2dd4:78               push1 
  2dd5:51 5e            class RandCycle 
  2dd7:36                push 
  2dd8:72 0d4c          lofsa $0d4c // dreamProp2
  2ddb:4a 1e             send 1e 

  2ddd:32 00b3            jmp code_2e93 

        code_2de0
  2de0:3c                 dup 
  2de1:35 03              ldi 3 
  2de3:1a                 eq? 
  2de4:30 00ac            bnt code_2e93 
  2de7:38 018d          pushi 18d // $18d overlay
  2dea:78               push1 
  2deb:38 00f0          pushi f0 // $f0 thisTurn
  2dee:81 02              lag  
  2df0:4a 06             send 6 

  2df2:39 2b            pushi 2b // $2b number
  2df4:78               push1 
  2df5:38 00f1          pushi f1 // $f1 escaping
  2df8:39 2a            pushi 2a // $2a play
  2dfa:76               push0 
  2dfb:81 67              lag  
  2dfd:4a 0a             send a 

  2dff:39 6b            pushi 6b // $6b init
  2e01:76               push0 
  2e02:39 05            pushi 5 // $5 view
  2e04:78               push1 
  2e05:38 00f0          pushi f0 // $f0 thisTurn
  2e08:38 00a2          pushi a2 // $a2 setLoop
  2e0b:78               push1 
  2e0c:76               push0 
  2e0d:38 0120          pushi 120 // $120 setCel
  2e10:78               push1 
  2e11:76               push0 
  2e12:38 00db          pushi db // $db cycleSpeed
  2e15:78               push1 
  2e16:39 08            pushi 8 // $8 underBits
  2e18:38 0096          pushi 96 // $96 setCycle
  2e1b:78               push1 
  2e1c:51 17            class Fwd 
  2e1e:36                push 
  2e1f:38 011c          pushi 11c // $11c posn
  2e22:7a               push2 
  2e23:38 0102          pushi 102 // $102 syncStop
  2e26:39 5d            pushi 5d // $5d handle
  2e28:39 42            pushi 42 // $42 setPri
  2e2a:78               push1 
  2e2b:39 0d            pushi d // $d lsTop
  2e2d:72 0ce6          lofsa $0ce6 // dreamProp1
  2e30:4a 30             send 30 

  2e32:39 6b            pushi 6b // $6b init
  2e34:76               push0 
  2e35:39 05            pushi 5 // $5 view
  2e37:78               push1 
  2e38:38 00f1          pushi f1 // $f1 escaping
  2e3b:38 00a2          pushi a2 // $a2 setLoop
  2e3e:78               push1 
  2e3f:76               push0 
  2e40:38 011c          pushi 11c // $11c posn
  2e43:7a               push2 
  2e44:38 0104          pushi 104 // $104 gx
  2e47:39 6a            pushi 6a // $6a new
  2e49:39 42            pushi 42 // $42 setPri
  2e4b:78               push1 
  2e4c:39 0c            pushi c // $c nsRight
  2e4e:38 00db          pushi db // $db cycleSpeed
  2e51:78               push1 
  2e52:39 0a            pushi a // $a nsLeft
  2e54:38 0096          pushi 96 // $96 setCycle
  2e57:78               push1 
  2e58:51 5e            class RandCycle 
  2e5a:36                push 
  2e5b:72 0d4c          lofsa $0d4c // dreamProp2
  2e5e:4a 2a             send 2a 

  2e60:39 6b            pushi 6b // $6b init
  2e62:76               push0 
  2e63:39 05            pushi 5 // $5 view
  2e65:78               push1 
  2e66:38 00f1          pushi f1 // $f1 escaping
  2e69:38 00a2          pushi a2 // $a2 setLoop
  2e6c:78               push1 
  2e6d:78               push1 
  2e6e:38 0120          pushi 120 // $120 setCel
  2e71:78               push1 
  2e72:76               push0 
  2e73:38 00db          pushi db // $db cycleSpeed
  2e76:78               push1 
  2e77:39 05            pushi 5 // $5 view
  2e79:38 0096          pushi 96 // $96 setCycle
  2e7c:78               push1 
  2e7d:51 1a            class End 
  2e7f:36                push 
  2e80:38 011c          pushi 11c // $11c posn
  2e83:7a               push2 
  2e84:38 00cb          pushi cb // $cb height
  2e87:39 1f            pushi 1f // $1f style
  2e89:39 42            pushi 42 // $42 setPri
  2e8b:78               push1 
  2e8c:39 0e            pushi e // $e lsLeft
  2e8e:72 0db2          lofsa $0db2 // dreamProp3
  2e91:4a 30             send 30 


        code_2e93
  2e93:3a                toss 
  2e94:35 03              ldi 3 
  2e96:65 12             aTop seconds 
  2e98:32 0099            jmp code_2f34 

        code_2e9b
  2e9b:3c                 dup 
  2e9c:35 07              ldi 7 
  2e9e:1a                 eq? 
  2e9f:30 0092            bnt code_2f34 
  2ea2:89 a2              lsg  
  2ea4:3c                 dup 
  2ea5:35 01              ldi 1 
  2ea7:1a                 eq? 
  2ea8:30 003b            bnt code_2ee6 
  2eab:39 03            pushi 3 // $3 y
  2ead:89 00              lsg  
  2eaf:38 00c8          pushi c8 // $c8 dispatchEvent
  2eb2:39 5c            pushi 5c // $5c dataInc
  2eb4:45 12 06         callb procedure_0012 6 //  

  2eb7:39 04            pushi 4 // $4 x
  2eb9:38 00c8          pushi c8 // $c8 dispatchEvent
  2ebc:39 5d            pushi 5d // $5d handle
  2ebe:39 50            pushi 50 // $50 title
  2ec0:72 3531          lofsa $3531 // Donald
  2ec3:36                push 
  2ec4:45 0e 08         callb procedure_000e 8 //  

  2ec7:39 03            pushi 3 // $3 y
  2ec9:89 00              lsg  
  2ecb:38 00c8          pushi c8 // $c8 dispatchEvent
  2ece:39 5e            pushi 5e // $5e min
  2ed0:45 12 06         callb procedure_0012 6 //  

  2ed3:39 04            pushi 4 // $4 x
  2ed5:38 00c8          pushi c8 // $c8 dispatchEvent
  2ed8:39 5f            pushi 5f // $5f sec
  2eda:39 50            pushi 50 // $50 title
  2edc:72 3538          lofsa $3538 // The Donald
  2edf:36                push 
  2ee0:45 0e 08         callb procedure_000e 8 //  

  2ee3:32 0049            jmp code_2f2f 

        code_2ee6
  2ee6:3c                 dup 
  2ee7:35 02              ldi 2 
  2ee9:1a                 eq? 
  2eea:30 001f            bnt code_2f0c 
  2eed:39 03            pushi 3 // $3 y
  2eef:89 00              lsg  
  2ef1:38 00c8          pushi c8 // $c8 dispatchEvent
  2ef4:39 60            pushi 60 // $60 frame
  2ef6:45 12 06         callb procedure_0012 6 //  

  2ef9:39 04            pushi 4 // $4 x
  2efb:38 00c8          pushi c8 // $c8 dispatchEvent
  2efe:39 61            pushi 61 // $61 vol
  2f00:39 50            pushi 50 // $50 title
  2f02:72 3543          lofsa $3543 // Willie
  2f05:36                push 
  2f06:45 0e 08         callb procedure_000e 8 //  

  2f09:32 0023            jmp code_2f2f 

        code_2f0c
  2f0c:3c                 dup 
  2f0d:35 03              ldi 3 
  2f0f:1a                 eq? 
  2f10:30 001c            bnt code_2f2f 
  2f13:39 03            pushi 3 // $3 y
  2f15:89 00              lsg  
  2f17:38 00c8          pushi c8 // $c8 dispatchEvent
  2f1a:39 62            pushi 62 // $62 pri
  2f1c:45 12 06         callb procedure_0012 6 //  

  2f1f:39 04            pushi 4 // $4 x
  2f21:38 00c8          pushi c8 // $c8 dispatchEvent
  2f24:39 63            pushi 63 // $63 perform
  2f26:39 50            pushi 50 // $50 title
  2f28:72 354a          lofsa $354a // Sir Francis
  2f2b:36                push 
  2f2c:45 0e 08         callb procedure_000e 8 //  


        code_2f2f
  2f2f:3a                toss 
  2f30:35 01              ldi 1 
  2f32:a3 21              sal local33 

        code_2f34
  2f34:3a                toss 
  2f35:48                 ret 
    )

)



